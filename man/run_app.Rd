% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_app.R
\name{run_app}
\alias{run_app}
\title{Run the Shiny Application}
\usage{
run_app(
  onStart = NULL,
  options = list(),
  enableBookmarking = "server",
  uiPattern = "/",
  ...
)
}
\arguments{
\item{onStart}{A function that will be called before the app is actually run.
This is only needed for \code{shinyAppObj}, since in the \code{shinyAppDir}
case, a \code{global.R} file can be used for this purpose.}

\item{options}{Named options that should be passed to the \code{runApp} call
(these can be any of the following: "port", "launch.browser", "host", "quiet",
"display.mode" and "test.mode"). You can also specify \code{width} and
\code{height} parameters which provide a hint to the embedding environment
about the ideal height/width for the app.}

\item{enableBookmarking}{Can be one of \code{"url"}, \code{"server"}, or
\code{"disable"}. The default value, \code{NULL}, will respect the setting from
any previous calls to  \code{\link[shiny:enableBookmarking]{enableBookmarking()}}. See \code{\link[shiny:enableBookmarking]{enableBookmarking()}}
for more information on bookmarking your app.}

\item{uiPattern}{A regular expression that will be applied to each \code{GET}
request to determine whether the \code{ui} should be used to handle the
request. Note that the entire request path must match the regular
expression in order for the match to be considered successful.}

\item{...}{arguments to pass to golem_opts.
See \code{?golem::get_golem_options} for more details.}
}
\description{
Allows package to be a Shiny app and package at the same time.
}
\details{
Normally R Shiny apps are not R packages -
The server just sources all .R files found in the /R/ folder,
and then runs what is found in app.R (if that is found / it is a one-file Shiny app).
This R Shiny app, however, is shared as an R package,
via the golem package approach,
which provides the useful features of a package and
useful features that the golem package enables.

There is still an app.R script in the package root
-- note there is no function called app()  --
which lets RStudio Connect source the app.R script
to launch this shiny app.

The way this works is that there is a file called

_disable_autoload.R in the /R/ folder

to tell the server to not source all the source .R files,
since they are already in the installed package.
Then they get loaded from the package because
the app.R script here says this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE) 
}\if{html}{\out{</div>}}

with the shinyApp() call wrapped in shiny::runApp() rather than in app()

Also, app_runYYYY() is the same as YYYY::run_app() in case that is useful.

See https://thinkr-open.github.io/golem/
}
