% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ejamit.R
\name{ejamit}
\alias{ejamit}
\title{Get complete EJ analysis numbers (demographic and environmental indicators) for a list of locations}
\usage{
ejamit(
  sitepoints,
  cutoff = 3,
  maxcutoff = 31.07,
  avoidorphans = TRUE,
  quadtree,
  ...
)
}
\arguments{
\item{sitepoints}{see \code{\link[=getblocksnearbyviaQuadTree]{getblocksnearbyviaQuadTree()}} or other such functions}

\item{cutoff}{see \code{\link[=getblocksnearbyviaQuadTree]{getblocksnearbyviaQuadTree()}} or other such functions}

\item{maxcutoff}{see \code{\link[=getblocksnearbyviaQuadTree]{getblocksnearbyviaQuadTree()}} or other such functions}

\item{avoidorphans}{see \code{\link[=getblocksnearbyviaQuadTree]{getblocksnearbyviaQuadTree()}} or other such functions}

\item{quadtree}{User does not need to provide this parameter.
Already created when EJAM package is loaded, this is
a large quadtree object created from the SearchTree package example:
SearchTrees::createTree(EJAMblockdata::quaddata, treeType = "quad", dataType = "point")}

\item{...}{see \code{\link[=getblocksnearbyviaQuadTree_Clustered]{getblocksnearbyviaQuadTree_Clustered()}} or other such functions}
}
\description{
This is the main function in EJAM for users who want to use EJAM from RStudio.
See help("EJAM")
}
\examples{
\dontrun{

 # All in one step, using functions not shiny app:
 out <- ejamit(testpoints_100_dt, 2, quadtree=localtree)
 
 # do not specify sitepoints and it will prompt you for a file,
 # if in RStudio in interactive mode!
 out <- ejamit(cutoff = 3)
 
  # Specify facilities or sites as points for test data, 
  # use 1000 test facility points from the R package 
  testsites <- testpoints_1000_dt
  # use facility points in an excel or csv file
  testsites <- latlon_from_anything(
   "./inst/testdata/testpoints_207_sites_with_signif_violations_NAICS_326_ECHO.csv")
  # use facility points from a random sample of EPA-regulated facilities
  testsites <- EJAMfrsdata::frs[sample(1:nrow(EJAMfrsdata::frs), 1e3),] # this is slow
  
  # Specify max distance from sites to look at (residents within X miles of site point)
  radius <- 3.1 # miles
  
  # Get summaries of all indicators near a set of points 
  out <- ejamit(testsites, radius)  
  # out <- ejamit("myfile.xlsx", 3.1)  
  
  # out2 <- EJAMejscreenapi::ejscreenit(testpoints_1000[1:3,])
  
  # View results overall
  round(t(out$results_overall), 3.1)
  
  # View plots
  # plot_distance_avg_by_group(out)  
  # plot_distance_cdf_by_group(out)
  
  # View maps
  mapfast(out$results_bysite, radius = 3.1)
  
  # view results at a single site
  t(out$results_bysite[1, ])
  t(out$results_bysite[out$results_bysite$siteid == 2, ])
  
  # if doing just 1st step of ejamit() 
  #  get distance between each site and every nearby Census block
  s2b <- testdata_sites2blocks
  s2b <- getblocksnearby(testsites, cutoff = radius)
  s2b <- getblocksnearbyviaQuadTree(testsites, cutoff = radius)
  summarize_blockcount(s2b)
  
  # if doing just 2d step of ejamit()
  #  get summaries of all indicators based on table of distances
  out <- doaggregate(s2b, testsites) # this works now and is simpler
  
  # if localtree had to be built from block point data again
  localtree_example = SearchTrees::createTree(EJAMblockdata::quaddata, treeType = "quad", dataType = "point")
  
}
}
\seealso{
\code{\link[=getblocksnearby]{getblocksnearby()}} \code{\link[=doaggregate]{doaggregate()}}
}
