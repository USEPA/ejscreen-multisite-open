% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EJAM-package.R
\docType{package}
\name{EJAM}
\alias{EJAM}
\alias{_PACKAGE}
\alias{EJAM-package}
\alias{blockwts}
\alias{blockpoints}
\alias{blockid2fips}
\alias{bgid2fips}
\title{EJAM - Environmental Justice (EJ) Analysis Multisite tool}
\description{
This package provides functions and data for very fast proximity analysis
for a large number of locations, or "buffers", summarizing conditions at each location.
It summarizes conditions as the conditions for the average resident in the buffer at that location.
A buffer or location here is defined as the area within a specified distance of a specified site.
A site of facility in this package is defined as a single geographic point (by latitude and longitude).

The functions here will be somewhat generalized, but the specific datasets included here enable an
environmental justice (EJ) proximity analysis of US EPA's EJScreen data, including
environmental indicators (e.g., local traffic score, or estimated PM2.5 concentration)
and demographic indicators (e.g., percent low-income),
for the populations estimated to live within a specified distance (e.g., 1 mile) from
one or more sites, typically EPA-regulated facilities.
This means the tools can provide the same information that an EJScreen standard report provides,
but for a large number of reports (one for each site).
}
\section{\strong{Vignette}}{
Please see the vignette at <EJAM-vignette.html> and web format documentation of functions and data at <EJAM.html>

(development version of vignette can be knit from EJAM/www folder of locally installed package)
}

\section{\strong{Key Functions:}}{
\itemize{
\item \strong{\code{\link[=run_app]{run_app()}}} Launch the web app (R Shiny interface)
\item \strong{\code{\link[=ejamit]{ejamit()}}} Get results (tables, maps, plots) without the web app interface, largely by using these key functions:
\enumerate{
\item Getting key datasets and indexing blocks, if not yet done, via \code{\link[=dataload_from_aws]{dataload_from_aws()}} and \code{\link[=indexblocks]{indexblocks()}}
\item \strong{\code{\link[=getblocksnearby]{getblocksnearby()}}}  Very fast method to buffer, identifying which blocks are
within specified distance of point(s) like sites/facilities, and get distance to each.
\item \strong{\code{\link[=doaggregate]{doaggregate()}}} Summarize demographic and environmental indicators from \strong{\link{blockgroupstats}}.rda (see below)
within each place, weighted using blockwts (for average resident within specified distance of site (e.g., facility),
or in each shapefile or FIPS-defined location).
}
}
}

\section{\strong{Data files available as examples:}}{
\itemize{
\item \strong{Excel files to read into ejamit()} or getblocksnearby() are in the local source package files in EJAM/inst/testdata/latlon
\item \link{testpoints_10}.rda  and larger datasets each provide a random test points data.frame with columns lat lon siteid
\item \code{\link[=testpoints_n]{testpoints_n()}} can generate random test points at places weighted by population, FRS facilities, blockgroup, area, block
\item \link{testoutput_getblocksnearby_10pts_1miles}.rda and larger datasets are sample outputs of getblocksnearbyviaQuadTree or just getblocksnearby(),
to try as inputs to doaggregate()
}
}

\section{\strong{Specifying buffer sites / facilities:}}{
A user can specify locations, via an interface, and that shiny app returns
\itemize{
\item \emph{\code{sitepoints}}, a data.table with fields siteid, lat, lon.
A user-specified table with maybe 100, 1k, 10k+ points (centers of circular buffers).
Examples of test data are
}

One can specify sitepoints, with lat/lon coordinates of the places to be analyzed (sites or facilities),
or can specify areas to be analyzed in general,
in one of these ways:
\itemize{
\item \strong{Point locations uploaded} (lat, lon coordinates) - these could be regulated facilities
for which you already have locations, or could be any other types of points uploaded in a spreadsheet.
\item \strong{Shapefiles uploaded} to directly define the areas to include instead of using circular buffers around points
\item \strong{FIPS} to specify a list of counties or tracts or blockgroups, for example, to be compared.
\item \strong{NAICS or SIC code} Industry categories selected from a list of codes or names, or uploaded in a table.
The NAICS are 2-digit to 6-digit codes that specify sectors or types of facilities, such as
325 - Chemical Manufacturing, or 325211 - Plastics Material and Resin Manufacturing.
\item \strong{Facility IDs} - EPA Facility Registry Service (FRS) ID numbers or FRS Program ID numbers
\item \strong{Program System Types} - picking a whole category of regulated sites, such as all GHG reporters or all TRI reporters.
\item \strong{MACT Subpart} to specify Clean Air Act NESHAP program Max. Achievable Control Tech.
source categories (types of air emissions sources) defined by subpart such as OOOO.
}

Some additional details on some of these:

\strong{- BY INDUSTRIAL SECTOR/ NAICS:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{    Interface lets user select NAICS from pulldown, or type in NAICS 
    Interface returns a vector of one or more naics codes,
    to be converted to sitepoints.
}\if{html}{\out{</div>}}
\itemize{
\item \strong{\code{\link[=latlon_from_naics]{latlon_from_naics()}}} takes NAICS codes and returns a data.table of site points.
Relies on ** frs_by_naics.rda**  A data.table, needed to get lat lon by naics.
Need to update FRS data used here regularly, ideally frequently.
2023 version has columns   REGISTRY_ID,  NAICS, lat, lon

NAICS codes also can be selected by text search of industry names or by categories of codes, via \code{\link[=naics_from_any]{naics_from_any()}}
}

\strong{- BY FACILITY ID or PROGRAM ID:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{    Interface so user can upload FRS REGISTRY_ID or PROGRAM ID csv/xls file, 
    Interface returns a list of REGISTRY_ID values from a copy of the EPA facility registry service (FRS) data  
    to be converted to sitepoints.
}\if{html}{\out{</div>}}
\itemize{
\item \strong{\code{\link[=frs_from_siteid]{frs_from_siteid()}}} takes REGISTRY_ID values and returns a data.table of site points.
Relies on \strong{frs} data.table with columns REGISTRY_ID, lat, lon, etc.
\item \strong{\code{\link[=frs_from_programid]{frs_from_programid()}}} takes EPA program-specific site ID values and returns a data.table of site points.
Relies on \strong{\link{frs_by_programid}} data.table with columns program, pgm_sys_id, REGISTRY_ID, lat, lon
}

\strong{- BY LAT/LON POINT:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{    Interface so user can specify or upload latitude longitude siteid (and optionally others like sitename),
    when using [ejamit()] which in turn uses [latlon_from_anything()].
    
    Interface returns sitepoints data.table with siteid, lat, lon (here, siteid may be just the row number)
}\if{html}{\out{</div>}}
}

\section{\strong{Buffering to find site-block-distances:}}{
Input: \strong{\code{sitepoints}} data.table from user picking points

Columns are siteid, lat, lon; maybe 100 to 10k points
\itemize{
\item \strong{\code{\link[=getblocksnearby]{getblocksnearby()}}} which by default uses \emph{\code{\link[=getblocksnearbyviaQuadTree]{getblocksnearbyviaQuadTree()}}}
Returns \code{sites2blocks}
Requires index called localtree that is build from dataset \link{quaddata}
\item \strong{sites2blocks}   Created by \code{\link[=getblocksnearby]{getblocksnearby()}} to be passed to  \code{\link[=doaggregate]{doaggregate()}}
This is a data table with maybe 100k to 1m rows (assume 1k blocks within 3 miles of each site, or 100 blocks within 1 mile),
\verb{sites2blocks[ , .(siteid, blockid, distance or dist)]}
\itemize{
\item siteid    (site with circular buffer to group by)
\item blockid     for join to blockwts
\item distance  (in miles, from block to site) (0 or irrelevant for noncircular buffers,
since a block is only in this table if in one or more buffers,
unless analysis is for residents within x miles of the edges of some shapes, like facility boundaries)
}
}
}

\section{\strong{Data files used for distance calculation:}}{
\itemize{
\item ** quaddata.rda** data.table with point location of internal point for each of 8 million Census blocks
is used prior to or during startup of EJAM to create an index stored in memory, called localtree.

quaddata can be obtained using \code{\link[=data_load_from_aws]{data_load_from_aws()}}

localtree is the index made from quaddata via \code{\link[=indexblocks]{indexblocks()}} (using the SearchTrees package)
}

Those are used in getblocksnearby with some sitepoints to create a temporary object called sites2blocks:
}

\section{\strong{Summarizing indicators in buffers:}}{
\if{html}{\out{<div class="sourceCode">}}\preformatted{  INPUT IS  `sites2blocks`, 
  OUTPUT IS results_overall, results_bysite, and other summary stats  ####
}\if{html}{\out{</div>}}
\itemize{
\item \strong{\code{\link[=doaggregate]{doaggregate()}}} = function(sites2blocks) This summarizes in each buffer and for all unique residents across all buffers.
\item \strong{\link{blockgroupstats}.rda} a data.table with 220k rows (blockgroups) and hundreds of indicator columns.
Will need bgid not just bgfips, to join to blockwts$bgid
Needs to be updated each time EJScreen is updated.
\item \strong{\link{bgej}.rda} a data.table like blockgroupstats but for the EJ Index raw scores.
\item \strong{\link{usastats}.rda} and \strong{\link{statestats}.rda}  data.table lookup of 100 percentiles and means
(for each indicator in blockgroupstats, and perhaps bgej) in each zone (USA, or a state or DC, PR).
Need to update each time blockgroupstats is updated. Taken from EJScreen data or ejscreen package file lookupUSA & lookupStates
\item \strong{blockwts.rda} see \code{\link[=data_load_from_aws]{data_load_from_aws()}}
Required by \code{\link[=doaggregate]{doaggregate()}}. A data.table of 6-8m rows
\itemize{
\item blockwt  The fraction of parent blockgroup decennial pop that is in this one block
\item block_radius_miles squared times pi would equal the land plus water area in square miles
\item blockid (integer key  for join to sites2blocks)
\item bgid   integer key instead of bgfips - For sum(blockwt), by=bgid, and for join to blockgroupstats$bgid.
bgid is more efficient than bgfips. bgfips is not here but is in a bgid2fips data.table
}
}
}

\section{\strong{Output results for user:}}{
\code{\link[=ejamit]{ejamit()}} (or \code{\link[=doaggregate]{doaggregate()}}) provides the following outputs:
\itemize{
\item \strong{results_overall}   one row data.table, like results_by_site, but just one row with
aggregated results for all unique residents.
\item \strong{results_by_site}   results for individual sites (buffers) - a data.table of results,
one row per siteid, one column per indicator
\item \strong{results_bybg_people}  results for each block group, to allow for showing the distribution of each
indicator across everyone within each demographic group.
\item \strong{longnames}  descriptive long names for the indicators in the above outputs
\item \strong{count_of_blocks_near_multiple_sites}  additional detail
}
}

\section{\strong{Identification of nearby residents -- methodology:}}{
The identification of nearby residents is currently done in a way that includes all 2020 Census blocks whose
"internal point" (a lat/lon provided by the Census Bureau) is within the specified distance of the facility point.
This is taken from the EJScreen block weights file, but can also be independently calculated.

The summary or aggregation or "rollup" within the buffer is done by calculating the
population-weighted average block group score among all the people residing in the buffer.

Since the blockgroup population counts are from American Community Survey (ACS) estimates,
but the block population counts are from a decennial census, the totals for a blockgroup differ.
The amount each partial blockgroup contributes to the buffer's overall score is based on
the estimated number of residents from that blockgroup who are in the buffer.
This is based on the fraction of the blockgroup population that is estimated to be in the buffer,
and that fraction is calculated as the fraction of the blockgroup's decennial census block population
that is in the census blocks inside the buffer.

A given block is considered entirely inside or entirely outside the buffer,
and those are used to more accurately estimate what fraction of a given block group's
population is inside the buffer. This is more accurate and faster than areal apportionment of block groups.
Census blocks are generally so small relative to typical buffers that this is very accurate -
it is least accurate if a very small buffer distance is specified
in an extremely low density rural area where a block can be geographically large.
Although it is rarely if ever a significant issue (for reasonable, useful buffer sizes),
an even more accurate approach in those cases might be either areal apportionment of blocks,
which is very slow and assumes residents are evenly spread out across the full block's area,
or else an approach that uses higher resolution estimates of residential locations than even
the Decennial census blocks can provide, such as a dasymetric map approach.
}

\seealso{
Useful links:
\itemize{
  \item \url{https://github.com/USEPA/EJAM}
}

}
\keyword{internal}
