[{"path":"https://usepa.github.io/EJAM/articles/0_webapp.html","id":"ejam-website","dir":"Articles","previous_headings":"","what":"EJAM website","title":"Using EJAM","text":"EJAM yet available general public website. web app tested internal use EPA early 2024, use internally 2024, user-friendly version intended made available public future.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_webapp.html","id":"rrstudio-users-launching-a-web-app","dir":"Articles","previous_headings":"","what":"R/RStudio users launching a web app","title":"Using EJAM","text":"use R/RStudio, also can use EJAM web-based UI computer. first need install EJAM R package datasets explained Installing EJAM R package. EJAM installed (access datasets needed), can launch local web app RStudio follows: Note different running simple shiny app also package via golem package. use EJAM package function run_app() shiny::runApp(). Note web app (e.g., launched locally) handles loading datasets indexing blocks, assuming access server stores datasets pins board, download datasets manually indexing manually launching EJAM app locally. can also download datasets store locally. need packages installed EJAM relies , listed DESCRIPTION file, including ones CRAN, notably EJAMejscreenapi EJAMbatch.summarizer.","code":"library(EJAM) run_app()"},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"epas-ej-analysis-multi-site-ejam-tool","dir":"Articles","previous_headings":"","what":"EPA’s EJ Analysis Multi-site (EJAM) tool","title":"What is EJAM","text":"EJAM user-friendly tool, developed United States Environmental Protection Agency (US EPA) makes easy see demographic environmental information summarized across list places nation. Using EJAM like running EJScreen report, hundreds thousands places, time. web app let quickly check summary report, explore interactive maps, tables, plots, download summary detailed spreadsheet. provides interactive results formatted, ready--share report written explanations results, tables, graphics. report can provide EJ-related information people live communities near industrial facilities list, example.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"What is EJAM","text":"EJAM user-friendly web application can summarize demographics environmental conditions list places nation. provides interactive results formatted, ready--share report written explanations results, tables, graphics. report can provide EJ-related information people live communities near industrial facilities list, example. use tool, one first selects places analyzed. , example, everyone within 2 miles EPA-regulated facility specific NAICS code (industrial sector). tool runs fast “buffer” proximity analysis location, similar EJScreen provides standard report single location, except EJAM large number locations quickly. , importantly, EJAM provides complete overview report, summarize environmental conditions demographics across populations locations. results can explored interactively downloaded written report text, tables, graphics. EJAM report can quickly easily show demographic groups live near selected facilities. also provides new insights environmental stressors may affect certain demographic subgroups disproportionately, varying degrees, near regulated sector overall individual sites. allows EJ analysis move beyond looking small number indicators demographic groups, one site single permitting decision, complete picture conditions near whole set facilities focus risk analysis new regulation considered, example.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"ejam-features-and-benefits","dir":"Articles","previous_headings":"","what":"EJAM features and benefits","title":"What is EJAM","text":"EJAM provides ready--use summary report, plus flexibility, accuracy, speed tools . web-based app quickly provides results fly – circular buffering module optimized extremely fast (allowing realtime exploratory work app), still using block-population calculation EJScreen uses, making consistent EJScreen accurate approaches. EJAM also lets one pick locations several different approaches, - specifying facility points industry categories various types (NAICS, SIC, EPA program, etc.) - providing table latitudes/longitudes list points - using shapefiles polygons - selecting Census units compare, Counties, based FIPS codes default demographic indicators EJScreen basic demographic indicators, addition race/ethnicity subgroups. data software shared reusable, well-documented functions modules R package, allow software developers analysts take advantage resources running analyses building supplementing tools, websites, mobile apps.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"updates","dir":"Articles","previous_headings":"","what":"Updates","title":"What is EJAM","text":"EJAM data updates meant match EJScreen scheduled updates main version numbers, EJAM 2.2 uses basic data EJScreen 2.2 (version used mid-2023 early 2024). Version 2.2 ACS 2017-2021 block group demographics Census 2020 block weights. mid-2024 versions EJScreen EJAM likewise use data, including ACS 2018-2022.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"speed","dir":"Articles","previous_headings":"","what":"Speed","title":"What is EJAM","text":"power tool enables faster accurate results tools generally able provide. also much cost-effective easy use standard geospatial analysis solutions . tool lets user quickly see analysis large number places, immediately get ready--use report provides perspective entire industrial sector set places.","code":""},{"path":"https://usepa.github.io/EJAM/articles/0_what_is_ejam.html","id":"accuracy","dir":"Articles","previous_headings":"","what":"Accuracy","title":"What is EJAM","text":"Compared often-used approaches, EJAM high-resolution buffering provides accurate information populations live inside buffer, important rural areas single blockgroup can cover large area. circular buffers, EJAM uses locations internal points Census 2020 blocks, areal apportionment block groups, estimate residents live within block group. avoids simplistic assumption people evenly spread within block group. Instead, uses blocks get information part block group residents actually live. several million blocks US, compared fewer quarter million block groups. accurate approaches EJAM uses 1) use areal apportionment blocks (block groups), slow, 2) use 30x30 meter grid EPA developed based dasymetric estimates people live even higher resolution block, requires large amounts storage computer time. EJAM designed replicate EJScreen methods results given location, total population count within 1 mile, maintain consistency avoid confusion. EJAM also takes note residences near sites, avoid double-counting people summary statistics still allow user view results one site time. something tools analyses often provide - aggregate across sites typically retain statistics individual sites, rarely ever keep track communities near multiple facilities. Keeping track also allow analyst explore many people near multiple sites, ask sites communities already multiple sites nearby. EJAM designed can provide continuous distribution distances, distributed across blocks people one nearby facilities. enables exploration complete picture proximities, rather using arbitrary single distance defining near versus far. distribution can sliced later summary statistics distance, can summarized distribution distances within demographic group.","code":""},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"how-to-install","dir":"Articles","previous_headings":"","what":"How to install","title":"1. Installing the EJAM R package","text":"install EJAM, need access GitHub repositories EPA’s enterprise github site, USEPA GitHub. Unless/ repositories related EJAM public, need signed EPA’s network, internal-repositories, may need use VPN.","code":""},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"to-install-directly-from-github-starting-from-rstudio","dir":"Articles","previous_headings":"How to install","what":"to install directly from GitHub, starting from RStudio","title":"1. Installing the EJAM R package","text":"know clone build source RStudio, feel free skip ahead topic. just want install EJAM work source code, can try approach (download build source, automatically): installing way work, might need following: create GitHub personal access token ‘repo scope’ Go https://github.com/settings/tokens select Tokens (classic) left-hand side. click ‘Generate New Token’ -> Generate new token (classic). Give name select boxes repo scope. Scroll click ‘Generate Token’. set GitHub credentials Rstudio one-time login: console, run credentials::set_github_pat(). Paste PAT login popup ‘Token’. store credentials long-term: run usethis::edit_r_environ() open .Renviron file add line PAT format: GITHUB_PAT = 'abc' can specify extra argument scope = 'project' want PAT work particular Rstudio project. Install packages using devtools::install_github()","code":"if (!require(devtools)) {install.packages(\"devtools\")} devtools::install_github('USEPA/EJAMejscreenapi') devtools::install_github('USEPA/EJAMbatch.summarizer') devtools::install_github('USEPA/EJAM') if (!require(devtools)) {install.packages(\"devtools\")} devtools::install_github('USEPA/EJAMejscreenapi') devtools::install_github('USEPA/EJAMbatch.summarizer') devtools::install_github('USEPA/EJAM')"},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"if-you-need-the-full-source-code-and-want-to-buildinstall-in-rstudio-on-your-own","dir":"Articles","previous_headings":"How to install","what":"if you need the full source code and want to build/install in RStudio on your own","title":"1. Installing the EJAM R package","text":"3 EJAM-specific packages 1/2024 EJAM needs, EPA-internal repositories: Essential packages available USEPA github (CRAN) : EJAM EJAMejscreenapi EJAMbatch.summarizer Options getting source package: One way get source package RStudio can click New Project, Version Control, Git, enter repository URL. download full source package, additional files related development need just want use package. Yet another way get full source package use browser go repository page, USEPA github click green “Code” button, download unzip zip file contains package. third way Clone Fork package via GitHub Desktop GitHub site. point, .zip .tar version bundled package provided well. Regardless got full source code, need build/install package source computer using RStudio menus using devtools package, example.","code":""},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"cran-packages-needed","dir":"Articles","previous_headings":"How to install > if you need the full source code and want to build/install in RStudio on your own","what":"CRAN packages needed","title":"1. Installing the EJAM R package","text":"EJAM needs number packages installed available CRAN. Trying load attach EJAM require(EJAM) library(EJAM) alert packages need install don’t already . also see list CRAN packages needed looking DESCRIPTION file R package source code root folder (can found code repository).","code":""},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"initialize-loadattach-package","dir":"Articles","previous_headings":"","what":"Initialize: load/attach package","title":"1. Installing the EJAM R package","text":"right R packages installed, use EJAM console can start loading attaching package, using library require. automatically download data build index. need . Just case need details works, following describes code used package get data build index.","code":"require(EJAM) # or library(EJAM)"},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"details-on-the-automatic-data-downloads","dir":"Articles","previous_headings":"Initialize: load/attach package","what":"Details on the automatic data downloads","title":"1. Installing the EJAM R package","text":"work RStudio console, EJAM needs datasets stored part package. However, already downloaded loaded memory automatically soon use require(EJAM) assuming current version [EJAM:::.Attach()] source code uses asap_aws <- TRUE; asap_index <- TRUE; asap_bg. want sure something missing, can manually: Attaching package actually checks copies memory first (e.g., exists(\"quaddata\", envir = globalenv())), local disk (using EJAM:::dataload_from_local() looking data folder (source installed) package, defined EJAM:::app_sys()), finally tries download still needed, using dataload_from_pins().","code":"dataload_from_pins('all') # It takes some time for the large downloads, while EJAM is still in development."},{"path":"https://usepa.github.io/EJAM/articles/1_installing.html","id":"details-on-the-indexing-of-blocks","dir":"Articles","previous_headings":"Initialize: load/attach package","what":"Details on the indexing of blocks","title":"1. Installing the EJAM R package","text":"EJAM also needs build index 8 million US block locations (one internal point block), takes seconds. EJAM automatically attached via require(EJAM) library(EJAM), creating object called localtree based quaddata object obtained mentioned . functions check try build index fly missing. can also (re)build manually:","code":"indexblocks()"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"a-brief-intro-to-using-ejam-in-rstudio","dir":"Articles","previous_headings":"","what":"A Brief Intro to Using EJAM in RStudio","title":"2. Quick Start Guide","text":"EJAM installed (can access datasets), ’s can run EJAM analysis view results right away:","code":""},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"load-ejam","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Load EJAM","title":"2. Quick Start Guide","text":"","code":"library(EJAM)"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"analyze-places-with-ejamit","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Analyze Places with ejamit()","title":"2. Quick Start Guide","text":"already spreadsheet columns called lat lon, can just EJAM prompt navigate select file set radius (RStudio): want try test data first:","code":"out <- ejamit()"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"map-with-mapfastej","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Map with mapfastej()","title":"2. Quick Start Guide","text":"creates interactive map. Click point map see popup details people near point.","code":"out <- testoutput_ejamit_100pts_1miles  mapfastej(out$results_bysite)"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"report-via-ejam2report","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Report via ejam2report()","title":"2. Quick Start Guide","text":"Summary table environmental demographic indicators raw value, average percentile (State US overall)  Barplot comparing demographic indicators ratios US average","code":"out <- testoutput_ejamit_100pts_1miles  ejam2report(out)"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"barplot","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Barplot","title":"2. Quick Start Guide","text":"","code":"# see examples at ?plot_barplot_ratios"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"spreadsheet-from-ejam2excel","dir":"Articles","previous_headings":"A Brief Intro to Using EJAM in RStudio","what":"Spreadsheet from ejam2excel()","title":"2. Quick Start Guide","text":"Excel output showing 1 row per site 1 column per indicator total population nearby","code":"out <- testoutput_ejamit_100pts_1miles  ejam2excel(out, launchexcel = T, save_now = F)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"use-one-point","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Use one point","title":"2. Quick Start Guide","text":"","code":"pts <- data.frame(lon = -92.380556, lat = 31.316944)"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"use-a-few-points","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Use a few points","title":"2. Quick Start Guide","text":"","code":"sitepoints2  <- data.frame(   lon = c(-92.1,      -91.8),    lat = c(34.8799123, 30.2906971),    sitenumber = 1:2 )"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"use-test-points-in-examples-that-comes-with-the-package","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Use test points in examples that comes with the package","title":"2. Quick Start Guide","text":"EJAM comes examples points can use try things :","code":"testpoints_10 #>         lat        lon sitenumber #> 1  30.97740  -83.36900          1 #> 2  32.51581  -86.37732          2 #> 3  42.23498  -88.30541          3 #> 4  33.87001 -118.37778          4 #> 5  34.01493 -118.20539          5 #> 6  40.73110  -74.17307          6 #> 7  37.81144 -121.29348          7 #> 8  44.85387  -93.04713          8 #> 9  41.18661 -111.94904          9 #> 10 40.71239  -74.58470         10 testpoints_100 |> head(2) # data.table, in this package #>        lat       lon sitenumber       sitename #> 1 40.66478 -74.89137          1 Example Site 1 #> 2 38.39657 -98.70086          2 Example Site 2 sitepoints100 <- data.table::copy(testpoints_100)  # [1:5, ] head(sitepoints100, 3) #>        lat       lon sitenumber       sitename #> 1 40.66478 -74.89137          1 Example Site 1 #> 2 38.39657 -98.70086          2 Example Site 2 #> 3 40.34971 -79.84964          3 Example Site 3"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"create-a-random-sample-of-points-representative-of-the-average-facility-average-resident-or-average-area","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Create a random sample of points representative of the average facility, average resident, or average area","title":"2. Quick Start Guide","text":"can create set random points function testpoints_n() can weighted represent average resident, average regulated facility, average point map weighted square meters, etc. See details documentation function testpoints_n().","code":"?testpoints_n"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"create-random-test-data-points-in-states-of-la-and-tx","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze > Create a random sample of points representative of the average facility, average resident, or average area","what":"Create random test data points in States of LA and TX","title":"2. Quick Start Guide","text":"","code":"# p1k <- testpoints_n(1000) # mapfast(p1k)  mapfast(testpoints_n(300, ST_needed = c('LA','TX'), weighting = 'bg'))  #> Warning in validateCoords(lng, lat, funcName): Data contains 1 rows with either #> missing or invalid lat/lon values and will be ignored # weighting = \"frs\" better represents regulated facilities, # but requires loading the (large) frs dataset"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"use-a-table-of-latlon-coordinates-from-a-spreadsheet-xlsx-or-csv-file","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Use a table of lat/lon coordinates from a spreadsheet xlsx or csv file","title":"2. Quick Start Guide","text":"first row column names including lat lon, something can interpreted - see latlon_infer()","code":"testjunk <- file.path(tempdir(), 'testjunk.csv') write.csv(data.frame(LONG = c(-92.1, -91.8), Latitude = c(34.8, 30.2), ejam_uniq_id = 1:2), file = testjunk, row.names = FALSE) sitepoints2 <- latlon_from_anything(testjunk) sitepoints2"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"interactively-select-your-own-file-of-latlon-coordinates-without-typing-the-file-name","dir":"Articles","previous_headings":"More Examples > Select Places to Analyze","what":"Interactively select your own file of lat,lon coordinates, without typing the file name","title":"2. Quick Start Guide","text":"RStudio, can use EJAM functions interactively select file folders, upload spreadsheet (.xlsx .csv) columns called lat lon first row header row, one row per point.","code":"y <- read_csv_or_xl() names(y) head(y)  # or   # x <- ejamit(radius = 2)  #  2 mile radius, and  # prompts you to select spreadsheet with lat,lon values of points"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"map-your-sites-before-analyzing-them","dir":"Articles","previous_headings":"More Examples","what":"Map your sites before analyzing them","title":"2. Quick Start Guide","text":"can see map random blocks single State, example:","code":"mapfast(  testpoints_100)                  # input to EJAM mapfastej(testoutput_ejamit_100pts_1miles) # output, results of EJAM if (exists(\"blockid2fips\")) {   pts <- testpoints_n(1000, weighting = 'blocks', ST_needed = \"LA\")   mapfast(pts, radius = 0.1) } #> loading blockpoints dataset"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"pick-a-radius","dir":"Articles","previous_headings":"More Examples","what":"Pick a Radius","title":"2. Quick Start Guide","text":"can specify radius miles. EJAM analyze residents within many miles point (site).","code":"radius <- 3 # radius (in miles).  5 km = 3.1 miles, 10 km = 6.2 miles"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"convert-between-miles-and-kilometers","dir":"Articles","previous_headings":"More Examples > Pick a Radius","what":"Convert between miles and kilometers","title":"2. Quick Start Guide","text":"know want analyze 5 kilometers, can turn miles something like","code":"convert_units(5, 'km', 'miles') #> [1] 3.106856"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"analyze-your-sites-in-1-step-with-ejamit","dir":"Articles","previous_headings":"More Examples","what":"Analyze your Sites in 1 step with ejamit()","title":"2. Quick Start Guide","text":"","code":"out <- ejamit(testpoints_100, radius = 1) # 1 mile radius around each of 100 test/example points  # help(\"ejamit\")"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"map-the-ejam-results","dir":"Articles","previous_headings":"More Examples","what":"Map the EJAM Results","title":"2. Quick Start Guide","text":"Popups map show key stats residents near site.","code":"out <- testoutput_ejamit_100pts_1miles  mapfastej(out$results_bysite) # help(\"mapfast\")"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"see-results-as-a-spreadsheet-this-launches-excel","dir":"Articles","previous_headings":"More Examples","what":"See Results as a Spreadsheet (this Launches Excel)","title":"2. Quick Start Guide","text":"","code":"ejam2excel(ejamit(testpoints_10, radius = 1), launchexcel = T, save_now = F) # table_xls_from_ejam()  is another name for  ejam2excel()"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"save-results-as-a-spreadsheet-file","dir":"Articles","previous_headings":"More Examples > See Results as a Spreadsheet (this Launches Excel)","what":"Save Results as a Spreadsheet file","title":"2. Quick Start Guide","text":"","code":"ejam2excel(ejamit(testpoints_10, radius = 1), save_now = T)"},{"path":"https://usepa.github.io/EJAM/articles/2_quickstart.html","id":"documentation-of-functions-and-data","dir":"Articles","previous_headings":"","what":"Documentation of Functions and Data","title":"2. Quick Start Guide","text":"See README GitHub","code":""},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"key-functions","dir":"Articles","previous_headings":"","what":"Key Functions","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"run_app() launch web app locally (run RStudio single computer rather server) ejamit() provides results just one function, can viewed using ejam2report() ejam2excel(). Sample input ejamit() testpoints_10 sample output testoutput_ejamit_10pts_1miles. ejamit() especially relies getblocksnearby() doaggregate(): getblocksnearby() takes set points (e.g., facilities) finds Census blocks near . Sample input testpoints_100, sample output testoutput_getblocksnearby_10pts_1miles doaggregate() takes list blocks near point, joins blockgroup indicators like EJScreen, aggregates buffered point well overall set unique blocks (residents). Sample input testoutput_getblocksnearby_10pts_1miles sample output testoutput_doaggregate_10pts_1miles","code":""},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"key-groups-of-functions","dir":"Articles","previous_headings":"","what":"Key groups of functions","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"EJAM package reference manual complete list documented functions, grouped category. several categories functions listed : overall functions ejamit(), ejam2report(), ejam2excel() Specify Points Lat/Lon Specify Facilities ID Specify Facility Type Specify Places Shapefile Specify Counties, etc./FIPS tools Blocks, Distances, Residents - e.g., getblocksnearby() Calculating Aggregating Viewing Results Test Data Utilities finding URL API info etc. Also see data(“EJAM”) see ?dataload_from_pins() usastats, statestats","code":""},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"points-nearby-residents","dir":"Articles","previous_headings":"","what":"POINTS & NEARBY RESIDENTS","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"EJAM offers variety ways specify places analyzed compared. specify list places, EJAM analyze whole (overall), also individually can compare places . Places analyzed compared can following: Points, defining residents within X miles point Polygons (shapefiles), redlining zones, higher risk areas based modeling, etc. Census Units Counties types Census Units defined FIPS code (e.g., Counties one State) Groups available another type analysis, yet implemented. Groups let get statistics group, compare categories places. Whole groups points/ polygons/ census areas treated units analysis. allow define groups points, example, get summary group, residents near facilities one type. enables comparison categories places, analyzing 3 types facilities results aggregated type, comparing redlining zones grouped grade, comparing areas feature (poor air quality, receiving grants, etc.) versus areas without trait, limited one State Region, example. analyze points circular areas around one, can specify points two basic ways: list points defined coordinates EPA ID numbers point points locations EPA-regulated facilities certain type. categories can used include following: EPA Program (e.g., greenhouse gas reporting facilities) Industry type, based NAICS code (e.g., )","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"specify-points-where-you-want-to-center-the-circular-buffers","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS","what":"Specify points (where you want to center the circular buffers)","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"can define locations residents within X miles one specified points, can define points ways. One way upload table coordinates – latitude longitude point, one row per site, columns called lat lon (synonyms work). simplest way RStudio console something like x <- ejamit(radius=1), prompts upload spreadsheet lat lon columns. can also specify set facilities uploading Registry ID numbers table, using identifiers. example, function latlon_from_programid() examples . can define circular buffers around set EPA-regulated facilities ways well, NAICS (SIC) industry names codes, EPA program covering set facilities (e.g., greenhouse gas reporters), Clean Air Act MACT subpart.","code":""},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"by-industry-naics","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Specify points (where you want to center the circular buffers)","what":"by Industry (NAICS)","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"can specify sites NAICS, important note FRS lacks NAICS info many regulated facilities! See many examples working NAICS, section .","code":"naics_from_any(\"paint and coating\", children = T) #>      code     n2     n3     n4     n5     n6                            name #>     <num> <char> <char> <char> <char> <char>                          <char> #> 1:  32551     32    325   3255  32551  32551 Paint and Coating Manufacturing #> 2: 325510     32    325   3255  32551 325510 Paint and Coating Manufacturing #> 3: 325510     32    325   3255  32551 325510 Paint and Coating Manufacturing #>                                    num_name #>                                      <char> #> 1:  32551 - Paint and Coating Manufacturing #> 2: 325510 - Paint and Coating Manufacturing #> 3: 325510 - Paint and Coating Manufacturing ## note latlon_from_naics() requires the frs_by_naics dataset, which it tries to load on demand. # head(latlon_from_naics(325510)) # has about 1,000 facilities  ## All sectors with this phrase in their NAICS title # #  x <- ejamit(frs_from_naics(\"paint and coating\"), 1)"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"by-facility-using-epa-registry-id","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Specify points (where you want to center the circular buffers)","what":"by Facility, using EPA Registry ID","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# note frs_from_regid() and latlon_from_regid() require the frs dataset, which they try to load on demand.  frs_from_regid(c(110071293460, 110000333826))  ## interactively upload file with table of REGISTRY_ID values x <- latlon_from_regid(read_csv_or_xl()$REGISTRY_ID)  ## and run through EJAM y <- ejamit(latlon_from_regid(read_csv_or_xl()$REGISTRY_ID), radius = 1) #  # still debugging Island Areas validation here!"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"by-facility-using-epa-program-system-id","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Specify points (where you want to center the circular buffers)","what":"by Facility, using EPA Program System ID","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# note latlon_from_programid() requires access to the frs_by_programid dataset, which it tries to load on demand. dataload_from_pins(\"frs_by_programid\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_programid   - was already in memory (in specified envir), so local and/or server copies were not sought. #> [1] \"frs_by_programid\" if (exists(\"frs_by_programid\")) {   latlon_from_programid(c(\"XJW000012435\", \"00768SRTRSROAD1\")) } #>         lat        lon  REGISTRY_ID  program      pgm_sys_id #>       <num>      <num>       <char>   <char>          <char> #> 1: 48.39008 -122.50088 110071133925 RCRAINFO    XJW000012435 #> 2: 18.06229  -66.85967 110000307855     TRIS 00768SRTRSROAD1"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"by-epa-regulatory-program","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Specify points (where you want to center the circular buffers)","what":"by EPA Regulatory Program","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# note latlon_from_programid() requires the frs and frs_by_programid datasets, which it tries to load on demand. dataload_from_pins(\"frs_by_programid\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_programid   - was already in memory (in specified envir), so local and/or server copies were not sought. #> [1] \"frs_by_programid\" if (exists(\"frs_by_programid\")) {      ## Map of over 10,000 facilities in FRS identified as in the E-Grid power plant database      pts <- latlon_from_program(\"EGRID\")[, 1:4]   mapfast(pts)      ## In just 1 State   pts[, ST := state_from_latlon(lat = lat, lon = lon)$ST]   mapfast(pts[ST == \"TX\", ], radius = 1)    ## 10 largest programs (including State programs in the dataset)      head(cbind(Count.of.facilities = sort(table(frs_by_programid$program), decreasing = T)), 10)      ## Largest Federal lists (many of the codes represent State databases)      epa_programs_counts <- frs_by_programid[, .N, by = \"program\"][order(N), ]   epa_programs_counts$fed = !grepl(\"^[A-Z]{2}[-]\", as.vector(epa_programs_counts$program),1,3)   epa_programs_counts[fed == TRUE, ][order(-N), ][1:25, ] } #> Warning in state_from_latlon(lat = lat, lon = lon): Some latitude / longitude #> were provided that are not found in any state #>           program      N    fed #>            <char>  <int> <lgcl> #>  1:      RCRAINFO 517725   TRUE #>  2:         NPDES 394581   TRUE #>  3:          ICIS 156855   TRUE #>  4:           AIR 134115   TRUE #>  5:           FIS 122496   TRUE #>  6:           EIS 119792   TRUE #>  7:      AIRS/AFS 101075   TRUE #>  8:      OSHA-OIS  85069   TRUE #>  9:          NCDB  70782   TRUE #> 10:          ACES  65353   TRUE #> 11:      IDNR_EFD  45963   TRUE #> 12:          SFDW  43309   TRUE #> 13:         ACRES  35541   TRUE #> 14:       AZURITE  35140   TRUE #> 15:           FDM  34623   TRUE #> 16:          TRIS  33178   TRUE #> 17:          SIMS  26061   TRUE #> 18:          NDEQ  25599   TRUE #> 19:           PDS  20585   TRUE #> 20:          SSTS  15371   TRUE #> 21:          TSCA  12619   TRUE #> 22: HWTS-DATAMART  12290   TRUE #> 23:         CEDRI  11731   TRUE #> 24:          SEMS  10986   TRUE #> 25:         EGRID  10615   TRUE #>           program      N    fed"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"by-mact-subpart-hazardous-air-pollutant-source-category","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Specify points (where you want to center the circular buffers)","what":"by MACT Subpart (hazardous air pollutant source category)","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# note latlon_from_mactsubpart() requires the frs_by_mact dataset, which it tries to load on demand dataload_from_pins(\"frs_by_mact\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_mact   - was already in memory (in specified envir), so local and/or server copies were not sought. #> [1] \"frs_by_mact\" if (exists(\"frs_by_mact\")) {      # Search by name of category   mact_table[grepl(\"ethylene\", mact_table$title, ignore.case = T), ]   eto <- rbind(     latlon_from_mactsubpart(\"O\" ),      latlon_from_mactsubpart(\"WWWWW\")   )   #  Map the category   mapfast(eto)         # Browse the full list of categories   # mact_table[ , c(\"N\", \"subpart\", \"title\")]      # The 10 largest categories   tail(mact_table[order(mact_table$N), c(\"N\", \"subpart\", \"title\")], 10)      # Many facilities lack latitude longitude information in this database   nrow(latlon_from_mactsubpart(\"A\", include_if_no_latlon = TRUE))   nrow(latlon_from_mactsubpart(\"A\", include_if_no_latlon = FALSE))      head(latlon_from_mactsubpart(\"OOOO\"), 2) } #> Key: <subpart, programid> #>             programid subpart #>                <char>  <char> #> 1: 080000003800500001    OOOO #> 2: 0900000006111R9011    OOOO #>                                                         title      lat #>                                                        <char>    <num> #> 1: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 47.97940 #> 2: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.22082 #>           lon  REGISTRY_ID program #>         <num>       <char>  <char> #> 1:  -99.02064 110000825867     AIR #> 2: -119.02272 110043415578     AIR"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"naics-codes-to-map-or-analyze-facilities-in-one-industrial-sector","dir":"Articles","previous_headings":"POINTS & NEARBY RESIDENTS > Working with NAICS Codes (Industry Codes)","what":"NAICS Codes to Map or Analyze Facilities in one Industrial Sector","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"NAICS/industry categories Quick map EPA-regulated facilities one industrial category, can click see popup windows sites. (note FRS dataset lacks NAICS facilities!) Table facilities industry, plus links facility ECHO EJScreen Map facilities industry, plus popups links facility ECHO EJScreen Search using industry codes text industry names NAICS code can many “children” subcategories ","code":"naics_categories() #> Also see https://www.naics.com/search/ #>                                                                               [,1] #> 11 - Agriculture, Forestry, Fishing and Hunting                                 11 #> 21 - Mining, Quarrying, and Oil and Gas Extraction                              21 #> 22 - Utilities                                                                  22 #> 23 - Construction                                                               23 #> 42 - Wholesale Trade                                                            42 #> 51 - Information                                                                51 #> 52 - Finance and Insurance                                                      52 #> 53 - Real Estate and Rental and Leasing                                         53 #> 54 - Professional, Scientific, and Technical Services                           54 #> 55 - Management of Companies and Enterprises                                    55 #> 56 - Administrative and Support and Waste Management and Remediation Services   56 #> 61 - Educational Services                                                       61 #> 62 - Health Care and Social Assistance                                          62 #> 71 - Arts, Entertainment, and Recreation                                        71 #> 72 - Accommodation and Food Services                                            72 #> 81 - Other Services (except Public Administration)                              81 #> 92 - Public Administration                                                      92 #> 31 - Manufacturing                                                              31 #> 32 - Manufacturing                                                              32 #> 33 - Manufacturing                                                              33 #> 44 - Retail Trade                                                               44 #> 45 - Retail Trade                                                               45 #> 48 - Transportation and Warehousing                                             48 #> 49 - Transportation and Warehousing                                             49 naics_from_any(naics_categories(3))[order(name),.(name,code)][1:10,] #> Also see https://www.naics.com/search/ #>                                                                              name #>                                                                            <char> #>  1:                                                                 Accommodation #>  2:                                           Administration of Economic Programs #>  3:                              Administration of Environmental Quality Programs #>  4: Administration of Housing Programs, Urban Planning, and Community Development #>  5:                                     Administration of Human Resource Programs #>  6:                                           Administrative and Support Services #>  7:                                                            Air Transportation #>  8:                                               Ambulatory Health Care Services #>  9:                                Amusement, Gambling, and Recreation Industries #> 10:                                             Animal Production and Aquaculture #>      code #>     <num> #>  1:   721 #>  2:   926 #>  3:   924 #>  4:   925 #>  5:   923 #>  6:   561 #>  7:   481 #>  8:   621 #>  9:   713 #> 10:   112 naics_from_any(naics_categories(3))[order(code),.(code,name)][1:10,] #> Also see https://www.naics.com/search/ #>      code                                            name #>     <num>                                          <char> #>  1:   111                                 Crop Production #>  2:   112               Animal Production and Aquaculture #>  3:   113                            Forestry and Logging #>  4:   114                   Fishing, Hunting and Trapping #>  5:   115 Support Activities for Agriculture and Forestry #>  6:   211                          Oil and Gas Extraction #>  7:   212                     Mining (except Oil and Gas) #>  8:   213                   Support Activities for Mining #>  9:   221                                       Utilities #> 10:   236                       Construction of Buildings  # See a data table of facilities in one industry industryword <- \"pulp\"  head( frs_from_naics(naics_from_any(industryword)$code)[,1:4] ) #> Key: <REGISTRY_ID> #>         lat       lon  REGISTRY_ID                        PRIMARY_NAME #>       <num>     <num>       <char>                              <char> #> 1: 42.60008 -72.37838 110000308612                  ERVING PAPER MILLS #> 2: 41.49085 -78.67752 110000330400           DOMTAR - JOHNSONBURG MILL #> 3: 39.52191 -80.13012 110000344958                     ND FAIRMONT LLC #> 4: 35.21225 -77.11482 110000350478 INTERNATIONAL PAPER - NEW BERN MILL #> 5: 39.55363 -84.30568 110000392076            CHENEY PULP AND PAPER CO #> 6: 45.10800 -87.60700 110000412367                              FIBREK # note frs_from_naics() requires the frs dataset, which it tries to load on demand. dataload_from_pins(\"frs\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs          - was already in memory (in specified envir), so local and/or server copies were not sought. #> [1] \"frs\" if (exists(\"frs\")) { mapfast(frs_from_naics(\"smelt\")) # may be slow the 1st time, if it loads frs dataset } industryword <- \"chemical manuf\" #  industryword <- \"smelt\" if (exists(\"frs\")) { mysites <- frs_from_naics(industryword, children = FALSE)[,1:5]  regids <- mysites$REGISTRY_ID link1 <- url_echo_facility_webpage(regids, as_html = T) link2 <- url_ejscreen_report(lat = mysites$lat, lon = mysites$lon, radius = 3, as_html = T) link3 <- url_ejscreenmap(lat = mysites$lat, lon = mysites$lon,  as_html = T) # # same: # my_industry <- naics_from_any(\"chemical manuf\",children = F)[,.(code,name)] # mysites <- frs_from_naics(my_industry$code)[,1:5] mysites <- cbind(`ECHO report` = link1,                   `EJScreen Report` = link2, `EJScreen Map` = link3,                  mysites) caption = paste0(nrow(mysites), ' sites have NAICS matching \"', industryword, '\"') if (nrow(mysites) > 1500) {mysites <- mysites[1:1500, ]} # >2k rows is too much for client-side DataTables cat(caption,'\\n')  print(   DT::datatable(     mysites,     escape = FALSE,     rownames = FALSE,     caption = caption,     filter = \"top\"   )[1:10, ] ) } mapfast(mysites) naics_from_any(\"plastics and rubber\")  #>     code     n2     n3     n4     n5     n6 #>    <num> <char> <char> <char> <char> <char> #> 1:   326     32    326    326    326    326 #>                                          name #>                                        <char> #> 1: Plastics and Rubber Products Manufacturing #>                                            num_name #>                                              <char> #> 1: 326 - Plastics and Rubber Products Manufacturing  naics_from_any(326) #>     code     n2     n3     n4     n5     n6 #>    <num> <char> <char> <char> <char> <char> #> 1:   326     32    326    326    326    326 #>                                          name #>                                        <char> #> 1: Plastics and Rubber Products Manufacturing #>                                            num_name #>                                              <char> #> 1: 326 - Plastics and Rubber Products Manufacturing  head(naics_from_any(326, children = T)[,.(code,name)]) #>      code #>     <num> #> 1:    326 #> 2:   3261 #> 3:  32611 #> 4: 326111 #> 5: 326112 #> 6: 326113 #>                                                                         name #>                                                                       <char> #> 1:                                Plastics and Rubber Products Manufacturing #> 2:                                            Plastics Product Manufacturing #> 3: Plastics Packaging Materials and Unlaminated Film and Sheet Manufacturing #> 4:                                      Plastics Bag and Pouch Manufacturing #> 5:     Plastics Packaging Film and Sheet (including Laminated) Manufacturing #> 6:      Unlaminated Plastics Film and Sheet (except Packaging) Manufacturing  naics_from_any(\"pig\")  #>      code     n2     n3     n4     n5     n6 #>     <num> <char> <char> <char> <char> <char> #> 1:   1122     11    112   1122   1122   1122 #> 2:  11221     11    112   1122  11221  11221 #> 3: 112210     11    112   1122  11221 112210 #> 4:  32513     32    325   3251  32513  32513 #> 5: 325130     32    325   3251  32513 325130 #>                                       name #>                                     <char> #> 1:                     Hog and Pig Farming #> 2:                     Hog and Pig Farming #> 3:                     Hog and Pig Farming #> 4: Synthetic Dye and Pigment Manufacturing #> 5: Synthetic Dye and Pigment Manufacturing #>                                            num_name #>                                              <char> #> 1:                       1122 - Hog and Pig Farming #> 2:                      11221 - Hog and Pig Farming #> 3:                     112210 - Hog and Pig Farming #> 4:  32513 - Synthetic Dye and Pigment Manufacturing #> 5: 325130 - Synthetic Dye and Pigment Manufacturing naics_from_any(\"pig \") # space after g #>      code     n2     n3     n4     n5     n6                name #>     <num> <char> <char> <char> <char> <char>              <char> #> 1:   1122     11    112   1122   1122   1122 Hog and Pig Farming #> 2:  11221     11    112   1122  11221  11221 Hog and Pig Farming #> 3: 112210     11    112   1122  11221 112210 Hog and Pig Farming #>                        num_name #>                          <char> #> 1:   1122 - Hog and Pig Farming #> 2:  11221 - Hog and Pig Farming #> 3: 112210 - Hog and Pig Farming  # a OR b,  a AND b,  etc. a = naics_from_any(\"plastics\")  b = naics_from_any(\"rubber\")  library(data.table) #> Warning: package 'data.table' was built under R version 4.2.3 data.table::fintersect(a,b)[,.(name,code)] #  a AND b #>                                                   name   code #>                                                 <char>  <num> #> 1:          Plastics and Rubber Products Manufacturing    326 #> 2: Rubber and Plastics Hoses and Belting Manufacturing  32622 #> 3: Rubber and Plastics Hoses and Belting Manufacturing 326220  head(data.table::funion(a,b)[,.(name,code)])     #  a OR  b #>                                                                         name #>                                                                       <char> #> 1:                                 Plastics Material and Resin Manufacturing #> 2:                                Plastics and Rubber Products Manufacturing #> 3:                                            Plastics Product Manufacturing #> 4: Plastics Packaging Materials and Unlaminated Film and Sheet Manufacturing #> 5:                                      Plastics Bag and Pouch Manufacturing #> 6:     Plastics Packaging Film and Sheet (including Laminated) Manufacturing #>      code #>     <num> #> 1: 325211 #> 2:    326 #> 3:   3261 #> 4:  32611 #> 5: 326111 #> 6: 326112  # naics_subcodes_from_code(funion(a,b)[,code])[,.(name,code)]   #  plus children  head(naics_from_any(funion(a,b)[,code], children = T)[,.(name,code)] ) #  same #>                                                                         name #>                                                                       <char> #> 1:                                Plastics and Rubber Products Manufacturing #> 2:                                            Plastics Product Manufacturing #> 3: Plastics Packaging Materials and Unlaminated Film and Sheet Manufacturing #> 4:                                      Plastics Bag and Pouch Manufacturing #> 5:     Plastics Packaging Film and Sheet (including Laminated) Manufacturing #> 6:      Unlaminated Plastics Film and Sheet (except Packaging) Manufacturing #>      code #>     <num> #> 1:    326 #> 2:   3261 #> 3:  32611 #> 4: 326111 #> 5: 326112 #> 6: 326113 NROW(naics_from_any(\"chem\")) #> [1] 20 # about 20 NROW(naics_from_any(\"chem\", children = T)) #> [1] 113 # >100 NROW(frs_from_naics(naics_from_any(\"chem\")$code)) #> [1] 4997 # a few thousand NROW(frs_from_naics(naics_from_any(\"chem\", children = T)$code)) #> [1] 13631 # >10,000"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"polygons-in-shapefiles-as-the-places-to-compare","dir":"Articles","previous_headings":"SHAPEFILES","what":"Polygons in shapefiles as the places to compare","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"can upload polygons shapefile, use EJAM analyze . See Shiny app. See shapefile_from_folder() related functions.","code":"# shp1 <- shapefile_from_gdbzip(system.file(\"testdata/shapes/portland.gdb.zip\", package = \"EJAM\"))  # shapefile_from_folder() # shapefile_filepaths_from_folder() # shapefile_filepaths_valid() # shapefile_from_filepaths() # shapefile_from_gdbzip() # shapefile_from_gdb() # shapefile_clean() # shapefile_from_sitepoints() # shape_buffered_from_shapefile() # shape_buffered_from_shapefile_points()"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"counties-as-the-places-to-compare","dir":"Articles","previous_headings":"FIPS CODES","what":"Counties as the places to compare","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"can compare places defined FIPS code, group US Counties. Compare Counties State, using EJAM indicators","code":"# Get FIPS of each county in Delaware mystate <- \"Delaware\" cfips <- fips_counties_from_statename(mystate)  ## You could launch a web browser tab for each of the counties, ##  to see each of the County reports from EJScreen, like this: # # sapply(url_ejscreen_report(areaid = cfips), browseURL)  ## Analyze EJ stats for each county in the State  x <- ejamit(fips = cfips) # radius not used DT::datatable(x$results_bysite, escape = F)  table_tall_from_overall(x$results_overall)  t(x$results_bysite[ , c(   'ejam_uniq_id', 'pop', names_d_subgroups_ratio_to_state_avg), with = F])  mapfastej_counties(x$results_bysite)  cnames <- fips2countyname(x$results_bysite$ejam_uniq_id) #cnames <- c(\"Kent County\", \"New Castle County\", \"Sussex County\") #cnames <- gsub(\" County\", \"\", cnames)  barplot(x$results_bysite$pctlowinc, names.arg = cnames,         main = paste0('% Low Income by County in ', mystate))  # Another example mystate <- \"Maryland\" vname <- \"% low income\" xmd <- ejamit(fips = fips_counties_from_statename(mystate)) ggblanket::gg_col(data = xmd$results_bysite,                   y = pctlowinc,                   x = ejam_uniq_id,                   title = paste0(vname, ' by County in ', mystate),                   y_title = vname )  mapfastej_counties(xmd$results_bysite, 'state.pctile.pctlowinc')"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"site-by-site-results-in-datatable-format-in-rstudio-viewer","dir":"Articles","previous_headings":"EXPLORING RESULTS","what":"Site by site results in datatable format in RStudio viewer:","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"out2 <- testoutput_ejamit_100pts_1miles DT::datatable(out2$results_bysite[1:30,   ], escape = FALSE, rownames = FALSE)  # To see all 1,000 sites in table: #DT::datatable(out2$results_bysite[1:1000, ], escape = FALSE, rownames = FALSE)"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"overall-results-for-a-few-key-indicators-as-raw-output-in-console","dir":"Articles","previous_headings":"EXPLORING RESULTS > Site by site results in datatable format in RStudio viewer:","what":"Overall results for a few key indicators, as raw output in console:","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"out2 <- testoutput_ejamit_100pts_1miles names(out2) #> [1] \"results_overall\"                     \"results_bysite\"                      #> [3] \"results_bybg_people\"                 \"longnames\"                           #> [5] \"count_of_blocks_near_multiple_sites\" \"results_summarized\"                  #> [7] \"formatted\" cbind(overall = as.list( out2$results_overall[ , ..names_d])) #>                  overall    #> Demog.Index      0.4375791  #> Demog.Index.Supp 0.1559613  #> pctlowinc        0.3273222  #> pctlingiso       0.07851435 #> pctunemployed    0.06273723 #> pctlths          0.132045   #> lowlifex         0.1791878  #> pctunder5        0.05773662 #> pctover64        0.1407173  #> pctmin           0.5478361 cbind(overall = as.list( out2$results_overall[ , ..names_d_subgroups])) #>                 overall     #> pcthisp         0.2737942   #> pctnhba         0.1462381   #> pctnhaa         0.0866459   #> pctnhaiana      0.002500135 #> pctnhnhpia      0.001582896 #> pctnhotheralone 0.005025789 #> pctnhmulti      0.03204894  #> pctnhwa         0.4521639"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"overall-results-for-the-very-long-list-of-all-indicators-as-raw-output-in-console","dir":"Articles","previous_headings":"EXPLORING RESULTS > Site by site results in datatable format in RStudio viewer:","what":"Overall results for the very long list of all indicators, as raw output in console:","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"out2 <- testoutput_ejamit_100pts_1miles cbind(as.list(out2$results_overall)) x <- testoutput_ejamit_1000pts_1miles  out <- x$results_bysite out <- setDF(copy(out)) ratio_benchmarks <- c(1.01, 1.50, 2, 3, 5, 10) ratiodata <- out[, names_d_ratio_to_state_avg]  findings <- count_sites_with_n_high_scores(out)  # long output to console ! #>  #> At 100% of these sites, at least 1 indicator is at least 10 times the statewide overall average.  #> At 100% of these sites, at least 1 indicator is at least 5 times the statewide overall average.  #> At 100% of these sites, at least 1 indicator is at least 3 times the statewide overall average.  #> At 100% of these sites, at least 1 indicator is at least 2 times the statewide overall average.  #> At 100% of these sites, at least 1 indicator is at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 1 indicator is at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 2 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 2 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 2 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 2 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 2 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 2 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 3 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 3 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 3 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 3 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 3 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 3 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 4 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 4 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 4 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 4 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 4 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 4 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 5 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 5 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 5 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 5 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 5 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 5 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 6 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 6 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 6 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 6 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 6 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 6 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 7 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 7 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 7 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 7 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 7 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 7 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 8 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 8 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 8 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 8 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 8 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 8 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 9 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 9 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 9 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 9 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 9 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 9 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 10 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 10 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 10 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 10 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 10 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 10 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 11 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 11 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 11 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 11 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 11 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 11 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 12 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 12 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 12 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 12 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 12 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 12 indicators are at least 1.01 times the statewide overall average.  #>  #> At 100% of these sites, at least 13 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 13 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 13 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 13 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 13 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 13 indicators are at least 1.01 times the statewide overall average.  #>  #> At 99% of these sites, at least 14 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 14 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 14 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 14 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 14 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 14 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 15 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 15 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 15 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 15 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 15 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 15 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 16 indicators are at least 10 times the statewide overall average.  #> At 100% of these sites, at least 16 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 16 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 16 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 16 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 16 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 17 indicators are at least 10 times the statewide overall average.  #> At 99% of these sites, at least 17 indicators are at least 5 times the statewide overall average.  #> At 100% of these sites, at least 17 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 17 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 17 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 17 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 18 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 18 indicators are at least 5 times the statewide overall average.  #> At 99% of these sites, at least 18 indicators are at least 3 times the statewide overall average.  #> At 100% of these sites, at least 18 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 18 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 18 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 19 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 19 indicators are at least 5 times the statewide overall average.  #> At 99% of these sites, at least 19 indicators are at least 3 times the statewide overall average.  #> At 99% of these sites, at least 19 indicators are at least 2 times the statewide overall average.  #> At 100% of these sites, at least 19 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 19 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 20 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 20 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 20 indicators are at least 3 times the statewide overall average.  #> At 99% of these sites, at least 20 indicators are at least 2 times the statewide overall average.  #> At 99% of these sites, at least 20 indicators are at least 1.5 times the statewide overall average.  #> At 100% of these sites, at least 20 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 21 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 21 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 21 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 21 indicators are at least 2 times the statewide overall average.  #> At 99% of these sites, at least 21 indicators are at least 1.5 times the statewide overall average.  #> At 99% of these sites, at least 21 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 22 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 22 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 22 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 22 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 22 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 22 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 23 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 23 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 23 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 23 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 23 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 23 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 24 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 24 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 24 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 24 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 24 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 24 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 25 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 25 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 25 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 25 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 25 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 25 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 26 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 26 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 26 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 26 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 26 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 26 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 27 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 27 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 27 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 27 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 27 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 27 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 28 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 28 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 28 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 28 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 28 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 28 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 29 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 29 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 29 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 29 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 29 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 29 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 30 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 30 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 30 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 30 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 30 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 30 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 31 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 31 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 31 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 31 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 31 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 31 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 32 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 32 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 32 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 32 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 32 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 32 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 33 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 33 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 33 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 33 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 33 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 33 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 34 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 34 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 34 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 34 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 34 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 34 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 35 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 35 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 35 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 35 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 35 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 35 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 36 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 36 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 36 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 36 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 36 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 36 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 37 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 37 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 37 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 37 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 37 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 37 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 38 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 38 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 38 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 38 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 38 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 38 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 39 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 39 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 39 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 39 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 39 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 39 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 40 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 40 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 40 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 40 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 40 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 40 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 41 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 41 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 41 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 41 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 41 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 41 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 42 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 42 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 42 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 42 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 42 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 42 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 43 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 43 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 43 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 43 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 43 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 43 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 44 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 44 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 44 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 44 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 44 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 44 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 45 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 45 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 45 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 45 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 45 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 45 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 46 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 46 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 46 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 46 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 46 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 46 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 47 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 47 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 47 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 47 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 47 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 47 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 48 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 48 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 48 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 48 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 48 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 48 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 49 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 49 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 49 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 49 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 49 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 49 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 50 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 50 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 50 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 50 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 50 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 50 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 51 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 51 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 51 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 51 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 51 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 51 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 52 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 52 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 52 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 52 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 52 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 52 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 53 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 53 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 53 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 53 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 53 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 53 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 54 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 54 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 54 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 54 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 54 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 54 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 55 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 55 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 55 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 55 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 55 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 55 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 56 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 56 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 56 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 56 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 56 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 56 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 57 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 57 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 57 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 57 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 57 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 57 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 58 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 58 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 58 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 58 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 58 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 58 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 59 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 59 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 59 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 59 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 59 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 59 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 60 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 60 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 60 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 60 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 60 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 60 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 61 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 61 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 61 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 61 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 61 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 61 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 62 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 62 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 62 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 62 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 62 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 62 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 63 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 63 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 63 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 63 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 63 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 63 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 64 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 64 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 64 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 64 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 64 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 64 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 65 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 65 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 65 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 65 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 65 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 65 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 66 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 66 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 66 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 66 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 66 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 66 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 67 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 67 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 67 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 67 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 67 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 67 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 68 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 68 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 68 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 68 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 68 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 68 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 69 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 69 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 69 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 69 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 69 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 69 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 70 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 70 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 70 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 70 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 70 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 70 indicators are at least 1.01 times the statewide overall average.  #>  #> At 98% of these sites, at least 71 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 71 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 71 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 71 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 71 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 71 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 72 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 72 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 72 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 72 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 72 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 72 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 73 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 73 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 73 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 73 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 73 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 73 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 74 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 74 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 74 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 74 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 74 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 74 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 75 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 75 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 75 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 75 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 75 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 75 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 76 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 76 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 76 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 76 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 76 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 76 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 77 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 77 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 77 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 77 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 77 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 77 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 78 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 78 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 78 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 78 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 78 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 78 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 79 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 79 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 79 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 79 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 79 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 79 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 80 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 80 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 80 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 80 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 80 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 80 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 81 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 81 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 81 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 81 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 81 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 81 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 82 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 82 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 82 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 82 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 82 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 82 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 83 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 83 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 83 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 83 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 83 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 83 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 84 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 84 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 84 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 84 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 84 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 84 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 85 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 85 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 85 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 85 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 85 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 85 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 86 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 86 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 86 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 86 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 86 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 86 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 87 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 87 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 87 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 87 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 87 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 87 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 88 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 88 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 88 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 88 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 88 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 88 indicators are at least 1.01 times the statewide overall average.  #>  #> At 97% of these sites, at least 89 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 89 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 89 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 89 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 89 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 89 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 90 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 90 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 90 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 90 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 90 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 90 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 91 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 91 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 91 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 91 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 91 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 91 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 92 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 92 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 92 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 92 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 92 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 92 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 93 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 93 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 93 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 93 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 93 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 93 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 94 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 94 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 94 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 94 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 94 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 94 indicators are at least 1.01 times the statewide overall average.  #>  #> At 96% of these sites, at least 95 indicators are at least 10 times the statewide overall average.  #> At 98% of these sites, at least 95 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 95 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 95 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 95 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 95 indicators are at least 1.01 times the statewide overall average.  #>  #> At 95% of these sites, at least 96 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 96 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 96 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 96 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 96 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 96 indicators are at least 1.01 times the statewide overall average.  #>  #> At 95% of these sites, at least 97 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 97 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 97 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 97 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 97 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 97 indicators are at least 1.01 times the statewide overall average.  #>  #> At 95% of these sites, at least 98 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 98 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 98 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 98 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 98 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 98 indicators are at least 1.01 times the statewide overall average.  #>  #> At 95% of these sites, at least 99 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 99 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 99 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 99 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 99 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 99 indicators are at least 1.01 times the statewide overall average.  #>  #> At 95% of these sites, at least 100 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 100 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 100 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 100 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 100 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 100 indicators are at least 1.01 times the statewide overall average.  #>  #> At 94% of these sites, at least 101 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 101 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 101 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 101 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 101 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 101 indicators are at least 1.01 times the statewide overall average.  #>  #> At 94% of these sites, at least 102 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 102 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 102 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 102 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 102 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 102 indicators are at least 1.01 times the statewide overall average.  #>  #> At 94% of these sites, at least 103 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 103 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 103 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 103 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 103 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 103 indicators are at least 1.01 times the statewide overall average.  #>  #> At 94% of these sites, at least 104 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 104 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 104 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 104 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 104 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 104 indicators are at least 1.01 times the statewide overall average.  #>  #> At 94% of these sites, at least 105 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 105 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 105 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 105 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 105 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 105 indicators are at least 1.01 times the statewide overall average.  #>  #> At 93% of these sites, at least 106 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 106 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 106 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 106 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 106 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 106 indicators are at least 1.01 times the statewide overall average.  #>  #> At 93% of these sites, at least 107 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 107 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 107 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 107 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 107 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 107 indicators are at least 1.01 times the statewide overall average.  #>  #> At 93% of these sites, at least 108 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 108 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 108 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 108 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 108 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 108 indicators are at least 1.01 times the statewide overall average.  #>  #> At 93% of these sites, at least 109 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 109 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 109 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 109 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 109 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 109 indicators are at least 1.01 times the statewide overall average.  #>  #> At 93% of these sites, at least 110 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 110 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 110 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 110 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 110 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 110 indicators are at least 1.01 times the statewide overall average.  #>  #> At 92% of these sites, at least 111 indicators are at least 10 times the statewide overall average.  #> At 97% of these sites, at least 111 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 111 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 111 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 111 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 111 indicators are at least 1.01 times the statewide overall average.  #>  #> At 92% of these sites, at least 112 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 112 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 112 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 112 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 112 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 112 indicators are at least 1.01 times the statewide overall average.  #>  #> At 91% of these sites, at least 113 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 113 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 113 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 113 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 113 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 113 indicators are at least 1.01 times the statewide overall average.  #>  #> At 91% of these sites, at least 114 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 114 indicators are at least 5 times the statewide overall average.  #> At 98% of these sites, at least 114 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 114 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 114 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 114 indicators are at least 1.01 times the statewide overall average.  #>  #> At 90% of these sites, at least 115 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 115 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 115 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 115 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 115 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 115 indicators are at least 1.01 times the statewide overall average.  #>  #> At 90% of these sites, at least 116 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 116 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 116 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 116 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 116 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 116 indicators are at least 1.01 times the statewide overall average.  #>  #> At 89% of these sites, at least 117 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 117 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 117 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 117 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 117 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 117 indicators are at least 1.01 times the statewide overall average.  #>  #> At 89% of these sites, at least 118 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 118 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 118 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 118 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 118 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 118 indicators are at least 1.01 times the statewide overall average.  #>  #> At 88% of these sites, at least 119 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 119 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 119 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 119 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 119 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 119 indicators are at least 1.01 times the statewide overall average.  #>  #> At 88% of these sites, at least 120 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 120 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 120 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 120 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 120 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 120 indicators are at least 1.01 times the statewide overall average.  #>  #> At 87% of these sites, at least 121 indicators are at least 10 times the statewide overall average.  #> At 96% of these sites, at least 121 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 121 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 121 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 121 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 121 indicators are at least 1.01 times the statewide overall average.  #>  #> At 87% of these sites, at least 122 indicators are at least 10 times the statewide overall average.  #> At 95% of these sites, at least 122 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 122 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 122 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 122 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 122 indicators are at least 1.01 times the statewide overall average.  #>  #> At 86% of these sites, at least 123 indicators are at least 10 times the statewide overall average.  #> At 95% of these sites, at least 123 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 123 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 123 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 123 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 123 indicators are at least 1.01 times the statewide overall average.  #>  #> At 86% of these sites, at least 124 indicators are at least 10 times the statewide overall average.  #> At 95% of these sites, at least 124 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 124 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 124 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 124 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 124 indicators are at least 1.01 times the statewide overall average.  #>  #> At 85% of these sites, at least 125 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 125 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 125 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 125 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 125 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 125 indicators are at least 1.01 times the statewide overall average.  #>  #> At 85% of these sites, at least 126 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 126 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 126 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 126 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 126 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 126 indicators are at least 1.01 times the statewide overall average.  #>  #> At 84% of these sites, at least 127 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 127 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 127 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 127 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 127 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 127 indicators are at least 1.01 times the statewide overall average.  #>  #> At 83% of these sites, at least 128 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 128 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 128 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 128 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 128 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 128 indicators are at least 1.01 times the statewide overall average.  #>  #> At 83% of these sites, at least 129 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 129 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 129 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 129 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 129 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 129 indicators are at least 1.01 times the statewide overall average.  #>  #> At 82% of these sites, at least 130 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 130 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 130 indicators are at least 3 times the statewide overall average.  #> At 98% of these sites, at least 130 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 130 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 130 indicators are at least 1.01 times the statewide overall average.  #>  #> At 81% of these sites, at least 131 indicators are at least 10 times the statewide overall average.  #> At 94% of these sites, at least 131 indicators are at least 5 times the statewide overall average.  #> At 97% of these sites, at least 131 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 131 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 131 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 131 indicators are at least 1.01 times the statewide overall average.  #>  #> At 81% of these sites, at least 132 indicators are at least 10 times the statewide overall average.  #> At 93% of these sites, at least 132 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 132 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 132 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 132 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 132 indicators are at least 1.01 times the statewide overall average.  #>  #> At 81% of these sites, at least 133 indicators are at least 10 times the statewide overall average.  #> At 93% of these sites, at least 133 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 133 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 133 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 133 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 133 indicators are at least 1.01 times the statewide overall average.  #>  #> At 80% of these sites, at least 134 indicators are at least 10 times the statewide overall average.  #> At 93% of these sites, at least 134 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 134 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 134 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 134 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 134 indicators are at least 1.01 times the statewide overall average.  #>  #> At 79% of these sites, at least 135 indicators are at least 10 times the statewide overall average.  #> At 93% of these sites, at least 135 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 135 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 135 indicators are at least 2 times the statewide overall average.  #> At 98% of these sites, at least 135 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 135 indicators are at least 1.01 times the statewide overall average.  #>  #> At 78% of these sites, at least 136 indicators are at least 10 times the statewide overall average.  #> At 93% of these sites, at least 136 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 136 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 136 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 136 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 136 indicators are at least 1.01 times the statewide overall average.  #>  #> At 78% of these sites, at least 137 indicators are at least 10 times the statewide overall average.  #> At 92% of these sites, at least 137 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 137 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 137 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 137 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 137 indicators are at least 1.01 times the statewide overall average.  #>  #> At 77% of these sites, at least 138 indicators are at least 10 times the statewide overall average.  #> At 91% of these sites, at least 138 indicators are at least 5 times the statewide overall average.  #> At 96% of these sites, at least 138 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 138 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 138 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 138 indicators are at least 1.01 times the statewide overall average.  #>  #> At 76% of these sites, at least 139 indicators are at least 10 times the statewide overall average.  #> At 91% of these sites, at least 139 indicators are at least 5 times the statewide overall average.  #> At 95% of these sites, at least 139 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 139 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 139 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 139 indicators are at least 1.01 times the statewide overall average.  #>  #> At 75% of these sites, at least 140 indicators are at least 10 times the statewide overall average.  #> At 90% of these sites, at least 140 indicators are at least 5 times the statewide overall average.  #> At 95% of these sites, at least 140 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 140 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 140 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 140 indicators are at least 1.01 times the statewide overall average.  #>  #> At 75% of these sites, at least 141 indicators are at least 10 times the statewide overall average.  #> At 90% of these sites, at least 141 indicators are at least 5 times the statewide overall average.  #> At 95% of these sites, at least 141 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 141 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 141 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 141 indicators are at least 1.01 times the statewide overall average.  #>  #> At 74% of these sites, at least 142 indicators are at least 10 times the statewide overall average.  #> At 90% of these sites, at least 142 indicators are at least 5 times the statewide overall average.  #> At 94% of these sites, at least 142 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 142 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 142 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 142 indicators are at least 1.01 times the statewide overall average.  #>  #> At 73% of these sites, at least 143 indicators are at least 10 times the statewide overall average.  #> At 89% of these sites, at least 143 indicators are at least 5 times the statewide overall average.  #> At 94% of these sites, at least 143 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 143 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 143 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 143 indicators are at least 1.01 times the statewide overall average.  #>  #> At 73% of these sites, at least 144 indicators are at least 10 times the statewide overall average.  #> At 89% of these sites, at least 144 indicators are at least 5 times the statewide overall average.  #> At 94% of these sites, at least 144 indicators are at least 3 times the statewide overall average.  #> At 97% of these sites, at least 144 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 144 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 144 indicators are at least 1.01 times the statewide overall average.  #>  #> At 72% of these sites, at least 145 indicators are at least 10 times the statewide overall average.  #> At 88% of these sites, at least 145 indicators are at least 5 times the statewide overall average.  #> At 94% of these sites, at least 145 indicators are at least 3 times the statewide overall average.  #> At 96% of these sites, at least 145 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 145 indicators are at least 1.5 times the statewide overall average.  #> At 98% of these sites, at least 145 indicators are at least 1.01 times the statewide overall average.  #>  #> At 72% of these sites, at least 146 indicators are at least 10 times the statewide overall average.  #> At 87% of these sites, at least 146 indicators are at least 5 times the statewide overall average.  #> At 93% of these sites, at least 146 indicators are at least 3 times the statewide overall average.  #> At 96% of these sites, at least 146 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 146 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 146 indicators are at least 1.01 times the statewide overall average.  #>  #> At 71% of these sites, at least 147 indicators are at least 10 times the statewide overall average.  #> At 87% of these sites, at least 147 indicators are at least 5 times the statewide overall average.  #> At 93% of these sites, at least 147 indicators are at least 3 times the statewide overall average.  #> At 96% of these sites, at least 147 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 147 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 147 indicators are at least 1.01 times the statewide overall average.  #>  #> At 71% of these sites, at least 148 indicators are at least 10 times the statewide overall average.  #> At 86% of these sites, at least 148 indicators are at least 5 times the statewide overall average.  #> At 93% of these sites, at least 148 indicators are at least 3 times the statewide overall average.  #> At 96% of these sites, at least 148 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 148 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 148 indicators are at least 1.01 times the statewide overall average.  #>  #> At 70% of these sites, at least 149 indicators are at least 10 times the statewide overall average.  #> At 86% of these sites, at least 149 indicators are at least 5 times the statewide overall average.  #> At 93% of these sites, at least 149 indicators are at least 3 times the statewide overall average.  #> At 96% of these sites, at least 149 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 149 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 149 indicators are at least 1.01 times the statewide overall average.  #>  #> At 69% of these sites, at least 150 indicators are at least 10 times the statewide overall average.  #> At 85% of these sites, at least 150 indicators are at least 5 times the statewide overall average.  #> At 92% of these sites, at least 150 indicators are at least 3 times the statewide overall average.  #> At 95% of these sites, at least 150 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 150 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 150 indicators are at least 1.01 times the statewide overall average.  #>  #> At 68% of these sites, at least 151 indicators are at least 10 times the statewide overall average.  #> At 85% of these sites, at least 151 indicators are at least 5 times the statewide overall average.  #> At 92% of these sites, at least 151 indicators are at least 3 times the statewide overall average.  #> At 95% of these sites, at least 151 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 151 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 151 indicators are at least 1.01 times the statewide overall average.  #>  #> At 68% of these sites, at least 152 indicators are at least 10 times the statewide overall average.  #> At 84% of these sites, at least 152 indicators are at least 5 times the statewide overall average.  #> At 92% of these sites, at least 152 indicators are at least 3 times the statewide overall average.  #> At 95% of these sites, at least 152 indicators are at least 2 times the statewide overall average.  #> At 97% of these sites, at least 152 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 152 indicators are at least 1.01 times the statewide overall average.  #>  #> At 67% of these sites, at least 153 indicators are at least 10 times the statewide overall average.  #> At 83% of these sites, at least 153 indicators are at least 5 times the statewide overall average.  #> At 91% of these sites, at least 153 indicators are at least 3 times the statewide overall average.  #> At 95% of these sites, at least 153 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 153 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 153 indicators are at least 1.01 times the statewide overall average.  #>  #> At 66% of these sites, at least 154 indicators are at least 10 times the statewide overall average.  #> At 83% of these sites, at least 154 indicators are at least 5 times the statewide overall average.  #> At 91% of these sites, at least 154 indicators are at least 3 times the statewide overall average.  #> At 95% of these sites, at least 154 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 154 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 154 indicators are at least 1.01 times the statewide overall average.  #>  #> At 65% of these sites, at least 155 indicators are at least 10 times the statewide overall average.  #> At 82% of these sites, at least 155 indicators are at least 5 times the statewide overall average.  #> At 91% of these sites, at least 155 indicators are at least 3 times the statewide overall average.  #> At 94% of these sites, at least 155 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 155 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 155 indicators are at least 1.01 times the statewide overall average.  #>  #> At 64% of these sites, at least 156 indicators are at least 10 times the statewide overall average.  #> At 81% of these sites, at least 156 indicators are at least 5 times the statewide overall average.  #> At 91% of these sites, at least 156 indicators are at least 3 times the statewide overall average.  #> At 94% of these sites, at least 156 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 156 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 156 indicators are at least 1.01 times the statewide overall average.  #>  #> At 63% of these sites, at least 157 indicators are at least 10 times the statewide overall average.  #> At 81% of these sites, at least 157 indicators are at least 5 times the statewide overall average.  #> At 90% of these sites, at least 157 indicators are at least 3 times the statewide overall average.  #> At 94% of these sites, at least 157 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 157 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 157 indicators are at least 1.01 times the statewide overall average.  #>  #> At 61% of these sites, at least 158 indicators are at least 10 times the statewide overall average.  #> At 80% of these sites, at least 158 indicators are at least 5 times the statewide overall average.  #> At 89% of these sites, at least 158 indicators are at least 3 times the statewide overall average.  #> At 93% of these sites, at least 158 indicators are at least 2 times the statewide overall average.  #> At 96% of these sites, at least 158 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 158 indicators are at least 1.01 times the statewide overall average.  #>  #> At 61% of these sites, at least 159 indicators are at least 10 times the statewide overall average.  #> At 79% of these sites, at least 159 indicators are at least 5 times the statewide overall average.  #> At 89% of these sites, at least 159 indicators are at least 3 times the statewide overall average.  #> At 93% of these sites, at least 159 indicators are at least 2 times the statewide overall average.  #> At 95% of these sites, at least 159 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 159 indicators are at least 1.01 times the statewide overall average.  #>  #> At 60% of these sites, at least 160 indicators are at least 10 times the statewide overall average.  #> At 79% of these sites, at least 160 indicators are at least 5 times the statewide overall average.  #> At 88% of these sites, at least 160 indicators are at least 3 times the statewide overall average.  #> At 93% of these sites, at least 160 indicators are at least 2 times the statewide overall average.  #> At 95% of these sites, at least 160 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 160 indicators are at least 1.01 times the statewide overall average.  #>  #> At 60% of these sites, at least 161 indicators are at least 10 times the statewide overall average.  #> At 78% of these sites, at least 161 indicators are at least 5 times the statewide overall average.  #> At 88% of these sites, at least 161 indicators are at least 3 times the statewide overall average.  #> At 93% of these sites, at least 161 indicators are at least 2 times the statewide overall average.  #> At 95% of these sites, at least 161 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 161 indicators are at least 1.01 times the statewide overall average.  #>  #> At 59% of these sites, at least 162 indicators are at least 10 times the statewide overall average.  #> At 78% of these sites, at least 162 indicators are at least 5 times the statewide overall average.  #> At 87% of these sites, at least 162 indicators are at least 3 times the statewide overall average.  #> At 92% of these sites, at least 162 indicators are at least 2 times the statewide overall average.  #> At 95% of these sites, at least 162 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 162 indicators are at least 1.01 times the statewide overall average.  #>  #> At 57% of these sites, at least 163 indicators are at least 10 times the statewide overall average.  #> At 77% of these sites, at least 163 indicators are at least 5 times the statewide overall average.  #> At 87% of these sites, at least 163 indicators are at least 3 times the statewide overall average.  #> At 92% of these sites, at least 163 indicators are at least 2 times the statewide overall average.  #> At 95% of these sites, at least 163 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 163 indicators are at least 1.01 times the statewide overall average.  #>  #> At 56% of these sites, at least 164 indicators are at least 10 times the statewide overall average.  #> At 76% of these sites, at least 164 indicators are at least 5 times the statewide overall average.  #> At 86% of these sites, at least 164 indicators are at least 3 times the statewide overall average.  #> At 92% of these sites, at least 164 indicators are at least 2 times the statewide overall average.  #> At 94% of these sites, at least 164 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 164 indicators are at least 1.01 times the statewide overall average.  #>  #> At 55% of these sites, at least 165 indicators are at least 10 times the statewide overall average.  #> At 75% of these sites, at least 165 indicators are at least 5 times the statewide overall average.  #> At 86% of these sites, at least 165 indicators are at least 3 times the statewide overall average.  #> At 91% of these sites, at least 165 indicators are at least 2 times the statewide overall average.  #> At 94% of these sites, at least 165 indicators are at least 1.5 times the statewide overall average.  #> At 97% of these sites, at least 165 indicators are at least 1.01 times the statewide overall average.  #>  #> At 54% of these sites, at least 166 indicators are at least 10 times the statewide overall average.  #> At 75% of these sites, at least 166 indicators are at least 5 times the statewide overall average.  #> At 85% of these sites, at least 166 indicators are at least 3 times the statewide overall average.  #> At 91% of these sites, at least 166 indicators are at least 2 times the statewide overall average.  #> At 94% of these sites, at least 166 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 166 indicators are at least 1.01 times the statewide overall average.  #>  #> At 53% of these sites, at least 167 indicators are at least 10 times the statewide overall average.  #> At 74% of these sites, at least 167 indicators are at least 5 times the statewide overall average.  #> At 85% of these sites, at least 167 indicators are at least 3 times the statewide overall average.  #> At 90% of these sites, at least 167 indicators are at least 2 times the statewide overall average.  #> At 94% of these sites, at least 167 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 167 indicators are at least 1.01 times the statewide overall average.  #>  #> At 52% of these sites, at least 168 indicators are at least 10 times the statewide overall average.  #> At 73% of these sites, at least 168 indicators are at least 5 times the statewide overall average.  #> At 84% of these sites, at least 168 indicators are at least 3 times the statewide overall average.  #> At 90% of these sites, at least 168 indicators are at least 2 times the statewide overall average.  #> At 93% of these sites, at least 168 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 168 indicators are at least 1.01 times the statewide overall average.  #>  #> At 51% of these sites, at least 169 indicators are at least 10 times the statewide overall average.  #> At 73% of these sites, at least 169 indicators are at least 5 times the statewide overall average.  #> At 83% of these sites, at least 169 indicators are at least 3 times the statewide overall average.  #> At 89% of these sites, at least 169 indicators are at least 2 times the statewide overall average.  #> At 93% of these sites, at least 169 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 169 indicators are at least 1.01 times the statewide overall average.  #>  #> At 50% of these sites, at least 170 indicators are at least 10 times the statewide overall average.  #> At 72% of these sites, at least 170 indicators are at least 5 times the statewide overall average.  #> At 83% of these sites, at least 170 indicators are at least 3 times the statewide overall average.  #> At 89% of these sites, at least 170 indicators are at least 2 times the statewide overall average.  #> At 93% of these sites, at least 170 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 170 indicators are at least 1.01 times the statewide overall average.  #>  #> At 49% of these sites, at least 171 indicators are at least 10 times the statewide overall average.  #> At 72% of these sites, at least 171 indicators are at least 5 times the statewide overall average.  #> At 82% of these sites, at least 171 indicators are at least 3 times the statewide overall average.  #> At 89% of these sites, at least 171 indicators are at least 2 times the statewide overall average.  #> At 92% of these sites, at least 171 indicators are at least 1.5 times the statewide overall average.  #> At 96% of these sites, at least 171 indicators are at least 1.01 times the statewide overall average.  #>  #> At 47% of these sites, at least 172 indicators are at least 10 times the statewide overall average.  #> At 71% of these sites, at least 172 indicators are at least 5 times the statewide overall average.  #> At 82% of these sites, at least 172 indicators are at least 3 times the statewide overall average.  #> At 88% of these sites, at least 172 indicators are at least 2 times the statewide overall average.  #> At 92% of these sites, at least 172 indicators are at least 1.5 times the statewide overall average.  #> At 95% of these sites, at least 172 indicators are at least 1.01 times the statewide overall average.  #>  #> At 46% of these sites, at least 173 indicators are at least 10 times the statewide overall average.  #> At 70% of these sites, at least 173 indicators are at least 5 times the statewide overall average.  #> At 81% of these sites, at least 173 indicators are at least 3 times the statewide overall average.  #> At 88% of these sites, at least 173 indicators are at least 2 times the statewide overall average.  #> At 91% of these sites, at least 173 indicators are at least 1.5 times the statewide overall average.  #> At 95% of these sites, at least 173 indicators are at least 1.01 times the statewide overall average.  #>  #> At 45% of these sites, at least 174 indicators are at least 10 times the statewide overall average.  #> At 70% of these sites, at least 174 indicators are at least 5 times the statewide overall average.  #> At 80% of these sites, at least 174 indicators are at least 3 times the statewide overall average.  #> At 87% of these sites, at least 174 indicators are at least 2 times the statewide overall average.  #> At 91% of these sites, at least 174 indicators are at least 1.5 times the statewide overall average.  #> At 95% of these sites, at least 174 indicators are at least 1.01 times the statewide overall average.  #>  #> At 44% of these sites, at least 175 indicators are at least 10 times the statewide overall average.  #> At 69% of these sites, at least 175 indicators are at least 5 times the statewide overall average.  #> At 79% of these sites, at least 175 indicators are at least 3 times the statewide overall average.  #> At 86% of these sites, at least 175 indicators are at least 2 times the statewide overall average.  #> At 91% of these sites, at least 175 indicators are at least 1.5 times the statewide overall average.  #> At 95% of these sites, at least 175 indicators are at least 1.01 times the statewide overall average.  #>  #> At 43% of these sites, at least 176 indicators are at least 10 times the statewide overall average.  #> At 68% of these sites, at least 176 indicators are at least 5 times the statewide overall average.  #> At 79% of these sites, at least 176 indicators are at least 3 times the statewide overall average.  #> At 85% of these sites, at least 176 indicators are at least 2 times the statewide overall average.  #> At 90% of these sites, at least 176 indicators are at least 1.5 times the statewide overall average.  #> At 94% of these sites, at least 176 indicators are at least 1.01 times the statewide overall average.  #>  #> At 42% of these sites, at least 177 indicators are at least 10 times the statewide overall average.  #> At 68% of these sites, at least 177 indicators are at least 5 times the statewide overall average.  #> At 78% of these sites, at least 177 indicators are at least 3 times the statewide overall average.  #> At 85% of these sites, at least 177 indicators are at least 2 times the statewide overall average.  #> At 89% of these sites, at least 177 indicators are at least 1.5 times the statewide overall average.  #> At 94% of these sites, at least 177 indicators are at least 1.01 times the statewide overall average.  #>  #> At 41% of these sites, at least 178 indicators are at least 10 times the statewide overall average.  #> At 67% of these sites, at least 178 indicators are at least 5 times the statewide overall average.  #> At 77% of these sites, at least 178 indicators are at least 3 times the statewide overall average.  #> At 84% of these sites, at least 178 indicators are at least 2 times the statewide overall average.  #> At 89% of these sites, at least 178 indicators are at least 1.5 times the statewide overall average.  #> At 94% of these sites, at least 178 indicators are at least 1.01 times the statewide overall average.  #>  #> At 40% of these sites, at least 179 indicators are at least 10 times the statewide overall average.  #> At 66% of these sites, at least 179 indicators are at least 5 times the statewide overall average.  #> At 77% of these sites, at least 179 indicators are at least 3 times the statewide overall average.  #> At 84% of these sites, at least 179 indicators are at least 2 times the statewide overall average.  #> At 89% of these sites, at least 179 indicators are at least 1.5 times the statewide overall average.  #> At 94% of these sites, at least 179 indicators are at least 1.01 times the statewide overall average.  #>  #> At 39% of these sites, at least 180 indicators are at least 10 times the statewide overall average.  #> At 66% of these sites, at least 180 indicators are at least 5 times the statewide overall average.  #> At 76% of these sites, at least 180 indicators are at least 3 times the statewide overall average.  #> At 83% of these sites, at least 180 indicators are at least 2 times the statewide overall average.  #> At 88% of these sites, at least 180 indicators are at least 1.5 times the statewide overall average.  #> At 93% of these sites, at least 180 indicators are at least 1.01 times the statewide overall average.  #>  #> At 38% of these sites, at least 181 indicators are at least 10 times the statewide overall average.  #> At 64% of these sites, at least 181 indicators are at least 5 times the statewide overall average.  #> At 76% of these sites, at least 181 indicators are at least 3 times the statewide overall average.  #> At 83% of these sites, at least 181 indicators are at least 2 times the statewide overall average.  #> At 88% of these sites, at least 181 indicators are at least 1.5 times the statewide overall average.  #> At 93% of these sites, at least 181 indicators are at least 1.01 times the statewide overall average.  #>  #> At 37% of these sites, at least 182 indicators are at least 10 times the statewide overall average.  #> At 63% of these sites, at least 182 indicators are at least 5 times the statewide overall average.  #> At 75% of these sites, at least 182 indicators are at least 3 times the statewide overall average.  #> At 82% of these sites, at least 182 indicators are at least 2 times the statewide overall average.  #> At 87% of these sites, at least 182 indicators are at least 1.5 times the statewide overall average.  #> At 93% of these sites, at least 182 indicators are at least 1.01 times the statewide overall average.  #>  #> At 35% of these sites, at least 183 indicators are at least 10 times the statewide overall average.  #> At 62% of these sites, at least 183 indicators are at least 5 times the statewide overall average.  #> At 74% of these sites, at least 183 indicators are at least 3 times the statewide overall average.  #> At 82% of these sites, at least 183 indicators are at least 2 times the statewide overall average.  #> At 87% of these sites, at least 183 indicators are at least 1.5 times the statewide overall average.  #> At 93% of these sites, at least 183 indicators are at least 1.01 times the statewide overall average.  #>  #> At 34% of these sites, at least 184 indicators are at least 10 times the statewide overall average.  #> At 61% of these sites, at least 184 indicators are at least 5 times the statewide overall average.  #> At 74% of these sites, at least 184 indicators are at least 3 times the statewide overall average.  #> At 81% of these sites, at least 184 indicators are at least 2 times the statewide overall average.  #> At 86% of these sites, at least 184 indicators are at least 1.5 times the statewide overall average.  #> At 93% of these sites, at least 184 indicators are at least 1.01 times the statewide overall average.  #>  #> At 33% of these sites, at least 185 indicators are at least 10 times the statewide overall average.  #> At 59% of these sites, at least 185 indicators are at least 5 times the statewide overall average.  #> At 73% of these sites, at least 185 indicators are at least 3 times the statewide overall average.  #> At 80% of these sites, at least 185 indicators are at least 2 times the statewide overall average.  #> At 85% of these sites, at least 185 indicators are at least 1.5 times the statewide overall average.  #> At 92% of these sites, at least 185 indicators are at least 1.01 times the statewide overall average.  #>  #> At 32% of these sites, at least 186 indicators are at least 10 times the statewide overall average.  #> At 58% of these sites, at least 186 indicators are at least 5 times the statewide overall average.  #> At 72% of these sites, at least 186 indicators are at least 3 times the statewide overall average.  #> At 79% of these sites, at least 186 indicators are at least 2 times the statewide overall average.  #> At 85% of these sites, at least 186 indicators are at least 1.5 times the statewide overall average.  #> At 92% of these sites, at least 186 indicators are at least 1.01 times the statewide overall average.  #>  #> At 31% of these sites, at least 187 indicators are at least 10 times the statewide overall average.  #> At 57% of these sites, at least 187 indicators are at least 5 times the statewide overall average.  #> At 71% of these sites, at least 187 indicators are at least 3 times the statewide overall average.  #> At 78% of these sites, at least 187 indicators are at least 2 times the statewide overall average.  #> At 84% of these sites, at least 187 indicators are at least 1.5 times the statewide overall average.  #> At 91% of these sites, at least 187 indicators are at least 1.01 times the statewide overall average.  #>  #> At 30% of these sites, at least 188 indicators are at least 10 times the statewide overall average.  #> At 57% of these sites, at least 188 indicators are at least 5 times the statewide overall average.  #> At 71% of these sites, at least 188 indicators are at least 3 times the statewide overall average.  #> At 77% of these sites, at least 188 indicators are at least 2 times the statewide overall average.  #> At 84% of these sites, at least 188 indicators are at least 1.5 times the statewide overall average.  #> At 91% of these sites, at least 188 indicators are at least 1.01 times the statewide overall average.  #>  #> At 30% of these sites, at least 189 indicators are at least 10 times the statewide overall average.  #> At 55% of these sites, at least 189 indicators are at least 5 times the statewide overall average.  #> At 70% of these sites, at least 189 indicators are at least 3 times the statewide overall average.  #> At 77% of these sites, at least 189 indicators are at least 2 times the statewide overall average.  #> At 83% of these sites, at least 189 indicators are at least 1.5 times the statewide overall average.  #> At 90% of these sites, at least 189 indicators are at least 1.01 times the statewide overall average.  #>  #> At 29% of these sites, at least 190 indicators are at least 10 times the statewide overall average.  #> At 54% of these sites, at least 190 indicators are at least 5 times the statewide overall average.  #> At 69% of these sites, at least 190 indicators are at least 3 times the statewide overall average.  #> At 76% of these sites, at least 190 indicators are at least 2 times the statewide overall average.  #> At 82% of these sites, at least 190 indicators are at least 1.5 times the statewide overall average.  #> At 90% of these sites, at least 190 indicators are at least 1.01 times the statewide overall average.  #>  #> At 28% of these sites, at least 191 indicators are at least 10 times the statewide overall average.  #> At 52% of these sites, at least 191 indicators are at least 5 times the statewide overall average.  #> At 68% of these sites, at least 191 indicators are at least 3 times the statewide overall average.  #> At 76% of these sites, at least 191 indicators are at least 2 times the statewide overall average.  #> At 81% of these sites, at least 191 indicators are at least 1.5 times the statewide overall average.  #> At 89% of these sites, at least 191 indicators are at least 1.01 times the statewide overall average.  #>  #> At 26% of these sites, at least 192 indicators are at least 10 times the statewide overall average.  #> At 51% of these sites, at least 192 indicators are at least 5 times the statewide overall average.  #> At 68% of these sites, at least 192 indicators are at least 3 times the statewide overall average.  #> At 75% of these sites, at least 192 indicators are at least 2 times the statewide overall average.  #> At 80% of these sites, at least 192 indicators are at least 1.5 times the statewide overall average.  #> At 89% of these sites, at least 192 indicators are at least 1.01 times the statewide overall average.  #>  #> At 25% of these sites, at least 193 indicators are at least 10 times the statewide overall average.  #> At 50% of these sites, at least 193 indicators are at least 5 times the statewide overall average.  #> At 67% of these sites, at least 193 indicators are at least 3 times the statewide overall average.  #> At 74% of these sites, at least 193 indicators are at least 2 times the statewide overall average.  #> At 80% of these sites, at least 193 indicators are at least 1.5 times the statewide overall average.  #> At 88% of these sites, at least 193 indicators are at least 1.01 times the statewide overall average.  #>  #> At 23% of these sites, at least 194 indicators are at least 10 times the statewide overall average.  #> At 49% of these sites, at least 194 indicators are at least 5 times the statewide overall average.  #> At 66% of these sites, at least 194 indicators are at least 3 times the statewide overall average.  #> At 73% of these sites, at least 194 indicators are at least 2 times the statewide overall average.  #> At 79% of these sites, at least 194 indicators are at least 1.5 times the statewide overall average.  #> At 88% of these sites, at least 194 indicators are at least 1.01 times the statewide overall average.  #>  #> At 22% of these sites, at least 195 indicators are at least 10 times the statewide overall average.  #> At 48% of these sites, at least 195 indicators are at least 5 times the statewide overall average.  #> At 65% of these sites, at least 195 indicators are at least 3 times the statewide overall average.  #> At 72% of these sites, at least 195 indicators are at least 2 times the statewide overall average.  #> At 78% of these sites, at least 195 indicators are at least 1.5 times the statewide overall average.  #> At 87% of these sites, at least 195 indicators are at least 1.01 times the statewide overall average.  #>  #> At 22% of these sites, at least 196 indicators are at least 10 times the statewide overall average.  #> At 47% of these sites, at least 196 indicators are at least 5 times the statewide overall average.  #> At 63% of these sites, at least 196 indicators are at least 3 times the statewide overall average.  #> At 71% of these sites, at least 196 indicators are at least 2 times the statewide overall average.  #> At 78% of these sites, at least 196 indicators are at least 1.5 times the statewide overall average.  #> At 87% of these sites, at least 196 indicators are at least 1.01 times the statewide overall average.  #>  #> At 21% of these sites, at least 197 indicators are at least 10 times the statewide overall average.  #> At 46% of these sites, at least 197 indicators are at least 5 times the statewide overall average.  #> At 62% of these sites, at least 197 indicators are at least 3 times the statewide overall average.  #> At 71% of these sites, at least 197 indicators are at least 2 times the statewide overall average.  #> At 77% of these sites, at least 197 indicators are at least 1.5 times the statewide overall average.  #> At 86% of these sites, at least 197 indicators are at least 1.01 times the statewide overall average.  #>  #> At 20% of these sites, at least 198 indicators are at least 10 times the statewide overall average.  #> At 45% of these sites, at least 198 indicators are at least 5 times the statewide overall average.  #> At 60% of these sites, at least 198 indicators are at least 3 times the statewide overall average.  #> At 70% of these sites, at least 198 indicators are at least 2 times the statewide overall average.  #> At 76% of these sites, at least 198 indicators are at least 1.5 times the statewide overall average.  #> At 86% of these sites, at least 198 indicators are at least 1.01 times the statewide overall average.  #>  #> At 20% of these sites, at least 199 indicators are at least 10 times the statewide overall average.  #> At 43% of these sites, at least 199 indicators are at least 5 times the statewide overall average.  #> At 59% of these sites, at least 199 indicators are at least 3 times the statewide overall average.  #> At 69% of these sites, at least 199 indicators are at least 2 times the statewide overall average.  #> At 75% of these sites, at least 199 indicators are at least 1.5 times the statewide overall average.  #> At 86% of these sites, at least 199 indicators are at least 1.01 times the statewide overall average.  #>  #> At 19% of these sites, at least 200 indicators are at least 10 times the statewide overall average.  #> At 42% of these sites, at least 200 indicators are at least 5 times the statewide overall average.  #> At 58% of these sites, at least 200 indicators are at least 3 times the statewide overall average.  #> At 68% of these sites, at least 200 indicators are at least 2 times the statewide overall average.  #> At 75% of these sites, at least 200 indicators are at least 1.5 times the statewide overall average.  #> At 84% of these sites, at least 200 indicators are at least 1.01 times the statewide overall average.  #>  #> At 18% of these sites, at least 201 indicators are at least 10 times the statewide overall average.  #> At 41% of these sites, at least 201 indicators are at least 5 times the statewide overall average.  #> At 57% of these sites, at least 201 indicators are at least 3 times the statewide overall average.  #> At 68% of these sites, at least 201 indicators are at least 2 times the statewide overall average.  #> At 74% of these sites, at least 201 indicators are at least 1.5 times the statewide overall average.  #> At 84% of these sites, at least 201 indicators are at least 1.01 times the statewide overall average.  #>  #> At 18% of these sites, at least 202 indicators are at least 10 times the statewide overall average.  #> At 39% of these sites, at least 202 indicators are at least 5 times the statewide overall average.  #> At 56% of these sites, at least 202 indicators are at least 3 times the statewide overall average.  #> At 67% of these sites, at least 202 indicators are at least 2 times the statewide overall average.  #> At 73% of these sites, at least 202 indicators are at least 1.5 times the statewide overall average.  #> At 83% of these sites, at least 202 indicators are at least 1.01 times the statewide overall average.  #>  #> At 17% of these sites, at least 203 indicators are at least 10 times the statewide overall average.  #> At 38% of these sites, at least 203 indicators are at least 5 times the statewide overall average.  #> At 54% of these sites, at least 203 indicators are at least 3 times the statewide overall average.  #> At 66% of these sites, at least 203 indicators are at least 2 times the statewide overall average.  #> At 72% of these sites, at least 203 indicators are at least 1.5 times the statewide overall average.  #> At 82% of these sites, at least 203 indicators are at least 1.01 times the statewide overall average.  #>  #> At 16% of these sites, at least 204 indicators are at least 10 times the statewide overall average.  #> At 37% of these sites, at least 204 indicators are at least 5 times the statewide overall average.  #> At 52% of these sites, at least 204 indicators are at least 3 times the statewide overall average.  #> At 64% of these sites, at least 204 indicators are at least 2 times the statewide overall average.  #> At 72% of these sites, at least 204 indicators are at least 1.5 times the statewide overall average.  #> At 82% of these sites, at least 204 indicators are at least 1.01 times the statewide overall average.  #>  #> At 15% of these sites, at least 205 indicators are at least 10 times the statewide overall average.  #> At 35% of these sites, at least 205 indicators are at least 5 times the statewide overall average.  #> At 51% of these sites, at least 205 indicators are at least 3 times the statewide overall average.  #> At 63% of these sites, at least 205 indicators are at least 2 times the statewide overall average.  #> At 70% of these sites, at least 205 indicators are at least 1.5 times the statewide overall average.  #> At 80% of these sites, at least 205 indicators are at least 1.01 times the statewide overall average.  #>  #> At 15% of these sites, at least 206 indicators are at least 10 times the statewide overall average.  #> At 35% of these sites, at least 206 indicators are at least 5 times the statewide overall average.  #> At 50% of these sites, at least 206 indicators are at least 3 times the statewide overall average.  #> At 62% of these sites, at least 206 indicators are at least 2 times the statewide overall average.  #> At 69% of these sites, at least 206 indicators are at least 1.5 times the statewide overall average.  #> At 80% of these sites, at least 206 indicators are at least 1.01 times the statewide overall average.  #>  #> At 14% of these sites, at least 207 indicators are at least 10 times the statewide overall average.  #> At 33% of these sites, at least 207 indicators are at least 5 times the statewide overall average.  #> At 49% of these sites, at least 207 indicators are at least 3 times the statewide overall average.  #> At 61% of these sites, at least 207 indicators are at least 2 times the statewide overall average.  #> At 69% of these sites, at least 207 indicators are at least 1.5 times the statewide overall average.  #> At 79% of these sites, at least 207 indicators are at least 1.01 times the statewide overall average.  #>  #> At 13% of these sites, at least 208 indicators are at least 10 times the statewide overall average.  #> At 32% of these sites, at least 208 indicators are at least 5 times the statewide overall average.  #> At 47% of these sites, at least 208 indicators are at least 3 times the statewide overall average.  #> At 59% of these sites, at least 208 indicators are at least 2 times the statewide overall average.  #> At 68% of these sites, at least 208 indicators are at least 1.5 times the statewide overall average.  #> At 79% of these sites, at least 208 indicators are at least 1.01 times the statewide overall average.  #>  #> At 12% of these sites, at least 209 indicators are at least 10 times the statewide overall average.  #> At 31% of these sites, at least 209 indicators are at least 5 times the statewide overall average.  #> At 45% of these sites, at least 209 indicators are at least 3 times the statewide overall average.  #> At 58% of these sites, at least 209 indicators are at least 2 times the statewide overall average.  #> At 66% of these sites, at least 209 indicators are at least 1.5 times the statewide overall average.  #> At 78% of these sites, at least 209 indicators are at least 1.01 times the statewide overall average.  #>  #> At 11% of these sites, at least 210 indicators are at least 10 times the statewide overall average.  #> At 29% of these sites, at least 210 indicators are at least 5 times the statewide overall average.  #> At 44% of these sites, at least 210 indicators are at least 3 times the statewide overall average.  #> At 56% of these sites, at least 210 indicators are at least 2 times the statewide overall average.  #> At 65% of these sites, at least 210 indicators are at least 1.5 times the statewide overall average.  #> At 77% of these sites, at least 210 indicators are at least 1.01 times the statewide overall average.  #>  #> At 10% of these sites, at least 211 indicators are at least 10 times the statewide overall average.  #> At 28% of these sites, at least 211 indicators are at least 5 times the statewide overall average.  #> At 43% of these sites, at least 211 indicators are at least 3 times the statewide overall average.  #> At 54% of these sites, at least 211 indicators are at least 2 times the statewide overall average.  #> At 64% of these sites, at least 211 indicators are at least 1.5 times the statewide overall average.  #> At 76% of these sites, at least 211 indicators are at least 1.01 times the statewide overall average.  #>  #> At 10% of these sites, at least 212 indicators are at least 10 times the statewide overall average.  #> At 27% of these sites, at least 212 indicators are at least 5 times the statewide overall average.  #> At 41% of these sites, at least 212 indicators are at least 3 times the statewide overall average.  #> At 52% of these sites, at least 212 indicators are at least 2 times the statewide overall average.  #> At 62% of these sites, at least 212 indicators are at least 1.5 times the statewide overall average.  #> At 75% of these sites, at least 212 indicators are at least 1.01 times the statewide overall average.  #>  #> At 9% of these sites, at least 213 indicators are at least 10 times the statewide overall average.  #> At 25% of these sites, at least 213 indicators are at least 5 times the statewide overall average.  #> At 40% of these sites, at least 213 indicators are at least 3 times the statewide overall average.  #> At 51% of these sites, at least 213 indicators are at least 2 times the statewide overall average.  #> At 61% of these sites, at least 213 indicators are at least 1.5 times the statewide overall average.  #> At 75% of these sites, at least 213 indicators are at least 1.01 times the statewide overall average.  #>  #> At 8% of these sites, at least 214 indicators are at least 10 times the statewide overall average.  #> At 24% of these sites, at least 214 indicators are at least 5 times the statewide overall average.  #> At 38% of these sites, at least 214 indicators are at least 3 times the statewide overall average.  #> At 48% of these sites, at least 214 indicators are at least 2 times the statewide overall average.  #> At 60% of these sites, at least 214 indicators are at least 1.5 times the statewide overall average.  #> At 75% of these sites, at least 214 indicators are at least 1.01 times the statewide overall average.  #>  #> At 7% of these sites, at least 215 indicators are at least 10 times the statewide overall average.  #> At 23% of these sites, at least 215 indicators are at least 5 times the statewide overall average.  #> At 37% of these sites, at least 215 indicators are at least 3 times the statewide overall average.  #> At 47% of these sites, at least 215 indicators are at least 2 times the statewide overall average.  #> At 58% of these sites, at least 215 indicators are at least 1.5 times the statewide overall average.  #> At 74% of these sites, at least 215 indicators are at least 1.01 times the statewide overall average.  #>  #> At 7% of these sites, at least 216 indicators are at least 10 times the statewide overall average.  #> At 21% of these sites, at least 216 indicators are at least 5 times the statewide overall average.  #> At 34% of these sites, at least 216 indicators are at least 3 times the statewide overall average.  #> At 45% of these sites, at least 216 indicators are at least 2 times the statewide overall average.  #> At 57% of these sites, at least 216 indicators are at least 1.5 times the statewide overall average.  #> At 73% of these sites, at least 216 indicators are at least 1.01 times the statewide overall average.  #>  #> At 6% of these sites, at least 217 indicators are at least 10 times the statewide overall average.  #> At 20% of these sites, at least 217 indicators are at least 5 times the statewide overall average.  #> At 33% of these sites, at least 217 indicators are at least 3 times the statewide overall average.  #> At 44% of these sites, at least 217 indicators are at least 2 times the statewide overall average.  #> At 55% of these sites, at least 217 indicators are at least 1.5 times the statewide overall average.  #> At 72% of these sites, at least 217 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 218 indicators are at least 10 times the statewide overall average.  #> At 19% of these sites, at least 218 indicators are at least 5 times the statewide overall average.  #> At 31% of these sites, at least 218 indicators are at least 3 times the statewide overall average.  #> At 42% of these sites, at least 218 indicators are at least 2 times the statewide overall average.  #> At 53% of these sites, at least 218 indicators are at least 1.5 times the statewide overall average.  #> At 71% of these sites, at least 218 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 219 indicators are at least 10 times the statewide overall average.  #> At 18% of these sites, at least 219 indicators are at least 5 times the statewide overall average.  #> At 29% of these sites, at least 219 indicators are at least 3 times the statewide overall average.  #> At 40% of these sites, at least 219 indicators are at least 2 times the statewide overall average.  #> At 52% of these sites, at least 219 indicators are at least 1.5 times the statewide overall average.  #> At 70% of these sites, at least 219 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 220 indicators are at least 10 times the statewide overall average.  #> At 17% of these sites, at least 220 indicators are at least 5 times the statewide overall average.  #> At 28% of these sites, at least 220 indicators are at least 3 times the statewide overall average.  #> At 39% of these sites, at least 220 indicators are at least 2 times the statewide overall average.  #> At 50% of these sites, at least 220 indicators are at least 1.5 times the statewide overall average.  #> At 69% of these sites, at least 220 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 221 indicators are at least 10 times the statewide overall average.  #> At 15% of these sites, at least 221 indicators are at least 5 times the statewide overall average.  #> At 26% of these sites, at least 221 indicators are at least 3 times the statewide overall average.  #> At 37% of these sites, at least 221 indicators are at least 2 times the statewide overall average.  #> At 48% of these sites, at least 221 indicators are at least 1.5 times the statewide overall average.  #> At 68% of these sites, at least 221 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 222 indicators are at least 10 times the statewide overall average.  #> At 14% of these sites, at least 222 indicators are at least 5 times the statewide overall average.  #> At 25% of these sites, at least 222 indicators are at least 3 times the statewide overall average.  #> At 35% of these sites, at least 222 indicators are at least 2 times the statewide overall average.  #> At 47% of these sites, at least 222 indicators are at least 1.5 times the statewide overall average.  #> At 67% of these sites, at least 222 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 223 indicators are at least 10 times the statewide overall average.  #> At 12% of these sites, at least 223 indicators are at least 5 times the statewide overall average.  #> At 23% of these sites, at least 223 indicators are at least 3 times the statewide overall average.  #> At 34% of these sites, at least 223 indicators are at least 2 times the statewide overall average.  #> At 45% of these sites, at least 223 indicators are at least 1.5 times the statewide overall average.  #> At 65% of these sites, at least 223 indicators are at least 1.01 times the statewide overall average.  #>  #> At 11% of these sites, at least 224 indicators are at least 5 times the statewide overall average.  #> At 22% of these sites, at least 224 indicators are at least 3 times the statewide overall average.  #> At 32% of these sites, at least 224 indicators are at least 2 times the statewide overall average.  #> At 43% of these sites, at least 224 indicators are at least 1.5 times the statewide overall average.  #> At 65% of these sites, at least 224 indicators are at least 1.01 times the statewide overall average.  #>  #> At 10% of these sites, at least 225 indicators are at least 5 times the statewide overall average.  #> At 20% of these sites, at least 225 indicators are at least 3 times the statewide overall average.  #> At 30% of these sites, at least 225 indicators are at least 2 times the statewide overall average.  #> At 42% of these sites, at least 225 indicators are at least 1.5 times the statewide overall average.  #> At 63% of these sites, at least 225 indicators are at least 1.01 times the statewide overall average.  #>  #> At 9% of these sites, at least 226 indicators are at least 5 times the statewide overall average.  #> At 18% of these sites, at least 226 indicators are at least 3 times the statewide overall average.  #> At 28% of these sites, at least 226 indicators are at least 2 times the statewide overall average.  #> At 40% of these sites, at least 226 indicators are at least 1.5 times the statewide overall average.  #> At 62% of these sites, at least 226 indicators are at least 1.01 times the statewide overall average.  #>  #> At 8% of these sites, at least 227 indicators are at least 5 times the statewide overall average.  #> At 17% of these sites, at least 227 indicators are at least 3 times the statewide overall average.  #> At 26% of these sites, at least 227 indicators are at least 2 times the statewide overall average.  #> At 38% of these sites, at least 227 indicators are at least 1.5 times the statewide overall average.  #> At 61% of these sites, at least 227 indicators are at least 1.01 times the statewide overall average.  #>  #> At 6% of these sites, at least 228 indicators are at least 5 times the statewide overall average.  #> At 16% of these sites, at least 228 indicators are at least 3 times the statewide overall average.  #> At 25% of these sites, at least 228 indicators are at least 2 times the statewide overall average.  #> At 36% of these sites, at least 228 indicators are at least 1.5 times the statewide overall average.  #> At 60% of these sites, at least 228 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 229 indicators are at least 5 times the statewide overall average.  #> At 15% of these sites, at least 229 indicators are at least 3 times the statewide overall average.  #> At 23% of these sites, at least 229 indicators are at least 2 times the statewide overall average.  #> At 35% of these sites, at least 229 indicators are at least 1.5 times the statewide overall average.  #> At 59% of these sites, at least 229 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 230 indicators are at least 5 times the statewide overall average.  #> At 13% of these sites, at least 230 indicators are at least 3 times the statewide overall average.  #> At 22% of these sites, at least 230 indicators are at least 2 times the statewide overall average.  #> At 33% of these sites, at least 230 indicators are at least 1.5 times the statewide overall average.  #> At 57% of these sites, at least 230 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 231 indicators are at least 5 times the statewide overall average.  #> At 11% of these sites, at least 231 indicators are at least 3 times the statewide overall average.  #> At 21% of these sites, at least 231 indicators are at least 2 times the statewide overall average.  #> At 32% of these sites, at least 231 indicators are at least 1.5 times the statewide overall average.  #> At 56% of these sites, at least 231 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 232 indicators are at least 5 times the statewide overall average.  #> At 10% of these sites, at least 232 indicators are at least 3 times the statewide overall average.  #> At 19% of these sites, at least 232 indicators are at least 2 times the statewide overall average.  #> At 30% of these sites, at least 232 indicators are at least 1.5 times the statewide overall average.  #> At 54% of these sites, at least 232 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 233 indicators are at least 5 times the statewide overall average.  #> At 9% of these sites, at least 233 indicators are at least 3 times the statewide overall average.  #> At 18% of these sites, at least 233 indicators are at least 2 times the statewide overall average.  #> At 29% of these sites, at least 233 indicators are at least 1.5 times the statewide overall average.  #> At 53% of these sites, at least 233 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 234 indicators are at least 5 times the statewide overall average.  #> At 7% of these sites, at least 234 indicators are at least 3 times the statewide overall average.  #> At 16% of these sites, at least 234 indicators are at least 2 times the statewide overall average.  #> At 28% of these sites, at least 234 indicators are at least 1.5 times the statewide overall average.  #> At 51% of these sites, at least 234 indicators are at least 1.01 times the statewide overall average.  #>  #> At 6% of these sites, at least 235 indicators are at least 3 times the statewide overall average.  #> At 15% of these sites, at least 235 indicators are at least 2 times the statewide overall average.  #> At 26% of these sites, at least 235 indicators are at least 1.5 times the statewide overall average.  #> At 50% of these sites, at least 235 indicators are at least 1.01 times the statewide overall average.  #>  #> At 5% of these sites, at least 236 indicators are at least 3 times the statewide overall average.  #> At 14% of these sites, at least 236 indicators are at least 2 times the statewide overall average.  #> At 25% of these sites, at least 236 indicators are at least 1.5 times the statewide overall average.  #> At 48% of these sites, at least 236 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 237 indicators are at least 3 times the statewide overall average.  #> At 13% of these sites, at least 237 indicators are at least 2 times the statewide overall average.  #> At 23% of these sites, at least 237 indicators are at least 1.5 times the statewide overall average.  #> At 47% of these sites, at least 237 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 238 indicators are at least 3 times the statewide overall average.  #> At 12% of these sites, at least 238 indicators are at least 2 times the statewide overall average.  #> At 21% of these sites, at least 238 indicators are at least 1.5 times the statewide overall average.  #> At 45% of these sites, at least 238 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 239 indicators are at least 3 times the statewide overall average.  #> At 11% of these sites, at least 239 indicators are at least 2 times the statewide overall average.  #> At 20% of these sites, at least 239 indicators are at least 1.5 times the statewide overall average.  #> At 43% of these sites, at least 239 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 240 indicators are at least 3 times the statewide overall average.  #> At 9% of these sites, at least 240 indicators are at least 2 times the statewide overall average.  #> At 19% of these sites, at least 240 indicators are at least 1.5 times the statewide overall average.  #> At 42% of these sites, at least 240 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 241 indicators are at least 3 times the statewide overall average.  #> At 8% of these sites, at least 241 indicators are at least 2 times the statewide overall average.  #> At 18% of these sites, at least 241 indicators are at least 1.5 times the statewide overall average.  #> At 41% of these sites, at least 241 indicators are at least 1.01 times the statewide overall average.  #>  #> At 7% of these sites, at least 242 indicators are at least 2 times the statewide overall average.  #> At 16% of these sites, at least 242 indicators are at least 1.5 times the statewide overall average.  #> At 39% of these sites, at least 242 indicators are at least 1.01 times the statewide overall average.  #>  #> At 6% of these sites, at least 243 indicators are at least 2 times the statewide overall average.  #> At 16% of these sites, at least 243 indicators are at least 1.5 times the statewide overall average.  #> At 37% of these sites, at least 243 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 244 indicators are at least 2 times the statewide overall average.  #> At 15% of these sites, at least 244 indicators are at least 1.5 times the statewide overall average.  #> At 37% of these sites, at least 244 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 245 indicators are at least 2 times the statewide overall average.  #> At 14% of these sites, at least 245 indicators are at least 1.5 times the statewide overall average.  #> At 36% of these sites, at least 245 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 246 indicators are at least 2 times the statewide overall average.  #> At 12% of these sites, at least 246 indicators are at least 1.5 times the statewide overall average.  #> At 34% of these sites, at least 246 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 247 indicators are at least 2 times the statewide overall average.  #> At 12% of these sites, at least 247 indicators are at least 1.5 times the statewide overall average.  #> At 33% of these sites, at least 247 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 248 indicators are at least 2 times the statewide overall average.  #> At 10% of these sites, at least 248 indicators are at least 1.5 times the statewide overall average.  #> At 31% of these sites, at least 248 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 249 indicators are at least 2 times the statewide overall average.  #> At 9% of these sites, at least 249 indicators are at least 1.5 times the statewide overall average.  #> At 29% of these sites, at least 249 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 250 indicators are at least 2 times the statewide overall average.  #> At 8% of these sites, at least 250 indicators are at least 1.5 times the statewide overall average.  #> At 29% of these sites, at least 250 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 251 indicators are at least 2 times the statewide overall average.  #> At 8% of these sites, at least 251 indicators are at least 1.5 times the statewide overall average.  #> At 28% of these sites, at least 251 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 252 indicators are at least 2 times the statewide overall average.  #> At 7% of these sites, at least 252 indicators are at least 1.5 times the statewide overall average.  #> At 26% of these sites, at least 252 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 253 indicators are at least 2 times the statewide overall average.  #> At 6% of these sites, at least 253 indicators are at least 1.5 times the statewide overall average.  #> At 25% of these sites, at least 253 indicators are at least 1.01 times the statewide overall average.  #>  #> At 5% of these sites, at least 254 indicators are at least 1.5 times the statewide overall average.  #> At 24% of these sites, at least 254 indicators are at least 1.01 times the statewide overall average.  #>  #> At 5% of these sites, at least 255 indicators are at least 1.5 times the statewide overall average.  #> At 22% of these sites, at least 255 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 256 indicators are at least 1.5 times the statewide overall average.  #> At 21% of these sites, at least 256 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 257 indicators are at least 1.5 times the statewide overall average.  #> At 20% of these sites, at least 257 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 258 indicators are at least 1.5 times the statewide overall average.  #> At 19% of these sites, at least 258 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 259 indicators are at least 1.5 times the statewide overall average.  #> At 18% of these sites, at least 259 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 260 indicators are at least 1.5 times the statewide overall average.  #> At 17% of these sites, at least 260 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 261 indicators are at least 1.5 times the statewide overall average.  #> At 17% of these sites, at least 261 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 262 indicators are at least 1.5 times the statewide overall average.  #> At 16% of these sites, at least 262 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 263 indicators are at least 1.5 times the statewide overall average.  #> At 15% of these sites, at least 263 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 264 indicators are at least 1.5 times the statewide overall average.  #> At 14% of these sites, at least 264 indicators are at least 1.01 times the statewide overall average.  #>  #> At 13% of these sites, at least 265 indicators are at least 1.01 times the statewide overall average.  #>  #> At 11% of these sites, at least 266 indicators are at least 1.01 times the statewide overall average.  #>  #> At 10% of these sites, at least 267 indicators are at least 1.01 times the statewide overall average.  #>  #> At 10% of these sites, at least 268 indicators are at least 1.01 times the statewide overall average.  #>  #> At 8% of these sites, at least 269 indicators are at least 1.01 times the statewide overall average.  #>  #> At 8% of these sites, at least 270 indicators are at least 1.01 times the statewide overall average.  #>  #> At 7% of these sites, at least 271 indicators are at least 1.01 times the statewide overall average.  #>  #> At 6% of these sites, at least 272 indicators are at least 1.01 times the statewide overall average.  #>  #> At 5% of these sites, at least 273 indicators are at least 1.01 times the statewide overall average.  #>  #> At 5% of these sites, at least 274 indicators are at least 1.01 times the statewide overall average.  #>  #> At 4% of these sites, at least 275 indicators are at least 1.01 times the statewide overall average.  #>  #> At 3% of these sites, at least 276 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 277 indicators are at least 1.01 times the statewide overall average.  #>  #> At 2% of these sites, at least 278 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 279 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 280 indicators are at least 1.01 times the statewide overall average.  #>  #> At 1% of these sites, at least 281 indicators are at least 1.01 times the statewide overall average. dimnames(findings) #> NULL findings$text[2] #> [1] \"At 100% of these sites, at least 1 indicator is at least 1.01 times the statewide overall average.\" head(findings$stats[ , , 1], 15) #>      cut #> count 1.01 1.5 2 3 5 10 #>    0     0   0 0 0 0  0 #>    1     0   0 0 0 0  0 #>    2     0   0 0 0 0  0 #>    3     0   0 0 0 0  0 #>    4     0   0 0 0 0  0 #>    5     0   0 0 0 0  0 #>    6     0   0 0 0 0  0 #>    7     0   0 0 0 0  0 #>    8     0   0 0 0 0  0 #>    9     0   0 0 0 0  0 #>    10    0   0 0 0 0  0 #>    11    0   0 0 0 0  0 #>    12    0   0 0 0 0  0 #>    13    0   0 0 0 0 10 #>    14    0   0 0 0 1  7 head(findings$stats[ , 1, ], 21) #>      stat #> count count cum pct cum_pct #>    0      0 987   0     100 #>    1      0 987   0     100 #>    2      0 987   0     100 #>    3      0 987   0     100 #>    4      0 987   0     100 #>    5      0 987   0     100 #>    6      0 987   0     100 #>    7      0 987   0     100 #>    8      0 987   0     100 #>    9      0 987   0     100 #>    10     0 987   0     100 #>    11     0 987   0     100 #>    12     0 987   0     100 #>    13     0 987   0     100 #>    14     0 987   0     100 #>    15     0 987   0     100 #>    16     0 987   0     100 #>    17     0 987   0     100 #>    18     1 987   0     100 #>    19     3 986   0     100 #>    20     6 983   1     100 x = findings$stats[ , 1, ]  x[x[, \"cum_pct\"] >= 50 & x[, \"cum_pct\"] <= 80, ] #>      stat #> count count cum pct cum_pct #>   205     4 794   0      80 #>   206    10 790   1      80 #>   207     5 780   1      79 #>   208     9 775   1      79 #>   209     6 766   1      78 #>   210     6 760   1      77 #>   211     9 754   1      76 #>   212     3 745   0      75 #>   213     5 742   1      75 #>   214     9 737   1      75 #>   215     6 728   1      74 #>   216    11 722   1      73 #>   217    10 711   1      72 #>   218    10 701   1      71 #>   219     7 691   1      70 #>   220    13 684   1      69 #>   221    14 671   1      68 #>   222    11 657   1      67 #>   223     7 646   1      65 #>   224    14 639   1      65 #>   225    10 625   1      63 #>   226    12 615   1      62 #>   227     7 603   1      61 #>   228    14 596   1      60 #>   229    20 582   2      59 #>   230    12 562   1      57 #>   231    18 550   2      56 #>   232    10 532   1      54 #>   233    16 522   2      53 #>   234    17 506   2      51 #>   235    17 489   2      50 findings$stats[ 1, , ] #>       stat #> cut    count cum pct cum_pct #>   1.01     0 987   0     100 #>   1.5      0 987   0     100 #>   2        0 987   0     100 #>   3        0 987   0     100 #>   5        0 987   0     100 #>   10       0 987   0     100"},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"getblocksnearby-will-find-residentsblocks-that-are-within-specified-distance","dir":"Articles","previous_headings":"DETAILS OF BLOCKS NEAR ONE SITE","what":"getblocksnearby() will find residents/blocks that are within specified distance","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"Less 1 second 100 sites, seconds 1,000 sites, 500k / hour step","code":"sitepoints <- data.table::copy(testpoints_100)  # or  # sitepoints <- testpoints_n(100,\"block\") # random points radius <- 3 elapsed <- system.time({      sites2blocks <- getblocksnearby(     sitepoints = sitepoints,     radius = radius   )    }) # end of timed function print(elapsed) sites2blocks"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"doaggregate-will-summarize-indicators-within-each-buffer-and-overall","dir":"Articles","previous_headings":"DETAILS OF BLOCKS NEAR ONE SITE > getblocksnearby() will find residents/blocks that are within specified distance","what":"doaggregate() will summarize indicators within each buffer and overall","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# out <- doaggregate(testoutput_getblocksnearby_10pts_1miles) sites2blocks <- data.table::copy(testoutput_getblocksnearby_10pts_1miles) elapsed <- system.time({   out <- suppressWarnings(      doaggregate(sites2blocks = sites2blocks)    ) })  #> Inferring approximate radius is 1 miles, based on distances found. print(elapsed) #>    user  system elapsed  #>    0.63    0.23    1.23  names(out) #> [1] \"results_overall\"                     \"results_bysite\"                      #> [3] \"results_bybg_people\"                 \"longnames\"                           #> [5] \"count_of_blocks_near_multiple_sites\" dim(out$results_bysite) #> [1]   9 287"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"see-indicators-aggregated-over-all-people-across-all-sites","dir":"Articles","previous_headings":"DETAILS OF BLOCKS NEAR ONE SITE > getblocksnearby() will find residents/blocks that are within specified distance","what":"See indicators aggregated over all people across all sites","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"## view output of batch run aggregation #### head(cbind(overall = as.list( out$results_overall))) #>              overall #> ejam_uniq_id NA      #> pop          60740.3 #> lon          NA      #> lat          NA      #> ST           NA      #> statename    NA  ## To see just some subset of indicators, like Environmental only: cbind(overall = as.list( out$results_overall[ , ..names_e])) #>                 overall    #> pm              8.033511   #> o3              60.62275   #> cancer          26.52724   #> resp            0.2887633  #> dpm             0.3634965  #> pctpre1960      0.4127978  #> traffic.score   179.1214   #> proximity.npl   0.3872596  #> proximity.rmp   0.5952604  #> proximity.tsdf  1.353144   #> proximity.npdes 0.01370324 #> ust             5.488647   #> rsei            6492.776 cbind(overall = as.list( out$results_overall[ , ..names_d])) #>                  overall    #> Demog.Index      0.402214   #> Demog.Index.Supp 0.1772926  #> pctlowinc        0.3960105  #> pctlingiso       0.0681899  #> pctunemployed    0.05715225 #> pctlths          0.148745   #> lowlifex         0.2163654  #> pctunder5        0.06424071 #> pctover64        0.1083218  #> pctmin           0.4084175 cbind(overall = as.list( out$results_overall[ , ..names_d_subgroups])) #>                 overall      #> pcthisp         0.2547057    #> pctnhba         0.08590507   #> pctnhaa         0.0296854    #> pctnhaiana      0.008840918  #> pctnhnhpia      1.481718e-05 #> pctnhotheralone 0.0009054944 #> pctnhmulti      0.02836008   #> pctnhwa         0.5915825 cbind(overall = as.list( out$results_overall[ , ..names_e_pctile])) #>                        overall #> pctile.pm              45      #> pctile.o3              46      #> pctile.cancer          5       #> pctile.resp            4       #> pctile.dpm             79      #> pctile.pctpre1960      67      #> pctile.traffic.score   72      #> pctile.proximity.npl   93      #> pctile.proximity.rmp   79      #> pctile.proximity.tsdf  66      #> pctile.proximity.npdes 70      #> pctile.ust             79      #> pctile.rsei            89 cbind(overall = as.list( out$results_overall[ , ..names_d_pctile])) #>                         overall #> pctile.Demog.Index      64      #> pctile.Demog.Index.Supp 72      #> pctile.pctlowinc        69      #> pctile.pctlingiso       80      #> pctile.pctunemployed    63      #> pctile.pctlths          71      #> pctile.lowlifex         70      #> pctile.pctunder5        64      #> pctile.pctover64        30      #> pctile.pctmin           59 # cbind(overall = as.list( out$results_overall[ , ..names_ej_pctile]))"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"histogram-of-indicators-distribution-over-all-people-across-all-sites","dir":"Articles","previous_headings":"VISUALIZATION OF FINDINGS","what":"Histogram of indicators distribution over all people across all sites","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"hist(out$results_bysite$pctile.traffic.score, 10, xlab = \"Local traffic scores (expressed as a percentile)\",       ylab = \"count of sites in each bin, out of 1,000 sites\", freq = TRUE,       main = \"Actual distribution of scores nearby, as percentiles,       vs flat line = USA overall\") abline(h = nrow(out$results_bysite)/10)"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"mean-distance-of-each-group","dir":"Articles","previous_headings":"VISUALIZATION OF FINDINGS > Distance plots","what":"Mean distance of each group","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"# plot_distance_mean_by_group(testoutput_ejamit_1000pts_1miles$results_bybg_people)  # larger radius reveals more information y <- ejamit(testpoints_100, radius = 3)  plot_distance_mean_by_group(y$results_bybg_people) # or distance_mean_by_group() is a synonym print(distance_by_group(   y$results_bybg_people,    demogvarname = 'pctlowinc', demoglabel = 'Low Income')) distance_by_group_plot(   y$results_bybg_people,   demogvarname = 'pctlowinc', demoglabel = 'Low Income')"},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"map-blocks-near-1-site","dir":"Articles","previous_headings":"VISUALIZATION OF FINDINGS > Distance plots","what":"Map blocks near 1 site","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"","code":"x = plotblocksnearby(testpoints_n(1), radius = 3, returnmap = FALSE) #> Warning in testpoints_n(1): just want one point? whatever. #> Analyzing 1 points, radius of 3 miles around each. #> Finding Census blocks with internal point within  3  miles of the site (point), for each of 1  sites (points)... #> Stats via getblocks_diagnostics(), but BEFORE ADJUSTING UP FOR VERY SHORT DISTANCES:  #> min distance before adjustment:  0.1365426  #> max distance before adjustment:  4.585443  #>  #>  #>    Summary stats on distances reported from any sites to any nearby blocks #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> -Inf miles is max. distance to block internal point (distance_unadjusted)    #> 4.585443 miles is max. distance to average resident in block (distance reported) #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> Inf miles is shortest distance to block internal point (distance_unadjusted)    #> 0.1365426 miles is shortest distance to average resident in block (distance reported) #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> 1 unique output sites #> 84 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 84 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 84 actual unique blocks total #> 84 blocks (and their residents) have exactly 1 site nearby  #> 0 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1 is ratio of blocks including multicounting / actual count of unique blocks #> 0% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point #>  #>  #> Adjusting upwards the very short distances now... #>  Stats via getblocks_diagnostics(), AFTER ADJUSTING up FOR SHORT DISTANCES:  #> min distance AFTER adjustment:  0.1365426  #> max distance AFTER adjustment:  2.893922 #  returnmap= TRUE is to actually return the leaflet map"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/3_analyzing.html","id":"sites-vary-widely-in-count-of-blocks-nearby-depending-on-population-density","dir":"Articles","previous_headings":"POPULATION DENSITY - AVG SITE VS AVG RESIDENT","what":"Sites vary widely in count of blocks nearby, depending on population density","title":"3. Basics of Using EJAM for Analysis in RStudio","text":"blocks near site far many blocks typically near given site (population density varies) many sites near block (residents > 1 site nearby)","code":"out <- testoutput_ejamit_100pts_1miles cat(\"  \", popshare_p_lives_at_what_pct(out$results_bysite$pop, p = 0.50, astext = TRUE), \"\\n\") #>    6% of places account for 50% of the total population (approx.) cat(\"  \", popshare_at_top_n(out$results_bysite$pop, c(1, 5, 10), astext = TRUE), \"\\n\\n\") #>    1, 5, 10 places account for 18%, 46%, 58% of the total population ## Also could use this example intermediate step dataset  ## of n sites, with thousands of nearby blocks: # sites2blocks <- data.table::copy(testoutput_getblocksnearby_10pts_1miles) radius <- 3 sitepoints <- data.table::copy(testpoints_100)  sites2blocks <- getblocksnearby(sitepoints, radius, quadtree = localtree) #> Analyzing 100 points, radius of 3 miles around each. #> Finding Census blocks with internal point within  3  miles of the site (point), for each of 100  sites (points)... #> Stats via getblocks_diagnostics(), but BEFORE ADJUSTING UP FOR VERY SHORT DISTANCES:  #> min distance before adjustment:  0.01569589  #> max distance before adjustment:  6.925482  #>  #>  #>    Summary stats on distances reported from any sites to any nearby blocks #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> -Inf miles is max. distance to block internal point (distance_unadjusted)    #> 6.925482 miles is max. distance to average resident in block (distance reported) #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> Inf miles is shortest distance to block internal point (distance_unadjusted)    #> 0.01569589 miles is shortest distance to average resident in block (distance reported) #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> 100 unique output sites #> 1,657 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 165,664 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 146,721 actual unique blocks total #> 127,778 blocks (and their residents) have exactly 1 site nearby  #> 18,943 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1.129109 is ratio of blocks including multicounting / actual count of unique blocks #> 12.9% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point #>  #>  #> Adjusting upwards the very short distances now... #>  Stats via getblocks_diagnostics(), AFTER ADJUSTING up FOR SHORT DISTANCES:  #> min distance AFTER adjustment:  0.027  #> max distance AFTER adjustment:  2.999998 names(sites2blocks) #> [1] \"ejam_uniq_id\"        \"blockid\"             \"distance\"            #> [4] \"blockwt\"             \"bgid\"                \"distance_unadjusted\" getblocks_summarize_blocks_per_site(sites2blocks)  #> Range and mean of count of blocks nearby the various sites: #>  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      11     136     602    1046    1336    5735 # print() shows more info returned invisibly getblocks_diagnostics(sites2blocks) #>  #>    Summary stats on distances reported from any sites to any nearby blocks #>  #> 2.999998 miles is max. distance to block internal point (distance_unadjusted)    #> 2.999998 miles is max. distance to average resident in block (distance reported)    #> 0.01569589 miles is shortest distance to block internal point (distance_unadjusted)    #> 0.027 miles is shortest distance to average resident in block (distance reported)    #> 112 block distances were adjusted (these stats may count some blocks twice if adjusted at 2+ sites) #>   81 block distances were adjusted up (reported dist to avg resident is > dist to block internal point) #>   31 block distances were adjusted down (reported < unadjusted) #> 76 unique sites had one or more block distances adjusted due to large block and short distance to block point #>  #> 100 unique output sites #> 1,046 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 104,621 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 94,859 actual unique blocks total #> 85,097 blocks (and their residents) have exactly 1 site nearby  #> 9,762 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1.102911 is ratio of blocks including multicounting / actual count of unique blocks #> 10.3% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point # Use data.table package here library(data.table) # Very few blocks are within a radius of 1/4 mile. # Hundreds are often within 1 mile, but sometimes there are  # only a handful or even zero. s2b_stats <- sites2blocks[ , .(   avgDistance = round(mean(distance), 2),   blocksfound = .N,    blocks_within_1mile = sum(distance <= 1),   blocks_within_0.75   = sum(distance <= 0.75),   blocks_within_0.25  = sum(distance <= 0.25) ), by = 'ejam_uniq_id'][order(blocksfound), ] setorder(s2b_stats, ejam_uniq_id) head(s2b_stats) #>    ejam_uniq_id avgDistance blocksfound blocks_within_1mile blocks_within_0.75 #>           <int>       <num>       <int>               <int>              <int> #> 1:            1        1.66         341                  88                 61 #> 2:            2        2.13          56                   3                  2 #> 3:            3        1.50        2111                 620                378 #> 4:            4        1.65         735                 210                130 #> 5:            5        0.90         405                 298                255 #> 6:            6        2.00          48                   4                  4 #>    blocks_within_0.25 #>                 <int> #> 1:                  6 #> 2:                  0 #> 3:                 36 #> 4:                 12 #> 5:                 50 #> 6:                  0 # CDF of how many blocks are nearby a site plot(sort(s2b_stats$blocks_within_1mile),       main = \"How many blocks are near each facility?\",       ylab = \"# of blocks (whose internal point is) within 1 mile of each site\",       xlab = paste0(nrow(s2b_stats),\" facilities ranked by # of blocks nearby\")) abline(h = quantile(s2b_stats$blocks_within_1mile, probs = (0:4) * 0.25)) abline(h = mean(s2b_stats$blocks_within_1mile), col = \"red\") # Histogram of how many blocks are nearby a site hist(sites2blocks[,.N, by = \"ejam_uniq_id\"][, N], 20,       xlab = \"How many blocks are nearby?\",       ylab = \"Frequency (# of sites)\",       main = \"A given site may have zero to hundreds of blocks nearby\",       sub = \"A typical site in this example has about 100 blocks nearby\") DT::datatable(s2b_stats,  rownames = FALSE) # more summaries showing there may be only 1 block or hundreds within 1 mile quantile(s2b_stats$blocks_within_1mile, probs = (0:4) * 0.25) t(summary(s2b_stats)) # map the sites with popups about how many blocks were found near each if (!('ejam_uniq_id' %in% names(sitepoints))) {sitepoints$ejam_uniq_id <- seq.int(length.out = NROW(sitepoints))} s2b_stats <- merge(sitepoints, s2b_stats, by = \"ejam_uniq_id\") mapfast(s2b_stats, radius = radius) # Some places have very few -- if any -- blocks within 1 mile  tail(s2b_stats[order(s2b_stats$blocks_within_1mile, decreasing = T),                 c('ejam_uniq_id', 'blocks_within_1mile')], 3)  #>    ejam_uniq_id blocks_within_1mile #> 14           14                   1 #> 19           19                   1 #> 45           45                   1  # Some places have hundreds nearby: a 1 mile radius is huge  # within a dense urban area  head(s2b_stats[order(s2b_stats$blocks_within_1mile, decreasing = T),                 c('ejam_uniq_id', 'blocks_within_1mile')], 3) #>    ejam_uniq_id blocks_within_1mile #> 57           57                 791 #> 42           42                 762 #> 21           21                 732 densest <- s2b_stats$ejam_uniq_id[order(   s2b_stats$blocks_within_1mile, decreasing = T)][1] plotblocksnearby(sitepoints = sitepoints[sitepoints$ejam_uniq_id == densest, ]) #> Analyzing 1 points, radius of 3 miles around each. #> Finding Census blocks with internal point within  3  miles of the site (point), for each of 1  sites (points)... #> Stats via getblocks_diagnostics(), but BEFORE ADJUSTING UP FOR VERY SHORT DISTANCES:  #> min distance before adjustment:  0.02342987  #> max distance before adjustment:  6.646285  #>  #>  #>    Summary stats on distances reported from any sites to any nearby blocks #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> -Inf miles is max. distance to block internal point (distance_unadjusted)    #> 6.646285 miles is max. distance to average resident in block (distance reported) #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> Inf miles is shortest distance to block internal point (distance_unadjusted)    #> 0.02342987 miles is shortest distance to average resident in block (distance reported) #> Warning in max(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to max; returning -Inf #> Warning in min(x$distance_unadjusted, na.rm = TRUE): no non-missing arguments #> to min; returning Inf #> 1 unique output sites #> 8,190 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 8,190 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 8,190 actual unique blocks total #> 8,190 blocks (and their residents) have exactly 1 site nearby  #> 0 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1 is ratio of blocks including multicounting / actual count of unique blocks #> 0% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point #>  #>  #> Adjusting upwards the very short distances now... #>  Stats via getblocks_diagnostics(), AFTER ADJUSTING up FOR SHORT DISTANCES:  #> min distance AFTER adjustment:  0.027  #> max distance AFTER adjustment:  2.999248 #> Warning in plotblocksnearby(sitepoints = sitepoints[sitepoints$ejam_uniq_id == #> : siteidvarname specified ('ejam_uniq_id') is already a colname of sitepoints, #> but note it is not equal to rownumbers as assumed by getblocksnearby() # Within a 1 mile radius, the blocks found tend to be about 2/3 of a mile from the site at the center. summary(s2b_stats$avgDistance) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.900   1.765   1.930   1.855   2.042   2.500"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"note-these-features-may-still-be-in-development-and-untested-for-use-outside-epas-network-","dir":"Articles","previous_headings":"","what":"NOTE: These features may still be in development and untested for use outside EPA’s network.","title":"5. Using the EJScreen API via EJAM","text":"EJAM includes EJAMejscreen package, set functions data facilitate access EJScreen data reports, using API provided EJScreen. things: API wrapper: Makes easier use EJScreen API R Batch processor: Includes function lets obtain batch EJScreen results via API, assembled table. Web App: Provides shiny R web app interface helps use batch tool. provides access EJScreen API loop batch mode. uses EJScreen run reports multiple places one time, somewhat slow handful places, exactly replicates EJScreen results. Web Module: EJAM include shiny module within EJAM’s web app UI, provides access one place.","code":""},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"get-one-ejscreen-report-in-your-web-browser","dir":"Articles","previous_headings":"NOTE: These features may still be in development and untested for use outside EPA’s network.","what":"Get one EJScreen report in your web browser","title":"5. Using the EJScreen API via EJAM","text":"works best one site time, provide results table, just formatted web page EJScreen Community Report directly EJScreen.","code":"# Browser opens to view one site report browseURL(   url_ejscreen_report(     lon = -92.380556,      lat = 31.316944,      radius = 3   ) )  # Get the URL for each site report url_ejscreen_report(   lon = testpoints_10$lon,    lat = testpoints_10$lat,    radius = 3 )  # Open each webpage in a browser for (i in 1:2) {   browseURL(url_ejscreen_report(     lon = testpoints_10$lon[1:2],      lat = testpoints_10$lat[1:2],      radius = 3)[i]) }"},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"get-ejscreen-results-tables-in-rstudio-in-tables-for-a-list-of-sites","dir":"Articles","previous_headings":"NOTE: These features may still be in development and untested for use outside EPA’s network.","what":"Get EJScreen results tables in RStudio (in tables, for a list of sites)","title":"5. Using the EJScreen API via EJAM","text":"RStudio, can use EJAM’s EJScreen API code like :","code":"# To interactively pick your own spreadsheet file from your local drive,  # that has lat and lon as two column headings and then one row per site:  x <- ejscreenit(radius = 1) # will prompt you for excel file with lat lon in it x <- ejscreenit(data.frame(lon = c(-111,-113), lat = c(41,43)), radius = 2) names(x) x$map x$table # ejscreenit_see_table(x)"},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"get-ejscreen-results-tables-in-a-local-web-app-not-tested","dir":"Articles","previous_headings":"NOTE: These features may still be in development and untested for use outside EPA’s network.","what":"Get EJScreen results tables in a local web app ***not tested","title":"5. Using the EJScreen API via EJAM","text":"","code":"### *** NOT TESTED - MAY NO LONGER WORK AS SHIFT TO USING MODULE VERSION # If you have the local source package EJAMejscreenapi you can do this: # setwd(\"YOUR PATH GOES HERE  EJAMejscreenapi\") library(EJAMejscreenapi) EJAMejscreenapi::run_app()"},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"get-ejscreen-results-tables-in-a-local-web-app-module-not-tested","dir":"Articles","previous_headings":"NOTE: These features may still be in development and untested for use outside EPA’s network.","what":"Get EJScreen results tables in a local web app module ***not tested","title":"5. Using the EJScreen API via EJAM","text":"","code":"library(EJAMejscreenapi)  library(shiny); library(magrittr); library(leaflet)   # must attach all of those manually for this to work? source(system.file(\"global.R\", package = \"EJAMejscreenapi\")) default_calculate_ratios <- TRUE use_ejscreenit_tf <- FALSE ######################### # TEST_UI <- function(request) {   shiny::fluidPage(     tabsetPanel(       tabPanel(         title = \"api app\",         shiny::h2('EJScreen API batch tool packaged with EJAM'),          # EJAM:::mod_ejscreenapi_ui(\"TESTID\", simpleradius_default_for_ui = 2),         mod_ejscreenapi_ui(\"TESTID\", simpleradius_default_for_ui = 2),         br()       ))) } ######################### # TEST_SERVER <- function(input, output, session) {   #x <- EJAM:::mod_ejscreenapi_server(   x <-     mod_ejscreenapi_server(     \"TESTID\",      default_points_shown_at_startup_react = reactive(testpoints_5[1:2,]),     use_ejscreenit = use_ejscreenit_tf   )   output$testinfo2 <- renderText(     cat(\"x names:  \", paste0(names(x()), collapse = \", \"), \"\\n\")   )   output$results <- DT::renderDT({x()},                                          options = list(                                           selection = 'multiple',                                           dom = 'rtip', # specify 4 DOM elements:                                            # processing, table, info, pagination                                            # per https://datatables.net/examples/basic_init/dom.html                                           scrollX = TRUE,                                            searchPanes = TRUE  # does this work?                                         ),                                         escape = FALSE    )   # *** CAUTION ***   # escape= TRUE is better for security reasons (XSS attacks).   # escape= FALSE lets ejscreen URL links work,    #   but not links from ECHO table download. } ######################### #  shinyApp(ui = TEST_UI, server = TEST_SERVER) # Try module in mini/test app"},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"compare-numbers-provided-by-ejam-and-ejscreen-api-comparing-estimated-population-indicator-scores-etc-","dir":"Articles","previous_headings":"","what":"Compare numbers provided by EJAM and EJScreen API (comparing estimated population, indicator scores, etc.)","title":"5. Using the EJScreen API via EJAM","text":"","code":"################# #  # Run (potentially long) analysis in EJScreen,  # Pick sample of randomly selected EPA-regulated facilities in the FRS: # n <- 30 # or 1,000 sites, e.g. # pts <- testpoints_n(n, weighting = 'frs') # radius <- 3 # (approx 40 minutes for 1,000 points, maybe ) # and also in EJAM ## vs <- ejscreen_vs_ejam(pts, radius = radius, include_ejindexes = TRUE) ################# #  # or to save time, look at just 500 sites and  # just 1 mile radius, already run in ejscreenit() # About 10-15 seconds in EJAM: testoutput_ejamit_500_1miles <- ejamit(testpoints_500, radius = 1,                                           include_ejindexes = TRUE) # setdiff(1:500, testoutput_ejamit_500_1miles$results_bysite$ejam_uniq_id ) # all.equal(1:500, testoutput_ejscreenit_500$table$sitenumber ) vs <- EJAM:::ejscreen_vs_ejam_alreadyrun(   apisite = testoutput_ejscreenit_500$table,    ejamsite = testoutput_ejamit_500_1miles$results_bysite ) ################# #   # See summary stats on the comparison  sum_vs <- ejscreen_vs_ejam_summary(vs) q <- ejscreen_vs_ejam_summary_quantiles(   vs, mystat = 'ratio',    myvars = c('pop',  \"blockcount_near_site\", names_these), digits = 2) q[order(q[, \"95%\"], decreasing = F), c(\"50%\", \"95%\")]  ## examine one site closely ejscreen_vs_ejam_see1(   vs, mysite = 1,    myvars = c('pop', \"blockcount_near_site\")) ejscreen_vs_ejam_see1(vs, mysite = 1,                        myvars = c('lowlifex', \"Demog.Index.Supp\")) ejscreen_vs_ejam_see1map(1, x = vs)   # or to see some related info: out1 = testoutput_ejscreenit_500$table out1 = out1[!is.na(out1$pm), ] out1$id = 1:NROW(out1) ejamsite = ejamit(   sitepoints = out1[ , c(\"lat\", \"lon\")], radius = 1)$results_bysite ejamsite$id <- ejamsite$ejam_uniq_id missingdatarows <- setdiff(1:NROW(out1), ejamsite$ejam_uniq_id) out1 <- out1[!(1:NROW(out1) %in% missingdatarows), ]"},{"path":"https://usepa.github.io/EJAM/articles/5_ejscreenapi.html","id":"compare-speeds-for-ejam-and-ejscreen-api","dir":"Articles","previous_headings":"","what":"Compare Speeds for EJAM and EJScreen API","title":"5. Using the EJScreen API via EJAM","text":"EJAM designed provide results large numbers sites quickly, can analyze well 100,000 sites per hour, can analyze 1,000 sites something like 10 20 seconds (assuming already initialized loaded data indexing, needs done front can take minute). internal (exported) EJAM EJAMejscreenapi functions: speedreport speedmessage speedtest speedtest_plot speedtable_summarize speedtable_expand","code":"speeds <- EJAM:::speedtest(n = 100, radii = c(1,3,5,6.2,10)) ## ejamit() just combines getblocksnearby() and doaggregate() sitepoints <- testpoints_1000 radius <- 1 # elapsed <- system.time({ began = Sys.time() out2 <- ejamit(   sitepoints =  sitepoints  ,   radius = radius ) #> Finding blocks nearby. #> Warning in ejamit(sitepoints = sitepoints, radius = radius): sitepoints did not #> contain a column named ejam_uniq_id, so one was added #> Analyzing 1000 points, radius of 1 miles around each. #> Aggregating at each buffer and overall. #> Warning in table_round(x): Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #EJAM:::speedreport(began, Sys.time(), n = NROW(sitepoints)) # }) # print(elapsed)"},{"path":[]},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"public-access","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Public Access","title":"6. Future Plans and Ideas for EJAM","text":"Ultimately, version EJAM made available public, initially tested used within EPA, just EJScreen launched internally 2012 went public 2015. public version carefully designed balance user-friendliness visual interface features, relevance public find useful, support includes appropriate documentation user support. 2024, EJAM tested launch internally within EPA, explore works still needed, including ideas plans listed .","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"counts-of-nearby-points-of-interest","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Counts of nearby points of interest","title":"6. Future Plans and Ideas for EJAM","text":"feature planned able report number user-specified points interest (e.g., schools) location. example, report many schools analyzed location. report counts analysis circular buffers (e.g., # schools near facility analyzed), also FIPS Census units (e.g., # schools County) polygons/shapefiles (e.g., # schools high-risk zone).","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"facility-density-scores-for-all-epa-regulated-facilities","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Facility Density Scores for all EPA-regulated Facilities","title":"6. Future Plans and Ideas for EJAM","text":"facility density indicator may explored pre-calculated, summarize proximity types EPA-regulated facilities, certain subcategories, every community US within one State interest. similar existing proximity indicators RMP score EJScreen, cover larger range facilities.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"proximity-scores-for-user-specified-sites","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Proximity Scores for User-Specified Sites","title":"6. Future Plans and Ideas for EJAM","text":"feature planned able quickly calculate new proximity indicator every block group US, represent counts distances user-specified points facilities. similar existing proximity indicators RMP score EJScreen, calculated fly user-specified set points.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"written-report","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Written Report","title":"6. Future Plans and Ideas for EJAM","text":"EJAM designed provide default, standard written report, feature still active development early 2024. EJAM provide written report text, graphics, maps, ready user print, download, share, use. report Word document, one can edit offline needed. Users also can choose use just selected tables graphics data files (individual sites summary statistics).","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"methods-for-identifying-and-focusing-on-key-findings","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Methods for Identifying and Focusing on Key Findings","title":"6. Future Plans and Ideas for EJAM","text":"Communicating key findings challenging large number metrics available across multiple locations multiple demographic groups. simple tools may able help initial filtering results, suggest might highlighted. explored written report, particularly ways provide Executive Summary.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"visualization-tools","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Visualization Tools","title":"6. Future Plans and Ideas for EJAM","text":"variety plots maps explored ways communicate rich data results calculated EJAM. example, EJAM R functions can calculate display detailed estimates range residential distances facilities within demographic subgroup - type visualization incorporated web app appears interest . Another possibility plots, maps, tables made interact sync , supports useful data exploration.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"user-specified-indicators","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"User-specified Indicators","title":"6. Future Plans and Ideas for EJAM","text":"EJAM future also able analyze, aggregate, report demographic indicators (e.g., Census ACS variables), include user-selected EPA-hosted layers, even user-provided data. words, analysis able include layers risks concentrations (block group resolution), user-provided scores block group.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"api","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"API","title":"6. Future Plans and Ideas for EJAM","text":"provide flexibility help avoid duplication effort, EJAM API planned, provide access services fast identification nearby blocks points, summarization (aggregation blocks block groups), data.","code":""},{"path":"https://usepa.github.io/EJAM/articles/6_future_plans.html","id":"resolution","dir":"Articles","previous_headings":"Future Plans and Ideas for EJAM as of 2024","what":"Resolution","title":"6. Future Plans and Ideas for EJAM","text":"EJAM designed growth mind, assuming specific indicators interest expand change time. even possible multiple resolutions data need analyzed, block, block group, tract data different indicators. subsequent refinement might even use high-resolution raster grid population estimates rather Census Block counts currently used buffering weighting block group scores partially included block groups.","code":""},{"path":"https://usepa.github.io/EJAM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Corrales. Maintainer.","code":""},{"path":"https://usepa.github.io/EJAM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Corrales MA (2024). Environmental Justice Analysis Multisite (EJAM) Tool. United States Environmental Protection Agency, Washington, DC. https://usepa/github.io/EJAM/","code":"@Manual{,   author = {Mark A. Corrales},   title = {Environmental Justice Analysis Multisite (EJAM) Tool},   address = {Washington, DC},   institution = {United States Environmental Protection Agency (US EPA)},   year = {2024},   url = {https://usepa.github.io/EJAM/}, }"},{"path":"https://usepa.github.io/EJAM/CONTRIBUTING.html","id":"welcome","dir":"","previous_headings":"","what":"Welcome!","title":"NA","text":"’re glad ’re thinking contributing EPA open source project! ’re unsure anything, just ask — submit issue pull request anyway. worst can happen ’ll politely ask change something. appreciate friendly contributions. encourage read project’s CONTRIBUTING policy, LICENSE, README. contributions project released MIT dedication CCO-1.0 license file dedication. submitting pull request issue, agreeing comply waiver copyright interest. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/index.html","id":"section","dir":"","previous_headings":"","what":"EJAM Environmental Justice Analysis Multisite","title":"EJAM Environmental Justice Analysis Multisite","text":"EJAM makes easy see demographic environmental information summarized across list places nation. Using EJAM like running EJScreen report, hundreds thousands places, time. EJAM lets quickly check summary report, explore interactive maps, tables, plots, download summary detailed spreadsheet. GIS methods accurate EJScreen uses highly optimized fast. EJAM R Package Analysts Developers written R programming language, source code GitHub. used RStudio, EJAM package provides functions help analysts work block group data, points, polygons, quickly aggregate compare large numbers locations. Note EJAM also can used web app R/RStudio users package installed shiny app launched locally user’s computer. EJAM yet available general public website. web app tested internal use EPA early 2024, use internally 2024, user-friendly version intended made available public future. EJAM provided US Environmental Protection Agency (US EPA), actively developed new versions continue tested released time. EJAM?","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"ejam-as-a-web-app","dir":"","previous_headings":"","what":"EJAM as a Web App","title":"EJAM Environmental Justice Analysis Multisite","text":"Using EJAM Web App","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"the-ejam-r-package-for-analysts-and-developers","dir":"","previous_headings":"","what":"The EJAM R Package for Analysts and Developers","title":"EJAM Environmental Justice Analysis Multisite","text":"1. Installing EJAM R package 2. Quick Start Guide EJAM R package 3. Basics Using EJAM Analysis RStudio 4. Advanced Features EJAM R package 5. Accessing Batch EJScreen Reports via EJAM 6. Future Plans EJAM Reference Manual Documenting EJAM Package Functions Data GitHub Repository - Code Data, USEPA/EJAM","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"open-source-code-policy","dir":"","previous_headings":"","what":"Open-Source Code Policy","title":"EJAM Environmental Justice Analysis Multisite","text":"Effective August 8, 2016, OMB Mandate: M-16-21; Federal Source Code Policy: Achieving Efficiency, Transparency, Innovation Reusable Open Source Software applies new custom-developed code created procured EPA consistent scope applicability requirements Office Management Budget’s (OMB’s) Federal Source Code Policy. general, states new custom-developed code Federal Agencies made available reusable open-source code. EPA specific implementation OMB Mandate M-16-21 addressed System Life Cycle Management Procedure. EPA chosen use GitHub version control system well inventory open-source code projects. EPA uses GitHub inventory custom-developed, open-source code generate necessary metadata file posted code.gov broad reuse compliance OMB Mandate M-16-21. questions want read , check EPA Open Source Project Repo EPA’s Interim Open Source Code Guidance.","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"EJAM Environmental Justice Analysis Multisite","text":"Contribute encourage analysts developers test EJAM R package EJAM shiny app, provide feedback, share code, welcome suggestions contributions.","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"EJAM Environmental Justice Analysis Multisite","text":"submitting pull request issue, agreeing comply waiver copyright interest.","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"disclaimer-for-app","dir":"","previous_headings":"","what":"Disclaimer for App","title":"EJAM Environmental Justice Analysis Multisite","text":"software/application approved release U.S. Environmental Protection Agency (USEPA). Although software subjected rigorous review, USEPA reserves right update software needed pursuant analysis review. warranty, expressed implied, made USEPA U.S. Government functionality software related material shall fact release constitute warranty. Furthermore, software released condition neither USEPA U.S. Government shall held liable damages resulting authorized unauthorized use.","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"disclaimer-for-github-repository-content","dir":"","previous_headings":"","what":"Disclaimer for GitHub Repository Content","title":"EJAM Environmental Justice Analysis Multisite","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity, confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":"https://usepa.github.io/EJAM/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"EJAM Environmental Justice Analysis Multisite","text":"questions comments, please contact Mark Corrales (corrales.mark@epa.gov).","code":""},{"path":"https://usepa.github.io/EJAM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 U.S. Federal Government (countries recognized) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://usepa.github.io/EJAM/reference/acs_bycounty.html","id":null,"dir":"Reference","previous_headings":"","what":"download ACS 5year data from Census API, — acs_bycounty","title":"download ACS 5year data from Census API, — acs_bycounty","text":"download ACS 5year data Census API,","code":""},{"path":"https://usepa.github.io/EJAM/reference/acs_bycounty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download ACS 5year data from Census API, — acs_bycounty","text":"","code":"acs_bycounty(myvars = \"B03002_001\", myst = \"DE\", yr = 2021)"},{"path":"https://usepa.github.io/EJAM/reference/acs_bycounty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download ACS 5year data from Census API, — acs_bycounty","text":"myvars optional .extracted x, one ACS5 variables like \"B03002_001\" myst abbreviation one state, like \"DE\" yr like 2021 2022 end 5 year ACS","code":""},{"path":"https://usepa.github.io/EJAM/reference/acs_bycounty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"download ACS 5year data from Census API, — acs_bycounty","text":"tibble table output acs_bycounty() .e., output get_acs() tidycensus pkg","code":""},{"path":"https://usepa.github.io/EJAM/reference/acs_bycounty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"download ACS 5year data from Census API, — acs_bycounty","text":"","code":"x     <- acs_bycounty(myvars = \"B03002_003\", myst = \"NY\", yr = 2022) # nhwa #> Error in acs_bycounty(myvars = \"B03002_003\", myst = \"NY\", yr = 2022): requires tidycensus and other packages not yet added to EJAM pkg   denom <- acs_bycounty(myvars = \"B03002_001\", myst = \"NY\", yr = 2022) # pop #> Error in acs_bycounty(myvars = \"B03002_001\", myst = \"NY\", yr = 2022): requires tidycensus and other packages not yet added to EJAM pkg   z = x #> Error in eval(expr, envir, enclos): object 'x' not found   z$estimate = x$estimate / denom$estimate #> Error in eval(expr, envir, enclos): object 'x' not found   z$moe = 0  # x$moe / denom$estimate # need to calculate using census guidance if at all #> Error in z$moe = 0: object 'z' not found   # z$variable = \"pctnhwa\" # not used if myvarnames is given   plot_bycounty(z, myvarnames = \"Percent NonHispanic White Alone (i.e., Not People of Color)\",                 labeltype = scales::label_percent()) #> Error in plot_bycounty(z, myvarnames = \"Percent NonHispanic White Alone (i.e., Not People of Color)\",     labeltype = scales::label_percent()): requires tidycensus and other packages not yet added to EJAM pkg"},{"path":"https://usepa.github.io/EJAM/reference/address_from_table.html","id":null,"dir":"Reference","previous_headings":"","what":"get USPS addresses from a table of that info — address_from_table","title":"get USPS addresses from a table of that info — address_from_table","text":"get USPS addresses table info","code":""},{"path":"https://usepa.github.io/EJAM/reference/address_from_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get USPS addresses from a table of that info — address_from_table","text":"","code":"address_from_table(x)"},{"path":"https://usepa.github.io/EJAM/reference/address_from_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get USPS addresses from a table of that info — address_from_table","text":"x data.frame address info column(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/address_from_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get USPS addresses from a table of that info — address_from_table","text":"vector USPS addresses, 1 per row x","code":""},{"path":"https://usepa.github.io/EJAM/reference/address_from_table_goodnames.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to get USPS addresses from a table that has correct colnames — address_from_table_goodnames","title":"utility to get USPS addresses from a table that has correct colnames — address_from_table_goodnames","text":"utility get USPS addresses table correct colnames","code":""},{"path":"https://usepa.github.io/EJAM/reference/address_from_table_goodnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to get USPS addresses from a table that has correct colnames — address_from_table_goodnames","text":"","code":"address_from_table_goodnames(   x,   colnames_allowed = c(\"address\", \"street\", \"city\", \"state\", \"zip\") )"},{"path":"https://usepa.github.io/EJAM/reference/address_from_table_goodnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to get USPS addresses from a table that has correct colnames — address_from_table_goodnames","text":"x table columns overlap colnames_allowed colnames_allowed optional","code":""},{"path":"https://usepa.github.io/EJAM/reference/address_from_table_goodnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to get USPS addresses from a table that has correct colnames — address_from_table_goodnames","text":"vector USPS addresses","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/all_equal_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - check different versions of function with same name in 2 packages — all_equal_functions","title":"UTILITY - check different versions of function with same name in 2 packages — all_equal_functions","text":"used dupenames() check different versions function name 2 packages","code":""},{"path":"https://usepa.github.io/EJAM/reference/all_equal_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - check different versions of function with same name in 2 packages — all_equal_functions","text":"","code":"all_equal_functions(   fun = \"latlon_infer\",   package1 = \"EJAM\",   package2 = \"EJAMejscreenapi\" )"},{"path":"https://usepa.github.io/EJAM/reference/all_equal_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTILITY - check different versions of function with same name in 2 packages — all_equal_functions","text":"fun quoted name function, like \"latlon_infer\" package1 quoted name package, like \"EJAM\" package2 quoted name package, like \"EJAMejscreenapi\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/all_equal_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UTILITY - check different versions of function with same name in 2 packages — all_equal_functions","text":"TRUE FALSE","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/app_run_EJAM.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch EJAM as shiny web app — app_run_EJAM","title":"Launch EJAM as shiny web app — app_run_EJAM","text":"launch Shiny web app RStudio","code":""},{"path":"https://usepa.github.io/EJAM/reference/app_run_EJAM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch EJAM as shiny web app — app_run_EJAM","text":"","code":"app_run_EJAM(   onStart = NULL,   options = list(),   enableBookmarking = \"server\",   uiPattern = \"/\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/app_run_EJAM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch EJAM as shiny web app — app_run_EJAM","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. Maybe something like sitepoints=\"latlondata.xlsx\" sitepoints=testpoints_100 See ?golem::get_golem_options details.","code":""},{"path":"https://usepa.github.io/EJAM/reference/app_run_EJAM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch EJAM as shiny web app — app_run_EJAM","text":"alias run_app()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/app_server.html","id":null,"dir":"Reference","previous_headings":"","what":"app_server - EJAM app server — app_server","title":"app_server - EJAM app server — app_server","text":"app_server - EJAM app server","code":""},{"path":"https://usepa.github.io/EJAM/reference/app_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"app_server - EJAM app server — app_server","text":"","code":"app_server(input, output, session)"},{"path":"https://usepa.github.io/EJAM/reference/app_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"app_server - EJAM app server — app_server","text":"input, output, session Internal parameters shiny. REMOVE.","code":""},{"path":"https://usepa.github.io/EJAM/reference/app_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"app_ui - The application User-Interface — app_ui","title":"app_ui - The application User-Interface — app_ui","text":"app_ui - application User-Interface","code":""},{"path":"https://usepa.github.io/EJAM/reference/app_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"app_ui - The application User-Interface — app_ui","text":"","code":"app_ui(request)"},{"path":"https://usepa.github.io/EJAM/reference/app_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"app_ui - The application User-Interface — app_ui","text":"request Internal parameter {shiny}. REMOVE.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ask_number.html","id":null,"dir":"Reference","previous_headings":"","what":"utility - interactive prompt in RStudio to ask user to specify number like radius — ask_number","title":"utility - interactive prompt in RStudio to ask user to specify number like radius — ask_number","text":"askradius()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ask_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility - interactive prompt in RStudio to ask user to specify number like radius — ask_number","text":"","code":"ask_number(   default = 3,   title = \"Radius\",   message = \"Within how many miles of each point?\" )"},{"path":"https://usepa.github.io/EJAM/reference/ask_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility - interactive prompt in RStudio to ask user to specify number like radius — ask_number","text":"default default value number provided returned title title popup dialog box, like \"Radius\" message question, like, \"Within many miles point?\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/ask_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility - interactive prompt in RStudio to ask user to specify number like radius — ask_number","text":"single number","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/avg.in.us.html","id":null,"dir":"Reference","previous_headings":"","what":"avg.in.us (DATA) national averages of key indicators, for convenience — avg.in.us","title":"avg.in.us (DATA) national averages of key indicators, for convenience — avg.in.us","text":"also available via usastats created /data-raw/datacreate_avg..us","code":""},{"path":"https://usepa.github.io/EJAM/reference/bgej.html","id":null,"dir":"Reference","previous_headings":"","what":"bgej (DATA) EJScreen EJ Indexes for Census block groups — bgej","title":"bgej (DATA) EJScreen EJ Indexes for Census block groups — bgej","text":"bgej (DATA) EJScreen EJ Indexes Census block groups","code":""},{"path":"https://usepa.github.io/EJAM/reference/bgej.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bgej (DATA) EJScreen EJ Indexes for Census block groups — bgej","text":"08/2023 EJScreen 2.2 version data, used ACS 2017-2021. year re-created latest version. See https://www.epa.gov/ejscreen","code":""},{"path":"https://usepa.github.io/EJAM/reference/bgpts.html","id":null,"dir":"Reference","previous_headings":"","what":"bgpts (DATA) lat lon of popwtd center of blockgroup, and count of blocks per block group — bgpts","title":"bgpts (DATA) lat lon of popwtd center of blockgroup, and count of blocks per block group — bgpts","text":"just list US block groups many blocks ... also lat lon roughly blockgroup","code":""},{"path":"https://usepa.github.io/EJAM/reference/bgpts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bgpts (DATA) lat lon of popwtd center of blockgroup, and count of blocks per block group — bgpts","text":"point used bg Census 2020 population weighted mean blocks' internal points. gives approximation people live bg , useful situations.","code":"As of 8/2023 it is the EJScreen 2.2 version of data, which uses ACS 2017-2021   and Census 2020. it has all US States, DC, PR, but not  \"AS\" \"GU\" \"MP\" \"VI\"      How lat lon were estimated:   # Now, for Census 2020 blocks, create pop wtd centroids lat lon for each block group ####   #  using  blockwts and   blockpoints    bgpts_blocks <- copy(blockpoints) # not essential but ok to make sure we do not change blockpoints itself by reference in data.table operations  # all.equal(bgpts$blockid , blockwts$blockid)  bgpts_blocks[ , bgid    := blockwts$bgid]  bgpts_blocks[ , blockwt := blockwts$blockwt]  # get pop wtd mean of lat, and same for lon, by bgid  bgpts <- bgpts_blocks[ , lapply(.SD, FUN = function(x) stats::weighted.mean(x, w = blockwt, na.rm = TRUE)), .SDcols = c('lat', 'lon') , by = 'bgid']  rm( bgpts_blocks)  # add the bgfips column, so it has bgfips, bgid, lat, lon  # all.equal(bgpts$bgid,bgid2fips$bgid)  bgpts[ , bgfips := bgid2fips$bgfips]  # setnames(bgpts, 'bgfips', 'FIPS')    # BUT NOTE this census2020 block table has PR but lacks \"AS\" \"GU\" \"MP\" \"VI\" ####  # > uniqueN( blockid2fips[,substr(blockfips,1,2)])  # [1] 52  # length(unique(EJSCREEN_Full_with_AS_CNMI_GU_VI$ST_ABBREV)) # which is in the package EJAMejscreendata  # [1] 56  #   dim(bgejam)  # [1] 242,940    155  #   dim(bg22)  # [1] 242,335    157  #  # so how do we get latlon for bg in as/gu/mp/vi ?  ?####    # view those block group points on a map (plot only a subset which is enough)  sam <- sample(seq_along(bgpts$bgid),5000)   plot(x = bgpts$lon[sam], y = bgpts$lat[sam], pch = '.')    # view one state, florida, where 12 are the 1st 2 digits of the FIPS:  # bgpts[bgid2fips[substr(bgfips,1,2) == '12', ], on = 'bgid']  xx='12'  mystate <- bgpts[bgid2fips[substr(bgfips, 1, 2) == xx, ], on = 'bgid'][ , .(lon, lat)]   plot(mystate, pch = '.')  rm(mystate, xx)          How blockcounts were done:       need  data.table pkg   bg_blockcounts <- blockwts[ , .(blockcount = uniqueN(.SD)), by=bgid]   sum(bg_blockcounts$blockcount == 1)     # [1] 1874 blockgroups have only 1 block   sum(bg_blockcounts$blockcount == 1000)  the max is 1000 blocks in a bg     # # [1] 22   round(100*table(bg_blockcounts[blockcount <20, blockcount]) / nrow(bg_blockcounts) ,1)     # about 1 to 3      #   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19      # 0.8 1.2 1.3 1.4 1.5 2.1 2.2 2.4 2.6 2.8 2.8 3.0 3.0 2.9 3.0 2.9 2.8 2.7 2.5      all.equal(bgpts$bgid, bg_blockcounts$bgid)   bgpts[ , blockcount := bg_blockcounts$blockcount]   dim(bgpts)          # 242335  x    5   usethis::use_data(bgpts) # saved for EJAM package"},{"path":"https://usepa.github.io/EJAM/reference/bg_cenpop2020.html","id":null,"dir":"Reference","previous_headings":"","what":"bg_cenpop2020 (DATA) data.table with all US Census 2020 block groups, Census 2020 population count,\r\nand lat/lon of Census2020-population-weighted centroid of block group — bg_cenpop2020","title":"bg_cenpop2020 (DATA) data.table with all US Census 2020 block groups, Census 2020 population count,\r\nand lat/lon of Census2020-population-weighted centroid of block group — bg_cenpop2020","text":"bg_cenpop2020 (DATA) data.table US Census 2020 block groups, Census 2020 population count, lat/lon Census2020-population-weighted centroid block group","code":""},{"path":"https://usepa.github.io/EJAM/reference/bg_cenpop2020.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bg_cenpop2020 (DATA) data.table with all US Census 2020 block groups, Census 2020 population count,\r\nand lat/lon of Census2020-population-weighted centroid of block group — bg_cenpop2020","text":"also see attributes(bg_cenpop2020) source URL date","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/blockgroupstats.html","id":null,"dir":"Reference","previous_headings":"","what":"blockgroupstats (DATA) EJScreen demographic and environmental indicators for Census block groups — blockgroupstats","title":"blockgroupstats (DATA) EJScreen demographic and environmental indicators for Census block groups — blockgroupstats","text":"EJScreen dataset (demographic, environmental indicators). EJ Indexes, see bgej","code":""},{"path":"https://usepa.github.io/EJAM/reference/blockgroupstats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"blockgroupstats (DATA) EJScreen demographic and environmental indicators for Census block groups — blockgroupstats","text":"08/2023 early 2024, EJScreen 2.2 data, ACS 2017-2021. mid-2024, EJAM EJScreen use ACS 2018-2022 data. year re-created latest version. See attributes(blockgroupstats) data.table US Census blockgroups (blocks). PR, Island Areas See https://www.epa.gov/ejscreen Column names include bgfips, bgid (join blockwt$bgid), pop, pctlowinc, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":null,"dir":"Reference","previous_headings":"","what":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"boxplots show range scores vs range US overall","code":""},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"","code":"boxplots_ratios(   x,   selected_dvar_colname = \"Demog.Index\",   selected_dvar_nicename = selected_dvar_colname,   towhat_nicename = \"US average\",   wheretext = \"Near\" )"},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"x data.frame output ejscreen analysis, example:   selected_dvar_colname default \"Demog.Index\" selected_dvar_nicename default \"Demog.Index\" towhat_nicename default \"US average\" wheretext Use plot subtitle. Default \"Near\" \"Within 5km \" example. number, n, set wheretext \"Within n miles \"","code":"x <- ejscreenit(testpoints_5)$table  x <- testoutput_ejscreenapi_plus_50"},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"format output ggplot2::ggplot()","code":""},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"graphic just quick interim solution replaced. May want compare boxplots nationwide range indicator values. communicate whether skewed right (high scores might expect) also say X% SITES PEOPLE scores top Y% US range, >= 100-Y percentile. e.g., 20% sites scores least top 5% US scores (/less one might expect leaving aside statistical significance ie whether chance sites randomly picked US block groups people's bg scores)","code":""},{"path":"https://usepa.github.io/EJAM/reference/boxplots_ratios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"quick boxplots of demographics across sites as ratios to US means — boxplots_ratios","text":"","code":"# x <- testoutput_ejscreenit_50$table # or   x <- testoutput_ejscreenapi_plus_5   myradius <- x$radius.miles[1]   boxplots_ratios(ratios_to_avg(x)$ratios_d, wheretext = myradius) #> Warning: some variable names are not found in out - ignoring those #> Missing from outputs of API, but expected to see here:  #>  #> Demog:  pcthisp, avg.pcthisp, avg.pctnhba, avg.pctnhaa, avg.pctnhaiana, avg.pctnhnhpia, avg.pctnhotheralone, avg.pctnhmulti, avg.pctnhwa  #>  #> Warning: Removed 20 rows containing non-finite outside the scale range #> (`stat_boxplot()`). #> Warning: Removed 20 rows containing missing values or values outside the scale range #> (`geom_point()`).    #boxplots_ratios(ratios_to_avg(x)$ratios_e, wheretext = myradius)"},{"path":"https://usepa.github.io/EJAM/reference/build_community_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate EJAM Summary Report in HTML within shiny app — build_community_report","title":"Generate EJAM Summary Report in HTML within shiny app — build_community_report","text":"Creates 2 page report overall results one site, demographic environmental indicators, EJ Indexes needed. function use RStudio, see ejam2report() relies build_community_report()","code":""},{"path":"https://usepa.github.io/EJAM/reference/build_community_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate EJAM Summary Report in HTML within shiny app — build_community_report","text":"","code":"build_community_report(   output_df,   analysis_title,   totalpop,   locationstr,   include_ejindexes = FALSE,   in_shiny = FALSE,   filename = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/build_community_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate EJAM Summary Report in HTML within shiny app — build_community_report","text":"output_df, single row results table doaggregate - either results_overall one row bysite analysis_title, title use header report totalpop, total population included location(s) analyzed locationstr, description location(s) analyzed include_ejindexes, whether build tables EJ EJ supp. indexes in_shiny, whether function called outside shiny - affects location header filename, path file save HTML content ; null, returns string (used Shiny app)","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_byformula.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_byformula","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_byformula","text":"DRAFT utility use formulas provided text, calculate indicators","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_byformula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_byformula","text":"","code":"calc_byformula(mydf, formulas = NULL, keep = formula_varname(formulas))"},{"path":"https://usepa.github.io/EJAM/reference/calc_byformula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_byformula","text":"mydf data.frame//table indicators variables use formulas text strings formulas keep etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"DRAFT utility use formulas provided text, calculate indicators","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"","code":"calc_ejam(bg, keep.old = c(\"bgid\", \"pop\"), keep.new = \"all\", formulas)"},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"bg data.frame//table indicators variables use keep.old names columns (variables) retain among provided bg keep.new names calculated variables retain output formulas text strings formulas","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"data.frame calculated variables one row per bg row","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"may used doaggregate_custom()","code":""},{"path":"https://usepa.github.io/EJAM/reference/calc_ejam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DRAFT utility to use formulas provided as text, to calculate indicators — calc_ejam","text":"","code":"### example using just 10 block groups from 1 county in Delaware   c1 <- fips2countyname(fips_counties_from_state_abbrev('DE'), includestate = F)[1]  bgdf = data.frame(EJAM::blockgroupstats[ST == \"DE\" & countyname == c1, ])[1:10, ]   newdf <- calc_ejam(bgdf, keep.old = \"\",    formulas = c(      \"my_custom_recalc_demog <- (pctlowinc + pctmin)/2\",      \"mystat2  = 100 * pctlowinc\")) #> Using my_custom_recalc_demog <- (pctlowinc + pctmin)/2 #> Using mystat2  = 100 * pctlowinc cbind(Demog.Index = bgdf$Demog.Index, newdf, pctlowinc = bgdf$pctlowinc) #>    Demog.Index my_custom_recalc_demog  mystat2 pctlowinc #> 1    0.1940667              0.1940667 29.11001 0.2911001 #> 2    0.3370933              0.3370933 38.52495 0.3852495 #> 3    0.2584242              0.2584242 27.67429 0.2767429 #> 4    0.2446518              0.2446518 32.89556 0.3289556 #> 5    0.2869502              0.2869502 25.75381 0.2575381 #> 6    0.4123246              0.4123246 34.16834 0.3416834 #> 7    0.3338674              0.3338674 21.48273 0.2148273 #> 8    0.3228216              0.3228216 29.51482 0.2951482 #> 9    0.3140747              0.3140747 27.01998 0.2701998 #> 10   0.5700036              0.5700036 37.93979 0.3793979  newdf <- calc_ejam(bgdf, formulas = formulas_d) #> Using pctover64       = 1 * ifelse(pop == 0, 0,            over64        / pop) #> Using pctunder5       = 1 * ifelse(pop == 0, 0,            under5        / pop) #> Using pcthisp         = 1 * ifelse(pop == 0, 0, as.numeric(hisp )        / pop) #> Using pctnhba         = 1 * ifelse(pop == 0, 0, as.numeric(nhba )        / pop) #> Using pctnhaiana      = 1 * ifelse(pop == 0, 0, as.numeric(nhaiana)      / pop) #> Using pctnhaa         = 1 * ifelse(pop == 0, 0, as.numeric(nhaa )        / pop) #> Using pctnhnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhnhpia )     / pop) #> Using pctnhotheralone = 1 * ifelse(pop == 0, 0, as.numeric(nhotheralone) / pop) #> Using pctnhmulti      = 1 * ifelse(pop == 0, 0, as.numeric(nhmulti )     / pop) #> Using pctnhwa         = 1 * ifelse(pop == 0, 0, as.numeric(nhwa )        / pop) #> Using pctba         = 1 * ifelse(pop == 0, 0, as.numeric(ba )        / pop) #> Using pctaiana      = 1 * ifelse(pop == 0, 0, as.numeric(aiana)      / pop) #> Using pctaa         = 1 * ifelse(pop == 0, 0, as.numeric(aa )        / pop) #> Using pctnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhpia )     / pop) #> Using pctotheralone = 1 * ifelse(pop == 0, 0, as.numeric(otheralone) / pop) #> Using pctmulti      = 1 * ifelse(pop == 0, 0, as.numeric(multi )     / pop) #> Using pctwa         = 1 * ifelse(pop == 0, 0, as.numeric(wa )        / pop) #> Using pctmin          = 1 * ifelse(pop == 0, 0, as.numeric(mins)         / pop) #> Using pctlowinc       = 1 * ifelse(povknownratio  == 0, 0, lowinc                 / povknownratio) #> Using pctlths         = 1 * ifelse(age25up        == 0, 0, as.numeric(lths)       / age25up) #> Using pctlingiso      = 1 * ifelse(hhlds          == 0, 0, lingiso                / hhlds) #> Using pctpre1960      = 1 * ifelse(builtunits     == 0, 0, pre1960                / builtunits) #> Using pctunemployed   = 1 * ifelse(unemployedbase == 0, 0, as.numeric(unemployed) / unemployedbase) #> Using Demog.Index = (pctlowinc + pctmin) / 2 #> Using Demog.Index.Supp  = (pctlowinc + pctunemployed + pctlths + pctlingiso + ifelse(is.na(lowlifex), 0, lowlifex) ) / ifelse(is.na(lowlifex), 4, 5) #> Using pctdisability  = ifelse(DISAB_UNIVERSE == 0, 0, DISABILITY / DISAB_UNIVERSE) #> Using pctunder18 =  ifelse(pop == 0, 0, AGE_LT18 / pop) #> Using pctover17  =  ifelse(pop == 0, 0, AGE_GT17 / pop) #> Using pctmale    =  ifelse(pop == 0, 0, MALES    / pop) #> Using pctfemale  =  ifelse(pop == 0, 0, FEMALES  / pop) #> Using p_own_occupied =  ifelse(OCCHU == 0, 0, OWNHU / OCCHU) #> Using PCT_HH_BPOV  =  ifelse(hhlds == 0, 0, HH_BPOV / hhlds) #> Using pct_lan_eng     = ifelse(LAN_UNIVERSE == 0, 0, LAN_ENG_NA   / LAN_UNIVERSE) #> Using pct_lan_spanish = ifelse(LAN_UNIVERSE == 0, 0, LAN_SPANISH  / LAN_UNIVERSE) #> Using pct_lan_ie      = ifelse(LAN_UNIVERSE == 0, 0, LAN_IE       / LAN_UNIVERSE) #> Using pct_lan_api     = ifelse(LAN_UNIVERSE == 0, 0, LAN_API      / LAN_UNIVERSE) #> Using PCT_HLI_SPANISH_LI = ifelse(lingiso == 0, 0, HLI_SPANISH_LI  /  lingiso) #> Using PCT_HLI_IE_LI      = ifelse(lingiso == 0, 0, HLI_IE_LI       /  lingiso) #> Using PCT_HLI_API_LI     = ifelse(lingiso == 0, 0, HLI_API_LI      /  lingiso) #> Using PCT_HLI_OTHER_LI   = ifelse(lingiso == 0, 0, HLI_OTHER_LI    /  lingiso) newdf #>     bgid  pop  pctover64  pctunder5   pcthisp   pctnhba pctnhaiana   pctnhaa #> 1  43878 1618 0.13226205 0.01297899  5.871446  1.668727  0.0000000 0.9888752 #> 2  43879 2305 0.17006508 0.04078091 12.277657 13.796095  1.0412148 1.3015184 #> 3  43880 1895 0.15831135 0.04485488  6.649077  1.424802  0.0000000 2.0052770 #> 4  43881 1609 0.11187073 0.04164077  4.972032  8.452455  0.0000000 2.6103170 #> 5  43882 2848 0.10919944 0.03967697  4.389045 22.050562  0.0000000 2.3876404 #> 6  43883  998 0.11923848 0.08517034  0.000000 41.382766  0.0000000 1.1022044 #> 7  43884 1221 0.09746110 0.04013104  0.000000 39.475839  0.4095004 0.4095004 #> 8  43885 1515 0.09306931 0.04488449  4.224422 27.458746  0.0000000 0.0000000 #> 9  43886 1151 0.42311034 0.08166811  7.645526 18.245004  0.0000000 3.6490009 #> 10 43887 2757 0.18389554 0.04969169 15.632934 57.925281  0.0000000 0.0000000 #>    pctnhnhpia pctnhotheralone pctnhmulti  pctnhwa     pctba  pctaiana     pctaa #> 1           0       0.4944376  0.6798517 90.29666  1.668727 0.0000000 0.9888752 #> 2           0       0.1301518  0.3470716 71.10629 14.273319 1.0412148 1.3015184 #> 3           0       0.0000000 13.9313984 75.98945  1.424802 0.0000000 2.0052770 #> 4           0       0.0000000  0.0000000 83.96520  8.452455 0.0000000 2.6103170 #> 5           0       1.2991573  1.5098315 68.36376 22.085674 0.0000000 2.3876404 #> 6           0       0.0000000  5.8116232 51.70341 41.382766 0.0000000 1.1022044 #> 7           0       0.0000000  4.9959050 54.70925 39.475839 0.4095004 0.4095004 #> 8           0       0.0000000  3.3663366 64.95050 27.458746 0.0000000 0.0000000 #> 9           0       0.0000000  6.2554301 64.20504 18.245004 0.0000000 3.6490009 #> 10          0       0.0000000  2.5027203 23.93906 57.925281 0.0000000 0.0000000 #>    pctnhpia pctotheralone   pctmulti    pctwa     pctmin pctlowinc    pctlths #> 1         0     3.4610630  3.2756489 90.60569 0.09703338 0.2911001 0.06472197 #> 2         0     0.1301518 12.1475054 71.10629 0.28893709 0.3852495 0.16714532 #> 3         0     0.0000000 13.9313984 82.63852 0.24010554 0.2767429 0.15372425 #> 4         0     3.1075202  0.1864512 85.64326 0.16034804 0.3289556 0.11721612 #> 5         0     2.6334270  3.4058989 69.48736 0.31636236 0.2575381 0.07286288 #> 6         0     0.0000000  5.8116232 51.70341 0.48296593 0.3416834 0.04113924 #> 7         0     0.0000000  4.9959050 54.70925 0.45290745 0.2148273 0.06707317 #> 8         0     0.0000000  3.3663366 69.17492 0.35049505 0.2951482 0.05459057 #> 9         0     4.3440487  6.2554301 67.50652 0.35794961 0.2701998 0.03433476 #> 10        0     0.0000000 10.5549510 31.51977 0.76060936 0.3793979 0.03424658 #>     pctlingiso pctpre1960 pctunemployed Demog.Index Demog.Index.Supp pctunder18 #> 1  0.009917355 0.07949126    0.07397959   0.1940667        0.1099298   24.66007 #> 2  0.018726592 0.09239654    0.08716944   0.3370933        0.1645727   19.69631 #> 3  0.092987805 0.01524390    0.05758583   0.2584242        0.1452602   26.12137 #> 4  0.000000000 0.00000000    0.16985646   0.2446518        0.1540070   37.16594 #> 5  0.000000000 0.24819028    0.06000000   0.2869502        0.1172597   30.37219 #> 6  0.000000000 0.60579065    0.05039788   0.4123246        0.1258236   35.57114 #> 7  0.000000000 0.09018987    0.03137790   0.3338674        0.1018352   26.04423 #> 8  0.000000000 0.11397059    0.00000000   0.3228216        0.1140503   40.46205 #> 9  0.000000000 0.00000000    0.03322259   0.3140747        0.1116540   18.85317 #> 10 0.000000000 0.09677419    0.06630944   0.5700036        0.1400933   20.34820 #>    pctover17  pctmale pctfemale PCT_HH_BPOV PCT_HLI_SPANISH_LI PCT_HLI_IE_LI #> 1   75.33993 51.73053  48.26947    8.760331          0.9917355      0.000000 #> 2   80.30369 54.88069  45.11931   11.360799          0.0000000      1.872659 #> 3   73.87863 54.93404  45.06596    7.926829          9.2987805      0.000000 #> 4   62.83406 54.94096  45.05904    3.073286          0.0000000      0.000000 #> 5   69.62781 53.89747  46.10253   10.292524          0.0000000      0.000000 #> 6   64.42886 62.02405  37.97595    8.206687          0.0000000      0.000000 #> 7   73.95577 53.39885  46.60115   11.413043          0.0000000      0.000000 #> 8   59.53795 57.55776  42.44224   10.294118          0.0000000      0.000000 #> 9   81.14683 52.12858  47.87142   10.088496          0.0000000      0.000000 #> 10  79.65180 50.16322  49.83678   27.504726          0.0000000      0.000000 #>    PCT_HLI_API_LI PCT_HLI_OTHER_LI pctdisability p_own_occupied pct_lan_eng #> 1               0                0     0.1726214      0.9322314 0.000000000 #> 2               0                0     0.1728061      0.6741573 0.000000000 #> 3               0                0     0.1727575      0.7865854 0.000000000 #> 4               0                0     0.1724794      0.8179669 0.000000000 #> 5               0                0     0.1478228      0.7952329 0.000000000 #> 6               0                0     0.1478953      0.5106383 0.000000000 #> 7               0                0     0.1479821      0.5652174 0.000000000 #> 8               0                0     0.1018084      0.8308824 0.000000000 #> 9               0                0     0.1019763      1.0000000 0.006622517 #> 10              0                0     0.1020716      0.5708885 0.000000000 #>    pct_lan_spanish  pct_lan_ie pct_lan_api #> 1       0.03506575 0.012523482 0.000000000 #> 2       0.13975577 0.021709634 0.020805066 #> 3       0.06961326 0.000000000 0.124861878 #> 4       0.01750973 0.006485084 0.036964981 #> 5       0.01718464 0.002193784 0.019744059 #> 6       0.00000000 0.000000000 0.000000000 #> 7       0.00000000 0.000000000 0.004266212 #> 8       0.00000000 0.006910850 0.000000000 #> 9       0.08325449 0.043519395 0.022705771 #> 10      0.06641221 0.000000000 0.000000000   ##  example of entire US # newdf1  <- calc_ejam(as.data.frame(bgdf), formulas = formulas_d) #> Using pctover64       = 1 * ifelse(pop == 0, 0,            over64        / pop) #> Using pctunder5       = 1 * ifelse(pop == 0, 0,            under5        / pop) #> Using pcthisp         = 1 * ifelse(pop == 0, 0, as.numeric(hisp )        / pop) #> Using pctnhba         = 1 * ifelse(pop == 0, 0, as.numeric(nhba )        / pop) #> Using pctnhaiana      = 1 * ifelse(pop == 0, 0, as.numeric(nhaiana)      / pop) #> Using pctnhaa         = 1 * ifelse(pop == 0, 0, as.numeric(nhaa )        / pop) #> Using pctnhnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhnhpia )     / pop) #> Using pctnhotheralone = 1 * ifelse(pop == 0, 0, as.numeric(nhotheralone) / pop) #> Using pctnhmulti      = 1 * ifelse(pop == 0, 0, as.numeric(nhmulti )     / pop) #> Using pctnhwa         = 1 * ifelse(pop == 0, 0, as.numeric(nhwa )        / pop) #> Using pctba         = 1 * ifelse(pop == 0, 0, as.numeric(ba )        / pop) #> Using pctaiana      = 1 * ifelse(pop == 0, 0, as.numeric(aiana)      / pop) #> Using pctaa         = 1 * ifelse(pop == 0, 0, as.numeric(aa )        / pop) #> Using pctnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhpia )     / pop) #> Using pctotheralone = 1 * ifelse(pop == 0, 0, as.numeric(otheralone) / pop) #> Using pctmulti      = 1 * ifelse(pop == 0, 0, as.numeric(multi )     / pop) #> Using pctwa         = 1 * ifelse(pop == 0, 0, as.numeric(wa )        / pop) #> Using pctmin          = 1 * ifelse(pop == 0, 0, as.numeric(mins)         / pop) #> Using pctlowinc       = 1 * ifelse(povknownratio  == 0, 0, lowinc                 / povknownratio) #> Using pctlths         = 1 * ifelse(age25up        == 0, 0, as.numeric(lths)       / age25up) #> Using pctlingiso      = 1 * ifelse(hhlds          == 0, 0, lingiso                / hhlds) #> Using pctpre1960      = 1 * ifelse(builtunits     == 0, 0, pre1960                / builtunits) #> Using pctunemployed   = 1 * ifelse(unemployedbase == 0, 0, as.numeric(unemployed) / unemployedbase) #> Using Demog.Index = (pctlowinc + pctmin) / 2 #> Using Demog.Index.Supp  = (pctlowinc + pctunemployed + pctlths + pctlingiso + ifelse(is.na(lowlifex), 0, lowlifex) ) / ifelse(is.na(lowlifex), 4, 5) #> Using pctdisability  = ifelse(DISAB_UNIVERSE == 0, 0, DISABILITY / DISAB_UNIVERSE) #> Using pctunder18 =  ifelse(pop == 0, 0, AGE_LT18 / pop) #> Using pctover17  =  ifelse(pop == 0, 0, AGE_GT17 / pop) #> Using pctmale    =  ifelse(pop == 0, 0, MALES    / pop) #> Using pctfemale  =  ifelse(pop == 0, 0, FEMALES  / pop) #> Using p_own_occupied =  ifelse(OCCHU == 0, 0, OWNHU / OCCHU) #> Using PCT_HH_BPOV  =  ifelse(hhlds == 0, 0, HH_BPOV / hhlds) #> Using pct_lan_eng     = ifelse(LAN_UNIVERSE == 0, 0, LAN_ENG_NA   / LAN_UNIVERSE) #> Using pct_lan_spanish = ifelse(LAN_UNIVERSE == 0, 0, LAN_SPANISH  / LAN_UNIVERSE) #> Using pct_lan_ie      = ifelse(LAN_UNIVERSE == 0, 0, LAN_IE       / LAN_UNIVERSE) #> Using pct_lan_api     = ifelse(LAN_UNIVERSE == 0, 0, LAN_API      / LAN_UNIVERSE) #> Using PCT_HLI_SPANISH_LI = ifelse(lingiso == 0, 0, HLI_SPANISH_LI  /  lingiso) #> Using PCT_HLI_IE_LI      = ifelse(lingiso == 0, 0, HLI_IE_LI       /  lingiso) #> Using PCT_HLI_API_LI     = ifelse(lingiso == 0, 0, HLI_API_LI      /  lingiso) #> Using PCT_HLI_OTHER_LI   = ifelse(lingiso == 0, 0, HLI_OTHER_LI    /  lingiso)   t(summary(newdf1)) #>                                                                                #>      bgid          Min.   :43878       1st Qu.:43880       Median :43883       #>      pop           Min.   : 998        1st Qu.:1294        Median :1614        #>   pctover64        Min.   :0.09307     1st Qu.:0.10987     Median :0.12575     #>   pctunder5        Min.   :0.01298     1st Qu.:0.04029     Median :0.04325     #>    pcthisp         Min.   : 0.000      1st Qu.: 4.266      Median : 5.422      #>    pctnhba         Min.   : 1.425      1st Qu.: 9.788      Median :20.148      #>   pctnhaiana       Min.   :0.0000      1st Qu.:0.0000      Median :0.0000      #>    pctnhaa         Min.   :0.0000      1st Qu.:0.5543      Median :1.2019      #>   pctnhnhpia       Min.   :0           1st Qu.:0           Median :0           #> pctnhotheralone    Min.   :0.00000     1st Qu.:0.00000     Median :0.00000     #>   pctnhmulti       Min.   : 0.0000     1st Qu.: 0.8873     Median : 2.9345     #>    pctnhwa         Min.   :23.94       1st Qu.:57.08       Median :66.66       #>     pctba          Min.   : 1.425      1st Qu.: 9.908      Median :20.165      #>    pctaiana        Min.   :0.0000      1st Qu.:0.0000      Median :0.0000      #>     pctaa          Min.   :0.0000      1st Qu.:0.5543      Median :1.2019      #>    pctnhpia        Min.   :0           1st Qu.:0           Median :0           #> pctotheralone      Min.   :0.00000     1st Qu.:0.00000     Median :0.06508     #>    pctmulti        Min.   : 0.1865     1st Qu.: 3.3762     Median : 5.4038     #>     pctwa          Min.   :31.52       1st Qu.:57.91       Median :69.33       #>     pctmin         Min.   :0.09703     1st Qu.:0.25231     Median :0.33343     #>   pctlowinc        Min.   :0.2148      1st Qu.:0.2718      Median :0.2931      #>    pctlths         Min.   :0.03425     1st Qu.:0.04450     Median :0.06590     #>   pctlingiso       Min.   :0.000000    1st Qu.:0.000000    Median :0.000000    #>   pctpre1960       Min.   :0.00000     1st Qu.:0.03131     Median :0.09129     #> pctunemployed      Min.   :0.00000     1st Qu.:0.03752     Median :0.05879     #>  Demog.Index       Min.   :0.1941      1st Qu.:0.2656      Median :0.3184      #> Demog.Index.Supp   Min.   :0.1018      1st Qu.:0.1123      Median :0.1215      #>   pctunder18       Min.   :18.85       1st Qu.:21.43       Median :26.08       #>   pctover17        Min.   :59.54       1st Qu.:65.73       Median :73.92       #>    pctmale         Min.   :50.16       1st Qu.:52.45       Median :54.39       #>   pctfemale        Min.   :37.98       1st Qu.:45.06       Median :45.61       #>  PCT_HH_BPOV       Min.   : 3.073      1st Qu.: 8.345      Median :10.191      #> PCT_HLI_SPANISH_LI Min.   :0.000       1st Qu.:0.000       Median :0.000       #> PCT_HLI_IE_LI      Min.   :0.0000      1st Qu.:0.0000      Median :0.0000      #> PCT_HLI_API_LI     Min.   :0           1st Qu.:0           Median :0           #> PCT_HLI_OTHER_LI   Min.   :0           1st Qu.:0           Median :0           #> pctdisability      Min.   :0.1018      1st Qu.:0.1135      Median :0.1479      #> p_own_occupied     Min.   :0.5106      1st Qu.:0.5967      Median :0.7909      #>  pct_lan_eng       Min.   :0.0000000   1st Qu.:0.0000000   Median :0.0000000   #> pct_lan_spanish    Min.   :0.000000    1st Qu.:0.004296    Median :0.026288    #>   pct_lan_ie       Min.   :0.000000    1st Qu.:0.000000    Median :0.004339    #>  pct_lan_api       Min.   :0.00000     1st Qu.:0.00000     Median :0.01201     #>                                                                                #>      bgid          Mean   :43883       3rd Qu.:43885       Max.   :43887       #>      pop           Mean   :1792        3rd Qu.:2202        Max.   :2848        #>   pctover64        Mean   :0.15985     3rd Qu.:0.16713     Max.   :0.42311     #>   pctunder5        Mean   :0.04815     3rd Qu.:0.04849     Max.   :0.08517     #>    pcthisp         Mean   : 6.166      3rd Qu.: 7.396      Max.   :15.633      #>    pctnhba         Mean   :23.188      3rd Qu.:36.472      Max.   :57.925      #>   pctnhaiana       Mean   :0.1451      3rd Qu.:0.0000      Max.   :1.0412      #>    pctnhaa         Mean   :1.4454      3rd Qu.:2.2921      Max.   :3.6490      #>   pctnhnhpia       Mean   :0           3rd Qu.:0           Max.   :0           #> pctnhotheralone    Mean   :0.19237     3rd Qu.:0.09761     Max.   :1.29916     #>   pctnhmulti       Mean   : 3.9400     3rd Qu.: 5.6077     Max.   :13.9314     #>    pctnhwa         Mean   :64.92       3rd Qu.:74.77       Max.   :90.30       #>     pctba          Mean   :23.239      3rd Qu.:36.472      Max.   :57.925      #>    pctaiana        Mean   :0.1451      3rd Qu.:0.0000      Max.   :1.0412      #>     pctaa          Mean   :1.4454      3rd Qu.:2.2921      Max.   :3.6490      #>    pctnhpia        Mean   :0           3rd Qu.:0           Max.   :0           #> pctotheralone      Mean   :1.36762     3rd Qu.:2.98900     Max.   :4.34405     #>    pctmulti        Mean   : 6.3931     3rd Qu.: 9.4801     Max.   :13.9314     #>     pctwa          Mean   :67.41       3rd Qu.:79.76       Max.   :90.61       #>     pctmin         Mean   :0.35077     3rd Qu.:0.42917     Max.   :0.76061     #>   pctlowinc        Mean   :0.3041      3rd Qu.:0.3385      Max.   :0.3852      #>    pctlths         Mean   :0.08071     3rd Qu.:0.10613     Max.   :0.16715     #>   pctlingiso       Mean   :0.012163    3rd Qu.:0.007438    Max.   :0.092988    #>   pctpre1960       Mean   :0.13420     3rd Qu.:0.10967     Max.   :0.60579     #> pctunemployed      Mean   :0.06299     3rd Qu.:0.07206     Max.   :0.16986     #>  Demog.Index       Mean   :0.3274      3rd Qu.:0.3363      Max.   :0.5700      #> Demog.Index.Supp   Mean   :0.1284      3rd Qu.:0.1440      Max.   :0.1646      #>   pctunder18       Mean   :27.93       3rd Qu.:34.27       Max.   :40.46       #>   pctover17        Mean   :72.07       3rd Qu.:78.57       Max.   :81.15       #>    pctmale         Mean   :54.57       3rd Qu.:54.94       Max.   :62.02       #>   pctfemale        Mean   :45.43       3rd Qu.:47.55       Max.   :49.84       #>  PCT_HH_BPOV       Mean   :10.892      3rd Qu.:11.094      Max.   :27.505      #> PCT_HLI_SPANISH_LI Mean   :1.029       3rd Qu.:0.000       Max.   :9.299       #> PCT_HLI_IE_LI      Mean   :0.1873      3rd Qu.:0.0000      Max.   :1.8727      #> PCT_HLI_API_LI     Mean   :0           3rd Qu.:0           Max.   :0           #> PCT_HLI_OTHER_LI   Mean   :0           3rd Qu.:0           Max.   :0           #> pctdisability      Mean   :0.1440      3rd Qu.:0.1726      Max.   :0.1728      #> p_own_occupied     Mean   :0.7484      3rd Qu.:0.8277      Max.   :1.0000      #>  pct_lan_eng       Mean   :0.0006623   3rd Qu.:0.0000000   Max.   :0.0066225   #> pct_lan_spanish    Mean   :0.042880    3rd Qu.:0.068813    Max.   :0.139756    #>   pct_lan_ie       Mean   :0.009334    3rd Qu.:0.011120    Max.   :0.043519    #>  pct_lan_api       Mean   :0.02293     3rd Qu.:0.02223     Max.   :0.12486      bgdf <- data.frame(blockgroupstats) newdf <- calc_ejam(bgdf,                    keep.old = c('bgid', 'pop', 'hisp'),                    keep.new = \"all\",                    formulas = formulas_d ) #> Using pctover64       = 1 * ifelse(pop == 0, 0,            over64        / pop) #> Using pctunder5       = 1 * ifelse(pop == 0, 0,            under5        / pop) #> Using pcthisp         = 1 * ifelse(pop == 0, 0, as.numeric(hisp )        / pop) #> Using pctnhba         = 1 * ifelse(pop == 0, 0, as.numeric(nhba )        / pop) #> Using pctnhaiana      = 1 * ifelse(pop == 0, 0, as.numeric(nhaiana)      / pop) #> Using pctnhaa         = 1 * ifelse(pop == 0, 0, as.numeric(nhaa )        / pop) #> Using pctnhnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhnhpia )     / pop) #> Using pctnhotheralone = 1 * ifelse(pop == 0, 0, as.numeric(nhotheralone) / pop) #> Using pctnhmulti      = 1 * ifelse(pop == 0, 0, as.numeric(nhmulti )     / pop) #> Using pctnhwa         = 1 * ifelse(pop == 0, 0, as.numeric(nhwa )        / pop) #> Using pctba         = 1 * ifelse(pop == 0, 0, as.numeric(ba )        / pop) #> Using pctaiana      = 1 * ifelse(pop == 0, 0, as.numeric(aiana)      / pop) #> Using pctaa         = 1 * ifelse(pop == 0, 0, as.numeric(aa )        / pop) #> Using pctnhpia      = 1 * ifelse(pop == 0, 0, as.numeric(nhpia )     / pop) #> Using pctotheralone = 1 * ifelse(pop == 0, 0, as.numeric(otheralone) / pop) #> Using pctmulti      = 1 * ifelse(pop == 0, 0, as.numeric(multi )     / pop) #> Using pctwa         = 1 * ifelse(pop == 0, 0, as.numeric(wa )        / pop) #> Using pctmin          = 1 * ifelse(pop == 0, 0, as.numeric(mins)         / pop) #> Using pctlowinc       = 1 * ifelse(povknownratio  == 0, 0, lowinc                 / povknownratio) #> Using pctlths         = 1 * ifelse(age25up        == 0, 0, as.numeric(lths)       / age25up) #> Using pctlingiso      = 1 * ifelse(hhlds          == 0, 0, lingiso                / hhlds) #> Using pctpre1960      = 1 * ifelse(builtunits     == 0, 0, pre1960                / builtunits) #> Using pctunemployed   = 1 * ifelse(unemployedbase == 0, 0, as.numeric(unemployed) / unemployedbase) #> Using Demog.Index = (pctlowinc + pctmin) / 2 #> Using Demog.Index.Supp  = (pctlowinc + pctunemployed + pctlths + pctlingiso + ifelse(is.na(lowlifex), 0, lowlifex) ) / ifelse(is.na(lowlifex), 4, 5) #> Using pctdisability  = ifelse(DISAB_UNIVERSE == 0, 0, DISABILITY / DISAB_UNIVERSE) #> Using pctunder18 =  ifelse(pop == 0, 0, AGE_LT18 / pop) #> Using pctover17  =  ifelse(pop == 0, 0, AGE_GT17 / pop) #> Using pctmale    =  ifelse(pop == 0, 0, MALES    / pop) #> Using pctfemale  =  ifelse(pop == 0, 0, FEMALES  / pop) #> Using p_own_occupied =  ifelse(OCCHU == 0, 0, OWNHU / OCCHU) #> Using PCT_HH_BPOV  =  ifelse(hhlds == 0, 0, HH_BPOV / hhlds) #> Using pct_lan_eng     = ifelse(LAN_UNIVERSE == 0, 0, LAN_ENG_NA   / LAN_UNIVERSE) #> Using pct_lan_spanish = ifelse(LAN_UNIVERSE == 0, 0, LAN_SPANISH  / LAN_UNIVERSE) #> Using pct_lan_ie      = ifelse(LAN_UNIVERSE == 0, 0, LAN_IE       / LAN_UNIVERSE) #> Using pct_lan_api     = ifelse(LAN_UNIVERSE == 0, 0, LAN_API      / LAN_UNIVERSE) #> Using PCT_HLI_SPANISH_LI = ifelse(lingiso == 0, 0, HLI_SPANISH_LI  /  lingiso) #> Using PCT_HLI_IE_LI      = ifelse(lingiso == 0, 0, HLI_IE_LI       /  lingiso) #> Using PCT_HLI_API_LI     = ifelse(lingiso == 0, 0, HLI_API_LI      /  lingiso) #> Using PCT_HLI_OTHER_LI   = ifelse(lingiso == 0, 0, HLI_OTHER_LI    /  lingiso) round(t(newdf[1001:1002, ]), 3) #>                        1001    1002 #> bgid                315.000 316.000 #> pop                1180.000 869.000 #> hisp                  0.000   0.000 #> pctover64             0.219   0.122 #> pctunder5             0.031   0.025 #> pcthisp               0.000   0.000 #> pctnhba              12.288  31.530 #> pctnhaiana            0.000   0.000 #> pctnhaa               0.000   0.000 #> pctnhnhpia            0.000   0.000 #> pctnhotheralone       0.000   0.000 #> pctnhmulti            0.000   0.000 #> pctnhwa              87.712  68.470 #> pctba                12.288  31.530 #> pctaiana              0.000   0.000 #> pctaa                 0.000   0.000 #> pctnhpia              0.000   0.000 #> pctotheralone         0.000   0.000 #> pctmulti              0.000   0.000 #> pctwa                87.712  68.470 #> pctmin                0.123   0.315 #> pctlowinc             0.428   0.314 #> pctlths               0.164   0.234 #> pctlingiso            0.000   0.000 #> pctpre1960            0.309   0.191 #> pctunemployed         0.000   0.218 #> Demog.Index           0.275   0.315 #> Demog.Index.Supp      0.170   0.205 #> pctunder18           17.966  14.960 #> pctover17            82.034  85.040 #> pctmale              56.017  46.605 #> pctfemale            43.983  53.395 #> PCT_HH_BPOV          18.621  33.249 #> PCT_HLI_SPANISH_LI    0.000   0.000 #> PCT_HLI_IE_LI         0.000   0.000 #> PCT_HLI_API_LI        0.000   0.000 #> PCT_HLI_OTHER_LI      0.000   0.000 #> pctdisability         0.210   0.210 #> p_own_occupied        0.876   0.713 #> pct_lan_eng           0.000   0.000 #> pct_lan_spanish       0.000   0.000 #> pct_lan_ie            0.000   0.015 #> pct_lan_api           0.000   0.000 cbind(   newdf[1001:1031, c('hisp', 'pop', 'pcthisp')],   check = (newdf$hisp[1001:1031] / newdf$pop[1001:1031])   ) #>      hisp  pop    pcthisp       check #> 1001    0 1180  0.0000000 0.000000000 #> 1002    0  869  0.0000000 0.000000000 #> 1003    0 1598  0.0000000 0.000000000 #> 1004   26 1171  2.2203245 0.022203245 #> 1005    0  662  0.0000000 0.000000000 #> 1006   13 1407  0.9239517 0.009239517 #> 1007    0  415  0.0000000 0.000000000 #> 1008   63  572 11.0139860 0.110139860 #> 1009   70 1012  6.9169960 0.069169960 #> 1010    0 1306  0.0000000 0.000000000 #> 1011    0  672  0.0000000 0.000000000 #> 1012    0 2177  0.0000000 0.000000000 #> 1013    0 2694  0.0000000 0.000000000 #> 1014   88  886  9.9322799 0.099322799 #> 1015   10  435  2.2988506 0.022988506 #> 1016   95 1791  5.3042993 0.053042993 #> 1017   18  754  2.3872679 0.023872679 #> 1018   79 1145  6.8995633 0.068995633 #> 1019   15 1484  1.0107817 0.010107817 #> 1020   57 1615  3.5294118 0.035294118 #> 1021    0 1042  0.0000000 0.000000000 #> 1022  152 1578  9.6324461 0.096324461 #> 1023    0 1178  0.0000000 0.000000000 #> 1024    0 1769  0.0000000 0.000000000 #> 1025    0 1171  0.0000000 0.000000000 #> 1026    0 1511  0.0000000 0.000000000 #> 1027   38 1520  2.5000000 0.025000000 #> 1028    0  678  0.0000000 0.000000000 #> 1029   18  564  3.1914894 0.031914894 #> 1030    0  602  0.0000000 0.000000000 #> 1031   79 1891  4.1776838 0.041776838 ## note the 0-100 percentages in blockgroupstats versus the 0-1 calculated percentages cbind(round(sapply(newdf, max, na.rm=T),2), names(newdf) %in% names_pct_as_fraction_blockgroupstats) #>                         [,1] [,2] #> bgid               242335.00    0 #> pop                 38223.00    0 #> hisp                12448.00    0 #> pctover64               1.00    1 #> pctunder5               0.55    1 #> pcthisp               100.00    0 #> pctnhba               100.00    0 #> pctnhaiana            100.00    0 #> pctnhaa               100.00    0 #> pctnhnhpia             76.42    0 #> pctnhotheralone        69.53    0 #> pctnhmulti            100.00    0 #> pctnhwa               100.00    0 #> pctba                 100.00    0 #> pctaiana              100.00    0 #> pctaa                 100.00    0 #> pctnhpia               76.42    0 #> pctotheralone         100.00    0 #> pctmulti              100.00    0 #> pctwa                 100.00    0 #> pctmin                  1.00    1 #> pctlowinc               1.00    1 #> pctlths                 1.00    1 #> pctlingiso              1.00    1 #> pctpre1960              1.00    0 #> pctunemployed           1.00    1 #> Demog.Index             1.00    1 #> Demog.Index.Supp        0.84    1 #> pctunder18            100.00    0 #> pctover17             100.00    0 #> pctmale               100.00    0 #> pctfemale             100.00    0 #> PCT_HH_BPOV           100.00    0 #> PCT_HLI_SPANISH_LI    100.00    0 #> PCT_HLI_IE_LI         100.00    0 #> PCT_HLI_API_LI        100.00    0 #> PCT_HLI_OTHER_LI       85.00    0 #> pctdisability           1.00    0 #> p_own_occupied          1.00    0 #> pct_lan_eng             1.00    0 #> pct_lan_spanish         1.00    0 #> pct_lan_ie              1.00    0 #> pct_lan_api             1.00    0  EJAM:::formula_varname(formulas_d) #>  [1] \"pctover64\"          \"pctunder5\"          \"pcthisp\"            #>  [4] \"pctnhba\"            \"pctnhaiana\"         \"pctnhaa\"            #>  [7] \"pctnhnhpia\"         \"pctnhotheralone\"    \"pctnhmulti\"         #> [10] \"pctnhwa\"            \"pctba\"              \"pctaiana\"           #> [13] \"pctaa\"              \"pctnhpia\"           \"pctotheralone\"      #> [16] \"pctmulti\"           \"pctwa\"              \"pctmin\"             #> [19] \"pctlowinc\"          \"pctlths\"            \"pctlingiso\"         #> [22] \"pctpre1960\"         \"pctunemployed\"      \"Demog.Index\"        #> [25] \"Demog.Index.Supp\"   \"pctdisability\"      \"pctunder18\"         #> [28] \"pctover17\"          \"pctmale\"            \"pctfemale\"          #> [31] \"p_own_occupied\"     \"PCT_HH_BPOV\"        \"pct_lan_eng\"        #> [34] \"pct_lan_spanish\"    \"pct_lan_ie\"         \"pct_lan_api\"        #> [37] \"PCT_HLI_SPANISH_LI\" \"PCT_HLI_IE_LI\"      \"PCT_HLI_API_LI\"     #> [40] \"PCT_HLI_OTHER_LI\"    rm(bgdf)"},{"path":"https://usepa.github.io/EJAM/reference/censusplaces.html","id":null,"dir":"Reference","previous_headings":"","what":"censusplaces (DATA) Census FIPS and other basic info on 41,414 cities/towns/places — censusplaces","title":"censusplaces (DATA) Census FIPS and other basic info on 41,414 cities/towns/places — censusplaces","text":"just list US cities similar places defined Census","code":""},{"path":"https://usepa.github.io/EJAM/reference/censusplaces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"censusplaces (DATA) Census FIPS and other basic info on 41,414 cities/towns/places — censusplaces","text":"(https://www2.census.gov/geo/docs/reference/codes/PLACElist.txt) Column names:  \"EPA_REGION\" \"STATE\" \"ST_FIPS\" \"COUNTY\" \"CO_FIPS\" \"PLACE\" \"PL_FIPS\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter.html","id":null,"dir":"Reference","previous_headings":"","what":"Count columns with Value (at or) above (or below) threshold — colcounter","title":"Count columns with Value (at or) above (or below) threshold — colcounter","text":"Count columns Value () () threshold","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count columns with Value (at or) above (or below) threshold — colcounter","text":"","code":"colcounter(   x,   threshold,   or.tied = TRUE,   na.rm = TRUE,   below = FALSE,   one.cut.per.col = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/colcounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count columns with Value (at or) above (or below) threshold — colcounter","text":"x Data.frame matrix numbers compared threshold value. threshold numeric threshold value compare .tied TRUE, include ties (value x equals threshold) na.rm TRUE, used colcounter count non-NA columns given row TRUE, count x threshold threshold one.cut.per.col FALSE, compare 1 threshold x. TRUE, specify one threshold per column.","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count columns with Value (at or) above (or below) threshold — colcounter","text":"vector counts long NROW(x)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/colcounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count columns with Value (at or) above (or below) threshold — colcounter","text":"","code":"if (FALSE) {  pdata <- data.frame(a=rep(80,4),b=rep(93,4), col3=c(49,98,100,100))   ### pdata <- EJAM::blockgroupstats[ , names_e_pctile]   ## or ## pdata <- ejscreen package file bg22[ , ejscreen package file names.e.pctile]  pcuts <-  5 * (0:20)  # <- as.vector(keystats_e['highcut', ]) colcounter_summary(        pdata, pcuts) colcounter_summary_pct(    pdata, pcuts) colcounter_summary_cum(    pdata, pcuts) colcounter_summary_cum_pct(pdata, pcuts) colcounter_summary_cum_pct(pdata, 5 * (10:20))  x80 <- colcounter(pdata, threshold = 80, or.tied = T) x95 <- colcounter(pdata, threshold = 95, or.tied = T) table(x95) tablefixed(x95, NCOL(pdata)) cbind(at80=tablefixed(x80, NCOL(pdata)), at95=tablefixed(x95, NCOL(pdata)))   }"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","title":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","text":"Like colcounter() cols..count() handle multiple thresholds compare indicator, etc. Table counts, percents, cumulative counts, cumulative percents places N, least N, indicators benchmark(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","text":"","code":"colcounter_summary(   x,   thresholdlist,   or.tied = TRUE,   na.rm = TRUE,   below = FALSE,   one.cut.per.col = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","text":"x Data.frame matrix numbers compared threshold value, like percentiles example. thresholdlist vector numeric threshold values compare .tied TRUE, include ties (value x equals threshold) na.rm TRUE, used colcounter() count non-NA columns given row TRUE, count x threshold threshold one.cut.per.col FALSE, compare threshold x. TRUE, specify one threshold use column.","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","text":"table frequency counts","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize how many rows have N columns at or above (or below) various thresholds? — colcounter_summary","text":"","code":"pdata <- data.frame(a=rep(80,4),b=rep(93,4), col3=c(49,98,100,100))   ### pdata <- EJAM::blockgroupstats[ , names_e_pctile]  pcuts <-  5 * (0:20)  # <- as.vector(keystats_e['highcut', ]) colcounter_summary(        pdata, pcuts) #> Error in colcounter_summary(pdata, pcuts): could not find function \"colcounter_summary\" colcounter_summary_pct(    pdata, pcuts) #> Error in colcounter_summary_pct(pdata, pcuts): could not find function \"colcounter_summary_pct\" colcounter_summary_cum(    pdata, pcuts) #> Error in colcounter_summary_cum(pdata, pcuts): could not find function \"colcounter_summary_cum\" colcounter_summary_cum_pct(pdata, pcuts) #> Error in colcounter_summary_cum_pct(pdata, pcuts): could not find function \"colcounter_summary_cum_pct\" colcounter_summary_cum_pct(pdata, 5 * (10:20)) #> Error in colcounter_summary_cum_pct(pdata, 5 * (10:20)): could not find function \"colcounter_summary_cum_pct\" a3 <- colcounter_summary_all(    pdata, pcuts)  x80 <- colcounter(pdata, threshold = 80, or.tied = T) #> Error in colcounter(pdata, threshold = 80, or.tied = T): could not find function \"colcounter\" x95 <- colcounter(pdata, threshold = 95, or.tied = T) #> Error in colcounter(pdata, threshold = 95, or.tied = T): could not find function \"colcounter\" table(x95) #> Error in table(x95): object 'x95' not found tablefixed(x95, NCOL(pdata)) #> Error in tablefixed(x95, NCOL(pdata)): object 'x95' not found cbind(at80=tablefixed(x80, NCOL(pdata)), at95=tablefixed(x95, NCOL(pdata))) #> Error in tablefixed(x80, NCOL(pdata)): object 'x80' not found"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","title":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","text":"wraps 4 functions return 4 tables: using colcounter_summary(), colcounter_summary_pct(), colcounter_summary_cum(), colcounter_summary_cum_pct() another view text explanations findings, see count_sites_with_n_high_scores()","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","text":"","code":"colcounter_summary_all(x, thresholdlist, ...)"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","text":"x Data.frame matrix numbers compared threshold value, like percentiles example. thresholdlist vector numeric threshold values compare ... passed 4 functions like .tied=TRUE, na.rm=TRUE, =FALSE, one.cut.per.col=FALSE","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","text":"table cumulative frequency counts etc., including count, cum, pct, cum_pct","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize count (and percent) of rows with exactly (and at least) N cols >= various thresholds — colcounter_summary_all","text":"","code":"# df <-  bg22[ , names.ej.pctile]  df <- data.frame(a=rep(80,4),b=rep(93,4), col3=c(49,98,100,100))  bench <- 5 * (0:20)  a3 <- colcounter_summary_all(df, bench)  a3[,'95',] #>      stat #> count count cum pct cum_pct #>     0     1   4  25     100 #>     1     3   3  75      75 #>     2     0   0   0       0 #>     3     0   0   0       0  a3[,,'cum_pct'] #>      cut #> count   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85 #>     0 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 #>     1 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 #>     2 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100  75 #>     3 100 100 100 100 100 100 100 100 100 100  75  75  75  75  75  75  75   0 #>      cut #> count  90  95 100 #>     0 100 100 100 #>     1 100  75  50 #>     2  75   0   0 #>     3   0   0   0  a3['0',,]; a3[1,,] #>      stat #> cut   count cum pct cum_pct #>   0       0   4   0     100 #>   5       0   4   0     100 #>   10      0   4   0     100 #>   15      0   4   0     100 #>   20      0   4   0     100 #>   25      0   4   0     100 #>   30      0   4   0     100 #>   35      0   4   0     100 #>   40      0   4   0     100 #>   45      0   4   0     100 #>   50      0   4   0     100 #>   55      0   4   0     100 #>   60      0   4   0     100 #>   65      0   4   0     100 #>   70      0   4   0     100 #>   75      0   4   0     100 #>   80      0   4   0     100 #>   85      0   4   0     100 #>   90      0   4   0     100 #>   95      1   4  25     100 #>   100     2   4  50     100 #>      stat #> cut   count cum pct cum_pct #>   0       0   4   0     100 #>   5       0   4   0     100 #>   10      0   4   0     100 #>   15      0   4   0     100 #>   20      0   4   0     100 #>   25      0   4   0     100 #>   30      0   4   0     100 #>   35      0   4   0     100 #>   40      0   4   0     100 #>   45      0   4   0     100 #>   50      0   4   0     100 #>   55      0   4   0     100 #>   60      0   4   0     100 #>   65      0   4   0     100 #>   70      0   4   0     100 #>   75      0   4   0     100 #>   80      0   4   0     100 #>   85      0   4   0     100 #>   90      0   4   0     100 #>   95      1   4  25     100 #>   100     2   4  50     100  a3[dim(a3)[1],,] #>      stat #> cut   count cum pct cum_pct #>   0       4   4 100     100 #>   5       4   4 100     100 #>   10      4   4 100     100 #>   15      4   4 100     100 #>   20      4   4 100     100 #>   25      4   4 100     100 #>   30      4   4 100     100 #>   35      4   4 100     100 #>   40      4   4 100     100 #>   45      4   4 100     100 #>   50      3   3  75      75 #>   55      3   3  75      75 #>   60      3   3  75      75 #>   65      3   3  75      75 #>   70      3   3  75      75 #>   75      3   3  75      75 #>   80      3   3  75      75 #>   85      0   0   0       0 #>   90      0   0   0       0 #>   95      0   0   0       0 #>   100     0   0   0       0  # a3['12',,]; a3[13,,]    if (FALSE) {  barplot(colcounter_summary_cum_pct(pdata, pcuts)[ , '80'],     ylab='% of places', xlab='# of indicators at/above threshold',     main='% of places with at least N/12 indicators >=80th percentile')   barplot(colcounter_summary(pdata, pcuts)[2:13 , '95'],     ylab='# of places', xlab='# of indicators at/above threshold',     main='# of places with exactly N/12 indicators >=95th percentile')    # pdata <- ejscreen package file bg22[ , names.e.pctile]   colcounter_summary_cum_pct(pdata,c(50,80,90,95))   xs <- 1:12   plot(x=xs, y=colcounter_summary_cum_pct(pdata, 50)[xs+1],    type='b', col='gray', ylim=c(0, 100),     main='% of places with at least x/12 indicators >=Nth percentile',      ylab='% of places', xlab='# of indicators')   points(xs, colcounter_summary_cum_pct(pdata, 80)[xs+1], type='b', col='blue')   points(xs, colcounter_summary_cum_pct(pdata, 90)[xs+1], type='b', col='orange')   points(xs, colcounter_summary_cum_pct(pdata, 95)[xs+1], type='b', col='red')   legend(x = 'topright', legend = paste0('>= ', c(50, 80, 90, 95),'th percentile'),    fill = c('gray', 'blue', 'orange', 'red'))    # pdata <- bg22[ ,  names.ej.pctile]   colcounter_summary_cum_pct(pdata,c(50,80,90,95))   xs <- 1:12   plot(x=xs, y=colcounter_summary_cum_pct(pdata, 50)[xs+1],      type='b', col='gray', ylim=c(0, 40),     main='% of places with at least x/12 indicators >=Nth percentile', ylab='% of places',      xlab='# of indicators')   points(xs, colcounter_summary_cum_pct(pdata, 80)[xs+1], type='b', col='blue')   points(xs, colcounter_summary_cum_pct(pdata, 90)[xs+1], type='b', col='orange')   points(xs, colcounter_summary_cum_pct(pdata, 95)[xs+1], type='b', col='red')   legend(x = 'topright', legend = paste0('>= ', c(50, 80, 90, 95),'th percentile'),      fill = c('gray', 'blue', 'orange', 'red')) }"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize how many rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum","title":"Summarize how many rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum","text":"See colcounter_summary() details examples","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize how many rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum","text":"","code":"colcounter_summary_cum(   x,   thresholdlist,   or.tied = TRUE,   na.rm = TRUE,   below = FALSE,   one.cut.per.col = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize how many rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum","text":"x Data.frame matrix numbers compared threshold value, like percentiles example. thresholdlist vector numeric threshold values compare .tied TRUE, include ties (value x equals threshold) na.rm TRUE, used colcounter count non-NA columns given row TRUE, count x threshold threshold one.cut.per.col FALSE, compare threshold x. TRUE, specify one threshold use column.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize what percent of rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum_pct","title":"Summarize what percent of rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum_pct","text":"Summarize percent rows LEAST N columns () various thresholds","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize what percent of rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum_pct","text":"","code":"colcounter_summary_cum_pct(x, thresholdlist, ...)"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_cum_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize what percent of rows have AT LEAST N columns at or above (or below) various thresholds — colcounter_summary_cum_pct","text":"x Data.frame matrix numbers compared threshold value, like percentiles example. thresholdlist vector numeric threshold values compare ... passed colcounter_summary_cum() like .tied=TRUE, na.rm=TRUE, =FALSE, one.cut.per.col=FALSE","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize what percent of rows have N columns at or above (or below) various thresholds — colcounter_summary_pct","title":"Summarize what percent of rows have N columns at or above (or below) various thresholds — colcounter_summary_pct","text":"See colcounter_summary() details examples","code":""},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize what percent of rows have N columns at or above (or below) various thresholds — colcounter_summary_pct","text":"","code":"colcounter_summary_pct(x, thresholdlist, ...)"},{"path":"https://usepa.github.io/EJAM/reference/colcounter_summary_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize what percent of rows have N columns at or above (or below) various thresholds — colcounter_summary_pct","text":"x Data.frame matrix numbers compared threshold value, like percentiles example. thresholdlist vector numeric threshold values compare ... passed colcounter_summary() like .tied=TRUE, na.rm=TRUE, =FALSE, one.cut.per.col=FALSE","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert units of distance or area — convert_units","title":"Convert units of distance or area — convert_units","text":"convert_units converts distance area specified units specified units.","code":""},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert units of distance or area — convert_units","text":"","code":"convert_units(x, from = \"km\", towhat = \"mi\")"},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert units of distance or area — convert_units","text":"x number vector numbers converted. string specifying original units input parameter. Default 'km' kilometers. Note must units. Units can specified following: c( 'millimeter', 'millimeters', 'centimeter', 'centimeters', 'meter', 'meters', 'kilometer', 'kilometers', \"mm\", \"cm\", \"m\", \"km\", \"sqmm\", \"sqcm\", \"sqm\", \"sqkm\", \"mm2\", \"cm2\", \"m2\", \"km2\", 'inch', 'inches', 'foot', 'feet', 'yard', 'yards', 'mile', 'miles', \"\", \"ft\", \"yd\", \"mi\", \"sqin\", \"sqft\", \"sqyd\", \"sqmi\", \"in2\", 'ft2', 'yd2', 'mi2' ) Note m2 square meters square miles. towhat strings specifying new units convert . Default 'mi' miles.","code":""},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert units of distance or area — convert_units","text":"Returns number vector numbers length input x, element corresponding input element converted new units.","code":""},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert units of distance or area — convert_units","text":"function takes number, vector numbers, representing distance/length area one type specified units, miles, returns corresponding number(s) converted units, kilometers. Units can specified various ways. inputs must units. outputs must single set units well. NOTE: purposes, Census Bureau : \"ANSI standard converting square kilometers square miles used ( 1 square mile = 2.58998811 square kilometers).\" see https://www.census.gov/geo/reference/state-area.html conversions function use 2.5899881034 2.58998811 sqkm/sqmi. difference 6.6 per billion (roughly 1 152 million), less one tenth square kilometer entire USA.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/convert_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert units of distance or area — convert_units","text":"","code":"convert_units(1, 'mi', 'km') #> [1] 1.609344 convert_units(c(1e6, 1), 'sqm', 'sqkm') #> [1] 1e+00 1e-06"},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"FIPS - Analyze US Counties sites, get EJ indicators summary county","code":""},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"","code":"counties_as_sites(fips)"},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"fips County FIPS vector (ideally character numeric values), like fips_counties_from_state_abbrev(\"DE\")","code":""},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"provides table similar output getblocksnearby(), data.table one row per blockgroup counties, pairs county fips - bgid, ejam_uniq_id (1 N) assigned county missing blockid distance ready doaggregate().","code":""},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"function provides one row per blockgroup. getblocksnearby_from_fips() provides one row per block. See \"Value\"","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/counties_as_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Analyze US Counties as if they were sites, to get EJ indicators summary for each county — counties_as_sites","text":"","code":"counties_as_sites(c('01001','72153')) #>     ejam_uniq_id countyfips   bgid #>            <int>     <char>  <int> #>  1:            1      01001      1 #>  2:            1      01001      2 #>  3:            1      01001      3 #>  4:            1      01001      4 #>  5:            1      01001      5 #>  6:            1      01001      6 #>  7:            1      01001      7 #>  8:            1      01001      8 #>  9:            1      01001      9 #> 10:            1      01001     10 #> 11:            1      01001     11 #> 12:            1      01001     12 #> 13:            1      01001     13 #> 14:            1      01001     14 #> 15:            1      01001     15 #> 16:            1      01001     16 #> 17:            1      01001     17 #> 18:            1      01001     18 #> 19:            1      01001     19 #> 20:            1      01001     20 #> 21:            1      01001     21 #> 22:            1      01001     22 #> 23:            1      01001     23 #> 24:            1      01001     24 #> 25:            1      01001     25 #> 26:            1      01001     26 #> 27:            1      01001     27 #> 28:            1      01001     28 #> 29:            1      01001     29 #> 30:            1      01001     30 #> 31:            1      01001     31 #> 32:            1      01001     32 #> 33:            1      01001     33 #> 34:            1      01001     34 #> 35:            1      01001     35 #> 36:            1      01001     36 #> 37:            1      01001     37 #> 38:            1      01001     38 #> 39:            1      01001     39 #> 40:            1      01001     40 #> 41:            1      01001     41 #> 42:            1      01001     42 #> 43:            1      01001     43 #> 44:            1      01001     44 #> 45:            1      01001     45 #> 46:            2      72153 242311 #> 47:            2      72153 242312 #> 48:            2      72153 242313 #> 49:            2      72153 242314 #> 50:            2      72153 242315 #> 51:            2      72153 242316 #> 52:            2      72153 242317 #> 53:            2      72153 242318 #> 54:            2      72153 242319 #> 55:            2      72153 242320 #> 56:            2      72153 242321 #> 57:            2      72153 242322 #> 58:            2      72153 242323 #> 59:            2      72153 242324 #> 60:            2      72153 242325 #> 61:            2      72153 242326 #> 62:            2      72153 242327 #> 63:            2      72153 242328 #> 64:            2      72153 242329 #> 65:            2      72153 242330 #> 66:            2      72153 242331 #> 67:            2      72153 242332 #> 68:            2      72153 242333 #> 69:            2      72153 242334 #> 70:            2      72153 242335 #>     ejam_uniq_id countyfips   bgid  # Largest US Counties by ACS Population Totals:  blockgroupstats[ , .(ST = ST[1], countypop = sum(pop)),   by=.(FIPS = substr(bgfips,1,5))][order(-countypop),][1:20, .(   CountyPopulation = prettyNum(countypop, big.mark = \",\"), FIPS, ST)] #>     CountyPopulation   FIPS     ST #>               <char> <char> <char> #>  1:       10,019,635  06037     CA #>  2:        5,265,398  17031     IL #>  3:        4,697,957  48201     TX #>  4:        4,367,186  04013     AZ #>  5:        3,296,317  06073     CA #>  6:        3,182,923  06059     CA #>  7:        2,712,360  36047     NY #>  8:        2,690,113  12086     FL #>  9:        2,604,722  48113     TX #> 10:        2,409,331  06065     CA #> 11:        2,393,104  36081     NY #> 12:        2,240,876  53033     WA #> 13:        2,231,147  32003     NV #> 14:        2,171,071  06071     CA #> 15:        2,091,953  48439     TX #> 16:        1,990,522  48029     TX #> 17:        1,934,551  12011     FL #> 18:        1,932,022  06085     CA #> 19:        1,789,781  26163     MI #> 20:        1,673,133  06001     CA #>     CountyPopulation   FIPS     ST"},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"function provides tables summary stats also text explains findings plain English. relies colcounter_summary_all()","code":""},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"","code":"count_sites_with_n_high_scores(   scores,   thresholds = c(1.01, 1.5, 2, 3, 5, 10),   xwide = c(\"statewide\", \"nationwide\")[1] )"},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"scores scores table one row per place one column per indicator thresholds thresholds vector numbers benchmarks. Assuming indicators scores table ratios average, thresholds example, 1.50, 2, etc. represent ratios 1.5x 2x etc. xwide must \"statewide\" \"nationwide\" -- used text output describes findings.","code":""},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"Returns list two named elements, \"stats\" \"text\" stats 3-dimensional array numbers. See dimnames(output$stats).","code":""},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"Helps provide stat summaries : (x%) (sites) least (N) (YTYPE )indicators least (R) times (State/National average)","code":""},{"path":"https://usepa.github.io/EJAM/reference/count_sites_with_n_high_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Answers questions like What % of sites have at least 1 demog. indicator >2x state avg? — count_sites_with_n_high_scores","text":"","code":"# x <- ejamit(testpoints_100, radius = 1) x <- testoutput_ejamit_1000pts_1miles  out <- x$results_bysite out <- setDF(copy(out)) #> Error in setDF(copy(out)): could not find function \"setDF\" ratio_benchmarks <- c(1.01, 1.50, 2, 3, 5, 10) ratiodata <- out[, names_d_ratio_to_state_avg] #> Error: j (the 2nd argument inside [...]) is a single symbol but column name 'names_d_ratio_to_state_avg' is not found. If you intended to select columns using a variable in calling scope, please try DT[, ..names_d_ratio_to_state_avg]. The .. prefix conveys one-level-up similar to a file system path.  findings = count_sites_with_n_high_scores(out) #> Error: j (the 2nd argument inside [...]) is a single symbol but column name 'ccc' is not found. If you intended to select columns using a variable in calling scope, please try DT[, ..ccc]. The .. prefix conveys one-level-up similar to a file system path. dimnames(findings) #> Error in eval(expr, envir, enclos): object 'findings' not found findings$text[2] #> Error in eval(expr, envir, enclos): object 'findings' not found findings$stats[ , , 1] #> Error in eval(expr, envir, enclos): object 'findings' not found findings$stats[ , 1, ] #> Error in eval(expr, envir, enclos): object 'findings' not found findings$stats[ 1, , ] #> Error in eval(expr, envir, enclos): object 'findings' not found"},{"path":"https://usepa.github.io/EJAM/reference/create_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"create_filename - construct custom filename for downloads in EJAM app — create_filename","title":"create_filename - construct custom filename for downloads in EJAM app — create_filename","text":"Builds filename file description, analysis title, buffer distance, site selection method. Values pulled Shiny app used .","code":""},{"path":"https://usepa.github.io/EJAM/reference/create_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_filename - construct custom filename for downloads in EJAM app — create_filename","text":"","code":"create_filename(   file_desc = \"\",   title = \"\",   buffer_dist = 0,   site_method = \"\",   with_datetime = TRUE,   ext = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/create_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_filename - construct custom filename for downloads in EJAM app — create_filename","text":"file_desc file description, \"short report\", \"long report\", \"results_table\" title analysis title buffer_dist buffer distance site_method site selection method, NAICS, FRS, SHP, latlon with_datetime boolean include date time ext optional file extension. check '.' add provided","code":""},{"path":"https://usepa.github.io/EJAM/reference/create_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_filename - construct custom filename for downloads in EJAM app — create_filename","text":"Returns string pasted filename specified components","code":""},{"path":"https://usepa.github.io/EJAM/reference/create_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_filename - construct custom filename for downloads in EJAM app — create_filename","text":"","code":"# specify all arguments create_filename(file_desc = 'results_table', title = 'My Title', buffer_dist = 1, site_method = 'NAICS', with_datetime=TRUE, ext = '.xlsx') #> Error in create_filename(file_desc = \"results_table\", title = \"My Title\",     buffer_dist = 1, site_method = \"NAICS\", with_datetime = TRUE,     ext = \".xlsx\"): could not find function \"create_filename\" # specify title only create_filename(title = 'Summary of EJ Analysis') #> Error in create_filename(title = \"Summary of EJ Analysis\"): could not find function \"create_filename\""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_entirefolder.html","id":null,"dir":"Reference","previous_headings":"","what":"dataload_from_entirefolder — dataload_from_entirefolder","title":"dataload_from_entirefolder — dataload_from_entirefolder","text":"Loads global environment .rda files found specified folder","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_entirefolder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataload_from_entirefolder — dataload_from_entirefolder","text":"","code":"dataload_from_entirefolder(folder = \"./data\")"},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_entirefolder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dataload_from_entirefolder — dataload_from_entirefolder","text":"folder path","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_entirefolder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dataload_from_entirefolder — dataload_from_entirefolder","text":"nothing. just loads global envt","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Load datasets from local disk folder — dataload_from_local","title":"Load datasets from local disk folder — dataload_from_local","text":"Utility analysts / developers store large block / data locally instead redownloading","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load datasets from local disk folder — dataload_from_local","text":"","code":"dataload_from_local(   varnames = c(c(\"blockwts\", \"blockpoints\", \"blockid2fips\", \"quaddata\"), \"bgej\",     \"bgid2fips\", c(\"frs\", \"frs_by_programid\", \"frs_by_naics\", \"frs_by_sic\",     \"frs_by_mact\"))[1:4],   ext = c(\".arrow\", \".rda\")[1],   fun = c(\"arrow::read_ipc_file\", \"load\")[1],   envir = globalenv(),   folder_local_source = NULL,   justchecking = FALSE,   testing = FALSE,   silent = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load datasets from local disk folder — dataload_from_local","text":"varnames use defaults, vector names like \"bgej\" use \"\" get available ext use defaults fun use defaults envir use defaults. see dataload_from_pins() folder_local_source local folder path. see dataload_from_pins() justchecking use defaults. see dataload_from_pins() testing use defaults silent set TRUE stop cat() printing console like running tests","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load datasets from local disk folder — dataload_from_local","text":"vector paths files (derived varnames) actually found folder_local_source, already memory, just ones loaded disk already memory found disk locally.","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load datasets from local disk folder — dataload_from_local","text":"See dataload_from_pins() also. rm(bgid2fips, blockid2fips, blockpoints, blockwts, quaddata) dataload_from_local(folder_local_source = '.')","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"Utility load couple datasets using data immediately instead relying lazy loading","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"","code":"dataload_from_package(   olist = c(\"blockgroupstats\", \"usastats\", \"statestats\"),   envir = globalenv() )"},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"olist vector strings giving names objects load using data(). also include large datasets slow lazyload always needed: \"frs\", \"frs_by_programid \", \"frs_by_naics\", etc. envir environment loaded","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"Nothing","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"See also read_builtin() function readr package! Default load datasets memory immediately. blockgroupstats, usastats, statestats, others always essential EJAM, frs frs_by_programid huge datasets (frs_by_sic frs_by_naics) always used - find regulated facilities ID, etc. frs-related datasets can roughly 1.5 GB RAM, perhaps.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility to load a couple of datasets using data immediately instead of relying on lazy loading — dataload_from_package","text":"","code":"x <- datapack(\"EJAM\") #> Error in datapack(\"EJAM\"): could not find function \"datapack\"   subset(x, x$size >= 0.1) # at least 100 KB #> Error in subset(x, x$size >= 0.1): object 'x' not found   grep(\"names_\", x$Item, value = T, ignore.case = T, invert = T) # most were like names_d, etc. #> Error in is.factor(x): object 'x' not found   ls() #> character(0)   data(\"avg.in.us\", package=\"EJAM\") # lazy load an object into memory and make it visible to user   ls() #> character(0)   rm(avg.in.us, x) #> Warning: object 'avg.in.us' not found #> Warning: object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_pins.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to download / load datasets from pin board — dataload_from_pins","title":"Utility to download / load datasets from pin board — dataload_from_pins","text":"Utility download / load datasets pin board","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_pins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to download / load datasets from pin board — dataload_from_pins","text":"","code":"dataload_from_pins(   varnames = c(c(\"blockwts\", \"blockpoints\", \"blockid2fips\", \"quaddata\"), \"bgej\",     \"bgid2fips\", c(\"frs\", \"frs_by_programid\", \"frs_by_naics\", \"frs_by_sic\",     \"frs_by_mact\"))[1:4],   boardfolder = \"Mark\",   auth = \"auto\",   server = \"https://rstudio-connect.dmap-stage.aws.epa.gov\",   folder_local_source = NULL,   envir = globalenv(),   justchecking = FALSE,   silent = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_pins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to download / load datasets from pin board — dataload_from_pins","text":"varnames character vector names R objects get board, set \"\" load boardfolder needed specify different folder default auth See help documentation pins::board_connect() server needed specify server default (might stored envt variable CONNECT_SERVER registered via rsconnect package). Note auth = \"envvar\" looks CONNECT_SERVER get name server needs full url starting https:// - see help board_connect folder_local_source path local folder look locally saved copies case pins board reachable user. envir needed specify environment default, e.g., globalenv() parent.frame() justchecking can set TRUE just see list pins stored board silent set TRUE suppress cat() msgs console","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_pins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to download / load datasets from pin board — dataload_from_pins","text":"justchecking = FALSE, returns vector names objects now memory specified envir, either already memory loaded local disk successfully downloaded. justchecking = TRUE, however, returns vector names objects found specified pin board (NULL connect) regardless whether already environment, regardless whether specified among varnames, related EJAM .","code":""},{"path":"https://usepa.github.io/EJAM/reference/dataload_from_pins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility to download / load datasets from pin board — dataload_from_pins","text":"work VPN credentials already set user : board <- pins::board_connect(auth = \"rsconnect\") work true plus two environment variables created:","code":"board <- pins::board_connect(auth = 'manual',    server = Sys.getenv(\"CONNECT_SERVER\"),    key = Sys.getenv(\"CONNECT_API_KEY\")  ) after Sys.setenv(CONNECT_SERVER = \"https://rstudio-connect.dmap-stage.aws.epa.gov\")    and   Sys.setenv(CONNECT_API_KEY =  correct-API-key-goes-here  )"},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"Wrapper data() can get memory size objects","code":""},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"","code":"datapack(pkg = ejampackages, len = 30, sortbysize = TRUE, simple = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"pkg character vector giving package(s) look data sets len affects printed console - specifies number characters limit Title , making easier see console. sortbysize TRUE (simple=F), sort increasing size object, within package, alpha. simple FALSE get object sizes, etc., TRUE just get names package, like data(package = \"EJAM\")$results[, c(\"Package\", 'Item')]","code":""},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"simple = TRUE, data.frame colnames Package Item. simple = FALSE, data.frame colnames Package, Item, size, Title.Short","code":""},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"rely much - quick utility. may create leave objects global envt - careful .","code":""},{"path":"https://usepa.github.io/EJAM/reference/datapack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UTILITY - See names and size of data sets in package(s) - internal utility function — datapack","text":"","code":"# see just a vector of the data object names  data(package = \"EJAM\")$results[, 'Item'] #>   [1] \"NAICS\"                                               #>   [2] \"SIC\"                                                 #>   [3] \"avg.in.us\"                                           #>   [4] \"bg_cenpop2020\"                                       #>   [5] \"bgpts\"                                               #>   [6] \"blockgroupstats\"                                     #>   [7] \"censusplaces\"                                        #>   [8] \"ejampackages\"                                        #>   [9] \"epa_programs\"                                        #>  [10] \"formulas_d\"                                          #>  [11] \"frsprogramcodes\"                                     #>  [12] \"high_pctiles_tied_with_min\"                          #>  [13] \"islandareas\"                                         #>  [14] \"lat_alias\"                                           #>  [15] \"lon_alias\"                                           #>  [16] \"mact_table\"                                          #>  [17] \"meters_per_mile\"                                     #>  [18] \"naics_counts\"                                        #>  [19] \"naicstable\"                                          #>  [20] \"names_all\"                                           #>  [21] \"names_all_r\"                                         #>  [22] \"names_avg_these\"                                     #>  [23] \"names_d\"                                             #>  [24] \"names_d_avg\"                                         #>  [25] \"names_d_avg_friendly\"                                #>  [26] \"names_d_count\"                                       #>  [27] \"names_d_count_friendly\"                              #>  [28] \"names_d_friendly\"                                    #>  [29] \"names_d_other_count\"                                 #>  [30] \"names_d_other_count_friendly\"                        #>  [31] \"names_d_pctile\"                                      #>  [32] \"names_d_pctile_friendly\"                             #>  [33] \"names_d_ratio_to_avg\"                                #>  [34] \"names_d_ratio_to_avg_friendly\"                       #>  [35] \"names_d_ratio_to_state_avg\"                          #>  [36] \"names_d_ratio_to_state_avg_friendly\"                 #>  [37] \"names_d_state_avg\"                                   #>  [38] \"names_d_state_avg_friendly\"                          #>  [39] \"names_d_state_pctile\"                                #>  [40] \"names_d_state_pctile_friendly\"                       #>  [41] \"names_d_subgroups\"                                   #>  [42] \"names_d_subgroups_alone\"                             #>  [43] \"names_d_subgroups_alone_avg\"                         #>  [44] \"names_d_subgroups_alone_avg_friendly\"                #>  [45] \"names_d_subgroups_alone_count\"                       #>  [46] \"names_d_subgroups_alone_friendly\"                    #>  [47] \"names_d_subgroups_alone_pctile\"                      #>  [48] \"names_d_subgroups_alone_pctile_friendly\"             #>  [49] \"names_d_subgroups_alone_ratio_to_avg\"                #>  [50] \"names_d_subgroups_alone_ratio_to_avg_friendly\"       #>  [51] \"names_d_subgroups_alone_ratio_to_state_avg\"          #>  [52] \"names_d_subgroups_alone_ratio_to_state_avg_friendly\" #>  [53] \"names_d_subgroups_alone_state_avg\"                   #>  [54] \"names_d_subgroups_alone_state_avg_friendly\"          #>  [55] \"names_d_subgroups_alone_state_pctile\"                #>  [56] \"names_d_subgroups_alone_state_pctile_friendly\"       #>  [57] \"names_d_subgroups_avg\"                               #>  [58] \"names_d_subgroups_avg_friendly\"                      #>  [59] \"names_d_subgroups_count\"                             #>  [60] \"names_d_subgroups_friendly\"                          #>  [61] \"names_d_subgroups_nh\"                                #>  [62] \"names_d_subgroups_nh_avg\"                            #>  [63] \"names_d_subgroups_nh_avg_friendly\"                   #>  [64] \"names_d_subgroups_nh_count\"                          #>  [65] \"names_d_subgroups_nh_friendly\"                       #>  [66] \"names_d_subgroups_nh_pctile\"                         #>  [67] \"names_d_subgroups_nh_pctile_friendly\"                #>  [68] \"names_d_subgroups_nh_ratio_to_avg\"                   #>  [69] \"names_d_subgroups_nh_ratio_to_avg_friendly\"          #>  [70] \"names_d_subgroups_nh_ratio_to_state_avg\"             #>  [71] \"names_d_subgroups_nh_ratio_to_state_avg_friendly\"    #>  [72] \"names_d_subgroups_nh_state_avg\"                      #>  [73] \"names_d_subgroups_nh_state_avg_friendly\"             #>  [74] \"names_d_subgroups_nh_state_pctile\"                   #>  [75] \"names_d_subgroups_nh_state_pctile_friendly\"          #>  [76] \"names_d_subgroups_pctile\"                            #>  [77] \"names_d_subgroups_pctile_friendly\"                   #>  [78] \"names_d_subgroups_ratio_to_avg\"                      #>  [79] \"names_d_subgroups_ratio_to_avg_friendly\"             #>  [80] \"names_d_subgroups_ratio_to_state_avg\"                #>  [81] \"names_d_subgroups_ratio_to_state_avg_friendly\"       #>  [82] \"names_d_subgroups_state_avg\"                         #>  [83] \"names_d_subgroups_state_avg_friendly\"                #>  [84] \"names_d_subgroups_state_pctile\"                      #>  [85] \"names_d_subgroups_state_pctile_friendly\"             #>  [86] \"names_e\"                                             #>  [87] \"names_e_avg\"                                         #>  [88] \"names_e_avg_friendly\"                                #>  [89] \"names_e_friendly\"                                    #>  [90] \"names_e_pctile\"                                      #>  [91] \"names_e_pctile_friendly\"                             #>  [92] \"names_e_ratio_to_avg\"                                #>  [93] \"names_e_ratio_to_avg_friendly\"                       #>  [94] \"names_e_ratio_to_state_avg\"                          #>  [95] \"names_e_ratio_to_state_avg_friendly\"                 #>  [96] \"names_e_state_avg\"                                   #>  [97] \"names_e_state_avg_friendly\"                          #>  [98] \"names_e_state_pctile\"                                #>  [99] \"names_e_state_pctile_friendly\"                       #> [100] \"names_ej\"                                            #> [101] \"names_ej_friendly\"                                   #> [102] \"names_ej_pctile\"                                     #> [103] \"names_ej_pctile_friendly\"                            #> [104] \"names_ej_state\"                                      #> [105] \"names_ej_state_friendly\"                             #> [106] \"names_ej_state_pctile\"                               #> [107] \"names_ej_state_pctile_friendly\"                      #> [108] \"names_ej_supp\"                                       #> [109] \"names_ej_supp_friendly\"                              #> [110] \"names_ej_supp_pctile\"                                #> [111] \"names_ej_supp_pctile_friendly\"                       #> [112] \"names_ej_supp_state\"                                 #> [113] \"names_ej_supp_state_friendly\"                        #> [114] \"names_ej_supp_state_pctile\"                          #> [115] \"names_ej_supp_state_pctile_friendly\"                 #> [116] \"names_need_pctile\"                                   #> [117] \"names_need_state_pctile\"                             #> [118] \"names_other\"                                         #> [119] \"names_pct_as_fraction_blockgroupstats\"               #> [120] \"names_pct_as_fraction_ejamit\"                        #> [121] \"names_pct_as_fraction_ejscreenit\"                    #> [122] \"names_pctile\"                                        #> [123] \"names_ratio_to_avg_these\"                            #> [124] \"names_ratio_to_state_avg_these\"                      #> [125] \"names_state_avg_these\"                               #> [126] \"names_state_pctile\"                                  #> [127] \"names_these\"                                         #> [128] \"names_these_avg\"                                     #> [129] \"names_these_ratio_to_avg\"                            #> [130] \"names_these_ratio_to_state_avg\"                      #> [131] \"names_these_state_avg\"                               #> [132] \"names_wts\"                                           #> [133] \"namez\"                                               #> [134] \"regionstats\"                                         #> [135] \"sictable\"                                            #> [136] \"sites2blocks_example1000pts_1miles\"                  #> [137] \"sites2blocks_example100pts_1miles\"                   #> [138] \"sites2blocks_example10pts_1miles\"                    #> [139] \"stateinfo\"                                           #> [140] \"stateinfo2\"                                          #> [141] \"states_shapefile\"                                    #> [142] \"statestats\"                                          #> [143] \"test_address_parts1\"                                 #> [144] \"test_address_table\"                                  #> [145] \"test_address_table_9\"                                #> [146] \"test_address_table_goodnames\"                        #> [147] \"test_address_table_withfull\"                         #> [148] \"test_addresses2\"                                     #> [149] \"test_addresses_9\"                                    #> [150] \"test_regid\"                                          #> [151] \"test_xtrac\"                                          #> [152] \"testoutput_doaggregate_1000pts_1miles\"               #> [153] \"testoutput_doaggregate_100pts_1miles\"                #> [154] \"testoutput_doaggregate_10pts_1miles\"                 #> [155] \"testoutput_ejamit_1000pts_1miles\"                    #> [156] \"testoutput_ejamit_100pts_1miles\"                     #> [157] \"testoutput_ejamit_10pts_1miles\"                      #> [158] \"testoutput_ejscreenit_10pts_1miles\"                  #> [159] \"testoutput_getblocksnearby_1000pts_1miles\"           #> [160] \"testoutput_getblocksnearby_100pts_1miles\"            #> [161] \"testoutput_getblocksnearby_10pts_1miles\"             #> [162] \"testpoints_10\"                                       #> [163] \"testpoints_100\"                                      #> [164] \"testpoints_1000\"                                     #> [165] \"testpoints_10000\"                                    #> [166] \"testpoints_100_dt\"                                   #> [167] \"testpoints_conus5\"                                   #> [168] \"usastats\"                                               # not actually sorted within each pkg by default  datapack() #> Error in datapack(): could not find function \"datapack\"  # not actually sorted by default  datapack(\"EJAM\")$Item #> Error in datapack(\"EJAM\"): could not find function \"datapack\"  ##datapack(\"MASS\", simple=T)    # sorted by size if simple=F  ##datapack(\"datasets\", simple=F)  x <- datapack(simple = F) #> Error in datapack(simple = F): could not find function \"datapack\"  # sorted by size already, to see largest ones among all these pkgs:  tail(x[, 1:3], 20) #> Error in tail(x[, 1:3], 20): object 'x' not found    # sorted alphabetically within each pkg  x[order(x$Package, x$Item), 1:2] #> Error in eval(expr, envir, enclos): object 'x' not found  # sorted alphabetically across all the pkgs  x[order(x$Item), 1:2] #> Error in eval(expr, envir, enclos): object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_aws.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","title":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","text":"Utility write object(s) like dataset DMAP Data Commons, formatted .arrow .rda","code":""},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_aws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","text":"","code":"datawrite_to_aws(   varnames = c(\"bgid2fips\", \"blockid2fips\", \"blockpoints\", \"blockwts\", \"quaddata\"),   ext = c(\".arrow\", \".rda\")[2],   fun = c(\"arrow::write_ipc_file\", \"save\")[2],   mybucket = \"dmap-data-commons-oa\",   mybucketfolder = \"EJAM\",   justchecking = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_aws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","text":"varnames vector object names upload ext file .extension appropriate format fun, like \".rda\" \".arrow\" fun function use, character string, like \"arrow::write_ipc_file\" fun ignored ext=\".rda\" since just uses s3save() mybucket need change mybucketfolder need change justchecking set FALSE actually upload instead just viewing console commands used, test/check ","code":""},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_aws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","text":"paths objects server","code":""},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_aws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility NOT YET WORKING - AccessDenied — datawrite_to_aws","text":"mybucket <-  'dmap-data-commons-oa' # bucket_contents <- data.table::rbindlist(   bucket_contents","code":"get_bucket(bucket = mybucket, prefix = \"EJAM\"),    fill = TRUE      )"},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Save datasets during package development — datawrite_to_local","title":"Save datasets during package development — datawrite_to_local","text":"Utility write large object(s) like EJAM datasets local disk convenience app/pkg development, formatted .arrow .rda","code":""},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save datasets during package development — datawrite_to_local","text":"","code":"datawrite_to_local(   varnames = c(\"bgid2fips\", \"blockid2fips\", \"blockpoints\", \"blockwts\", \"quaddata\"),   ext = c(\".arrow\", \".rda\")[1],   folder_local_source = \"~/../Downloads\",   fun = c(\"arrow::write_ipc_file\", \"save\")[1],   justchecking = F,   overwrite = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save datasets during package development — datawrite_to_local","text":"varnames vector object names ext file .extension appropriate format, \".rda\" \".arrow\" folder_local_source path local folder without slash end fun function use, character string, like \"arrow::write_ipc_file\" fun ignored ext=\".rda\" since just uses save() justchecking set FALSE actually save instead just seeing console info commands used, test/check overwrite Set TRUE overwrite file exists already, new copy.","code":""},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save datasets during package development — datawrite_to_local","text":"paths objects requested saved whether actually done","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/datawrite_to_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save datasets during package development — datawrite_to_local","text":"","code":"# datawrite_to_local(ext = \".arrow\", folder_local_source = \".\", justchecking = F, overwrite = T)"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"See plot_distance_mean_by_group() — distance_by_group","title":"See plot_distance_mean_by_group() — distance_by_group","text":"See plot_distance_mean_by_group()","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See plot_distance_mean_by_group() — distance_by_group","text":"","code":"distance_by_group(   results_bybg_people,   demogvarname = NULL,   demoglabel = fixcolnames(demogvarname, \"r\", \"shortlabel\"),   returnwhat = \"table\",   graph = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See plot_distance_mean_by_group() — distance_by_group","text":"See plot_distance_mean_by_group()","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group1.html","id":null,"dir":"Reference","previous_headings":"","what":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","title":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","text":"Get average distance ONE demographic group versus everyone else","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","text":"","code":"distance_by_group1(   results_bybg_people,   demogvarname = \"Demog.Index\",   demoglabel = fixcolnames(demogvarname, \"r\", \"shortlabel\") )"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","text":"results_bybg_people data.table doaggregate()$results_bybg_people demogvarname e.g., \"pctlowinc\" demoglabel e.g., \"Low Income Residents\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","text":"list 2 numbers: avg_distance_for_group avg_distance_for_nongroup","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get average distance for ONE demographic group versus everyone else — distance_by_group1","text":"Note Avg Distance range distances Demog group, & %D function distance: info blockgroup near site, means small % bgs duplicated table:   Mostly want overall (site) know avg cum distrib distances demog, (also %D function continuous distance), stats want take unique blockgroups , using shorter distance, distribution distances doublecount people. might also want see distribution distances D just 1 site? might also want see %D function continuous distance just 1 site? retain flexibility doaggregate() reports instances blockgroup-site pairings.","code":"results_bybg_people"},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_by_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","title":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","text":"Like distance_by_group() multiple sites - DRAFT FUNCTION","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_by_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","text":"","code":"distance_by_group_by_site(bybg)"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_by_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","text":"bybg ejamit()$results_bybg_people","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_by_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","text":"table ratios, one col per site, one row per indicator","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_by_site.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratios at each site, of avg dist of group / avg dist of everyone else near site — distance_by_group_by_site","text":"","code":"# distance_by_group_by_site(   #   testoutput_ejamit_10pts_1miles$results_bybg_people   # )"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Each groups distribution of distances — distance_by_group_plot","title":"Each groups distribution of distances — distance_by_group_plot","text":"SLOW / needs optimized. CDF Line Plots cumulative share demographic group, within distance","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Each groups distribution of distances — distance_by_group_plot","text":"","code":"distance_by_group_plot(   results_bybg_people = NULL,   radius_miles =     round(max(results_bybg_people$distance_min_avgperson[!is.infinite(results_bybg_people$distance_min_avgperson)],     na.rm = T), 1),   subgroups_type = NULL,   demogvarname = NULL,   demoglabel = NULL,   colorlist = colorspace::diverging_hcl(length(demogvarname)),   coloroverall = \"black\",   returnwhat = \"table\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Each groups distribution of distances — distance_by_group_plot","text":"results_bybg_people data.table doaggregate()$results_bybg_people radius_miles miles radius max distance analyzed subgroups_type optional, can set \"nh\" \"alone\". Specifies types race ethnicity subgroups use demogvarname demogvarname specified parameter. neither specified tries use default_subgroups_type variable set global.R, since check reactive variable input$subgroups_type outside context web app. demogvarname optional way specify names columns use results_bybg_people, e.g., c(\"pctlowinc\", \"pctmin\"),  namez$d, vector subgroups namez$d_subgroups_nh includes \"pctnhba\" etc. namez$d_subgroups_alone includes \"pctba\" etc., demogvarname specified parameter, info also specified subgroups_type parameter . neither specified, function try use default (may reflect changes made development EJAM default_subgroups_type flux) demoglabel friendly text names labelling graphic, like \"Low income residents\" colorlist colors like \"red\" etc. demographic groups interest coloroverall color like \"gray\" everyone whole returnwhat returnwhat \"table\", invisibly returns full table sorted distances blockgroups, cumulative count demog groups block group's distance. returnwhat \"plotfilename\" returns full path including filename .png tempdir returnwhat \"plot\" returns plot object needed table_xls_format()","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_by_group_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Each groups distribution of distances — distance_by_group_plot","text":"see returnwhat parameter","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/distance_cdf_by_group_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","title":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","text":"plots cumulative share residents found within distance, single demographic group. function, distance_cdf_by_group_plot(), based ejamit()$results_bybg_people, provides block group resolution information distance. block resolution analysis distance group, see plot_distance_by_pctd().","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_cdf_by_group_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","text":"","code":"distance_cdf_by_group_plot(   results_bybg_people,   radius_miles = round(max(results_bybg_people$distance_min_avgperson, na.rm = T), 1),   demogvarname = \"Demog.Index\",   demoglabel = demogvarname,   color1 = \"red\",   color2 = \"black\" )"},{"path":"https://usepa.github.io/EJAM/reference/distance_cdf_by_group_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","text":"results_bybg_people data.table doaggregate()$results_bybg_people radius_miles miles radius max distance analyzed demogvarname name column results_bybg_people, e.g., \"pctlowinc\" demoglabel friendly text name labelling graphic, like \"Low income residents\" color1 color like \"red\" demographic group interest color2 color like \"gray\" everyone else","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_cdf_by_group_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","text":"invisibly returns full table sorted distances blockgroups, cumulative count demog group block group's distance, cumulative count everyone else block group","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_cdf_by_group_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"What percentage of this demographic group's population lives less than X miles from a site? — distance_cdf_by_group_plot","text":"function distance_cdf_by_group_plot SLOW - ***needs optimized","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/distance_mean_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","text":"distance_mean_by_group() distance_mean_by_group() synonymous, like plot_distance_mean_by_group(), show table plot, default.","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_mean_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","text":"","code":"distance_mean_by_group(   results_bybg_people,   demogvarname = NULL,   demoglabel = fixcolnames(demogvarname, \"r\", \"shortlabel\"),   returnwhat = \"table\",   graph = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/distance_mean_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","text":"results_bybg_people data.table doaggregate()$results_bybg_people demogvarname vector column names like \"pctlowinc\" etc. demoglabel vector labels like \"Low Income Residents\" etc. returnwhat returnwhat \"table\", invisibly returns data.frame group, ratio, avg_distance_for_group, avg_distance_for_nongroup. returnwhat \"plotfilename\" returns full path including filename .png tempdir returnwhat \"plot\" returns plot object needed table_xls_format() ?","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_mean_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","text":"see parameter returnwhat","code":""},{"path":"https://usepa.github.io/EJAM/reference/distance_mean_by_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — distance_mean_by_group","text":"Note ratio shown ratio distance among others distance given group, values 1 mean given demographic group lives closer facilities. value 0.85 mean group 85% far site everyone else. Note miles assuming input miles, distance resident actually average distance residents within Census block (block group), site close block internal point (like centroid) relative size block, distance average resident block estimated 90 percent effective radius, radius block area square meters miles circular shape. approach used EJScreen estimate average proximity block resident cases block extremely close site site may actually inside block, exactly top internal point block, case zero appropriate estimate distance, hence adjustment made EJAM getblocksnearby()","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/distance_via_surfacedistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert surface distance to actual distance — distance_via_surfacedistance","title":"Convert surface distance to actual distance — distance_via_surfacedistance","text":"","code":"\\preformatted{      Just a simple formula:     earthRadius_miles <- 3959     angle_rad <- x/earthRadius_miles     # Calculate  radius * cord length     return( earthRadius_miles * 2*sin(angle_rad/2) )     }"},{"path":"https://usepa.github.io/EJAM/reference/distance_via_surfacedistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert surface distance to actual distance — distance_via_surfacedistance","text":"","code":"distance_via_surfacedistance(x)"},{"path":"https://usepa.github.io/EJAM/reference/distance_via_surfacedistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert surface distance to actual distance — distance_via_surfacedistance","text":"x surface distance miles","code":""},{"path":"https://usepa.github.io/EJAM/reference/doaggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize environmental and demographic indicators at each location and overall — doaggregate","title":"Summarize environmental and demographic indicators at each location and overall — doaggregate","text":"getblocksnearby() doaggregate() two key functions run ejamit(). doaggregate() takes set sites like facilities set blocks near , combines indicator scores block groups, aggregates numbes within place across overall.","code":""},{"path":"https://usepa.github.io/EJAM/reference/doaggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize environmental and demographic indicators at each location and overall — doaggregate","text":"","code":"doaggregate(   sites2blocks,   sites2states_or_latlon = NA,   radius = NULL,   countcols = NULL,   popmeancols = NULL,   calculatedcols = NULL,   subgroups_type = \"nh\",   include_ejindexes = FALSE,   calculate_ratios = TRUE,   extra_demog = TRUE,   need_proximityscore = FALSE,   infer_sitepoints = FALSE,   called_by_ejamit = FALSE,   updateProgress = NULL,   silentinteractive = TRUE,   testing = FALSE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/doaggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize environmental and demographic indicators at each location and overall — doaggregate","text":"sites2blocks data.table distances miles sites (facilities) nearby Census block internal points, columns ejam_uniq_id, blockid, distance, created getblocksnearby  function. See sites2blocks_example10pts_1miles aka testoutput_getblocksnearby_10pts_1miles dataset package, input function sites2states_or_latlon data.table just data.frame, columns ejam_uniq_id (unique one sites2blocks) ST (2-character State abbreviation) lat lon radius Optional radius miles limit analysis . default function uses distances provided output getblocksnearby(), reports radius estimated rounded max distance values inputs doaggregate. may cases want run getblocksnearby() 10 miles, say, long list sites (1,000 , say), get summary results 1, 3, 5, 10 miles without redo getblocksnearby() part radius. lets just run getblocksnearby() largest radius, query results get doaggregate() summarize distance less equal original radius analyzed getblocksnearby(). countcols character vector names variables  aggregate within buffer using sum counts, like, example, number people poverty ratio known, count exact denominator needed correctly calculate percent low income. popmeancols character vector names variables aggregate within buffer using population weighted mean. calculatedcols character vector names variables aggregate within buffer using formulas specified. subgroups_type Optional (uses default). Set \"nh\" non-hispanic race subgroups Non-Hispanic White Alone, nhwa others names_d_subgroups_nh; \"alone\" EJScreen v2.2 style race subgroups    White Alone, wa others names_d_subgroups_alone; \"\" versions. Possibly another option \"original\" \"default\" work progress. include_ejindexes whether calculate EJ Indexes return information calculate_ratios whether calculate return ratio indicator US State overall mean extra_demog include indicators EJScreen v2.2 report, language, age groups, gender, percent disability, poverty, etc. need_proximityscore whether calculate proximity scores infer_sitepoints set TRUE try infer lat,lon site around blocks sites2blocks found. lat,lon site approximated average nearby blocks, although accurate slower way use reported distance 3 furthest block points triangulate called_by_ejamit Set TRUE ejamit() suppress outputs even ejamit(silentinteractive=F) updateProgress progress bar function used shiny app silentinteractive Set TRUE see results RStudio console. Set FALSE prevent long output showing console RStudio interactive mode testing used testing function ... pass another function? used currently.","code":""},{"path":"https://usepa.github.io/EJAM/reference/doaggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize environmental and demographic indicators at each location and overall — doaggregate","text":"list named elements: results_overall   one row data.table, like results_by_site, just one row aggregated results unique residents. results_by_site   results individual sites (buffers) - data.table results, one row per ejam_uniq_id, one column per indicator results_bybg_people  results block group, allow showing distribution indicator across everyone within demographic group. longnames  descriptive long names indicators outputs count_of_blocks_near_multiple_sites  additional detail","code":""},{"path":"https://usepa.github.io/EJAM/reference/doaggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize environmental and demographic indicators at each location and overall — doaggregate","text":"examples, see getblocksnearbyviaQuadTree() doaggregate() code run getblocksnearby() (related function polygons FIPS Census units) identified blocks nearby. doaggregate() aggregates blockgroup scores create summary indicator, raw score US percentile State percentile, buffer (.e., near facility): SUMS COUNTS: population count, number households Hispanics, etc. POPULATION-WEIGHTED MEANS:  Environmental indicators, also percentage indicator universe (denominator) population count (rather households, persons age 25up, etc.) EJ Indexes: way EJScreen apparently finding pop wtd mean EJ Index raw scores, EJ Index formula applied summarized demographic score aggregated envt number. CALCULATED FORMULA: Buffer overall score calculated via formulas using aggregated counts, percent low income = sum counts low income / sum counts denominator, case count poverty ratio known. Assuming rounding errors, method give result using weighted mean percentages, weights correct denominator like count poverty ratio known. LOOKED : Aggregated scores converted percentile terms via lookup tables (US State version). function requires following datasets: blockwts: data.table columns: blockid , bgid, blockwt quaddata data.table used create localtree, quad tree index block points (localtree created package loaded) blockgroupstats - data.table (EJScreen demographic environmental data blockgroup?)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/dupenames.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - check conflicting exported function or data names — dupenames","title":"UTILITY - check conflicting exported function or data names — dupenames","text":"See -named objects (functions data) exported (installed) packages","code":""},{"path":"https://usepa.github.io/EJAM/reference/dupenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - check conflicting exported function or data names — dupenames","text":"","code":"dupenames(   pkg = EJAM::ejampackages,   sortbypkg = FALSE,   compare.functions = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/dupenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTILITY - check conflicting exported function or data names — dupenames","text":"pkg one package names vector strings. \"\" checks installed pkgs, takes long potentially. sortbypkg TRUE, just returns thing sorted package name compare.functions TRUE, sends console inf whether body formals functions identical functions name different packages. checks first 2 copies, additional ones (3+ pkgs use name)","code":""},{"path":"https://usepa.github.io/EJAM/reference/dupenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UTILITY - check conflicting exported function or data names — dupenames","text":"data.frame columns Package, Object name (NA dupes)","code":""},{"path":"https://usepa.github.io/EJAM/reference/dupenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UTILITY - check conflicting exported function or data names — dupenames","text":"utility find -named exported objects (functions datasets) within source code 2+ packages, see search path, dev renaming / moving functions/ packages","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/dupeRfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - check conflicting sourcefile names — dupeRfiles","title":"UTILITY - check conflicting sourcefile names — dupeRfiles","text":"See -named .R files 2 sourcecode folders","code":""},{"path":"https://usepa.github.io/EJAM/reference/dupeRfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - check conflicting sourcefile names — dupeRfiles","text":"","code":"dupeRfiles(folder1 = \"../EJAM/R\", folder2 = \"./R\")"},{"path":"https://usepa.github.io/EJAM/reference/dupeRfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTILITY - check conflicting sourcefile names — dupeRfiles","text":"folder1 path folder R source files folder2 path folder R source files, defaults \"./R\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/dupeRfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UTILITY - check conflicting sourcefile names — dupeRfiles","text":"useful shiny app package, ejamlite EJAMejscreenapi copies EJAM files. See dupenames() packages.","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"EJAM provides functions data fast proximity analysis large number locations, \"buffers\", summarizing conditions location. summarizes conditions conditions average resident buffer location. buffer location defined area within specified distance specified site. site facility package defined single geographic point (latitude longitude). functions somewhat generalized, specific datasets included enable environmental justice (EJ) proximity analysis US EPA's EJScreen data, including environmental indicators (e.g., local traffic score, estimated PM2.5 concentration) demographic indicators (e.g., percent low-income), populations estimated live within specified distance (e.g., 1 mile) one sites, typically EPA-regulated facilities. means tools can provide information EJScreen standard report provides, large number reports (one site).","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"vignette","dir":"Reference","previous_headings":"","what":"Vignette","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"Walk-guides available via vignette(package = \"EJAM\") <EJAM-vignette.html> pdf html format documentation functions data <EJAM.pdf> <EJAM.html> Also see README file.","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"key-functions-","dir":"Reference","previous_headings":"","what":"Key Functions:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"run_app() Launch web app (R Shiny interface) ejamit() Get results (tables, maps, plots) without web app interface, largely using key functions: Getting key datasets indexing blocks, yet done, via dataload_from_pins() indexblocks() getblocksnearby()  fast method buffer, identifying blocks within specified distance point(s) like sites/facilities, get distance . doaggregate() Summarize demographic environmental indicators blockgroupstats.rda (see ) within place, weighted using blockwts (average resident within specified distance site (e.g., facility), shapefile FIPS-defined location).","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"data-files-available-as-examples-","dir":"Reference","previous_headings":"","what":"Data files available as examples:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"Excel files read ejamit() getblocksnearby() local source package files EJAM/inst/testdata/latlon testpoints_10.rda  larger datasets provide random test points data.frame columns lat lon (unique site id) testpoints_n() can generate random test points places weighted population, FRS facilities, blockgroup, area, block testoutput_getblocksnearby_10pts_1miles.rda larger datasets sample outputs getblocksnearbyviaQuadTree just getblocksnearby(), try inputs doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"specifying-buffer-sites-facilities-","dir":"Reference","previous_headings":"","what":"Specifying buffer sites / facilities:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"user can specify locations, via interface, shiny app returns sitepoints, data.table fields lat, lon, can unique site id. user-specified table maybe 100, 1k, 10k+ points (centers circular buffers). Examples test data One can specify sitepoints, lat/lon coordinates places analyzed (sites facilities), can specify areas analyzed general, one ways: Point locations uploaded (lat, lon coordinates) - regulated facilities already locations, types points uploaded spreadsheet. Shapefiles uploaded directly define areas include instead using circular buffers around points FIPS specify list counties tracts blockgroups, example, compared. NAICS SIC code Industry categories selected list codes names, uploaded table. NAICS 2-digit 6-digit codes specify sectors types facilities, 325 - Chemical Manufacturing, 325211 - Plastics Material Resin Manufacturing. Facility IDs - EPA Facility Registry Service (FRS) ID numbers FRS Program ID numbers Program System Types - picking whole category regulated sites, GHG reporters TRI reporters. MACT Subpart specify Clean Air Act NESHAP program Max. Achievable Control Tech. source categories (types air emissions sources) defined subpart OOOO. additional details : - INDUSTRIAL SECTOR/ NAICS:   latlon_from_naics() takes NAICS codes returns data.table site points. Relies ** frs_by_naics.rda**  data.table, needed get lat lon naics. Need update FRS data used regularly, ideally frequently. 2023 version columns   REGISTRY_ID,  NAICS, lat, lon NAICS codes also can selected text search industry names categories codes, via naics_from_any() - FACILITY ID PROGRAM ID:   frs_from_regid() takes REGISTRY_ID values returns data.table site points. Relies frs data.table columns REGISTRY_ID, lat, lon, etc. frs_from_programid() takes EPA program-specific site ID values returns data.table site points. Relies frs_by_programid data.table columns program, pgm_sys_id, REGISTRY_ID, lat, lon - LAT/LON POINT:","code":"Interface lets user select NAICS from pulldown, or type in NAICS      Interface returns a vector of one or more naics codes,      to be converted to sitepoints. Interface so user can upload FRS REGISTRY_ID or PROGRAM ID csv/xls file,      Interface returns a list of REGISTRY_ID values from a copy of the EPA facility registry service (FRS) data      to be converted to sitepoints. Interface so user can specify or upload latitude longitude (and optionally a unique site id and other columns like sitename),      when using [ejamit()] which in turn uses [latlon_from_anything()].        The app keeps track of the sitepoints data.table with an assigned ejam_uniq_id that is just the row number."},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"buffering-to-find-site-block-distances-","dir":"Reference","previous_headings":"","what":"Buffering to find site-block-distances:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"Input: sitepoints data.table user picking points Columns lat, lon getblocksnearby() default uses getblocksnearbyviaQuadTree() Returns sites2blocks Requires index called localtree build dataset quaddata sites2blocks   Created getblocksnearby() passed  doaggregate() data table maybe 100k 1m rows (assume 1k blocks within 3 miles site, 100 blocks within 1 mile), sites2blocks[ , .(ejam_uniq_id, blockid, distance dist)] ejam_uniq_id    (row number 1 N site) blockid     join blockwts distance  (miles, block site) (0 irrelevant noncircular buffers, since block table one buffers, unless analysis residents within x miles edges shapes, like facility boundaries)","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"data-files-used-for-distance-calculation-","dir":"Reference","previous_headings":"","what":"Data files used for distance calculation:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"** quaddata.rda** data.table point location internal point 8 million Census blocks used prior startup EJAM create index stored memory, called localtree. quaddata can obtained using dataload_from_pins() localtree index made quaddata via indexblocks() (using SearchTrees package) used getblocksnearby sitepoints create temporary object called sites2blocks:","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"summarizing-indicators-in-buffers-","dir":"Reference","previous_headings":"","what":"Summarizing indicators in buffers:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"doaggregate() = function(sites2blocks) summarizes buffer unique residents across buffers. blockgroupstats data.table 220k rows (blockgroups) hundreds indicator columns. need bgid just bgfips, join blockwts$bgid Needs updated time EJScreen updated. bgej data.table like blockgroupstats EJ Index raw scores. usastats statestats  data.table lookup 100 percentiles means (indicator blockgroupstats, bgej) zone (USA, state DC, PR). Need update time blockgroupstats updated. Taken EJScreen data ejscreen package file lookupUSA lookupStates blockwts see dataload_from_pins() Required doaggregate(). data.table 6-8m rows blockwt  fraction parent blockgroup decennial pop one block block_radius_miles squared times pi equal land plus water area square miles blockid (integer key  join sites2blocks) bgid   integer key instead bgfips - sum(blockwt), =bgid, join blockgroupstats$bgid. bgid efficient bgfips. bgfips bgid2fips data.table","code":"INPUT IS  `sites2blocks`,    OUTPUT IS results_overall, results_bysite, and other summary stats  ####"},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"output-results-for-user-","dir":"Reference","previous_headings":"","what":"Output results for user:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"ejamit() (doaggregate()) provides following outputs: results_overall   one row data.table, like results_by_site, just one row aggregated results unique residents. results_by_site   results individual sites (buffers) - data.table results, one row per ejam_uniq_id (.e., site analyzed), one column per indicator results_bybg_people  results block group, allow showing distribution indicator across everyone within demographic group. longnames  descriptive long names indicators outputs count_of_blocks_near_multiple_sites  additional detail","code":""},{"path":"https://usepa.github.io/EJAM/reference/EJAM.html","id":"identification-of-nearby-residents-methodology-","dir":"Reference","previous_headings":"","what":"Identification of nearby residents -- methodology:","title":"EJAM - Environmental Justice Analysis Multisite tool — EJAM","text":"identification nearby residents currently done way includes 2020 Census blocks whose \"internal point\" (lat/lon provided Census Bureau) within specified distance facility point. taken EJScreen block weights file, can also independently calculated. summary aggregation \"rollup\" within buffer done calculating population-weighted average block group score among people residing buffer. Since blockgroup population counts American Community Survey (ACS) estimates, block population counts decennial census, totals blockgroup differ. amount partial blockgroup contributes buffer's overall score based estimated number residents blockgroup buffer. based fraction blockgroup population estimated buffer, fraction calculated fraction blockgroup's decennial census block population census blocks inside buffer. given block considered entirely inside entirely outside buffer, used accurately estimate fraction given block group's population inside buffer. accurate faster areal apportionment block groups. Census blocks generally small relative typical buffers accurate - least accurate small buffer distance specified extremely low density rural area block can geographically large. Although rarely ever significant issue (reasonable, useful buffer sizes), even accurate approach cases might either areal apportionment blocks, slow assumes residents evenly spread across full block's area, else approach uses higher resolution estimates residential locations even Decennial census blocks can provide, dasymetric map approach.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejam2excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Save EJAM results in a spreadsheet — ejam2excel","title":"Save EJAM results in a spreadsheet — ejam2excel","text":"ejam2excel() takes output something like ejamit() creates spreadsheet overall summary tab, site site table tab, well tabs map, plot, notes, etc. alias table_xls_from_ejam()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save EJAM results in a spreadsheet — ejam2excel","text":"","code":"ejam2excel(   ejamitout,   fname = NULL,   save_now = TRUE,   overwrite = TRUE,   launchexcel = FALSE,   interactive_console = TRUE,   ok2plot = TRUE,   in.testing = FALSE,   in.analysis_title = \"EJAM analysis\",   react.v1_summary_plot = NULL,   radius_or_buffer_in_miles = NULL,   buffer_desc = \"Selected Locations\",   radius_or_buffer_description =     \"Miles radius of circular buffer (or distance used if buffering around polygons)\",   hyperlink_colnames = c(\"EJScreen Report\", \"EJScreen Map\", \"ECHO report\"),   ... )"},{"path":"https://usepa.github.io/EJAM/reference/ejam2excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save EJAM results in a spreadsheet — ejam2excel","text":"ejamitout output ejamit() fname optional name full path name file save locally, like \".xlsx\" save_now optional logical, whether save .xlsx file locally just return workbook object can later written .xlsx file using openxlsx::saveWorkbook() overwrite optional logical, passed openxlsx::saveWorkbook() launchexcel optional logical, passed table_xls_format(), whether launch browser see spreadsheet immediately interactive_console optional - set FALSE used code server. TRUE, prompts RStudio user interactively asking save downloaded file ok2plot optional logical, passed  table_xls_format(), whether safe try plot set FALSE debugging plot problems .testing optional logical .analysis_title optional title character string react.v1_summary_plot optional - plot object radius_or_buffer_in_miles optional radius miles radius_or_buffer_description optional text phrase describing places analyzed hyperlink_colnames optional names columns URLs ... optional additional parameters passed table_xls_format(), heatmap_colnames, heatmap_cuts, heatmap_colors, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save EJAM results in a spreadsheet — ejam2excel","text":"table_xls_from_ejam() returns","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2ratios.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — ejam2ratios","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — ejam2ratios","text":"Quick view summary stats type stat, lacks rounding specific type, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2ratios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — ejam2ratios","text":"","code":"ejam2ratios(ejamitout, decimals = 1)"},{"path":"https://usepa.github.io/EJAM/reference/ejam2ratios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — ejam2ratios","text":"ejamitout list ejamit() includes results_overall decimals optional number decimal places round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2ratios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — ejam2ratios","text":"prints console returns simple data.frame","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":null,"dir":"Reference","previous_headings":"","what":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"Get URL view browser 2-page summary report similar EJScreen Community Report","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"","code":"ejam2report(   ejamout = testoutput_ejamit_10pts_1miles,   sitenumber = NULL,   analysis_title = \"EJAM Report\",   submitted_upload_method = c(\"latlon\", \"SHP\", \"FIPS\")[1],   data_up_shp = NA,   return_html = FALSE,   launch_browser = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"ejamout output ejamit(), list data.table called results_bysite sitenumber parameter used, data.table called results_overall otherwise sitenumber number provided, report ejamout$results_bysite[sitenumber, ] number provided (param NULL) report ejamout$results_overall analysis_title optional title analysis submitted_upload_method \"latlon\" default options implemented yet. data_up_shp implemented yet, upload method SHP return_html set TRUE function return HTML object instead URL local file launch_browser set TRUE launch browser show report.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"URL temp html file object depending return_html, side effect launching browser view depending return_html","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"relies build_community_report() used web app viewing report 1 site list sites.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejam2report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View HTML Report on EJAM Results (Overall or at 1 Site) — ejam2report","text":"","code":"#out <- ejamit(testpoints_10, radius = 3, include_ejindexes = T) out <- testoutput_ejamit_10pts_1miles  ejam2report(out) #> [1] \"C:\\\\Users\\\\mcorrale\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6Z941l/comm_report.html\" table_gt_from_ejamit_overall(out$results_overall) #> <div id=\"lefoodfiee\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#lefoodfiee table { #>   font-family: Arial; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #lefoodfiee thead, #lefoodfiee tbody, #lefoodfiee tfoot, #lefoodfiee tr, #lefoodfiee td, #lefoodfiee th { #>   border-style: none; #> } #>  #> #lefoodfiee p { #>   margin: 0; #>   padding: 0; #> } #>  #> #lefoodfiee .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 13.33px; #>   font-weight: normal; #>   font-style: solid; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 3px; #>   border-top-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 3px; #>   border-right-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 3px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 3px; #>   border-left-color: #AAAAAA; #> } #>  #> #lefoodfiee .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #lefoodfiee .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #lefoodfiee .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #lefoodfiee .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #lefoodfiee .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #lefoodfiee .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #lefoodfiee .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #lefoodfiee .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #lefoodfiee .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #lefoodfiee .gt_group_heading { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 0px; #>   padding-right: 0px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #lefoodfiee .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   vertical-align: middle; #> } #>  #> #lefoodfiee .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #lefoodfiee .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #lefoodfiee .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 10px; #>   padding-right: 10px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #lefoodfiee .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 10px; #>   padding-right: 10px; #> } #>  #> #lefoodfiee .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 0px; #>   padding-right: 0px; #>   vertical-align: top; #> } #>  #> #lefoodfiee .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #lefoodfiee .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #lefoodfiee .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #lefoodfiee .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #lefoodfiee .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #lefoodfiee .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: solid; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_striped { #>   background-color: #DCE6F0; #> } #>  #> #lefoodfiee .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #> } #>  #> #lefoodfiee .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 20px; #>   padding-bottom: 20px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #lefoodfiee .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #lefoodfiee .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #lefoodfiee .gt_left { #>   text-align: left; #> } #>  #> #lefoodfiee .gt_center { #>   text-align: center; #> } #>  #> #lefoodfiee .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #lefoodfiee .gt_font_normal { #>   font-weight: normal; #> } #>  #> #lefoodfiee .gt_font_bold { #>   font-weight: bold; #> } #>  #> #lefoodfiee .gt_font_italic { #>   font-style: italic; #> } #>  #> #lefoodfiee .gt_super { #>   font-size: 65%; #> } #>  #> #lefoodfiee .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #lefoodfiee .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #lefoodfiee .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #lefoodfiee .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #lefoodfiee .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #lefoodfiee .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #lefoodfiee .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Socioeconomic Indicators&lt;/strong&gt;\"><strong>Socioeconomic Indicators<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Value&lt;/strong&gt;\"><strong>Value<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Average<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Percentile<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Average<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Percentile<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; State Avg.&lt;/strong&gt;\"><strong>Ratio to<br> State Avg.<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; USA Avg.&lt;/strong&gt;\"><strong>Ratio to<br> USA Avg.<\/strong><\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">40%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">31%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">69<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">35%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">64<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.2<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Supplemental Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">18%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">71<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">72<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.2<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% People of Color<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">41%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">32%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">67<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">39%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">59<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% Low Income<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">40%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">31%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">66<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">31%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">69<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.3<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% Unemployed<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">5%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">65<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">63<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% in limited English-speaking Households<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">7%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">4%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">81<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">80<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.9<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.4<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% with Less Than High School Education<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">15%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">10%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">74<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">12%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">71<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.5<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.3<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% under Age 5<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">63<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">64<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.2<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% over Age 64<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">11%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">18%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">28<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">30<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.6<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Low life expectancy<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">22%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">20%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">67<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">20%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">70<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td><\/tr> #>   <\/tbody> #>    #>   <tfoot class=\"gt_footnotes\"> #>     <tr> #>       <td class=\"gt_footnote\" colspan=\"8\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span> Avg. in state means the average indicator value, among all the residents at these sites, using the statewide value in each resident's state. Percentile in state means the same, but using the site-specific value (expressed as a percentile) where each resident lives.<\/td> #>     <\/tr> #>   <\/tfoot> #> <\/table> #> <\/div> table_tall_from_overall(out$results_overall) #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #>                  value #> 1                 <NA> #> 2                 <NA> #> 3                 <NA> #> 4                 <NA> #> 5                60740 #> 6                 <NA> #> 7                 <NA> #> 8                 <NA> #> 9                 <NA> #> 10                 1.2 #> 11                 1.2 #> 12                 1.3 #> 13                 1.4 #> 14                   1 #> 15                 1.3 #> 16                 1.1 #> 17                 1.2 #> 18                 0.6 #> 19                   1 #> 20                 1.4 #> 21                 0.7 #> 22                 0.6 #> 23                 1.4 #> 24                   0 #> 25                 0.3 #> 26                 0.9 #> 27                   1 #> 28                   1 #> 29                   1 #> 30                 1.1 #> 31                 0.9 #> 32                 1.4 #> 33                 1.4 #> 34                 0.8 #> 35                 2.9 #> 36                 1.4 #> 37                 0.7 #> 38                   0 #> 39                 1.4 #> 40                 1.4 #> 41                 1.3 #> 42                 1.3 #> 43                 1.3 #> 44                 1.9 #> 45                 1.1 #> 46                 1.5 #> 47                 1.1 #> 48                 1.1 #> 49                 0.6 #> 50                 1.3 #> 51                 1.8 #> 52                 0.8 #> 53                 1.3 #> 54                 0.8 #> 55                   0 #> 56                 0.3 #> 57                   1 #> 58                 0.9 #> 59                   1 #> 60                   1 #> 61                 1.2 #> 62                 1.1 #> 63                 1.5 #> 64                 1.4 #> 65                 1.4 #> 66                 4.3 #> 67                 1.2 #> 68                 1.6 #> 69                   0 #> 70                 1.4 #> 71                 1.1 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   1 #> 90                  64 #> 91                  72 #> 92                  69 #> 93                  80 #> 94                  63 #> 95                  71 #> 96                  70 #> 97                  64 #> 98                  30 #> 99                  59 #> 100                 76 #> 101                 68 #> 102                 68 #> 103                 90 #> 104                  0 #> 105                 87 #> 106                 64 #> 107                 40 #> 108                  0 #> 109                  0 #> 110                  0 #> 111                  0 #> 112                  0 #> 113                  0 #> 114                  0 #> 115                  0 #> 116                  0 #> 117                  0 #> 118                  0 #> 119                  0 #> 120                  0 #> 121                  0 #> 122                  0 #> 123                  0 #> 124                  0 #> 125                  1 #> 126                  0 #> 127                  0 #> 128                  0 #> 129                  0 #> 130                  0 #> 131                  0 #> 132                  0 #> 133                  1 #> 134                 69 #> 135                 71 #> 136                 66 #> 137                 81 #> 138                 65 #> 139                 74 #> 140                 67 #> 141                 63 #> 142                 28 #> 143                 67 #> 144                 76 #> 145                 62 #> 146                 73 #> 147                 52 #> 148                  0 #> 149                 25 #> 150                 59 #> 151                 32 #> 152                  0 #> 153                  0 #> 154                  0 #> 155                  0 #> 156                  0 #> 157                  0 #> 158                  0 #> 159                  0 #> 160                  0 #> 161                  0 #> 162               8.03 #> 163               60.6 #> 164                 27 #> 165               0.29 #> 166               0.36 #> 167               41.3 #> 168                179 #> 169               0.39 #> 170                0.6 #> 171                1.4 #> 172                  0 #> 173                5.5 #> 174               6493 #> 175                 45 #> 176                 46 #> 177                  5 #> 178                  4 #> 179                 79 #> 180                 67 #> 181                 72 #> 182                 93 #> 183                 79 #> 184                 66 #> 185                 70 #> 186                 79 #> 187                 89 #> 188               8.08 #> 189               61.6 #> 190                 25 #> 191               0.31 #> 192               0.26 #> 193               30.3 #> 194                212 #> 195               0.13 #> 196               0.43 #> 197                1.9 #> 198                 22 #> 199                3.9 #> 200               4612 #> 201                 67 #> 202                 53 #> 203                 21 #> 204                 37 #> 205                 78 #> 206                 65 #> 207                 75 #> 208                 74 #> 209                 69 #> 210                 72 #> 211                 55 #> 212                 76 #> 213                 78 #> 214               7.89 #> 215               60.6 #> 216                 22 #> 217               0.26 #> 218               0.25 #> 219               29.1 #> 220                126 #> 221               0.09 #> 222               0.48 #> 223                0.8 #> 224                 25 #> 225                3.9 #> 226               5917 #> 227                 69 #> 228                 63 #> 229                 71 #> 230                 64 #> 231                 77 #> 232                 70 #> 233                 70 #> 234                 79 #> 235                 77 #> 236                 69 #> 237                 70 #> 238                 75 #> 239                 81 #> 240                 74 #> 241                 69 #> 242                 73 #> 243                 66 #> 244                 84 #> 245                 74 #> 246                 76 #> 247                 85 #> 248                 82 #> 249                 76 #> 250                 75 #> 251                 78 #> 252                 85 #> 253                 72 #> 254                 64 #> 255                 81 #> 256                 75 #> 257                 77 #> 258                 67 #> 259                 74 #> 260                 72 #> 261                 74 #> 262                 72 #> 263                 66 #> 264                 73 #> 265                 75 #> 266                 73 #> 267                 65 #> 268                 81 #> 269                 77 #> 270                 80 #> 271                 67 #> 272                 77 #> 273                 74 #> 274                 75 #> 275                 74 #> 276                 66 #> 277                 74 #> 278                 78 #> 279              21641 #> 280               1477 #> 281               1738 #> 282               5487 #> 283               3902 #> 284               6580 #> 285              24807 #> 286              15471 #> 287               5218 #> 288               1803 #> 289                537 #> 290                  1 #> 291                 55 #> 292               1723 #> 293              35933 #> 294              54648 #> 295              36889 #> 296              21660 #> 297              30403 #> 298              10184 #> 299              24671 #> 300              56838 #> 301              11331 #> 302                707 #> 303               1153 #> 304               1367 #> 305               1121 #> 306                179 #> 307                165 #> 308                 12 #> 309              13015 #> 310              47725 #> 311              30954 #> 312              29786 #> 313              11127 #> 314              21660 #> 315              58670 #> 316             6852.1 #> 317                 76 #> 318              27397 #> 319                  0 #> 320                  1 #> 321                  0 #> 322                  0 #> 323                  0 #> 324                  0 #> 325                  1 #> 326                  1 #> 327                  0 #> 328                 75 #> 329               1152 #> 330                  1 #> 331               4126 #> 332             21.749 #> 333              18.28 #> 334             16.944 #> 335             14.322 #> 336             31.306 #> 337             21.888 #> 338              25.68 #> 339             31.366 #> 340             30.822 #> 341             24.123 #> 342             22.239 #> 343             28.501 #> 344             30.878 #> 345             10.022 #> 346               8.39 #> 347              6.944 #> 348              5.949 #> 349             13.462 #> 350             10.484 #> 351             11.215 #> 352               13.5 #> 353             13.284 #> 354              10.79 #> 355             10.218 #> 356             12.078 #> 357             13.612 #> 358             27.806 #> 359             19.867 #> 360             21.399 #> 361             17.843 #> 362             32.732 #> 363             23.756 #> 364             27.033 #> 365             33.055 #> 366             30.084 #> 367             29.713 #> 368             21.378 #> 369             26.861 #> 370             31.691 #> 371             12.478 #> 372              9.358 #> 373              9.181 #> 374              8.069 #> 375             14.214 #> 376             11.008 #> 377              11.99 #> 378             14.316 #> 379             12.752 #> 380             13.015 #> 381              9.696 #> 382             11.524 #> 383             13.853 #> 384              0.018 #> 385  0.751551987007954 #> 386                  1 #> 387                  9 #> 388                  1 #> 389                  0 #> 390                  1 #> 391 0.0124440738023481 #> 392  0.199349734246098 #> 393  0.020282098514558 #> 394 0.0240542028878415 #>                                                                                          indicator #> 1                                                                                  EJScreen Report #> 2                                                                                     EJScreen Map #> 3                                                                                      ECHO report #> 4                                                                                     ejam_uniq_id #> 5                                                                                 Total Population #> 6                                                                                        Longitude #> 7                                                                                         Latitude #> 8                                                                               State Abbreviation #> 9                                                                                       State Name #> 10                                                                     Ratio to US avg Demog Index #> 11                                                               Ratio to US avg Suppl Demog Index #> 12                                                                      Ratio to US avg % Low-inc. #> 13                                                               Ratio to US avg % Limited English #> 14                                                                    Ratio to US avg % Unemployed #> 15                                                                 Ratio to US avg % < High School #> 16                                                             Ratio to US avg Low life expectancy #> 17                                                                       Ratio to US avg % < age 5 #> 18                                                                      Ratio to US avg % > age 64 #> 19                                                               Ratio to US avg % People of Color #> 20                                                                      Ratio to US avg % Hispanic #> 21                                                                   Ratio to US avg % Black (NHA) #> 22                                                                   Ratio to US avg % Asian (NHA) #> 23                                           Ratio to US avg % American Indian Alaska Native (NHA) #> 24                                        Ratio to US avg % Native Hawaiian Pacific Islander (NHA) #> 25                                                       Ratio to US avg % Other single race (NHA) #> 26                                                         Ratio to US avg % Two or more race (NH) #> 27                                           Ratio to US avg % White nonHispanic single race (NHA) #> 28                                                                           Ratio to US avg PM2.5 #> 29                                                                           Ratio to US avg Ozone #> 30                                                                     Ratio to US avg Cancer risk #> 31                                                                     Ratio to US avg Respiratory #> 32                                                                       Ratio to US avg Diesel PM #> 33                                                                Ratio to US avg % built pre-1960 #> 34                                                                         Ratio to US avg Traffic #> 35                                                                             Ratio to US avg NPL #> 36                                                                             Ratio to US avg RMP #> 37                                                                            Ratio to US avg TSDF #> 38                                                                           Ratio to US avg NPDES #> 39                                                                             Ratio to US avg UST #> 40                                                           Ratio to US avg Toxic Releases to Air #> 41                                                                   Ratio to State avg Demog.Ind. #> 42                                                            Ratio to State avg Suppl Demog Index #> 43                                                                   Ratio to State avg % Low-inc. #> 44                                                            Ratio to State avg % Limited English #> 45                                                                 Ratio to State avg % Unemployed #> 46                                                              Ratio to State avg % < High School #> 47                                                          Ratio to State avg Low life expectancy #> 48                                                                    Ratio to State avg % < age 5 #> 49                                                                   Ratio to State avg % > age 64 #> 50                                                            Ratio to State avg % People of Color #> 51                                                                   Ratio to State avg % Hispanic #> 52                                        Ratio to State avg % American Indian Alaska Native (NHA) #> 53                                                                Ratio to State avg % Black (NHA) #> 54                                                                Ratio to State avg % Asian (NHA) #> 55                                                    Ratio to State avg % Other single race (NHA) #> 56                                                      Ratio to State avg % Two or more race (NH) #> 57                                     Ratio to State avg % Native Hawaiian Pacific Islander (NHA) #> 58                                              Ratio to State avg % White nonHispanic single race #> 59                                                                        Ratio to State avg PM2.5 #> 60                                                                        Ratio to State avg Ozone #> 61                                                                  Ratio to State avg Cancer risk #> 62                                                                  Ratio to State avg Respiratory #> 63                                                                    Ratio to State avg Diesel PM #> 64                                                             Ratio to State avg % built pre-1960 #> 65                                                                      Ratio to State avg Traffic #> 66                                                                          Ratio to State avg NPL #> 67                                                                          Ratio to State avg RMP #> 68                                                                         Ratio to State avg TSDF #> 69                                                                        Ratio to State avg NPDES #> 70                                                                          Ratio to State avg UST #> 71                                                        Ratio to State avg Toxic Releases to Air #> 72                                                                               Demographic Index #> 73                                                                  Supplemental Demographic Index #> 74                                                                                    % Low Income #> 75                                                        % in limited English-speaking Households #> 76                                                                                    % Unemployed #> 77                                                          % with Less Than High School Education #> 78                                                                             Low life expectancy #> 79                                                                                   % under Age 5 #> 80                                                                                   % over Age 64 #> 81                                                                               % People of Color #> 82                                                                            % Hispanic or Latino #> 83                                         % Black or African American (non-Hispanic, single race) #> 84                                                             % Asian (non-Hispanic, single race) #> 85                                 % American Indian and Alaska Native (non-Hispanic, single race) #> 86                        % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 87                                                        % Other race (non-Hispanic, single race) #> 88                                                              % Two or more races (non-Hispanic) #> 89                                                             % White (non-Hispanic, single race) #> 90                                                             US percentile for Demographic Index #> 91                                                US percentile for Supplemental Demographic Index #> 92                                                                  US percentile for % Low Income #> 93                                      US percentile for % in limited English-speaking Households #> 94                                                                  US percentile for % Unemployed #> 95                                        US percentile for % with Less Than High School Education #> 96                                                           US percentile for Low life expectancy #> 97                                                                 US percentile for % under Age 5 #> 98                                                                 US percentile for % over Age 64 #> 99                                                             US percentile for % People of Color #> 100                                                         US percentile for % Hispanic or Latino #> 101                      US percentile for % Black or African American (non-Hispanic, single race) #> 102                                          US percentile for % Asian (non-Hispanic, single race) #> 103              US percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 104     US percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 105                                     US percentile for % Other race (non-Hispanic, single race) #> 106                                           US percentile for % Two or more races (non-Hispanic) #> 107                                          US percentile for % White (non-Hispanic, single race) #> 108                                                                US Average of Demographic Index #> 109                                                   US Average of Supplemental Demographic Index #> 110                                                                    US average for % Low Income #> 111                                        US average for % in limited English-speaking Households #> 112                                                                    US average for % Unemployed #> 113                                          US average for % with Less Than High School Education #> 114                                                             US average for Low life expectancy #> 115                                                                   US average for % under Age 5 #> 116                                                                   US average for % over Age 64 #> 117                                                               US average for % People of Color #> 118                                                                    US avg % Hispanic or Latino #> 119                                 US avg % Black or African American (non-Hispanic, single race) #> 120                                                     US avg % Asian (non-Hispanic, single race) #> 121                         US avg % American Indian and Alaska Native (non-Hispanic, single race) #> 122                US avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 123                                                US avg % Other race (non-Hispanic, single race) #> 124                                                      US avg % Two or more races (non-Hispanic) #> 125                                                     US avg % White (non-Hispanic, single race) #> 126                                                                 State avg % Hispanic or Latino #> 127                              State avg % Black or African American (non-Hispanic, single race) #> 128                                                  State avg % Asian (non-Hispanic, single race) #> 129                      State avg % American Indian and Alaska Native (non-Hispanic, single race) #> 130             State avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 131                                             State avg % Other race (non-Hispanic, single race) #> 132                                                   State avg % Two or more races (non-Hispanic) #> 133                                                  State avg % White (non-Hispanic, single race) #> 134                                                         State percentile for Demographic Index #> 135                                            State percentile for Supplemental Demographic Index #> 136                                                              State percentile for % Low Income #> 137                                  State percentile for % in limited English-speaking Households #> 138                                                              State percentile for % Unemployed #> 139                                    State percentile for % with Less Than High School Education #> 140                                                       State percentile for Low life expectancy #> 141                                                             State percentile for % under Age 5 #> 142                                                             State percentile for % over Age 64 #> 143                                                         State percentile for % People of Color #> 144                                                      State percentile for % Hispanic or Latino #> 145                   State percentile for % Black or African American (non-Hispanic, single race) #> 146                                       State percentile for % Asian (non-Hispanic, single race) #> 147           State percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 148  State percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 149                                  State percentile for % Other race (non-Hispanic, single race) #> 150                                        State percentile for % Two or more races (non-Hispanic) #> 151                                       State percentile for % White (non-Hispanic, single race) #> 152                                                             State Average of Demographic Index #> 153                                                State Average of Supplemental Demographic Index #> 154                                                                 State average for % Low Income #> 155                                     State average for % in limited English-speaking Households #> 156                                                                 State average for % Unemployed #> 157                                       State average for % with Less Than High School Education #> 158                                                          State average for Low life expectancy #> 159                                                                State average for % under Age 5 #> 160                                                                State average for % over Age 64 #> 161                                                            State average for % People of Color #> 162                                                           Particulate Matter (PM 2.5 in ug/m3) #> 163                                                                                    Ozone (ppb) #> 164                                                      Air Toxics Cancer Risk (risk per million) #> 165                                                            Air Toxics Respiratory Hazard Index #> 166                                                   Air Toxics Diesel Particulate Matter (ug/m3) #> 167                                                     Lead Paint Indicator (% pre-1960s housing) #> 168                            Traffic Proximity and Volume (daily traffic count/distance to road) #> 169                                                   Superfund Proximity (site count/km distance) #> 170                                                     RMP Proximity (facility count/km distance) #> 171                           Indicator for Hazardous Waste Proximity (facility count/km distance) #> 172                      Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 173                                                      Underground Storage Tanks (UST) indicator #> 174                                                                          Toxic Releases to Air #> 175                                         US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 176                                                                  US percentile for Ozone (ppb) #> 177                                    US percentile for Air Toxics Cancer Risk (risk per million) #> 178                                          US percentile for Air Toxics Respiratory Hazard Index #> 179                                 US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 180                                   US percentile for Lead Paint Indicator (% pre-1960s housing) #> 181          US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 182                                 US percentile for Superfund Proximity (site count/km distance) #> 183                                   US percentile for RMP Proximity (facility count/km distance) #> 184                       US percentile for Hazardous Waste Proximity (facility count/km distance) #> 185    US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 186                                    US percentile for Underground Storage Tanks (UST) indicator #> 187                                                        US percentile for Toxic Releases to Air #> 188                                            US average for Particulate Matter (PM 2.5 in ug/m3) #> 189                                                                     US average for Ozone (ppb) #> 190                                       US average for Air Toxics Cancer Risk (risk per million) #> 191                                             US average for Air Toxics Respiratory Hazard Index #> 192                                    US average for Air Toxics Diesel Particulate Matter (ug/m3) #> 193                                      US average for Lead Paint Indicator (% pre-1960s housing) #> 194             US average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 195                                    US average for Superfund Proximity (site count/km distance) #> 196                                      US average for RMP Proximity (facility count/km distance) #> 197                          US average for Hazardous Waste Proximity (facility count/km distance) #> 198       US average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 199                                       US average for Underground Storage Tanks (UST) indicator #> 200                                                                   US avg Toxic Releases to Air #> 201                                      State percentile for Particulate Matter (PM 2.5 in ug/m3) #> 202                                                               State percentile for Ozone (ppb) #> 203                                 State percentile for Air Toxics Cancer Risk (risk per million) #> 204                                       State percentile for Air Toxics Respiratory Hazard Index #> 205                              State percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 206                                State percentile for Lead Paint Indicator (% pre-1960s housing) #> 207       State percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 208                              State percentile for Superfund Proximity (site count/km distance) #> 209                                State percentile for RMP Proximity (facility count/km distance) #> 210                    State percentile for Hazardous Waste Proximity (facility count/km distance) #> 211 State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 212                                 State percentile for Underground Storage Tanks (UST) indicator #> 213                                                     State percentile for Toxic Releases to Air #> 214                                         State average for Particulate Matter (PM 2.5 in ug/m3) #> 215                                                                  State average for Ozone (ppb) #> 216                                    State average for Air Toxics Cancer Risk (risk per million) #> 217                                          State average for Air Toxics Respiratory Hazard Index #> 218                                 State average for Air Toxics Diesel Particulate Matter (ug/m3) #> 219                                   State average for Lead Paint Indicator (% pre-1960s housing) #> 220          State average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 221                                 State average for Superfund Proximity (site count/km distance) #> 222                                   State average for RMP Proximity (facility count/km distance) #> 223                       State average for Hazardous Waste Proximity (facility count/km distance) #> 224    State average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 225                                    State average for Underground Storage Tanks (UST) indicator #> 226                                                                State avg Toxic Releases to Air #> 227                                     US percentile for EJ Index for Particulate Matter (PM 2.5) #> 228                                                           US percentile for EJ Index for Ozone #> 229                                          US percentile for EJ Index for Air Toxics Cancer Risk #> 230                             US percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 231                            US percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 232                                            US percentile for EJ Index for Lead Paint Indicator #> 233                                    US percentile for EJ Index for Traffic Proximity and Volume #> 234                                             US percentile for EJ Index for Superfund Proximity #> 235                                                   US percentile for EJ Index for RMP Proximity #> 236                                       US percentile for EJ Index for Hazardous Waste Proximity #> 237                                  US percentile for EJ Index for Wastewater Discharge Indicator #> 238                       US percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 239                                           US percentile for EJ Index for Toxic Releases to Air #> 240                        US percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 241                                              US percentile for EJ Supplemental Index for Ozone #> 242                             US percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 243                US percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 244               US percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 245                               US percentile for EJ Supplemental Index for Lead Paint Indicator #> 246                       US percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 247                                US percentile for EJ Supplemental Index for Superfund Proximity #> 248                                      US percentile for EJ Supplemental Index for RMP Proximity #> 249                          US percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 250                     US percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 251          US percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 252                                     US Percentile for Toxic Releases to Air Supplemental Index #> 253                                  State percentile for EJ Index for Particulate Matter (PM 2.5) #> 254                                                        State percentile for EJ Index for Ozone #> 255                                       State percentile for EJ Index for Air Toxics Cancer Risk #> 256                          State percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 257                         State percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 258                                         State percentile for EJ Index for Lead Paint Indicator #> 259                                 State percentile for EJ Index for Traffic Proximity and Volume #> 260                                          State percentile for EJ Index for Superfund Proximity #> 261                                                State percentile for EJ Index for RMP Proximity #> 262                                    State percentile for EJ Index for Hazardous Waste Proximity #> 263                               State percentile for EJ Index for Wastewater Discharge Indicator #> 264                    State percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 265                                        State percentile for EJ Index for Toxic Releases to Air #> 266                     State percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 267                                           State percentile for EJ Supplemental Index for Ozone #> 268                          State percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 269             State percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 270            State percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 271                            State percentile for EJ Supplemental Index for Lead Paint Indicator #> 272                    State percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 273                             State percentile for EJ Supplemental Index for Superfund Proximity #> 274                                   State percentile for EJ Supplemental Index for RMP Proximity #> 275                       State percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 276                  State percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 277       State percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 278                                  State Percentile for Toxic Releases to Air Supplemental Index #> 279                                                                      Low income resident count #> 280                                                            Limited English-speaking Households #> 281                                                                      Unemployed resident count #> 282                                                 Less Than High School Education resident count #> 283                                                                     Under Age 5 resident count #> 284                                                                     Over Age 64 resident count #> 285                                                                 People of Color resident count #> 286                                                                    Count of Hispanic or Latino #> 287                                 Count of Black or African American (non-Hispanic, single race) #> 288                                                     Count of Asian (non-Hispanic, single race) #> 289                         Count of American Indian and Alaska Native (non-Hispanic, single race) #> 290                Count of Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 291                                                Count of Other race (non-Hispanic, single race) #> 292                                                      Count of Two or more races (non-Hispanic) #> 293                                                     Count of White (non-Hispanic, single race) #> 294                                      Count of Population for whom Poverty Status is Determined #> 295                                                                  Count of Population Age 25 up #> 296                                                                            Count of Households #> 297                                           Universe for percent unemployed (denominator, count) #> 298                                                          Count of Housing Units Built Pre 1960 #> 299                                   Built housing units count (denominator for percent pre 1960) #> 300                    Number of Persons for whom Language Ability is Determined--age 5 and above. #> 301                                                                          Speak Spanish at Home #> 302                                                           Persons who Speak English Not at All #> 303                                                              Speak Other Indo-European at Home #> 304                                                    Speak Asian-Pacific Island language at Home #> 305                                                   Speak Spanish (in limited English household) #> 306                                       Speak Other Indo-European (in limited English household) #> 307                                      Speak Asian-Pacific Island (in limited English household) #> 308                                                     Speak Other (in limited English household) #> 309                                                                        Population Under Age 18 #> 310                                                                         Population Over Age 17 #> 311                                                                                Male Population #> 312                                                                              Female Population #> 313                                                                   Owner Occupied Housing Units #> 314                                                                         Occupied Housing Units #> 315                                                       Civilian noninstitutionalized population #> 316                                                                                     DISABILITY #> 317                                                                       Life Expectancy in Years #> 318                                                                              Per Capita Income #> 319                                                            Pct. Households below Poverty Level #> 320                                  Percent Speaking Spanish (as % of limited English households) #> 321            Percent Speaking Other Indo-European languages (as % of limited English households) #> 322           Percent Speaking Asian-Pacific Island languages (as % of limited English households) #> 323                          Percent Speaking Other languages (as % of limited English households) #> 324                                                       Percent Break Down by Age below 18 Years #> 325                                                       Percent Break Down by Age above 17 Years #> 326                                                                                  Percent Males #> 327                                                                                Percent Females #> 328                                                                     Census blockgroups (count) #> 329                                                                          Census blocks (count) #> 330                                                                        Buffer distance (miles) #> 331                                                                 Households below Poverty Level #> 332                                                                Particulate Matter 2.5 EJ Index #> 333                                                                                 Ozone EJ Index #> 334                                                                Air toxics cancer risk EJ Index #> 335                                                             Air toxics respiratory HI EJ Index #> 336                                                             Diesel particulate matter EJ Index #> 337                                                                            Lead paint EJ Index #> 338                                                              US raw Traffic proximity EJ Index #> 339                                                            US raw Superfund Proximity EJ Index #> 340                                                                RMP Facility Proximity EJ Index #> 341                                                             Hazardous waste proximity EJ Index #> 342                                                           US raw Wastewater discharge EJ Index #> 343                                                      US raw Underground storage tanks EJ Index #> 344                                                                 Toxic Releases to Air EJ Index #> 345                                                      Particulate Matter 2.5 Supplemental Index #> 346                                                                       Ozone Supplemental Index #> 347                                                      Air Toxics Cancer Risk Supplemental Index #> 348                                                   Air Toxics Respiratory HI Supplemental Index #> 349                                                   Diesel Particulate Matter Supplemental Index #> 350                                                                  Lead Paint Supplemental Index #> 351                                                           Traffic Proximity Supplemental Index #> 352                                                         Superfund Proximity Supplemental Index #> 353                                                      RMP Facility Proximity Supplemental Index #> 354                                                   Hazardous Waste Proximity Supplemental Index #> 355                                                        Wastewater Discharge Supplemental Index #> 356                                                   Underground Storage Tanks Supplemental Index #> 357                                                           EJ Supp: Toxic Releases to Air (raw) #> 358                                                      State raw Particulate Matter 2.5 EJ Index #> 359                                                                       State raw Ozone EJ Index #> 360                                                          State Air toxics cancer risk EJ Index #> 361                                                       State Air toxics respiratory HI EJ Index #> 362                                                       State Diesel particulate matter EJ Index #> 363                                                                      State Lead paint EJ Index #> 364                                                           State raw Traffic proximity EJ Index #> 365                                                         State raw Superfund Proximity EJ Index #> 366                                                      State raw RMP Facility Proximity EJ Index #> 367                                                       State Hazardous waste proximity EJ Index #> 368                                                        State raw Wastewater discharge EJ Index #> 369                                                   State raw Underground storage tanks EJ Index #> 370                                                           State Toxic Releases to Air EJ Index #> 371                                            State raw Particulate Matter 2.5 Supplemental Index #> 372                                                             State raw Ozone Supplemental Index #> 373                                                State Air toxics cancer risk Supplemental Index #> 374                                             State Air toxics respiratory HI Supplemental Index #> 375                                             State Diesel particulate matter Supplemental Index #> 376                                                            State Lead paint Supplemental Index #> 377                                                 State raw Traffic proximity Supplemental Index #> 378                                               State raw Superfund Proximity Supplemental Index #> 379                                            State raw RMP Facility Proximity Supplemental Index #> 380                                             State Hazardous waste proximity Supplemental Index #> 381                                              State raw Wastewater discharge Supplemental Index #> 382                                         State raw Underground storage tanks Supplemental Index #> 383                                                 State Toxic Releases to Air Supplemental Index #> 384                                                                                   distance_min #> 385                                                                         distance_min_avgperson #> 386                                                                                  sitecount_max #> 387                                                                               sitecount_unique #> 388                                                                                  sitecount_avg #> 389                                                           Percent population with Disabilities #> 390                                                                      Owner Occupied households #> 391                                                                                    pct_lan_eng #> 392                                                                                pct_lan_spanish #> 393                                                                                     pct_lan_ie #> 394                                                                                    pct_lan_api  x <- ejam2report(out, sitenumber = 1) table_gt_from_ejamit_1site(out$results_bysite[1, ]) #> <div id=\"gufivjubqt\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#gufivjubqt table { #>   font-family: Arial; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #gufivjubqt thead, #gufivjubqt tbody, #gufivjubqt tfoot, #gufivjubqt tr, #gufivjubqt td, #gufivjubqt th { #>   border-style: none; #> } #>  #> #gufivjubqt p { #>   margin: 0; #>   padding: 0; #> } #>  #> #gufivjubqt .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 13.33px; #>   font-weight: normal; #>   font-style: solid; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 3px; #>   border-top-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 3px; #>   border-right-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 3px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 3px; #>   border-left-color: #AAAAAA; #> } #>  #> #gufivjubqt .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #gufivjubqt .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #gufivjubqt .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #gufivjubqt .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #gufivjubqt .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #gufivjubqt .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #gufivjubqt .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #gufivjubqt .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #gufivjubqt .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #gufivjubqt .gt_group_heading { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 0px; #>   padding-right: 0px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #gufivjubqt .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   vertical-align: middle; #> } #>  #> #gufivjubqt .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #gufivjubqt .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #gufivjubqt .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 10px; #>   padding-right: 10px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #gufivjubqt .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 10px; #>   padding-right: 10px; #> } #>  #> #gufivjubqt .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 0px; #>   padding-right: 0px; #>   vertical-align: top; #> } #>  #> #gufivjubqt .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #gufivjubqt .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #gufivjubqt .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #gufivjubqt .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #gufivjubqt .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #gufivjubqt .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: solid; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_striped { #>   background-color: #DCE6F0; #> } #>  #> #gufivjubqt .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #> } #>  #> #gufivjubqt .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 20px; #>   padding-bottom: 20px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #gufivjubqt .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #gufivjubqt .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #gufivjubqt .gt_left { #>   text-align: left; #> } #>  #> #gufivjubqt .gt_center { #>   text-align: center; #> } #>  #> #gufivjubqt .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #gufivjubqt .gt_font_normal { #>   font-weight: normal; #> } #>  #> #gufivjubqt .gt_font_bold { #>   font-weight: bold; #> } #>  #> #gufivjubqt .gt_font_italic { #>   font-style: italic; #> } #>  #> #gufivjubqt .gt_super { #>   font-size: 65%; #> } #>  #> #gufivjubqt .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #gufivjubqt .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #gufivjubqt .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #gufivjubqt .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #gufivjubqt .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #gufivjubqt .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #gufivjubqt .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Socioeconomic Indicators&lt;/strong&gt;\"><strong>Socioeconomic Indicators<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Value&lt;/strong&gt;\"><strong>Value<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Average<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Percentile<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Average<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Percentile<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; State Avg.&lt;/strong&gt;\"><strong>Ratio to<br> State Avg.<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; USA Avg.&lt;/strong&gt;\"><strong>Ratio to<br> USA Avg.<\/strong><\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">23%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">33%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">42<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">35%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">39<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.7<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.7<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Supplemental Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">16%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">12%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">73<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">63<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% People of Color<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">3%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">45%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">5<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">39%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">9<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% Low Income<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">44%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">22%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">85<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">31%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">74<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">2.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.4<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% Unemployed<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">11%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">82<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">83<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.7<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.9<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% in limited English-speaking Households<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">0%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">7%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">0<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">0<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% with Less Than High School Education<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">4%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">10%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">37<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">12%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">29<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.4<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.3<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% under Age 5<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">0%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">0<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">0<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% over Age 64<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">16%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">58<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">54<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Low life expectancy<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">19%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">18%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">65<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">20%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">48<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.0<\/td><\/tr> #>   <\/tbody> #>    #>   <tfoot class=\"gt_footnotes\"> #>     <tr> #>       <td class=\"gt_footnote\" colspan=\"8\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span> Avg. in state means the average indicator value, among all the residents at these sites, using the statewide value in each resident's state. Percentile in state means the same, but using the site-specific value (expressed as a percentile) where each resident lives.<\/td> #>     <\/tr> #>   <\/tfoot> #> <\/table> #> <\/div> browseURL(x)"},{"path":"https://usepa.github.io/EJAM/reference/ejamit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","title":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","text":"main function EJAM runs analysis. essentially web app , analyze/summarize near set points, set polygons shapefile, list Census Units like Counties.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejamit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","text":"","code":"ejamit(   sitepoints,   radius = 3,   maxradius = 31.07,   avoidorphans = FALSE,   quadtree = NULL,   fips = NULL,   shapefile_folder = NULL,   countcols = NULL,   popmeancols = NULL,   calculatedcols = NULL,   subgroups_type = \"nh\",   include_ejindexes = FALSE,   calculate_ratios = TRUE,   extra_demog = TRUE,   need_proximityscore = FALSE,   infer_sitepoints = FALSE,   need_blockwt = TRUE,   threshold1 = 90,   updateProgress = NULL,   updateProgress_getblocks = NULL,   in_shiny = FALSE,   quiet = TRUE,   parallel = FALSE,   silentinteractive = FALSE,   called_by_ejamit = TRUE,   testing = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/ejamit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","text":"sitepoints data.table columns lat, lon giving point locations sites facilities around circular buffers radius miles, defining circular buffer around site point maxradius miles distance (max distance check even 1 block point within radius) avoidorphans logical TRUE, even 1 BLOCK internal point within radius SITE, keeps looking past radius, maxradius, find nearest 1 BLOCK. EJScreen case report NA, right? , EJAM really need report stats residents presumed within radius, block centroid within radius? Best estimate might report indicators nearest block centroid probably almost always one site sitting inside , ideally adjust total count fraction blockwt based area circular buffer fraction area block apparently inside . Setting TRUE can produce unexpected results, match EJScreen numbers. Note creating proximity score, contrast, instead want find nearest 1 SITE none within radius BLOCK. quadtree (pointer large quadtree object) created using indexblocks() uses SearchTree package. Takes 2-5 seconds create time needed. can automatically created package attached via .onAttach() function fips optional FIPS code vector provide using FIPS instead sitepoints specify places analyze, list US Counties tracts. Passed getblocksnearby_from_fips() shapefile_folder optional path folder shapefiles analyze polygons countcols character vector names variables aggregate within buffer using sum counts, like, example, number people poverty ratio known, count exact denominator needed correctly calculate percent low income. popmeancols character vector names variables aggregate within buffer using population weighted mean. calculatedcols character vector names variables aggregate within buffer using formulas specified. subgroups_type Optional (uses default). Set \"nh\" non-hispanic race subgroups Non-Hispanic White Alone, nhwa others names_d_subgroups_nh; \"alone\" race subgroups like White Alone, wa others names_d_subgroups_alone; \"\" versions. Possibly another option \"original\" \"default\" Alone means single race. include_ejindexes whether try include EJ Indexes (assuming dataset available) - passed doaggregate() calculate_ratios whether calculate return ratio indicator US State overall averages - passed doaggregate() extra_demog include indicators v2.2 report language etc. need_proximityscore whether calculate proximity scores infer_sitepoints set TRUE try infer lat,lon site around blocks sites2blocks found. lat,lon site approximated average nearby blocks, although accurate slower way use reported distance 3 furthest block points triangulate need_blockwt fips parameter used, passed getblocksnearby_from_fips() threshold1 percentile like 80 90 95 compare percentiles \"alone\" groups like white alone (whether hispanic), \"\" may try include , possibly \"original\" \"default\" might added options - passed batch.summarize() updateProgress progress bar function passed doaggregate() shiny app updateProgress_getblocks progress bar function passed getblocksnearby() shiny app in_shiny fips parameter used, passed getblocksnearby_from_fips() quiet Optional. set TRUE avoid message using getblocks_diagnostics(), relevant user saved output function. parallel whether use parallel processing getblocksnearby(), implemented yet. silentinteractive prevent long output showing console RStudio interactive mode, passed doaggregate() also. app server sets TRUE calling doaggregate() ejamit() default set FALSE calling doaggregate(). called_by_ejamit Set TRUE ejamit() suppress outputs even ejamit(silentinteractive=F) testing used testing function","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejamit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","text":"list tables results","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejamit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an EJ analysis (demographic and environmental indicators) in or near a list of locations — ejamit","text":"","code":"# All in one step, using functions not shiny app:  out <- ejamit(testpoints_100_dt, 2) #> Finding blocks nearby. #> Warning: sitepoints did not contain a column named ejam_uniq_id, so one was added #> Analyzing 100 points, radius of 2 miles around each. #> Aggregating at each buffer and overall. #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number.   if (FALSE) {  # Do not specify sitepoints and it will prompt you for a file,  # if in RStudio in interactive mode!  out <- ejamit(radius = 3)    # Specify facilities or sites as points for test data,   # use 1000 test facility points from the R package   testsites <- testpoints_1000   # use facility points in an excel or csv file    testsites <- latlon_from_anything(      system.file(paste0(\"testdata/latlon/\",       \"testpoints_207_sites_with_signif_violations_NAICS_326_ECHO.csv\"),     package = \"EJAM\")     )    # head(testsites)   # use facility points from a random sample of EPA-regulated facilities   testsites <- testpoints_n(1e3)    # Specify max distance from sites to look at (residents within X miles of site point)   radius <- 3.1 # miles    # Get summaries of all indicators near a set of points   out <- ejamit(testsites, radius)   # out <- ejamit(\"myfile.xlsx\", 3.1)    # out2 <- ejscreenit(testpoints_5)    # View results overall   round(t(out$results_overall), 3.1)    # View plots    plot_distance_by_group(results_bybg_people = out$results_bybg_people)    distance_by_group(out$results_bybg_people)    # View maps   mapfast(out$results_bysite, radius = 3.1)    # view results at a single site   mapfast(out$results_bysite, radius = 3.1)   # all the raw numbers at one site   t(out$results_bysite[1, ])    # if doing just 1st step of ejamit()   #  get distance between each site and every nearby Census block    s2b <- testoutput_getblocksnearby_100pts_1miles   getblocks_diagnostics(s2b)    testsites <- testpoints_10[2,]   s2b <- getblocksnearby(testsites, radius = 3.1)   getblocks_diagnostics(s2b)   plotblocksnearby(s2b)    # if doing just 2d step of ejamit()   #  get summaries of all indicators based on table of distances   out <- doaggregate(s2b, testsites) # this works now and is simpler  }"},{"path":"https://usepa.github.io/EJAM/reference/ejampackages.html","id":null,"dir":"Reference","previous_headings":"","what":"ejampackages (DATA) list of names of key EJAM-related R packages — ejampackages","title":"ejampackages (DATA) list of names of key EJAM-related R packages — ejampackages","text":"ejampackages (DATA) list names key EJAM-related R packages","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreenapi2ejam_format.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","title":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","text":"Used ejscreenit_for_ejam() make easier compare EJScreen EJAM results","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreenapi2ejam_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","text":"","code":"ejscreenapi2ejam_format(   ejscreenapi_plus_out,   fillmissingcolumns = FALSE,   ejamcolnames = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/ejscreenapi2ejam_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","text":"ejscreenapi_plus_out results ejscreenapi_plus() also results ejscreenit()$table even though colnames differ, get converted case. Alternatively also can whole list output ejscreenit() just ejscreenit()$table, function figure . fillmissingcolumns optional. set TRUE want output exactly columns EJAM table , fill NA values columns provided EJScreen API. ejamcolnames optional. specified vector colnames, overrides assumed colnames taken colnames(testoutput_ejamit_10pts_1miles$results_bysite). colnames specify colnames output fillmissingcolumns = TRUE, else names(ejscreenapi_plus_out) omitted.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreenapi2ejam_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","text":"data.table just data.frame, columns found output ejamit()$results_bysite","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreenapi2ejam_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EJAM/EJSCREEN comparisons - Convert output of ejscreenapi_plus to format of ejamit table of sites — ejscreenapi2ejam_format","text":"","code":"if (FALSE) {   y1 <- ejscreenit_for_ejam(testpoints_10[1:2, ], radius = 1)     x <- ejscreenapi_plus(testpoints_10[1:2, ], radius = 1)    y <- ejscreenapi2ejam_format(x)    ejamvars <- names(testoutput_ejamit_10pts_1miles$results_bysite)    all.equal(      names(y),       ejamvars[ejamvars %in% names(y)]   )      z <- ejscreenapi2ejam_format(x, fillmissingcolumns = T)   all.equal(names(z), ejamvars)      # for convenience also can do this:   x <- ejscreenapi2ejam_format()      }"},{"path":"https://usepa.github.io/EJAM/reference/ejscreenit_for_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"Get EJScreen results directly from EJScreen servers via their API — ejscreenit_for_ejam","title":"Get EJScreen results directly from EJScreen servers via their API — ejscreenit_for_ejam","text":"wrapper EJAM use ejscreenit() EJAMejscreenapi package","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreenit_for_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get EJScreen results directly from EJScreen servers via their API — ejscreenit_for_ejam","text":"","code":"ejscreenit_for_ejam(sitepoints, radius = 3, fillmissingcolumns = TRUE, ...)"},{"path":"https://usepa.github.io/EJAM/reference/ejscreenit_for_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get EJScreen results directly from EJScreen servers via their API — ejscreenit_for_ejam","text":"sitepoints table lat lon columns radius miles ... passed ejscreenit()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreenit_for_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get EJScreen results directly from EJScreen servers via their API — ejscreenit_for_ejam","text":"data.table looks like output ejamit()$results_bysite","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","text":"main function facilitates comparing EJScreen API vs EJAM stats near site(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","text":"","code":"ejscreen_vs_ejam(   latlon,   radius = 3,   nadrop = FALSE,   save_when_report = TRUE,   report_every_n = 250,   calculate_ratios = FALSE,   include_ejindexes = TRUE,   x100fix = TRUE,   x100varnames = c(names_d, names_d_avg, names_d_state_avg, names_d_subgroups,     names_d_subgroups_avg, names_d_subgroups_state_avg, \"pctdisability\",     \"p_own_occupied\", \"pctunder18\", \"pctover17\", \"pctmale\", \"pctfemale\"),   ... )"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","text":"latlon data.table data.frame colnames lat lon, one row per site radius miles, used ejamit() ejscreenapi_plus() save_when_report see ejscreenapi_plus() report_every_n see ejscreenapi_plus() calculate_ratios passed ejscreenapi_plus() ejamit() x100fix whether multiply x100 names_d names_d_subgroups indicator scores convert fractions 0 1 percentages 0 100, prior rounding reporting EJAM results . x100varnames optional, x100fix=T, vector colnames x$EJAM convert scaled 0 1 rescaled values 0 100, outputs EJSCREEN reported percentages 0 100 0 1 EJAM. ... passed ejamit() additional parameters, like include_ejindexes = FALSE","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","text":"list data frames, names EJSCREEN, EJAM, EJSCREEN_shown, EJAM_shown, same_shown, ratio, diff, absdiff, pctdiff, abspctdiff diff EJAM - EJSCREEN ratio EJAM / EJSCREEN pctdiff ratio - 1 abs absolute value data.frame, colnames indicators like pop, blockcount_near_site, etc. rows represent sites analyzed.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam","text":"Note EJAM tool/ function called ejamit() rely EJScreen calculations instead tries replicate EJScreen . result, early 2024 least, ejamit() much, much faster ejscreenit_for_ejam() provides additional information (distribution distances group, etc.) features (histograms, spreadsheet heatmaps, etc.) flexibility (easy analysts using R customize analysis, etc.), ejamit() always exactly replicate EJScreen -- provide 100% identical results (percentiles, etc.) every indicator every analysis every location. due slight variations details spatial calculations (blocks nearby, sometimes counting 1 extra block 2.99 miles away EJScreen counts outside 3 mile radius, e.g.) rounding (many digits retained calculations, many shown final reports) percentile assignment method (percentile lookup tables used, ties treated percentile lookup tables, etc.), weighted averages formulas used aggregation blockgroup scores (updated 2024 precisely match formulas EJScreen uses)","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_alreadyrun.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","text":"Compare EJScreen API vs EJAM stats near site(s) (results already run)","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_alreadyrun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","text":"","code":"ejscreen_vs_ejam_alreadyrun(   apisite,   ejamsite,   nadrop = FALSE,   x100fix = TRUE,   x100varnames = c(names_d, names_d_avg, names_d_state_avg, names_d_subgroups,     names_d_subgroups_avg, names_d_subgroups_state_avg, \"pctdisability\",     \"p_own_occupied\", \"pctunder18\", \"pctover17\", \"pctmale\", \"pctfemale\") )"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_alreadyrun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","text":"apisite table output ejscreenit()$table, ejscreenapi_plus(), also see ejscreenit_for_ejam() ejamsite table output ejamit()$results_bysite nadrop optional, whether drop indicators EJScreen API returns NA x100fix optional, whether multiply x100 names_d names_d_subgroups indicator scores convert fractions 0 1 percentages 0 100, prior rounding reporting EJAM results . x100varnames optional, x100fix=T, vector colnames x$EJAM convert scaled 0 1 rescaled values 0 100, outputs EJSCREEN reported percentages 0 100 0 1 EJAM.","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_alreadyrun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","text":"prints summary console, returns invisible list data frames, names EJSCREEN, EJAM, EJSCREEN_shown, EJAM_shown, same_shown, ratio, etc. data.frame, colnames indicators like pop, blockcount_near_site, etc. rows represent sites analyzed.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_alreadyrun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EJAM/EJSCREEN comparisons — ejscreen_vs_ejam_alreadyrun","text":"","code":"blah = ejscreen_vs_ejam_alreadyrun(     apisite = testoutput_ejscreenapi_plus_5,     ejamsite = ejamit(testpoints_5, radius = 1, include_ejindexes = TRUE)$results_bysite) #> Error in ejscreen_vs_ejam_alreadyrun(apisite = testoutput_ejscreenapi_plus_5,     ejamsite = ejamit(testpoints_5, radius = 1, include_ejindexes = TRUE)$results_bysite): could not find function \"ejscreen_vs_ejam_alreadyrun\"   ejscreen_vs_ejam_see1(blah, mysite = 1) #> Error in ejscreen_vs_ejam_see1(blah, mysite = 1): object 'blah' not found  if (FALSE) {    # requires data.table    # analyze point(s) in both EJScreen and EJAM   pts <- testpoints_100[1:5, ]   #z <- ejscreen_vs_ejam(testpoints_100[27, ], radius = 3, include_ejindexes = TRUE)      # just 1 point   # z <- ejscreen_vs_ejam(pts[5, ], radius = 3, include_ejindexes = TRUE)      # multiple points   # This step can take a long time, almost 1 minute per 20 points, as it uses the EJScreen API:   z <- ejscreen_vs_ejam(pts, radius = 3, include_ejindexes = TRUE)         # same thing but step by step    api1 <- ejscreenit(pts, radius = 3)    api1 <- api1$table[5, ]    ejam1 <- ejamit(pts, radius = 3, include_ejindexes = TRUE)    ejam1 <- ejam1$results_bysite[5, ]    zzz <- ejscreen_vs_ejam_alreadyrun(api1, ejam1)        # to keep it as a list of data.frames but just 1 row each now:    zlist1 <- lapply(z, function(x) x[myrow, ])    names(zlist1); sapply(zlist1, dim)        # look at a table about just 1 site among those analyzed, e.g., the first one:    myrow <- 1    z1 <- data.frame(sapply(z, function(x) x[myrow, ]))    # but that creates a data.frame where each column is a list...                     # **** WORK IN PROGRESS ... *** !!!!!                          # Reported key indicators - which ones do or don't match    # when comparing EJSCREEN and EJAM results?    keyreportnames <- c('pop', names_these, names_pctile, names_state_pctile)    rname <- colnames(z$EJAM)    z1[rname %in% keyreportnames &  z1$same_shown, ]    z1[rname %in% keyreportnames & !z1$same_shown & !is.na(z1$EJSCREEN), ]       # Reported (rounded) numbers match:    z[z$same_shown , ]    # Reports disagree:     #  (and not just because of percentages being of 100 vs of 1.00)    z[!z$same_shown & !is.na(z$EJSCREEN) & z$ratio != 0.01, ]     # Reports disagree if percentages reported as 0-100 vs fractions 0-1.00    z[z$ratio == 0.01 & !is.na(z$ratio), ]            # site number 1    z1 <- sapply(z, function(x) (x[1,]))    # Reported key indicators - which ones do or don't match    # when comparing EJSCREEN and EJAM results?    keyreportnames <- c('pop', names_these, names_pctile, names_state_pctile)    z1[z1$rname %in% keyreportnames &  z1$same_shown, ]    z1[z1$rname %in% keyreportnames & !z1$same_shown & !is.na(z1$EJSCREEN), ]        # Reported (rounded) numbers match:    z1[z1$same_shown , ]    # Reports disagree:     #  (and not just because of percentages being of 100 vs of 1.00)    z1[!z1$same_shown & !is.na(z1$EJSCREEN) & z1$ratio != 0.01, ]     # Reports disagree if percentages reported as 0-100 vs fractions 0-1.00    z1[z1$ratio == 0.01 & !is.na(z1$ratio), ]        # Comparing across sites:        # .... to be continued ...       }"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons - see results for 1 site after using ejscreen_vs_ejam() — ejscreen_vs_ejam_see1","title":"EJAM/EJSCREEN comparisons - see results for 1 site after using ejscreen_vs_ejam() — ejscreen_vs_ejam_see1","text":"EJAM/EJSCREEN comparisons - see results 1 site using ejscreen_vs_ejam()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons - see results for 1 site after using ejscreen_vs_ejam() — ejscreen_vs_ejam_see1","text":"","code":"ejscreen_vs_ejam_see1(z, myvars = names_d, mysite = 1)"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons - see results for 1 site after using ejscreen_vs_ejam() — ejscreen_vs_ejam_see1","text":"z output ejscreen_vs_ejam() myvars optional check just subset colnames found z$EJAM z$EJSCREEN, myvars = colnames(z$EJAM) myvars = c(names_d, names_d_subgroups) myvars = grep(\"pctile\", colnames(z$EJAM), value = T) mysite rownumber corresponding site interest, among 1:nrow(z$EJAM)","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons - see results for 1 site after using ejscreen_vs_ejam() — ejscreen_vs_ejam_see1","text":"table showing one row per indicator, columns like EJSCREEN, EJAM, ratio, etc.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1map.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons - see map and tables of blocks near a site to explain discrepancy in pop and blocks — ejscreen_vs_ejam_see1map","title":"EJAM/EJSCREEN comparisons - see map and tables of blocks near a site to explain discrepancy in pop and blocks — ejscreen_vs_ejam_see1map","text":"EJAM/EJSCREEN comparisons - see map tables blocks near site explain discrepancy pop blocks","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons - see map and tables of blocks near a site to explain discrepancy in pop and blocks — ejscreen_vs_ejam_see1map","text":"","code":"ejscreen_vs_ejam_see1map(n = 1, x, overlay_blockgroups = FALSE, ...)"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons - see map and tables of blocks near a site to explain discrepancy in pop and blocks — ejscreen_vs_ejam_see1map","text":"n row number x$EJAM site check x results  x <- ejscreen_vs_ejam(testpoints_10, radius =3, include_ejindexes = TRUE) overlay_blockgroups optional, set TRUE see overlay boundaries parent blockgroups, noting click turn layer block point info popups work ... passed plotblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_see1map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons - see map and tables of blocks near a site to explain discrepancy in pop and blocks — ejscreen_vs_ejam_see1map","text":"Just draws map shows tables returns output ejscreen_vs_ejam_see1()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons - see summary stats after using ejscreen_vs_ejam() — ejscreen_vs_ejam_summary","title":"EJAM/EJSCREEN comparisons - see summary stats after using ejscreen_vs_ejam() — ejscreen_vs_ejam_summary","text":"EJAM/EJSCREEN comparisons - see summary stats using ejscreen_vs_ejam()","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons - see summary stats after using ejscreen_vs_ejam() — ejscreen_vs_ejam_summary","text":"","code":"ejscreen_vs_ejam_summary(   z = ejscreen_vs_ejam(),   myvars = colnames(z$EJAM),   tol = 0.01,   prob = 0.95,   na.rm = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons - see summary stats after using ejscreen_vs_ejam() — ejscreen_vs_ejam_summary","text":"z output ejscreen_vs_ejam() myvars optional check just subset colnames found z$EJAM z$EJSCREEN, myvars = c(names_d, names_d_subgroups) myvars = grep(\"pctile\", colnames(z$EJAM), value = T) tol optional, set results can said agree tolerance differ less tol percent tol expressed fraction 0 1. prob optional fraction 1 representing percentile p check absolute percentage differences. See within.x.pct..p.pct..sites value returned. na.rm needs testing, optional","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons - see summary stats after using ejscreen_vs_ejam() — ejscreen_vs_ejam_summary","text":"data.frame summary stats showing counts percents analyzed sites (valid data found EJAM EJSCREEN outputs), indicating many sites agree EJSCREEN EJAM estimates, exactly reported within tolerance. Columns include \"indicator\" (variable name) \"sites..data.ejam\" many sites value EJAM given indicator? \"sites..data.neither\" many sites NA EJAM EJSCREEN? \"sites..data.\" \"sites.agree.rounded\" many sites agree (EJSCREEN vs EJAM) value shown reports? .e., reported, rounded value. \"sites.agree.within.tol\" many sites agree within tol? (.e., tol x 100 percent) \"pct..sites.agree.rounded\"  percent 0-100% sites data \"pct..sites.agree.within.tol\"  percent 0-100% sites data \"median.abs.diff\" Median sites data, absolute differences, EJAM - EJSCREEN \"max.abs.diff\" \"mean.pct.diff\" Percent difference 0-100% absolute value 100*(ratio - 1), ratio EJAM/EJSCREEN \"median.pct.diff\" 0-100% \"max.pct.diff\" 0-100% \"within.x.pct..p.pct..sites\"  X, EJAM EJSCREEN agree within X percent 0-100% better prob share sites. Prob share used last stat mean prob (e.g. 0.95) share sites absolute percentage difference estimated indicator values less equal x x one actual values abspctdiff found * 100. uses 100 * quantile(y, probs = prob, type = 1)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"EJAM/EJSCREEN comparisons - see quantiles over tested sites, of a stat like ratio of EJAM/EJSCREEN — ejscreen_vs_ejam_summary_quantiles","title":"EJAM/EJSCREEN comparisons - see quantiles over tested sites, of a stat like ratio of EJAM/EJSCREEN — ejscreen_vs_ejam_summary_quantiles","text":"EJAM/EJSCREEN comparisons - see quantiles tested sites, stat like ratio EJAM/EJSCREEN","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EJAM/EJSCREEN comparisons - see quantiles over tested sites, of a stat like ratio of EJAM/EJSCREEN — ejscreen_vs_ejam_summary_quantiles","text":"","code":"ejscreen_vs_ejam_summary_quantiles(   z,   mystat = c(\"ratio\", \"diff\", \"absdiff\", \"pctdiff\", \"abspctdiff\")[1],   myvars = c(\"pop\", names_these),   probs = (0:20)/20,   na.rm = TRUE,   digits = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EJAM/EJSCREEN comparisons - see quantiles over tested sites, of a stat like ratio of EJAM/EJSCREEN — ejscreen_vs_ejam_summary_quantiles","text":"z output ejscreen_vs_ejam() mystat just one (1) : \"ratio\", \"diff\", \"absdiff\", \"pctdiff\", \"abspctdiff\" myvars optional vector indicators, check just subset colnames found z$EJAM z$EJSCREEN, myvars = c(names_d, names_d_subgroups) myvars = grep(\"pctile\", colnames(z$EJAM), value = T) probs optional vector probabilities 0 1 pass quantile() na.rm optional, leave default TRUE digits round results many digits","code":""},{"path":"https://usepa.github.io/EJAM/reference/ejscreen_vs_ejam_summary_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EJAM/EJSCREEN comparisons - see quantiles over tested sites, of a stat like ratio of EJAM/EJSCREEN — ejscreen_vs_ejam_summary_quantiles","text":"table percentiles across analyzed locations, stat like ratio EJAM estimates EJSCREEN estimates, specified list indicators like names_d","code":""},{"path":"https://usepa.github.io/EJAM/reference/epa_programs.html","id":null,"dir":"Reference","previous_headings":"","what":"epa_programs (DATA) named vector with program counts — epa_programs","title":"epa_programs (DATA) named vector with program counts — epa_programs","text":"named vector EPA programs lists programs names programs program counts. Used EJAM shiny app dropdown menu.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/epa_programs.html","id":"for-a-table-sorted-by-how-many-facilities-from-frs-are-listed-for-each-program-","dir":"Reference","previous_headings":"","what":"For a table sorted by how many facilities from FRS are listed for each program:","title":"epa_programs (DATA) named vector with program counts — epa_programs","text":"epa_programs_counts <- frs_by_programid[, .N, =\"program\"][order(N), ]","code":""},{"path":"https://usepa.github.io/EJAM/reference/epa_programs.html","id":"top-federal-ones-by-trying-to-exclude-state-databases-from-the-list-","dir":"Reference","previous_headings":"","what":"Top 25 Federal ones (by trying to exclude State databases from the list)","title":"epa_programs (DATA) named vector with program counts — epa_programs","text":"epa_programs_counts$fed = !grepl(\"^[-Z]{2}[-]\", .vector(epa_programs_counts$program),1,3) epa_programs_counts[fed == TRUE, ][order(-N), ][1:25, ] Also see frs_by_programid","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full demog. or envt. HTML table of indicator rows — fill_tbl_full","title":"Create full demog. or envt. HTML table of indicator rows — fill_tbl_full","text":"Create full demog. envt. HTML table indicator rows","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full demog. or envt. HTML table of indicator rows — fill_tbl_full","text":"","code":"fill_tbl_full(output_df)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full demog. or envt. HTML table of indicator rows — fill_tbl_full","text":"output_df, single row results table doaggregate - either results_overall one row bysite","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_ej.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full EJ + EJ supp index HTML table of indicator rows — fill_tbl_full_ej","title":"Create full EJ + EJ supp index HTML table of indicator rows — fill_tbl_full_ej","text":"Create full EJ + EJ supp index HTML table indicator rows","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_ej.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full EJ + EJ supp index HTML table of indicator rows — fill_tbl_full_ej","text":"","code":"fill_tbl_full_ej(output_df)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_ej.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full EJ + EJ supp index HTML table of indicator rows — fill_tbl_full_ej","text":"output_df, single row results table doaggregate - either results_overall one row bysite","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full demog subgroup HTML table of indicator rows — fill_tbl_full_subgroups","title":"Create full demog subgroup HTML table of indicator rows — fill_tbl_full_subgroups","text":"Create full demog subgroup HTML table indicator rows","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full demog subgroup HTML table of indicator rows — fill_tbl_full_subgroups","text":"","code":"fill_tbl_full_subgroups(output_df)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_full_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full demog subgroup HTML table of indicator rows — fill_tbl_full_subgroups","text":"output_df, single row results table doaggregate - either results_overall one row bysite","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a demog. or envt. indicator to an html table row — fill_tbl_row","title":"Write a demog. or envt. indicator to an html table row — fill_tbl_row","text":"Write demog. envt. indicator html table row","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a demog. or envt. indicator to an html table row — fill_tbl_row","text":"","code":"fill_tbl_row(output_df, var_value, var_name)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a demog. or envt. indicator to an html table row — fill_tbl_row","text":"output_df, single row results table doaggregate - either results_overall one row bysite var_value, variable name indicator pull results, 'pm', 'pctlowinc', 'Demog.Index' var_name, nicer name indicator use table row; can include HTML sub/superscripts","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_ej.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an EJ or EJ supp index to an html table row — fill_tbl_row_ej","title":"Write an EJ or EJ supp index to an html table row — fill_tbl_row_ej","text":"Write EJ EJ supp index html table row","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_ej.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an EJ or EJ supp index to an html table row — fill_tbl_row_ej","text":"","code":"fill_tbl_row_ej(output_df, var_value, var_name)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_ej.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an EJ or EJ supp index to an html table row — fill_tbl_row_ej","text":"output_df, single row results table doaggregate - either results_overall one row bysite var_value, variable name indicator pull results, 'pm', 'pctlowinc', 'Demog.Index' var_name, nicer name indicator use table row; can include HTML sub/superscripts","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_subgroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a demographic subgroup indicator to an html table row — fill_tbl_row_subgroups","title":"Write a demographic subgroup indicator to an html table row — fill_tbl_row_subgroups","text":"Write demographic subgroup indicator html table row","code":""},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_subgroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a demographic subgroup indicator to an html table row — fill_tbl_row_subgroups","text":"","code":"fill_tbl_row_subgroups(output_df, var_value, var_name)"},{"path":"https://usepa.github.io/EJAM/reference/fill_tbl_row_subgroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a demographic subgroup indicator to an html table row — fill_tbl_row_subgroups","text":"output_df, single row results table doaggregate - either results_overall one row bysite var_value, variable name indicator pull results, 'pm', 'pctlowinc', 'Demog.Index' var_name, nicer name indicator use table row; can include HTML sub/superscripts","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2countyname.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get county names from county FIPS codes — fips2countyname","title":"FIPS - Get county names from county FIPS codes — fips2countyname","text":"FIPS - Get county names county FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2countyname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get county names from county FIPS codes — fips2countyname","text":"","code":"fips2countyname(fips, includestate = c(\"ST\", \"Statename\", \"\")[1])"},{"path":"https://usepa.github.io/EJAM/reference/fips2countyname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get county names from county FIPS codes — fips2countyname","text":"fips vector US Census FIPS codes Counties (5 digits ). can string numeric, without leading zeroes. includestate can ST, Statename, \"\", TRUE specify anything comes county name comma","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2countyname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get county names from county FIPS codes — fips2countyname","text":"vector county names, optionally comma 2-character abbreviation full state name.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2countyname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get county names from county FIPS codes — fips2countyname","text":"","code":"# names of all counties in ME and NY   fips2countyname(fips_counties_from_state_abbrev(c(\"ME\", \"NY\")), includestate = \"ST\") #>  [1] \"Androscoggin County, ME\" \"Aroostook County, ME\"    #>  [3] \"Cumberland County, ME\"   \"Franklin County, ME\"     #>  [5] \"Hancock County, ME\"      \"Kennebec County, ME\"     #>  [7] \"Knox County, ME\"         \"Lincoln County, ME\"      #>  [9] \"Oxford County, ME\"       \"Penobscot County, ME\"    #> [11] \"Piscataquis County, ME\"  \"Sagadahoc County, ME\"    #> [13] \"Somerset County, ME\"     \"Waldo County, ME\"        #> [15] \"Washington County, ME\"   \"York County, ME\"         #> [17] \"Albany County, NY\"       \"Allegany County, NY\"     #> [19] \"Bronx County, NY\"        \"Broome County, NY\"       #> [21] \"Cattaraugus County, NY\"  \"Cayuga County, NY\"       #> [23] \"Chautauqua County, NY\"   \"Chemung County, NY\"      #> [25] \"Chenango County, NY\"     \"Clinton County, NY\"      #> [27] \"Columbia County, NY\"     \"Cortland County, NY\"     #> [29] \"Delaware County, NY\"     \"Dutchess County, NY\"     #> [31] \"Erie County, NY\"         \"Essex County, NY\"        #> [33] \"Franklin County, NY\"     \"Fulton County, NY\"       #> [35] \"Genesee County, NY\"      \"Greene County, NY\"       #> [37] \"Hamilton County, NY\"     \"Herkimer County, NY\"     #> [39] \"Jefferson County, NY\"    \"Kings County, NY\"        #> [41] \"Lewis County, NY\"        \"Livingston County, NY\"   #> [43] \"Madison County, NY\"      \"Monroe County, NY\"       #> [45] \"Montgomery County, NY\"   \"Nassau County, NY\"       #> [47] \"New York County, NY\"     \"Niagara County, NY\"      #> [49] \"Oneida County, NY\"       \"Onondaga County, NY\"     #> [51] \"Ontario County, NY\"      \"Orange County, NY\"       #> [53] \"Orleans County, NY\"      \"Oswego County, NY\"       #> [55] \"Otsego County, NY\"       \"Putnam County, NY\"       #> [57] \"Queens County, NY\"       \"Rensselaer County, NY\"   #> [59] \"Richmond County, NY\"     \"Rockland County, NY\"     #> [61] \"St. Lawrence County, NY\" \"Saratoga County, NY\"     #> [63] \"Schenectady County, NY\"  \"Schoharie County, NY\"    #> [65] \"Schuyler County, NY\"     \"Seneca County, NY\"       #> [67] \"Steuben County, NY\"      \"Suffolk County, NY\"      #> [69] \"Sullivan County, NY\"     \"Tioga County, NY\"        #> [71] \"Tompkins County, NY\"     \"Ulster County, NY\"       #> [73] \"Warren County, NY\"       \"Washington County, NY\"   #> [75] \"Wayne County, NY\"        \"Westchester County, NY\"  #> [77] \"Wyoming County, NY\"      \"Yates County, NY\"           fips_counties_from_state_abbrev(c(\"AK\", \"LA\")) #>  [1] \"02013\" \"02016\" \"02020\" \"02050\" \"02060\" \"02063\" \"02066\" \"02068\" \"02070\" #> [10] \"02090\" \"02100\" \"02105\" \"02110\" \"02122\" \"02130\" \"02150\" \"02158\" \"02164\" #> [19] \"02170\" \"02180\" \"02185\" \"02188\" \"02195\" \"02198\" \"02220\" \"02230\" \"02240\" #> [28] \"02275\" \"02282\" \"02290\" \"22001\" \"22003\" \"22005\" \"22007\" \"22009\" \"22011\" #> [37] \"22013\" \"22015\" \"22017\" \"22019\" \"22021\" \"22023\" \"22025\" \"22027\" \"22029\" #> [46] \"22031\" \"22033\" \"22035\" \"22037\" \"22039\" \"22041\" \"22043\" \"22045\" \"22047\" #> [55] \"22049\" \"22051\" \"22053\" \"22055\" \"22057\" \"22059\" \"22061\" \"22063\" \"22065\" #> [64] \"22067\" \"22069\" \"22071\" \"22073\" \"22075\" \"22077\" \"22079\" \"22081\" \"22083\" #> [73] \"22085\" \"22087\" \"22089\" \"22091\" \"22093\" \"22095\" \"22097\" \"22099\" \"22101\" #> [82] \"22103\" \"22105\" \"22107\" \"22109\" \"22111\" \"22113\" \"22115\" \"22117\" \"22119\" #> [91] \"22121\" \"22123\" \"22125\" \"22127\""},{"path":"https://usepa.github.io/EJAM/reference/fips2name.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get county or state names from county or state FIPS codes — fips2name","title":"FIPS - Get county or state names from county or state FIPS codes — fips2name","text":"FIPS - Get county state names county state FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get county or state names from county or state FIPS codes — fips2name","text":"","code":"fips2name(fips, ...)"},{"path":"https://usepa.github.io/EJAM/reference/fips2name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get county or state names from county or state FIPS codes — fips2name","text":"fips vector US Census FIPS codes Counties (5 digits ) States (2 digits). Can string numeric, without leading zeroes. ... passed fips2countyname() control whether appends something like , NY , New York county name","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get county or state names from county or state FIPS codes — fips2name","text":"vector state /county names, county names optionally comma 2-character abbreviation full state name.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get county or state names from county or state FIPS codes — fips2name","text":"","code":"fips2name(fips_counties_from_state_abbrev(c(\"AK\", \"LA\"))  ) #>  [1] \"Aleutians East Borough, AK\"            #>  [2] \"Aleutians West Census Area, AK\"        #>  [3] \"Anchorage Municipality, AK\"            #>  [4] \"Bethel Census Area, AK\"                #>  [5] \"Bristol Bay Borough, AK\"               #>  [6] \"Chugach Census Area, AK\"               #>  [7] \"Copper River Census Area, AK\"          #>  [8] \"Denali Borough, AK\"                    #>  [9] \"Dillingham Census Area, AK\"            #> [10] \"Fairbanks North Star Borough, AK\"      #> [11] \"Haines Borough, AK\"                    #> [12] \"Hoonah-Angoon Census Area, AK\"         #> [13] \"Juneau City and Borough, AK\"           #> [14] \"Kenai Peninsula Borough, AK\"           #> [15] \"Ketchikan Gateway Borough, AK\"         #> [16] \"Kodiak Island Borough, AK\"             #> [17] \"Kusilvak Census Area, AK\"              #> [18] \"Lake and Peninsula Borough, AK\"        #> [19] \"Matanuska-Susitna Borough, AK\"         #> [20] \"Nome Census Area, AK\"                  #> [21] \"North Slope Borough, AK\"               #> [22] \"Northwest Arctic Borough, AK\"          #> [23] \"Petersburg Borough, AK\"                #> [24] \"Prince of Wales-Hyder Census Area, AK\" #> [25] \"Sitka City and Borough, AK\"            #> [26] \"Skagway Municipality, AK\"              #> [27] \"Southeast Fairbanks Census Area, AK\"   #> [28] \"Wrangell City and Borough, AK\"         #> [29] \"Yakutat City and Borough, AK\"          #> [30] \"Yukon-Koyukuk Census Area, AK\"         #> [31] \"Acadia Parish, LA\"                     #> [32] \"Allen Parish, LA\"                      #> [33] \"Ascension Parish, LA\"                  #> [34] \"Assumption Parish, LA\"                 #> [35] \"Avoyelles Parish, LA\"                  #> [36] \"Beauregard Parish, LA\"                 #> [37] \"Bienville Parish, LA\"                  #> [38] \"Bossier Parish, LA\"                    #> [39] \"Caddo Parish, LA\"                      #> [40] \"Calcasieu Parish, LA\"                  #> [41] \"Caldwell Parish, LA\"                   #> [42] \"Cameron Parish, LA\"                    #> [43] \"Catahoula Parish, LA\"                  #> [44] \"Claiborne Parish, LA\"                  #> [45] \"Concordia Parish, LA\"                  #> [46] \"De Soto Parish, LA\"                    #> [47] \"East Baton Rouge Parish, LA\"           #> [48] \"East Carroll Parish, LA\"               #> [49] \"East Feliciana Parish, LA\"             #> [50] \"Evangeline Parish, LA\"                 #> [51] \"Franklin Parish, LA\"                   #> [52] \"Grant Parish, LA\"                      #> [53] \"Iberia Parish, LA\"                     #> [54] \"Iberville Parish, LA\"                  #> [55] \"Jackson Parish, LA\"                    #> [56] \"Jefferson Parish, LA\"                  #> [57] \"Jefferson Davis Parish, LA\"            #> [58] \"Lafayette Parish, LA\"                  #> [59] \"Lafourche Parish, LA\"                  #> [60] \"LaSalle Parish, LA\"                    #> [61] \"Lincoln Parish, LA\"                    #> [62] \"Livingston Parish, LA\"                 #> [63] \"Madison Parish, LA\"                    #> [64] \"Morehouse Parish, LA\"                  #> [65] \"Natchitoches Parish, LA\"               #> [66] \"Orleans Parish, LA\"                    #> [67] \"Ouachita Parish, LA\"                   #> [68] \"Plaquemines Parish, LA\"                #> [69] \"Pointe Coupee Parish, LA\"              #> [70] \"Rapides Parish, LA\"                    #> [71] \"Red River Parish, LA\"                  #> [72] \"Richland Parish, LA\"                   #> [73] \"Sabine Parish, LA\"                     #> [74] \"St. Bernard Parish, LA\"                #> [75] \"St. Charles Parish, LA\"                #> [76] \"St. Helena Parish, LA\"                 #> [77] \"St. James Parish, LA\"                  #> [78] \"St. John the Baptist Parish, LA\"       #> [79] \"St. Landry Parish, LA\"                 #> [80] \"St. Martin Parish, LA\"                 #> [81] \"St. Mary Parish, LA\"                   #> [82] \"St. Tammany Parish, LA\"                #> [83] \"Tangipahoa Parish, LA\"                 #> [84] \"Tensas Parish, LA\"                     #> [85] \"Terrebonne Parish, LA\"                 #> [86] \"Union Parish, LA\"                      #> [87] \"Vermilion Parish, LA\"                  #> [88] \"Vernon Parish, LA\"                     #> [89] \"Washington Parish, LA\"                 #> [90] \"Webster Parish, LA\"                    #> [91] \"West Baton Rouge Parish, LA\"           #> [92] \"West Carroll Parish, LA\"               #> [93] \"West Feliciana Parish, LA\"             #> [94] \"Winn Parish, LA\"                         fips2name(c(22, 02013))  # can have mix where some are a whole state and others are a county. #> [1] \"Louisiana\"                  \"Aleutians East Borough, AK\""},{"path":"https://usepa.github.io/EJAM/reference/fips2statename.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get state names from any type of FIPS codes — fips2statename","title":"FIPS - Get state names from any type of FIPS codes — fips2statename","text":"FIPS - Get state names type FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2statename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get state names from any type of FIPS codes — fips2statename","text":"","code":"fips2statename(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fips2statename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get state names from any type of FIPS codes — fips2statename","text":"fips vector FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2statename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get state names from any type of FIPS codes — fips2statename","text":"vector state names","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2statename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get state names from any type of FIPS codes — fips2statename","text":"","code":"cbind(fips_lead_zero(1:80), fips2state_abbrev(1:80), fips2statename(1:80)) #>       [,1] [,2] [,3]                   #>  [1,] \"01\" \"AL\" \"Alabama\"              #>  [2,] \"02\" \"AK\" \"Alaska\"               #>  [3,] \"03\" NA   NA                     #>  [4,] \"04\" \"AZ\" \"Arizona\"              #>  [5,] \"05\" \"AR\" \"Arkansas\"             #>  [6,] \"06\" \"CA\" \"California\"           #>  [7,] \"07\" NA   NA                     #>  [8,] \"08\" \"CO\" \"Colorado\"             #>  [9,] \"09\" \"CT\" \"Connecticut\"          #> [10,] \"10\" \"DE\" \"Delaware\"             #> [11,] \"11\" \"DC\" \"District of Columbia\" #> [12,] \"12\" \"FL\" \"Florida\"              #> [13,] \"13\" \"GA\" \"Georgia\"              #> [14,] \"14\" NA   NA                     #> [15,] \"15\" \"HI\" \"Hawaii\"               #> [16,] \"16\" \"ID\" \"Idaho\"                #> [17,] \"17\" \"IL\" \"Illinois\"             #> [18,] \"18\" \"IN\" \"Indiana\"              #> [19,] \"19\" \"IA\" \"Iowa\"                 #> [20,] \"20\" \"KS\" \"Kansas\"               #> [21,] \"21\" \"KY\" \"Kentucky\"             #> [22,] \"22\" \"LA\" \"Louisiana\"            #> [23,] \"23\" \"ME\" \"Maine\"                #> [24,] \"24\" \"MD\" \"Maryland\"             #> [25,] \"25\" \"MA\" \"Massachusetts\"        #> [26,] \"26\" \"MI\" \"Michigan\"             #> [27,] \"27\" \"MN\" \"Minnesota\"            #> [28,] \"28\" \"MS\" \"Mississippi\"          #> [29,] \"29\" \"MO\" \"Missouri\"             #> [30,] \"30\" \"MT\" \"Montana\"              #> [31,] \"31\" \"NE\" \"Nebraska\"             #> [32,] \"32\" \"NV\" \"Nevada\"               #> [33,] \"33\" \"NH\" \"New Hampshire\"        #> [34,] \"34\" \"NJ\" \"New Jersey\"           #> [35,] \"35\" \"NM\" \"New Mexico\"           #> [36,] \"36\" \"NY\" \"New York\"             #> [37,] \"37\" \"NC\" \"North Carolina\"       #> [38,] \"38\" \"ND\" \"North Dakota\"         #> [39,] \"39\" \"OH\" \"Ohio\"                 #> [40,] \"40\" \"OK\" \"Oklahoma\"             #> [41,] \"41\" \"OR\" \"Oregon\"               #> [42,] \"42\" \"PA\" \"Pennsylvania\"         #> [43,] \"43\" NA   NA                     #> [44,] \"44\" \"RI\" \"Rhode Island\"         #> [45,] \"45\" \"SC\" \"South Carolina\"       #> [46,] \"46\" \"SD\" \"South Dakota\"         #> [47,] \"47\" \"TN\" \"Tennessee\"            #> [48,] \"48\" \"TX\" \"Texas\"                #> [49,] \"49\" \"UT\" \"Utah\"                 #> [50,] \"50\" \"VT\" \"Vermont\"              #> [51,] \"51\" \"VA\" \"Virginia\"             #> [52,] \"52\" NA   NA                     #> [53,] \"53\" \"WA\" \"Washington\"           #> [54,] \"54\" \"WV\" \"West Virginia\"        #> [55,] \"55\" \"WI\" \"Wisconsin\"            #> [56,] \"56\" \"WY\" \"Wyoming\"              #> [57,] \"57\" NA   NA                     #> [58,] \"58\" NA   NA                     #> [59,] \"59\" NA   NA                     #> [60,] \"60\" NA   NA                     #> [61,] \"61\" NA   NA                     #> [62,] \"62\" NA   NA                     #> [63,] \"63\" NA   NA                     #> [64,] \"64\" NA   NA                     #> [65,] \"65\" NA   NA                     #> [66,] \"66\" NA   NA                     #> [67,] \"67\" NA   NA                     #> [68,] \"68\" NA   NA                     #> [69,] \"69\" NA   NA                     #> [70,] \"70\" NA   NA                     #> [71,] \"71\" NA   NA                     #> [72,] \"72\" \"PR\" \"Puerto Rico\"          #> [73,] \"73\" NA   NA                     #> [74,] \"74\" NA   NA                     #> [75,] \"75\" NA   NA                     #> [76,] \"76\" NA   NA                     #> [77,] \"77\" NA   NA                     #> [78,] \"78\" NA   NA                     #> [79,] \"79\" NA   NA                     #> [80,] \"80\" NA   NA"},{"path":"https://usepa.github.io/EJAM/reference/fips2state_abbrev.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","title":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","text":"FIPS - Get state abbreviations type FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_abbrev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","text":"","code":"fips2state_abbrev(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fips2state_abbrev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","text":"fips vector FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_abbrev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","text":"vector abbreviations like \"NY\", \"LA\", \"DE\", etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_abbrev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get state abbreviations from any type of FIPS codes — fips2state_abbrev","text":"","code":"cbind(     stfips    = fips_lead_zero(1:80),     ST     = fips2state_abbrev(1:80),     statename = fips2statename(1:80)   ) #>       stfips ST   statename              #>  [1,] \"01\"   \"AL\" \"Alabama\"              #>  [2,] \"02\"   \"AK\" \"Alaska\"               #>  [3,] \"03\"   NA   NA                     #>  [4,] \"04\"   \"AZ\" \"Arizona\"              #>  [5,] \"05\"   \"AR\" \"Arkansas\"             #>  [6,] \"06\"   \"CA\" \"California\"           #>  [7,] \"07\"   NA   NA                     #>  [8,] \"08\"   \"CO\" \"Colorado\"             #>  [9,] \"09\"   \"CT\" \"Connecticut\"          #> [10,] \"10\"   \"DE\" \"Delaware\"             #> [11,] \"11\"   \"DC\" \"District of Columbia\" #> [12,] \"12\"   \"FL\" \"Florida\"              #> [13,] \"13\"   \"GA\" \"Georgia\"              #> [14,] \"14\"   NA   NA                     #> [15,] \"15\"   \"HI\" \"Hawaii\"               #> [16,] \"16\"   \"ID\" \"Idaho\"                #> [17,] \"17\"   \"IL\" \"Illinois\"             #> [18,] \"18\"   \"IN\" \"Indiana\"              #> [19,] \"19\"   \"IA\" \"Iowa\"                 #> [20,] \"20\"   \"KS\" \"Kansas\"               #> [21,] \"21\"   \"KY\" \"Kentucky\"             #> [22,] \"22\"   \"LA\" \"Louisiana\"            #> [23,] \"23\"   \"ME\" \"Maine\"                #> [24,] \"24\"   \"MD\" \"Maryland\"             #> [25,] \"25\"   \"MA\" \"Massachusetts\"        #> [26,] \"26\"   \"MI\" \"Michigan\"             #> [27,] \"27\"   \"MN\" \"Minnesota\"            #> [28,] \"28\"   \"MS\" \"Mississippi\"          #> [29,] \"29\"   \"MO\" \"Missouri\"             #> [30,] \"30\"   \"MT\" \"Montana\"              #> [31,] \"31\"   \"NE\" \"Nebraska\"             #> [32,] \"32\"   \"NV\" \"Nevada\"               #> [33,] \"33\"   \"NH\" \"New Hampshire\"        #> [34,] \"34\"   \"NJ\" \"New Jersey\"           #> [35,] \"35\"   \"NM\" \"New Mexico\"           #> [36,] \"36\"   \"NY\" \"New York\"             #> [37,] \"37\"   \"NC\" \"North Carolina\"       #> [38,] \"38\"   \"ND\" \"North Dakota\"         #> [39,] \"39\"   \"OH\" \"Ohio\"                 #> [40,] \"40\"   \"OK\" \"Oklahoma\"             #> [41,] \"41\"   \"OR\" \"Oregon\"               #> [42,] \"42\"   \"PA\" \"Pennsylvania\"         #> [43,] \"43\"   NA   NA                     #> [44,] \"44\"   \"RI\" \"Rhode Island\"         #> [45,] \"45\"   \"SC\" \"South Carolina\"       #> [46,] \"46\"   \"SD\" \"South Dakota\"         #> [47,] \"47\"   \"TN\" \"Tennessee\"            #> [48,] \"48\"   \"TX\" \"Texas\"                #> [49,] \"49\"   \"UT\" \"Utah\"                 #> [50,] \"50\"   \"VT\" \"Vermont\"              #> [51,] \"51\"   \"VA\" \"Virginia\"             #> [52,] \"52\"   NA   NA                     #> [53,] \"53\"   \"WA\" \"Washington\"           #> [54,] \"54\"   \"WV\" \"West Virginia\"        #> [55,] \"55\"   \"WI\" \"Wisconsin\"            #> [56,] \"56\"   \"WY\" \"Wyoming\"              #> [57,] \"57\"   NA   NA                     #> [58,] \"58\"   NA   NA                     #> [59,] \"59\"   NA   NA                     #> [60,] \"60\"   NA   NA                     #> [61,] \"61\"   NA   NA                     #> [62,] \"62\"   NA   NA                     #> [63,] \"63\"   NA   NA                     #> [64,] \"64\"   NA   NA                     #> [65,] \"65\"   NA   NA                     #> [66,] \"66\"   NA   NA                     #> [67,] \"67\"   NA   NA                     #> [68,] \"68\"   NA   NA                     #> [69,] \"69\"   NA   NA                     #> [70,] \"70\"   NA   NA                     #> [71,] \"71\"   NA   NA                     #> [72,] \"72\"   \"PR\" \"Puerto Rico\"          #> [73,] \"73\"   NA   NA                     #> [74,] \"74\"   NA   NA                     #> [75,] \"75\"   NA   NA                     #> [76,] \"76\"   NA   NA                     #> [77,] \"77\"   NA   NA                     #> [78,] \"78\"   NA   NA                     #> [79,] \"79\"   NA   NA                     #> [80,] \"80\"   NA   NA"},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"FIPS - Get state FIPS codes type FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"","code":"fips2state_fips(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"fips vector FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"vector State FIPS 2 characters ","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"Tells State contains County (tract blockgroup block)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips2state_fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get state FIPS codes from any type of FIPS codes — fips2state_fips","text":"","code":"fips2state_fips(fips_counties_from_statename(c(\"Delaware\", \"Rhode Island\"))) #> [1] \"10\" \"10\" \"10\" \"44\" \"44\" \"44\" \"44\" \"44\""},{"path":"https://usepa.github.io/EJAM/reference/fipstype.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","title":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","text":"FIPS - Identify type Census geography FIPS code (block, county, etc.)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fipstype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","text":"","code":"fipstype(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fipstype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","text":"fips vector one Census FIPS without leading zeroes, strings numeric","code":""},{"path":"https://usepa.github.io/EJAM/reference/fipstype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","text":"vector types: \"block\", \"blockgroup\", \"tract\", \"county\", \"state\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/fipstype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Identify what type of Census geography is each FIPS code (block, county, etc.) — fipstype","text":"","code":"fips_counties_from_statename(c(\"Connecticut\", \"Delaware\") ) #>  [1] \"09001\" \"09003\" \"09005\" \"09007\" \"09009\" \"09011\" \"09013\" \"09015\" \"10001\" #> [10] \"10003\" \"10005\"  # [1] \"09001\" \"09003\" \"09005\" \"09007\" \"09009\" \"09011\" \"09013\" \"09015\" \"10001\" \"10003\" \"10005\"  fipstype(9001) #> [1] \"county\"  fipstype(\"10001\") #> [1] \"county\"  # note blockid2fips is a large file, but can be obtained via [dataload_from_pins()]  if (FALSE) {  fipsexamples <- c(    fips_state_from_statename(\"Alaska\"),    fips_counties_from_state_abbrev(\"DE\")[1],     substr(blockid2fips$blockfips[1],1,11),     blockgroupstats$bgfips[1],     blockid2fips$blockfips[1]  )  cbind(fipsexamples, type = fipstype(fipsexamples)) }"},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"Convert FIPS codes FIPS blockgroups among within containing FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"","code":"fips_bg_from_anyfips(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"fips vector US FIPS codes, character numeric, without leading zeroes, many characters","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"vector blockgroup FIPS (NA values) may much longer vector fips passed function.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"way get list blockgroups, specified state/county/tract even block. Takes vector one FIPS State (2-digit), County (5-digit), Tract (11-digit), blockgroup (12 digit), even block (15-digit fips). Returns unique vector FIPS US blockgroups (including DC Puerto Rico) contain specified blocks, equal specified blockgroup fips, contained within provided tract/county/state FIPS.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/fips_bg_from_anyfips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get unique blockgroup fips in or containing specified fips of any type — fips_bg_from_anyfips","text":"","code":"# all blockgroups in one state   fips_counties_from_state_abbrev(\"DE\") #> [1] \"10001\" \"10003\" \"10005\"   fips_bg_from_anyfips( fips_counties_from_state_abbrev(\"DE\") ) #>   [1] \"100010401001\" \"100010401002\" \"100010401003\" \"100010401004\" \"100010402011\" #>   [6] \"100010402012\" \"100010402013\" \"100010402031\" \"100010402032\" \"100010402033\" #>  [11] \"100010402041\" \"100010402042\" \"100010402043\" \"100010402051\" \"100010402052\" #>  [16] \"100010402053\" \"100010402061\" \"100010405011\" \"100010405012\" \"100010405013\" #>  [21] \"100010405021\" \"100010405022\" \"100010407001\" \"100010407002\" \"100010407003\" #>  [26] \"100010409001\" \"100010409002\" \"100010410001\" \"100010410002\" \"100010410003\" #>  [31] \"100010411011\" \"100010411012\" \"100010411013\" \"100010412001\" \"100010412002\" #>  [36] \"100010412003\" \"100010413001\" \"100010413002\" \"100010414001\" \"100010414002\" #>  [41] \"100010415001\" \"100010415002\" \"100010416001\" \"100010417011\" \"100010417012\" #>  [46] \"100010417013\" \"100010417014\" \"100010417021\" \"100010417022\" \"100010418021\" #>  [51] \"100010418022\" \"100010418023\" \"100010418031\" \"100010418032\" \"100010418041\" #>  [56] \"100010418042\" \"100010418043\" \"100010419001\" \"100010419002\" \"100010419003\" #>  [61] \"100010420001\" \"100010420002\" \"100010421001\" \"100010421002\" \"100010422031\" #>  [66] \"100010422032\" \"100010422033\" \"100010422041\" \"100010422042\" \"100010422051\" #>  [71] \"100010422052\" \"100010422061\" \"100010422062\" \"100010422071\" \"100010422081\" #>  [76] \"100010422082\" \"100010425001\" \"100010425002\" \"100010425003\" \"100010428011\" #>  [81] \"100010428021\" \"100010428022\" \"100010428023\" \"100010429001\" \"100010429002\" #>  [86] \"100010430001\" \"100010430002\" \"100010430003\" \"100010431001\" \"100010431002\" #>  [91] \"100010432021\" \"100010432022\" \"100010432023\" \"100010432024\" \"100010433001\" #>  [96] \"100010433002\" \"100010433003\" \"100010434001\" \"100010434002\" \"100010434003\" #> [101] \"100019800001\" \"100019900000\" \"100030002001\" \"100030002002\" \"100030002003\" #> [106] \"100030002004\" \"100030002005\" \"100030002006\" \"100030003001\" \"100030003002\" #> [111] \"100030003003\" \"100030004001\" \"100030004002\" \"100030004003\" \"100030005001\" #> [116] \"100030005002\" \"100030005003\" \"100030005004\" \"100030006011\" \"100030006012\" #> [121] \"100030006013\" \"100030006021\" \"100030006022\" \"100030006023\" \"100030009001\" #> [126] \"100030009002\" \"100030009003\" \"100030011001\" \"100030011002\" \"100030011003\" #> [131] \"100030012001\" \"100030012002\" \"100030013001\" \"100030013002\" \"100030013003\" #> [136] \"100030013004\" \"100030014001\" \"100030014002\" \"100030015001\" \"100030015002\" #> [141] \"100030016001\" \"100030016002\" \"100030016003\" \"100030019021\" \"100030019022\" #> [146] \"100030021001\" \"100030021002\" \"100030022001\" \"100030022002\" \"100030022003\" #> [151] \"100030023001\" \"100030023002\" \"100030023003\" \"100030024001\" \"100030024002\" #> [156] \"100030024003\" \"100030024004\" \"100030025001\" \"100030025002\" \"100030025003\" #> [161] \"100030026001\" \"100030026002\" \"100030026003\" \"100030026004\" \"100030027001\" #> [166] \"100030027002\" \"100030028001\" \"100030028002\" \"100030029001\" \"100030029002\" #> [171] \"100030029003\" \"100030029004\" \"100030030021\" \"100030030022\" \"100030101041\" #> [176] \"100030101042\" \"100030101051\" \"100030101052\" \"100030101061\" \"100030101062\" #> [181] \"100030101063\" \"100030102001\" \"100030102002\" \"100030103001\" \"100030103002\" #> [186] \"100030103003\" \"100030104001\" \"100030104002\" \"100030104003\" \"100030104004\" #> [191] \"100030105021\" \"100030105022\" \"100030105023\" \"100030105024\" \"100030105025\" #> [196] \"100030107031\" \"100030107032\" \"100030107041\" \"100030107042\" \"100030107043\" #> [201] \"100030108001\" \"100030108002\" \"100030108003\" \"100030109001\" \"100030109002\" #> [206] \"100030109003\" \"100030110001\" \"100030110002\" \"100030110003\" \"100030111001\" #> [211] \"100030112011\" \"100030112012\" \"100030112021\" \"100030112022\" \"100030112031\" #> [216] \"100030112032\" \"100030112033\" \"100030112041\" \"100030112042\" \"100030112051\" #> [221] \"100030112052\" \"100030112061\" \"100030112062\" \"100030113001\" \"100030113002\" #> [226] \"100030114001\" \"100030114002\" \"100030114003\" \"100030115001\" \"100030115002\" #> [231] \"100030115003\" \"100030116001\" \"100030116002\" \"100030117001\" \"100030117002\" #> [236] \"100030117003\" \"100030117004\" \"100030118001\" \"100030118002\" \"100030118003\" #> [241] \"100030118004\" \"100030119001\" \"100030119002\" \"100030119003\" \"100030120001\" #> [246] \"100030120002\" \"100030120003\" \"100030121001\" \"100030121002\" \"100030121003\" #> [251] \"100030122001\" \"100030122002\" \"100030122003\" \"100030122004\" \"100030123001\" #> [256] \"100030123002\" \"100030124001\" \"100030124002\" \"100030124003\" \"100030124004\" #> [261] \"100030125001\" \"100030125002\" \"100030125003\" \"100030125004\" \"100030125005\" #> [266] \"100030125006\" \"100030126001\" \"100030126002\" \"100030126003\" \"100030127001\" #> [271] \"100030127002\" \"100030127003\" \"100030127004\" \"100030127005\" \"100030129001\" #> [276] \"100030129002\" \"100030129003\" \"100030130001\" \"100030130002\" \"100030131001\" #> [281] \"100030131002\" \"100030131003\" \"100030132001\" \"100030132002\" \"100030132003\" #> [286] \"100030133001\" \"100030133002\" \"100030134001\" \"100030134002\" \"100030134003\" #> [291] \"100030135011\" \"100030135012\" \"100030135013\" \"100030135014\" \"100030135015\" #> [296] \"100030135051\" \"100030135052\" \"100030135061\" \"100030135062\" \"100030135063\" #> [301] \"100030135071\" \"100030135081\" \"100030135082\" \"100030135083\" \"100030136041\" #> [306] \"100030136042\" \"100030136043\" \"100030136071\" \"100030136072\" \"100030136073\" #> [311] \"100030136074\" \"100030136081\" \"100030136082\" \"100030136101\" \"100030136102\" #> [316] \"100030136103\" \"100030136104\" \"100030136111\" \"100030136112\" \"100030136113\" #> [321] \"100030136114\" \"100030136121\" \"100030136122\" \"100030136123\" \"100030136131\" #> [326] \"100030136132\" \"100030136133\" \"100030136141\" \"100030136142\" \"100030136151\" #> [331] \"100030136152\" \"100030136153\" \"100030137001\" \"100030137002\" \"100030137003\" #> [336] \"100030138001\" \"100030138002\" \"100030138003\" \"100030139011\" \"100030139012\" #> [341] \"100030139013\" \"100030139031\" \"100030139032\" \"100030139033\" \"100030139051\" #> [346] \"100030139052\" \"100030139053\" \"100030139061\" \"100030139062\" \"100030139063\" #> [351] \"100030140001\" \"100030140002\" \"100030140003\" \"100030140004\" \"100030141001\" #> [356] \"100030141002\" \"100030141003\" \"100030142001\" \"100030143011\" \"100030143021\" #> [361] \"100030143022\" \"100030143023\" \"100030144021\" \"100030144022\" \"100030144031\" #> [366] \"100030144032\" \"100030144033\" \"100030144041\" \"100030144042\" \"100030145011\" #> [371] \"100030145021\" \"100030145022\" \"100030147021\" \"100030147031\" \"100030147032\" #> [376] \"100030147033\" \"100030147034\" \"100030147051\" \"100030147052\" \"100030147053\" #> [381] \"100030147061\" \"100030147062\" \"100030148031\" \"100030148032\" \"100030148033\" #> [386] \"100030148081\" \"100030148082\" \"100030148083\" \"100030148084\" \"100030148091\" #> [391] \"100030148092\" \"100030148093\" \"100030148094\" \"100030148095\" \"100030148101\" #> [396] \"100030148102\" \"100030148103\" \"100030148111\" \"100030148112\" \"100030148113\" #> [401] \"100030148121\" \"100030148122\" \"100030148123\" \"100030148131\" \"100030148132\" #> [406] \"100030148133\" \"100030148141\" \"100030148142\" \"100030149031\" \"100030149032\" #> [411] \"100030149033\" \"100030149034\" \"100030149035\" \"100030149036\" \"100030149041\" #> [416] \"100030149042\" \"100030149061\" \"100030149062\" \"100030149063\" \"100030149071\" #> [421] \"100030149072\" \"100030149073\" \"100030149081\" \"100030149082\" \"100030149091\" #> [426] \"100030149092\" \"100030149093\" \"100030149094\" \"100030150001\" \"100030150002\" #> [431] \"100030150003\" \"100030150004\" \"100030150005\" \"100030151001\" \"100030151002\" #> [436] \"100030152001\" \"100030152002\" \"100030152003\" \"100030152004\" \"100030152005\" #> [441] \"100030154001\" \"100030154002\" \"100030155021\" \"100030155022\" \"100030156001\" #> [446] \"100030156002\" \"100030158021\" \"100030158022\" \"100030159001\" \"100030159002\" #> [451] \"100030159003\" \"100030160001\" \"100030160002\" \"100030161001\" \"100030161002\" #> [456] \"100030162001\" \"100030162002\" \"100030162003\" \"100030163011\" \"100030163012\" #> [461] \"100030163013\" \"100030163014\" \"100030163061\" \"100030163062\" \"100030163063\" #> [466] \"100030163071\" \"100030163081\" \"100030163082\" \"100030163091\" \"100030163092\" #> [471] \"100030164011\" \"100030164012\" \"100030164013\" \"100030164014\" \"100030164041\" #> [476] \"100030164042\" \"100030164043\" \"100030166081\" \"100030166082\" \"100030166091\" #> [481] \"100030166092\" \"100030166093\" \"100030166101\" \"100030166102\" \"100030166103\" #> [486] \"100030166104\" \"100030166111\" \"100030166112\" \"100030166113\" \"100030166121\" #> [491] \"100030166122\" \"100030166123\" \"100030166131\" \"100030166132\" \"100030166133\" #> [496] \"100030166134\" \"100030166141\" \"100030166142\" \"100030166143\" \"100030168051\" #> [501] \"100030168061\" \"100030168062\" \"100030168063\" \"100030168071\" \"100030168081\" #> [506] \"100030168082\" \"100030168083\" \"100030168084\" \"100030168085\" \"100030169011\" #> [511] \"100030169012\" \"100030169041\" \"100039801001\" \"100039901000\" \"100050501011\" #> [516] \"100050501012\" \"100050501013\" \"100050501031\" \"100050501032\" \"100050501033\" #> [521] \"100050501034\" \"100050501041\" \"100050501042\" \"100050501043\" \"100050501051\" #> [526] \"100050501052\" \"100050501053\" \"100050501054\" \"100050502001\" \"100050502002\" #> [531] \"100050502003\" \"100050503021\" \"100050503022\" \"100050503023\" \"100050503031\" #> [536] \"100050503032\" \"100050503041\" \"100050503042\" \"100050503043\" \"100050504011\" #> [541] \"100050504012\" \"100050504031\" \"100050504032\" \"100050504051\" \"100050504052\" #> [546] \"100050504061\" \"100050504062\" \"100050504063\" \"100050504064\" \"100050504071\" #> [551] \"100050504072\" \"100050504073\" \"100050504081\" \"100050504082\" \"100050504083\" #> [556] \"100050505011\" \"100050505012\" \"100050505013\" \"100050505031\" \"100050505032\" #> [561] \"100050505033\" \"100050505051\" \"100050505061\" \"100050505062\" \"100050506011\" #> [566] \"100050506012\" \"100050506013\" \"100050506031\" \"100050506032\" \"100050506041\" #> [571] \"100050506042\" \"100050506043\" \"100050507011\" \"100050507012\" \"100050507013\" #> [576] \"100050507031\" \"100050507032\" \"100050507061\" \"100050507062\" \"100050507063\" #> [581] \"100050507071\" \"100050507072\" \"100050507081\" \"100050507091\" \"100050507092\" #> [586] \"100050507101\" \"100050507102\" \"100050507111\" \"100050507112\" \"100050508011\" #> [591] \"100050508012\" \"100050508013\" \"100050508041\" \"100050508042\" \"100050508051\" #> [596] \"100050508052\" \"100050508061\" \"100050508062\" \"100050508063\" \"100050508064\" #> [601] \"100050508071\" \"100050508072\" \"100050508081\" \"100050508082\" \"100050508083\" #> [606] \"100050509031\" \"100050509032\" \"100050509041\" \"100050509042\" \"100050509051\" #> [611] \"100050509052\" \"100050509053\" \"100050509054\" \"100050510081\" \"100050510082\" #> [616] \"100050510083\" \"100050510091\" \"100050510092\" \"100050510093\" \"100050510101\" #> [621] \"100050510102\" \"100050510103\" \"100050510111\" \"100050510112\" \"100050510113\" #> [626] \"100050510121\" \"100050510122\" \"100050510131\" \"100050510132\" \"100050510141\" #> [631] \"100050510142\" \"100050510151\" \"100050510152\" \"100050510161\" \"100050510162\" #> [636] \"100050510171\" \"100050510172\" \"100050510173\" \"100050511011\" \"100050511012\" #> [641] \"100050511013\" \"100050511021\" \"100050511022\" \"100050511023\" \"100050511031\" #> [646] \"100050511032\" \"100050511033\" \"100050512011\" \"100050512012\" \"100050512021\" #> [651] \"100050512022\" \"100050512031\" \"100050512032\" \"100050512033\" \"100050512034\" #> [656] \"100050512041\" \"100050512042\" \"100050512043\" \"100050512044\" \"100050512051\" #> [661] \"100050512052\" \"100050513021\" \"100050513022\" \"100050513023\" \"100050513071\" #> [666] \"100050513081\" \"100050513082\" \"100050513083\" \"100050513091\" \"100050513092\" #> [671] \"100050513101\" \"100050513111\" \"100050513112\" \"100050513121\" \"100050513122\" #> [676] \"100050513131\" \"100050513132\" \"100050513133\" \"100050513141\" \"100050513142\" #> [681] \"100050514001\" \"100050514002\" \"100050514003\" \"100050515011\" \"100050515012\" #> [686] \"100050515021\" \"100050515022\" \"100050515023\" \"100050517011\" \"100050517012\" #> [691] \"100050517013\" \"100050517021\" \"100050517022\" \"100050517023\" \"100050518011\" #> [696] \"100050518012\" \"100050518013\" \"100050518014\" \"100050518021\" \"100050518022\" #> [701] \"100050518023\" \"100050519001\" \"100050519002\" \"100050519003\" \"100059800001\" #> [706] \"100059900000\"    blockgroupstats[,.N,by=substr(bgfips,1,2)] #>     substr     N #>     <char> <int> #>  1:     60    77 #>  2:     66    58 #>  3:     69   135 #>  4:     78   416 #>  5:     01  3925 #>  6:     02   504 #>  7:     04  4773 #>  8:     05  2294 #>  9:     06 25607 #> 10:     08  4058 #> 11:     09  2716 #> 12:     10   706 #> 13:     11   571 #> 14:     12 13388 #> 15:     13  7446 #> 16:     15  1083 #> 17:     16  1284 #> 18:     17  9898 #> 19:     18  5290 #> 20:     19  2703 #> 21:     20  2461 #> 22:     21  3581 #> 23:     22  4294 #> 24:     23  1184 #> 25:     24  4079 #> 26:     25  5116 #> 27:     26  8386 #> 28:     27  4706 #> 29:     28  2445 #> 30:     29  5031 #> 31:     30   900 #> 32:     31  1648 #> 33:     32  1963 #> 34:     33   997 #> 35:     34  6599 #> 36:     35  1614 #> 37:     36 16070 #> 38:     37  7111 #> 39:     38   632 #> 40:     39  9472 #> 41:     40  3374 #> 42:     41  2970 #> 43:     42 10173 #> 44:     44   792 #> 45:     45  3408 #> 46:     46   694 #> 47:     47  4562 #> 48:     48 18638 #> 49:     49  2020 #> 50:     50   552 #> 51:     51  5963 #> 52:     53  5311 #> 53:     54  1639 #> 54:     55  4692 #> 55:     56   457 #> 56:     72  2555 #>     substr     N   length(fips_bg_from_anyfips(\"72\")) #> [1] 2555    # all blockgroups in this one county   fips_bg_from_anyfips(30001) #>  [1] \"300010001001\" \"300010001002\" \"300010002001\" \"300010002002\" \"300010002003\" #>  [6] \"300010002004\" \"300010003001\" \"300010003002\" \"300010003003\" \"300010003004\"   fips_bg_from_anyfips(\"30001\") #>  [1] \"300010001001\" \"300010001002\" \"300010002001\" \"300010002002\" \"300010002003\" #>  [6] \"300010002004\" \"300010003001\" \"300010003002\" \"300010003003\" \"300010003004\"   fips_bg_from_anyfips(fips_counties_from_statename(\"Rhode Island\")[1]) #>  [1] \"440010301001\" \"440010301002\" \"440010301003\" \"440010301004\" \"440010302001\" #>  [6] \"440010302002\" \"440010302003\" \"440010303001\" \"440010303002\" \"440010303003\" #> [11] \"440010304001\" \"440010304002\" \"440010304003\" \"440010305001\" \"440010305002\" #> [16] \"440010305003\" \"440010306011\" \"440010306012\" \"440010306013\" \"440010306021\" #> [21] \"440010306022\" \"440010306023\" \"440010306024\" \"440010307001\" \"440010307002\" #> [26] \"440010307003\" \"440010307004\" \"440010308001\" \"440010308002\" \"440010308003\" #> [31] \"440010309011\" \"440010309012\" \"440010309013\" \"440010309021\" \"440010309022\" #> [36] \"440010309023\" \"440010309024\"    # all blockgroups that contain any of these 6 blocks (i.e., just one bg)   fips_bg_from_anyfips( blockid2fips$blockfips[1:6]) #> Error in fips_lead_zero(fips): object 'blockid2fips' not found    # 2 counties   fips_bg_from_anyfips(c(36009,36011)) #>   [1] \"360099400001\" \"360099400002\" \"360099402001\" \"360099403011\" \"360099403012\" #>   [6] \"360099403013\" \"360099403021\" \"360099403022\" \"360099403023\" \"360099601001\" #>  [11] \"360099601002\" \"360099601003\" \"360099602001\" \"360099602002\" \"360099602003\" #>  [16] \"360099602004\" \"360099603001\" \"360099603002\" \"360099603003\" \"360099603004\" #>  [21] \"360099604001\" \"360099604002\" \"360099604003\" \"360099604004\" \"360099605001\" #>  [26] \"360099605002\" \"360099605003\" \"360099605004\" \"360099605005\" \"360099606001\" #>  [31] \"360099606002\" \"360099606003\" \"360099606004\" \"360099607031\" \"360099607032\" #>  [36] \"360099607041\" \"360099607042\" \"360099608001\" \"360099608002\" \"360099608003\" #>  [41] \"360099608004\" \"360099610001\" \"360099610002\" \"360099610003\" \"360099610004\" #>  [46] \"360099611001\" \"360099611002\" \"360099611003\" \"360099611004\" \"360099612001\" #>  [51] \"360099612002\" \"360099612003\" \"360099612004\" \"360099613011\" \"360099613012\" #>  [56] \"360099613021\" \"360099613022\" \"360099614001\" \"360099614002\" \"360099614003\" #>  [61] \"360099614004\" \"360099615001\" \"360099615002\" \"360099616001\" \"360099616002\" #>  [66] \"360099616003\" \"360099616004\" \"360099617001\" \"360099617002\" \"360099617003\" #>  [71] \"360099618001\" \"360099618002\" \"360099618003\" \"360099618004\" \"360099618005\" #>  [76] \"360099618006\" \"360099622001\" \"360099622002\" \"360099622003\" \"360099622004\" #>  [81] \"360110401011\" \"360110401012\" \"360110401021\" \"360110401022\" \"360110401023\" #>  [86] \"360110402011\" \"360110402012\" \"360110402013\" \"360110402021\" \"360110402022\" #>  [91] \"360110403001\" \"360110403002\" \"360110403003\" \"360110403004\" \"360110404001\" #>  [96] \"360110404002\" \"360110404003\" \"360110405001\" \"360110405002\" \"360110405003\" #> [101] \"360110406001\" \"360110406002\" \"360110406003\" \"360110407001\" \"360110407002\" #> [106] \"360110407003\" \"360110407004\" \"360110408001\" \"360110408002\" \"360110408003\" #> [111] \"360110408004\" \"360110409001\" \"360110409002\" \"360110409003\" \"360110409004\" #> [116] \"360110410011\" \"360110410012\" \"360110410013\" \"360110410021\" \"360110410022\" #> [121] \"360110411011\" \"360110411012\" \"360110411013\" \"360110411021\" \"360110411022\" #> [126] \"360110412011\" \"360110412012\" \"360110412021\" \"360110412022\" \"360110412023\" #> [131] \"360110413001\" \"360110413002\" \"360110413003\" \"360110413004\" \"360110413005\" #> [136] \"360110414001\" \"360110414002\" \"360110414003\" \"360110414004\" \"360110415001\" #> [141] \"360110415002\" \"360110415003\" \"360110415004\" \"360110416001\" \"360110416002\" #> [146] \"360110416003\" \"360110417001\" \"360110417002\" \"360110417003\" \"360110417004\" #> [151] \"360110417005\" \"360110418001\" \"360110418002\" \"360110418003\" \"360110418004\" #> [156] \"360110418005\" \"360110421001\" \"360110421002\" \"360110421003\" \"360119902000\""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"FIPS - Get county fips specified states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"","code":"fips_counties_from_statefips(statefips)"},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"statefips vector 2-digit state FIPS codes like c(\"10\", \"44\", \"44\") c(10,44)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"vector 5-digit character string county FIPS unique counties states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"similar list_counties(state) tigris package.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statefips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statefips","text":"","code":"fips_counties_from_statefips(c(10,44,44)) #> [1] \"10001\" \"10003\" \"10005\" \"44001\" \"44003\" \"44005\" \"44007\" \"44009\"   fips_counties_from_statefips(\"10\") #> [1] \"10001\" \"10003\" \"10005\""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statename.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","text":"FIPS - Get county fips specified states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","text":"","code":"fips_counties_from_statename(statename)"},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","text":"statename vector state names like c(\"New York\",\"Georgia\")","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","text":"vector 5-digit character string county FIPS unique counties states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_statename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_statename","text":"","code":"fips_counties_from_statename(\"Delaware\") #> [1] \"10001\" \"10003\" \"10005\""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_state_abbrev.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","text":"FIPS - Get county fips specified states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_state_abbrev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","text":"","code":"fips_counties_from_state_abbrev(ST)"},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_state_abbrev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","text":"ST vector state abbreviations like c(\"NY\",\"GA\")","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_state_abbrev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","text":"vector 5-digit character string county FIPS unique counties states","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_counties_from_state_abbrev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get ALL county fips in specified states — fips_counties_from_state_abbrev","text":"","code":"fips_counties_from_state_abbrev(\"DE\") #> [1] \"10001\" \"10003\" \"10005\"   fips_counties_from_state_abbrev(\"RI\", \"RI\") #> Error in fips_counties_from_state_abbrev(\"RI\", \"RI\"): unused argument (\"RI\")"},{"path":"https://usepa.github.io/EJAM/reference/fips_from_table.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Read and clean FIPS column from a table, after inferring which col it is — fips_from_table","title":"FIPS - Read and clean FIPS column from a table, after inferring which col it is — fips_from_table","text":"Just read codes one column table obtained something like read.csv, excel, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_from_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Read and clean FIPS column from a table, after inferring which col it is — fips_from_table","text":"","code":"fips_from_table(fips_table, addleadzeroes = TRUE, inshiny = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/fips_from_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Read and clean FIPS column from a table, after inferring which col it is — fips_from_table","text":"fips_table data.frame data.table FIPS codes counties, states, tracts, example, column whose name can interpreted FIPS (one aliases like fips, countyfips, etc.) Aliases : c(\"FIPS\", \"fips\", \"fips_code\", \"fipscode\", \"Fips\", \"statefips\", \"countyfips\", \"ST_FIPS\", \"st_fips\", \"ST_FIPS\", \"st_fips\", \"FIPS.ST\", \"FIPS.COUNTY\", \"FIPS.TRACT\") addleadzeroes whether add leading zeroes needed State whose FIPS starts \"01\" inshiny used server shiny app","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_from_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Read and clean FIPS column from a table, after inferring which col it is — fips_from_table","text":"vector fips codes","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/fips_lead_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","title":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","text":"Ensures FIPS leading zero, VALIDATE FIPS - check FIPS valid checking length. fips state, county, tract, blockgroup, block FIPS code.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_lead_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","text":"","code":"fips_lead_zero(fips)"},{"path":"https://usepa.github.io/EJAM/reference/fips_lead_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","text":"fips vector numeric character US FIPS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_lead_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","text":"vector length","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_lead_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Add leading zeroes to fips codes if missing, replace with NA if length invalid — fips_lead_zero","text":"","code":"fips_lead_zero(c(1,\"01\",1234,\"1234\",\"12345\",123456)) #> [1] \"01\"    \"01\"    \"01234\" \"01234\" \"12345\" NA"},{"path":"https://usepa.github.io/EJAM/reference/fips_st2eparegion.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get EPA Region number from state FIPS code — fips_st2eparegion","title":"FIPS - Get EPA Region number from state FIPS code — fips_st2eparegion","text":"FIPS - Get EPA Region number state FIPS code","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_st2eparegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get EPA Region number from state FIPS code — fips_st2eparegion","text":"","code":"fips_st2eparegion(stfips)"},{"path":"https://usepa.github.io/EJAM/reference/fips_st2eparegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get EPA Region number from state FIPS code — fips_st2eparegion","text":"stfips vector one state fips codes (numbers strings)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_st2eparegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get EPA Region number from state FIPS code — fips_st2eparegion","text":"vector numbers representing US EPA Regions","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_statename.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get state fips for each state name — fips_state_from_statename","title":"FIPS - Get state fips for each state name — fips_state_from_statename","text":"FIPS - Get state fips state name","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_statename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get state fips for each state name — fips_state_from_statename","text":"","code":"fips_state_from_statename(statename)"},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_statename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get state fips for each state name — fips_state_from_statename","text":"statename vector state names like c(\"New York\",\"Georgia\")","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_statename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get state fips for each state name — fips_state_from_statename","text":"vector 2-digit state FIPS codes like c(\"10\", \"44\", \"44\"), length input, including duplicates","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_statename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get state fips for each state name — fips_state_from_statename","text":"","code":"fips_state_from_statename(\"Delaware\") #> [1] \"10\""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_state_abbrev.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","title":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","text":"FIPS - Get state fips state abbrev","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_state_abbrev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","text":"","code":"fips_state_from_state_abbrev(ST)"},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_state_abbrev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","text":"ST vector state abbreviations like c(\"NY\",\"GA\")","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_state_abbrev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","text":"vector 2-digit state FIPS codes like c(\"10\", \"44\", \"44\"), length input, including duplicates","code":""},{"path":"https://usepa.github.io/EJAM/reference/fips_state_from_state_abbrev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Get state fips for each state abbrev — fips_state_from_state_abbrev","text":"","code":"fips_state_from_state_abbrev(\"DE\", \"DE\", \"RI\") #> Error in fips_state_from_state_abbrev(\"DE\", \"DE\", \"RI\"): unused arguments (\"DE\", \"RI\")"},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to rename variables that are colnames of data.frame — fixcolnames","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"Changes column names friendly long original names FTP site file","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"","code":"fixcolnames(   namesnow,   oldtype = \"original\",   newtype = \"friendly\",   mapping_for_names )"},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"namesnow vector colnames renamed oldtype friendly long original, csv r api, colname map_headernames, used one known types specified. newtype friendly long original, csv r api, colname map_headernames, used one known types specified. mapping_for_names default dataset already package. data.frame passed fixnames() work columns oldnames (original), longname_tableheader (long), newnames_ejscreenapi (friendly)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"Vector new column names length input","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"SPECIFY TYPE LIKE \"api\" \"long\" colnames map_headernames like \"rname\" \"vartype\" Note actually can use extract info map_headernames (called mapping_for_names). NOTE: ask rename words known type like rname apiname, namesnow found among oldtype, renamed, returned unchanged. , specify newtype column known type name, like \"varcategory\" instead return empty string namesnow found among oldtype. way really seeking new name, rename, keeps old name; really seeking metadata like category , returns blank old name found .","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"helper function to rename variables that are colnames of data.frame — fixcolnames","text":"","code":"# see package tests   fixcolnames(c(\"RAW_D_INCOME\", \"S_D_LIFEEXP\")) # assumes it was in original format as API outputs #> [1] \"pctlowinc\"          \"state.avg.lowlifex\"   fixcolnames(c(\"RAW_D_INCOME\", \"S_D_LIFEEXP\"), newtype = \"long\") #> [1] \"% Low Income\"                          #> [2] \"State average for Low life expectancy\"   fixcolnames(c(\"resp\",\"rsei\"),  oldtype = \"r\", newtype = \"long\") #> [1] \"Air Toxics Respiratory Hazard Index\" \"Toxic Releases to Air\"                 fixcolnames(c(\"resp\",\"rsei\"),  oldtype = \"r\", newtype = \"api\") #> [1] \"RAW_E_RESP\"     \"RAW_E_RSEI_AIR\"   fixcolnames(c(\"resp\",\"pctlowinc\"), oldtype = \"r\", newtype = \"varlist\") #> [1] \"names_e\" \"names_d\"      # the columns \"newsort\" and \"reportsort\" provide useful sort orders   x <- map_headernames$rname[map_headernames$varlist == \"names_d\"] # EJAM package has names_d   print(\"original order\"); print(x)  #> [1] \"original order\" #>  [1] \"Demog.Index\"      \"Demog.Index.Supp\" \"pctlowinc\"        \"pctlingiso\"       #>  [5] \"pctunemployed\"    \"pctlths\"          \"lowlifex\"         \"pctunder5\"        #>  [9] \"pctover64\"        \"pctmin\"             x <-  sample(x, length(x), replace = FALSE)      print(\"out of order\"); print(x) #> [1] \"out of order\" #>  [1] \"pctlths\"          \"pctlingiso\"       \"Demog.Index.Supp\" \"Demog.Index\"      #>  [5] \"pctmin\"           \"pctlowinc\"        \"lowlifex\"         \"pctunder5\"        #>  [9] \"pctunemployed\"    \"pctover64\"          print(\"fixed order\") #> [1] \"fixed order\"   x[ order(fixcolnames(x, oldtype = \"r\", newtype = \"newsort\")) ] #>  [1] \"Demog.Index\"      \"Demog.Index.Supp\" \"pctlowinc\"        \"pctlingiso\"       #>  [5] \"pctunemployed\"    \"pctlths\"          \"lowlifex\"         \"pctunder5\"        #>  [9] \"pctover64\"        \"pctmin\""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":null,"dir":"Reference","previous_headings":"","what":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"Given names_d, e.g., returns names_d_ratio_to_state_avg","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"","code":"fixcolnames2related(   namesnow,   relatedtype = c(\"usavg\", \"stateavg\", \"uspctile\", \"statepctile\", \"usratio\",     \"stateratio\") )"},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"namesnow vector one basic Envt Demog indicator variable names found c(names_e, names_d, names_d_subgroups) relatedtype One \"usavg\", \"stateavg\", \"uspctile\", \"statepctile\", \"usratio\", \"stateratio\" (values among unique(map_headernames$vartype) since give ambiguous answers).","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"vector long namesnow (just returns namesnow relatedtype invalid)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"Given basic variable name(s) like \"pctlowinc\" names_e, see related variable names storing US State percentiles, averages, ratios averages given variables. works variable names among : c(names_e, names_d, names_d_subgroups)","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames2related.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get name of related avg, pctile, or ratio variable name — fixcolnames2related","text":"","code":"names_d #>  [1] \"Demog.Index\"      \"Demog.Index.Supp\" \"pctlowinc\"        \"pctlingiso\"       #>  [5] \"pctunemployed\"    \"pctlths\"          \"lowlifex\"         \"pctunder5\"        #>  [9] \"pctover64\"        \"pctmin\"           fixcolnames2related(names_d, 'stateratio') #> Error in fixcolnames2related(names_d, \"stateratio\"): could not find function \"fixcolnames2related\" names_d_ratio_to_state_avg #>  [1] \"ratio.to.state.avg.Demog.Index\"      \"ratio.to.state.avg.Demog.Index.Supp\" #>  [3] \"ratio.to.state.avg.pctlowinc\"        \"ratio.to.state.avg.pctlingiso\"       #>  [5] \"ratio.to.state.avg.pctunemployed\"    \"ratio.to.state.avg.pctlths\"          #>  [7] \"ratio.to.state.avg.lowlifex\"         \"ratio.to.state.avg.pctunder5\"        #>  [9] \"ratio.to.state.avg.pctover64\"        \"ratio.to.state.avg.pctmin\"           fixcolnames2related(names_e, \"stateavg\") #> Error in fixcolnames2related(names_e, \"stateavg\"): could not find function \"fixcolnames2related\" fixcolnames2related(names_e, \"usvag\") #> Error in fixcolnames2related(names_e, \"usvag\"): could not find function \"fixcolnames2related\" paste0(\"avg.\", names_e) #>  [1] \"avg.pm\"              \"avg.o3\"              \"avg.cancer\"          #>  [4] \"avg.resp\"            \"avg.dpm\"             \"avg.pctpre1960\"      #>  [7] \"avg.traffic.score\"   \"avg.proximity.npl\"   \"avg.proximity.rmp\"   #> [10] \"avg.proximity.tsdf\"  \"avg.proximity.npdes\" \"avg.ust\"             #> [13] \"avg.rsei\"            fixcolnames2related(names_e, \"usratio\") #> Error in fixcolnames2related(names_e, \"usratio\"): could not find function \"fixcolnames2related\" # names_ej # does not work with this as input # fixcolnames2related(names_ej, \"uspctile\") # does not return names_ej_pctile"},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"convert colnames to standardized names based on aliases — fixcolnames_infer","title":"convert colnames to standardized names based on aliases — fixcolnames_infer","text":"Used address_from_table","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert colnames to standardized names based on aliases — fixcolnames_infer","text":"","code":"fixcolnames_infer(currentnames, alias_list = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert colnames to standardized names based on aliases — fixcolnames_infer","text":"currentnames vector colnames may include aliases alias_list optional named list names standard colnames like \"street\" named element list vector aliases standard name","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixcolnames_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert colnames to standardized names based on aliases — fixcolnames_infer","text":"vector like currentnames renamed standard name alias found, ignoring case.","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixmapheadernamescolname.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","title":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","text":"utility convert aliases proper colnames map_headernames","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixmapheadernamescolname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","text":"","code":"fixmapheadernamescolname(x)"},{"path":"https://usepa.github.io/EJAM/reference/fixmapheadernamescolname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","text":"x character vector colnames map_headernames, aliases like \"long\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixmapheadernamescolname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","text":"vector aliases replaced actual colnames unmatched ones left -","code":""},{"path":"https://usepa.github.io/EJAM/reference/fixmapheadernamescolname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utility to convert aliases to proper colnames of map_headernames — fixmapheadernamescolname","text":"","code":"fixmapheadernamescolname(c('long', 'csv', 'api', 'r')) #> Error in fixmapheadernamescolname(c(\"long\", \"csv\", \"api\", \"r\")): could not find function \"fixmapheadernamescolname\""},{"path":"https://usepa.github.io/EJAM/reference/fix_pctcols_x100.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","title":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","text":"multiplies data rescale percentages stored 0 1, 0-100","code":""},{"path":"https://usepa.github.io/EJAM/reference/fix_pctcols_x100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","text":"","code":"fix_pctcols_x100(df, cnames = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/fix_pctcols_x100.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","text":"df data.frame can data.table cnames colnames df indicators multiply 100, like names_pct_as_fraction_ejamit, names_pct_as_fraction_blockgroupstats, names_pct_as_fraction_ejscreenit","code":""},{"path":"https://usepa.github.io/EJAM/reference/fix_pctcols_x100.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","text":"df data specified columns multiplied 100","code":""},{"path":"https://usepa.github.io/EJAM/reference/fix_pctcols_x100.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utility to multiply certain percentage columns by 100 to convert 0-1.00 into 0-100 — fix_pctcols_x100","text":"","code":"y = data.frame(pctlowinc = 1:2, pctpre1960 = 1:2, avg.pctunemployed = 1:2, avg.pctpre1960 = 1:2)  fix_pctcols_x100(y) #> Error in fix_pctcols_x100(y): could not find function \"fix_pctcols_x100\"  fix_pctcols_x100(y, names_pct_as_fraction_ejscreenit) #> Error in fix_pctcols_x100(y, names_pct_as_fraction_ejscreenit): could not find function \"fix_pctcols_x100\"  fix_pctcols_x100(y, names_pct_as_fraction_blockgroupstats) #> Error in fix_pctcols_x100(y, names_pct_as_fraction_blockgroupstats): could not find function \"fix_pctcols_x100\"  fix_pctcols_x100(y, names_pct_as_fraction_ejamit) #> Error in fix_pctcols_x100(y, names_pct_as_fraction_ejamit): could not find function \"fix_pctcols_x100\"  cat(\"\\n\\n\") #>  #>   names_pct_as_fraction_ejscreenit #> [1] \"pctpre1960\"           \"avg.pctpre1960\"       \"state.avg.pctpre1960\"  names_pct_as_fraction_blockgroupstats #>  [1] \"Demog.Index\"      \"Demog.Index.Supp\" \"pctlowinc\"        \"pctlingiso\"       #>  [5] \"pctunemployed\"    \"pctlths\"          \"lowlifex\"         \"pctunder5\"        #>  [9] \"pctover64\"        \"pctmin\"            names_pct_as_fraction_ejamit #>   [1] \"Demog.Index\"                \"Demog.Index.Supp\"           #>   [3] \"pctlowinc\"                  \"pctlingiso\"                 #>   [5] \"pctunemployed\"              \"pctlths\"                    #>   [7] \"lowlifex\"                   \"pctunder5\"                  #>   [9] \"pctover64\"                  \"pctmin\"                     #>  [11] \"avg.Demog.Index\"            \"avg.Demog.Index.Supp\"       #>  [13] \"avg.pctlowinc\"              \"avg.pctlingiso\"             #>  [15] \"avg.pctunemployed\"          \"avg.pctlths\"                #>  [17] \"avg.lowlifex\"               \"avg.pctunder5\"              #>  [19] \"avg.pctover64\"              \"avg.pctmin\"                 #>  [21] \"state.avg.Demog.Index\"      \"state.avg.Demog.Index.Supp\" #>  [23] \"state.avg.pctlowinc\"        \"state.avg.pctlingiso\"       #>  [25] \"state.avg.pctunemployed\"    \"state.avg.pctlths\"          #>  [27] \"state.avg.lowlifex\"         \"state.avg.pctunder5\"        #>  [29] \"state.avg.pctover64\"        \"state.avg.pctmin\"           #>  [31] \"pcthisp\"                    \"pctnhba\"                    #>  [33] \"pctnhaa\"                    \"pctnhaiana\"                 #>  [35] \"pctnhnhpia\"                 \"pctnhotheralone\"            #>  [37] \"pctnhmulti\"                 \"pctnhwa\"                    #>  [39] \"avg.pcthisp\"                \"avg.pctnhba\"                #>  [41] \"avg.pctnhaa\"                \"avg.pctnhaiana\"             #>  [43] \"avg.pctnhnhpia\"             \"avg.pctnhotheralone\"        #>  [45] \"avg.pctnhmulti\"             \"avg.pctnhwa\"                #>  [47] \"state.avg.pcthisp\"          \"state.avg.pctnhba\"          #>  [49] \"state.avg.pctnhaa\"          \"state.avg.pctnhaiana\"       #>  [51] \"state.avg.pctnhnhpia\"       \"state.avg.pctnhotheralone\"  #>  [53] \"state.avg.pctnhmulti\"       \"state.avg.pctnhwa\"          #>  [55] \"pcthisp\"                    \"pctba\"                      #>  [57] \"pctaa\"                      \"pctaiana\"                   #>  [59] \"pctnhpia\"                   \"pctotheralone\"              #>  [61] \"pctmulti\"                   \"pctwa\"                      #>  [63] \"avg.pcthisp\"                \"avg.pctba\"                  #>  [65] \"avg.pctaa\"                  \"avg.pctaiana\"               #>  [67] \"avg.pctnhpia\"               \"avg.pctotheralone\"          #>  [69] \"avg.pctmulti\"               \"avg.pctwa\"                  #>  [71] \"state.avg.pcthisp\"          \"state.avg.pctba\"            #>  [73] \"state.avg.pctaa\"            \"state.avg.pctaiana\"         #>  [75] \"state.avg.pctnhpia\"         \"state.avg.pctotheralone\"    #>  [77] \"state.avg.pctmulti\"         \"state.avg.pctwa\"            #>  [79] \"pcthisp\"                    \"pctnhba\"                    #>  [81] \"pctnhaa\"                    \"pctnhaiana\"                 #>  [83] \"pctnhnhpia\"                 \"pctnhotheralone\"            #>  [85] \"pctnhmulti\"                 \"pctnhwa\"                    #>  [87] \"avg.pcthisp\"                \"avg.pctnhba\"                #>  [89] \"avg.pctnhaa\"                \"avg.pctnhaiana\"             #>  [91] \"avg.pctnhnhpia\"             \"avg.pctnhotheralone\"        #>  [93] \"avg.pctnhmulti\"             \"avg.pctnhwa\"                #>  [95] \"state.avg.pcthisp\"          \"state.avg.pctnhba\"          #>  [97] \"state.avg.pctnhaa\"          \"state.avg.pctnhaiana\"       #>  [99] \"state.avg.pctnhnhpia\"       \"state.avg.pctnhotheralone\"  #> [101] \"state.avg.pctnhmulti\"       \"state.avg.pctnhwa\"          #> [103] \"pctdisability\"              \"pctmale\"                    #> [105] \"pctfemale\"                  \"p_own_occupied\"             #> [107] \"pctunder18\"                 \"pctover17\"                   cat(\"\\n\\n\") #>  #>   ytable = data.table(pctlowinc = 1:2, pctpre1960 = 1:2, avg.pctunemployed = 1:2, avg.pctpre1960 = 1:2) #> Error in data.table(pctlowinc = 1:2, pctpre1960 = 1:2, avg.pctunemployed = 1:2,     avg.pctpre1960 = 1:2): could not find function \"data.table\"  fix_pctcols_x100(ytable) #> Error in fix_pctcols_x100(ytable): could not find function \"fix_pctcols_x100\"  fix_pctcols_x100(ytable, names_pct_as_fraction_blockgroupstats)  #> Error in fix_pctcols_x100(ytable, names_pct_as_fraction_blockgroupstats): could not find function \"fix_pctcols_x100\"  fix_pctcols_x100(ytable, names_pct_as_fraction_ejamit) #> Error in fix_pctcols_x100(ytable, names_pct_as_fraction_ejamit): could not find function \"fix_pctcols_x100\"  cat(\"\\n\\n\") #>  #>   y #>   pctlowinc pctpre1960 avg.pctunemployed avg.pctpre1960 #> 1         1          1                 1              1 #> 2         2          2                 2              2  ytable #> Error in eval(expr, envir, enclos): object 'ytable' not found"},{"path":"https://usepa.github.io/EJAM/reference/formula_varname.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to check formulas and extract variable names they calculate values for — formula_varname","title":"utility to check formulas and extract variable names they calculate values for — formula_varname","text":"utility check formulas extract variable names calculate values ","code":""},{"path":"https://usepa.github.io/EJAM/reference/formula_varname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to check formulas and extract variable names they calculate values for — formula_varname","text":"","code":"formula_varname(myforms)"},{"path":"https://usepa.github.io/EJAM/reference/formula_varname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to check formulas and extract variable names they calculate values for — formula_varname","text":"myforms see calc_byformula()","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs.html","id":null,"dir":"Reference","previous_headings":"","what":"frs (DATA) EPA Facility Registry Service table of regulated sites — frs","title":"frs (DATA) EPA Facility Registry Service table of regulated sites — frs","text":"data.table snapshot version EPA FRS. can look sites REGISTRY_ID frs, get location, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frs (DATA) EPA Facility Registry Service table of regulated sites — frs","text":"dataset can updated package maintainer using frs_update_datasets() (exported function) definitions active/inactive quite used ECHO. See attributes(frs) see date created, etc. Also, EJScreen maps EPA-regulated facilities program types, provided : https://www.epa.gov/ejscreen/ejscreen-map-descriptions#sites-reporting--epa","code":"As of November 2023    Count of    all REGISTRY_ID rows:   7,441,086  Count of unique REGISTRY_ID values: 4,705,744  Clearly inactive unique IDs:        1,436,096  Assumed   active unique IDs:        3,269,648  frs rows total:            3,456,042  frs clearly inactive IDs:  1,436,096  frs rows actives:          2,573,338  frs_by_programid rows:     3,440,036  frs_by_naics rows:           679,471  frs_by_sic rows:           1,081,742    Classes ‘data.table’ and 'data.frame':\t    Retained only these columns for this package      $ lat           : num  18.4 18.4 18.5 18.2 18.2 ...   $ lon           : num  -66.1 -66.1 -66.8 -67.1 -67.2 ...   $ REGISTRY_ID   : chr  \"110000307668\" \"110000307695\" \"110000307739\" \"110000307757\" ...   $ PRIMARY_NAME  : chr  \"HB FULLER COMPANY HBF PUERTO RICO\" \"RAMCO CHEMICALS INCORPORATED\"    $ NAICS         : chr  \"325520\" \"\" \"311119\" \"312120\" ...   $ SIC           : chr  \"2842\" \"2048\" \"2047, 2048, 2091\" ...   $ PGM_SYS_ACRNMS: chr  \"NCDB:I02#19880913A2001 2, RCRAINFO:PRD090122136"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frsprogramcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"frsprogramcodes DATA EPA programs listed in Facility Registry Service — frsprogramcodes","title":"frsprogramcodes DATA EPA programs listed in Facility Registry Service — frsprogramcodes","text":"","code":"data.frame                                                                  description     code                                                                  1    National Pollutant Discharge Elimination System (NPDES) (ICIS-NPDES)    NPDES    2  The Integrated Compliance Information System (ICIS) for Air (ICIS-Air)      AIR    3    The Resource Conservation and Recovery Act (RCRA) Information System RCRAINFO    4                                   Risk Management Plan (RMP) facilities      RMP    5                      The Safe Drinking Water Information System (SDWIS)     SFDW    6                              The Superfund Enterprise Management System     SEMS    7                              Clean Air Markets Division Business System   CAMDBS    8                                        Toxics Release Inventory Program     TRIS    9                                        Greenhouse Gas Reporting Program   E-GGRT    10                                             Emissions Inventory System      EIS    11                                           Toxic Substances Control Act     TSCA"},{"path":"https://usepa.github.io/EJAM/reference/frsprogramcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frsprogramcodes DATA EPA programs listed in Facility Registry Service — frsprogramcodes","text":"Created script /data-raw/","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frsprogramcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frsprogramcodes DATA EPA programs listed in Facility Registry Service — frsprogramcodes","text":"","code":"if (FALSE) {   frs_by_programid[program %in% frsprogramcodes$code, .N, by=program]      setkey(frs_by_programid,\"program\")   frs_by_programid[\"TRIS\",]   }"},{"path":"https://usepa.github.io/EJAM/reference/frs_by_mact.html","id":null,"dir":"Reference","previous_headings":"","what":"frs_by_mact (DATA) MACT NESHAP subpart(s) that each EPA-regulated site is subject to — frs_by_mact","title":"frs_by_mact (DATA) MACT NESHAP subpart(s) that each EPA-regulated site is subject to — frs_by_mact","text":"data.table one row per site -- MACT subpart pair, multiple rows one site site covered multiple subparts. joined frs_by_programid get latlons matching facilities. @details 112k rows 83k unique program IDs table, ECHO data download ICIS Air AFS. programid column found pgm_sys_id column frs_by_programid, 6/14/23 little half found , work progress resolved. table(frs_by_mact$programid %% frs_by_programid$pgm_sys_id) FALSE  TRUE 56497 55411 Also typos downloaded dataset ECHO/FRS, \"WOOD PERSERVING AREA SOURCES\"","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frs_by_mact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frs_by_mact (DATA) MACT NESHAP subpart(s) that each EPA-regulated site is subject to — frs_by_mact","text":"","code":"mact_table #>     subpart #> 1         A #> 2        AA #> 3      AAAA #> 4     AAAAA #> 5   AAAAAAA #> 6         B #> 7        BB #> 8     BBBBB #> 9    BBBBBB #> 10  BBBBBBB #> 11        C #> 12       CC #> 13      CCC #> 14     CCCC #> 15    CCCCC #> 16   CCCCCC #> 17  CCCCCCC #> 18        D #> 19       DD #> 20      DDD #> 21     DDDD #> 22    DDDDD #> 23   DDDDDD #> 24  DDDDDDD #> 25        E #> 26       EE #> 27      EEE #> 28     EEEE #> 29    EEEEE #> 30  EEEEEEE #> 31        F #> 32     FFFF #> 33    FFFFF #> 34   FFFFFF #> 35        G #> 36       GG #> 37      GGG #> 38     GGGG #> 39    GGGGG #> 40        H #> 41       HH #> 42      HHH #> 43     HHHH #> 44    HHHHH #> 45   HHHHHH #> 46  HHHHHHH #> 47        I #> 48       II #> 49      III #> 50     IIII #> 51    IIIII #> 52        J #> 53       JJ #> 54      JJJ #> 55     JJJJ #> 56    JJJJJ #> 57   JJJJJJ #> 58       KK #> 59     KKKK #> 60    KKKKK #> 61        L #> 62       LL #> 63      LLL #> 64    LLLLL #> 65   LLLLLL #> 66        M #> 67       MM #> 68      MMM #> 69     MMMM #> 70    MMMMM #> 71   MMMMMM #> 72        N #> 73      NNN #> 74     NNNN #> 75    NNNNN #> 76   NNNNNN #> 77        O #> 78       OO #> 79      OOO #> 80     OOOO #> 81   OOOOOO #> 82       PP #> 83      PPP #> 84     PPPP #> 85    PPPPP #> 86   PPPPPP #> 87        Q #> 88       QQ #> 89     QQQQ #> 90    QQQQQ #> 91   QQQQQQ #> 92        R #> 93       RR #> 94      RRR #> 95     RRRR #> 96    RRRRR #> 97   RRRRRR #> 98        S #> 99       SS #> 100    SSSS #> 101   SSSSS #> 102  SSSSSS #> 103       T #> 104      TT #> 105     TTT #> 106    TTTT #> 107   TTTTT #> 108  TTTTTT #> 109       U #> 110      UU #> 111     UUU #> 112    UUUU #> 113   UUUUU #> 114      VV #> 115     VVV #> 116    VVVV #> 117  VVVVVV #> 118       W #> 119      WW #> 120    WWWW #> 121   WWWWW #> 122  WWWWWW #> 123       X #> 124      XX #> 125     XXX #> 126    XXXX #> 127  XXXXXX #> 128       Y #> 129      YY #> 130    YYYY #> 131   YYYYY #> 132  YYYYYY #> 133     ZZZ #> 134    ZZZZ #> 135   ZZZZZ #> 136  ZZZZZZ #>                                                                            title #> 1                                                             GENERAL PROVISIONS #> 2                                            PHOSPERIC ACID MANUFACTURING PLANTS #> 3                                                MUNICIPAL SOLID WASTE LANDFILLS #> 4                                                      LIME MANUFACTURING PLANTS #> 5              AREA SOURCE: ASPHALT PROCESSING AND ASPHALT ROOFING MANUFACTURING #> 6                    REQ FOR CONTROL TECHNOLOGY DETERMINATIONS FOR MAJOR SOURCES #> 7                                                          PHOSPHATE FERTILIZERS #> 8                                                    SEMICONDUCTOR MANUFACTURING #> 9     GASOLINE DISTRIBUTION BULK TERMINALS, BULK PLANTS, AND PIPELINE FACILITIES #> 10                                   AREA SOURCE: CHEMICAL PREPARATIONS INDUSTRY #> 11                                                            DELISTINGS OF HAPS #> 12                                                          PETROLEUM REFINERIES #> 13                      STEEL PICKLING-HCI PROCESS FACILITIES AND HCI REG PLANTS #> 14                                            MANUFACTURING OF NUTRITIONAL YEAST #> 15                             COKE OVENS: PUSHING, QUENCHING AND BATTERY STACKS #> 16                                                GASOLINE DISPENSING FACILITIES #> 17                          AREA SOURCE: PAINT AND ALLIED PRODUCTS MANUFACTURING #> 18                                       COMPLIANCE EXTENSION, EARLY HAP REDUCTN #> 19                                        OFF-SITE WASTE AND RECOVERY OPERATIONS #> 20                                                       MINERAL WOOL PRODUCTION #> 21                                           PLYWOOD AND COMPOSITE WOOD PRODUCTS #> 22   MAJOR SOURCES: INDUSTRIAL/COMMERCIAL/INSTITUTIONAL BOILERS & PROCESS HEATER #> 23                     POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION AREA SOURCES #> 24                                               AREA SOURCE: PREPARED FEEDS MFG #> 25                         APPROVAL OF STATE PROGRAMS &  DELEGATION OF AUTHORITY #> 26                                                 MAGNETIC TAPE MFG. OPERATIONS #> 27                                                    HAZARDOUS WASTE COMBUSTORS #> 28                                   ORGANIC LIQUIDS DISTRIBUTION (NON-GASOLINE) #> 29                                                      IRON AND STEEL FOUNDRIES #> 30                          AREA SOURCE: GOLD MINE ORE PROCESSING AND PRODUCTION #> 31                                SYNTHETIC HAZARDOUS ORGANICS (SOCMI) STANDARDS #> 32                            MISCELLANEOUS ORGANIC CHEMICAL MANUFACTURING (MON) #> 33                            INTEGRATED IRON AND STEEL MANUFACTURING FACILITIES #> 34                                        SECONDARY COPPER SMELTING AREA SOURCES #> 35         SOCMI PROCESS VENTS, STORAGE VESSELS, TRANSFER OPERATIONS, WASTEWATER #> 36                                                       AEROSPACE MFG. & REWORK #> 37                                                  PHARMACEUTICAL MANUFACTURING #> 38                               SOLVENT EXTRACTION FOR VEGETABLE OIL PRODUCTION #> 39                                                              SITE REMEDIATION #> 40                                         EQUIPMENT LEAKS OF HAZARDOUS ORGANICS #> 41                                     OIL AND NATURAL GAS PRODUCTION FACILITIES #> 42                                 NATURAL GAS TRANSMISSION & STORAGE FACILITIES #> 43                                          WET FORMED FIBERGLASS MAT PRODUCTION #> 44                                           MISCELLANEOUS COATING MANUFACTURING #> 45                 PAINT STRIP & MISC SURFACE COATING OPERATIONS AT AREA SOURCES #> 46                                  POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION #> 47                                      NEGOTIATED REGS: EQUIP LEAKS, HAZ-ORGNCS #> 48                                                    SHIPBUILDING & SHIP REPAIR #> 49                                         FLEXIBLE POLYURETHANE FOAM PRODUCTION #> 50                                 SURFACE COATING OF AUTO AND LIGHT DUTY TRUCKS #> 51                       MERCURY EMISSIONS FROM MERCURY CELL CHLOR-ALKALI PLANTS #> 52                                  POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION #> 53                                       WOOD FURNITURE MANUFACTURING OPERATIONS #> 54                                                  GROUP IV POLYMERS AND RESINS #> 55                                                    PAPER & OTHER WEB COATINGS #> 56                                BRICK & STRUCTURAL CLAY PRODUCTS MANUFACTURING #> 57                INDUSTRIAL, COMMERCIAL, AND INSTITUTIONAL BOILERS AREA SOURCES #> 58                                                         PRINTING & PUBLISHING #> 59                                                 SURFACE COATING OF METAL CANS #> 60                                                   CLAY CERAMICS MANUFACTURING #> 61                                                           COKE OVEN BATTERIES #> 62                                             PRIMARY ALUMINUM REDUCTION PLANTS #> 63                                                        PORTLAND CEMENT PLANTS #> 64                          ASPHALT PROCESSING AND ASPHALT ROOFING MANUFACTURING #> 65                         ACRYLIC AND MODACRYLIC FIBERS PRODUCTION AREA SOURCES #> 66                                                DRY CLEANERS PERCHLOROETHYLENE #> 67                            CHEMICAL RECOVERY COMBUSTION SOURCES AT PULP MILLS #> 68                                        PESTICIDE ACTIVE INGREDIENT PRODUCTION #> 69                             SURFACE COATING OF MISC. METAL PARTS AND PRODUCTS #> 70                             FLEXIBLE POLYURETHANE FOAM FABRICATION OPERATIONS #> 71                                          CARBON BLACK PRODUCTION AREA SOURCES #> 72                                                       CHROMIUM ELECTROPLATING #> 73                                                 WOOL FIBERGLASS MANUFACTURING #> 74                                           SURFACE COATING OF LARGE APPLIANCES #> 75                                                  HYDROCHLORIC ACID PRODUCTION #> 76                       CHEMICAL MANUFACTURING AREA SOURCES: CHROMIUM COMPOUNDS #> 77                                                    ETHYLENE OXIDE STERILIZERS #> 78                                                      TANK STANDARDS - LEVEL 1 #> 79                                          MANUFACTURE OF AMINO/PHENOLIC RESINS #> 80                    PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES #> 81                            FLEXIBLE POLYURETHANE FOAM PROD & FAB AREA SOURCES #> 82                                                           CONTAINER STANDARDS #> 83                                                  POLYETHER POLYOLS PRODUCTION #> 84                                 SURFACE COATING OF PLASTIC PARTS AND PRODUCTS #> 85                                                      ENGINE TEST CELLS/STANDS #> 86                                  LEAD ACID BATTERY MANUFACTURING AREA SOURCES #> 87                                             INDUSTRIAL PROCESS COOLING TOWERS #> 88                                                           SURFACE IMPOUNDMENT #> 89                                     SURFACE COATING OF WOOD BUILDING PRODUCTS #> 90                                   FRICTION MATERIALS MANUFACTURING FACILITIES #> 91                                                  WOOD PERSERVING AREA SOURCES #> 92                                                         GASOLINE DISTRIBUTION #> 93                                                      INDIVIDUAL DRAIN SYSTEMS #> 94                                                 SECONDARY ALUMINUM PRODUCTION #> 95                                            SURFACE COATING OF METAL FURNITURE #> 96                                                  TACONITE IRON ORE PROCESSING #> 97                                                CLAY CERAMICS MFG AREA SOURCES #> 98                                                                PULP AND PAPER #> 99  CLOSED VENT SYS/CTRL DEVICES, RECOVERY DEVICES, ROUTING TO FUEL GAS SYS/PROC #> 100                                                SURFACE COATING OF METAL COIL #> 101                                            REFRACTORY PRODUCTS MANUFACTURING #> 102                                                       GLASS MFG AREA SOURCES #> 103                                                 HALOGENATED SOLVENT CLEANING #> 104                                            EQUIPMENT LEAKS - CONTROL LEVEL 1 #> 105                                                        PRIMARY LEAD SMELTING #> 106                                                 LEATHER FINISHING OPERATIONS #> 107                                                   PRIMARY MAGNESIUM REFINING #> 108                          SECONDARY NONFERROUS METALS PROCESSING AREA SOURCES #> 109                                                  GROUP 1 POLYMERS AND RESINS #> 110                                                  EQUIP LEAKS-CONTROL LEVEL 2 #> 111                                   PETROLEUM REFINERIES: CCU'S, CRU'S & SRU'S #> 112                                              CELLULOSE PRODUCT MANUFACTURING #> 113                                                     COAL & OIL-FIRED EUSGU'S #> 114                                         OIL-WATER & ORGANIC-WATER SEPARATORS #> 115                                               PUBLICLY OWNED TREATMENT WORKS #> 116                                                           BOAT MANUFACTURING #> 117                                          CHEMICAL MANUFACTURING AREA SOURCES #> 118                               EPOXY RESINS & NON-NYLON POLYAMIDES PRODUCTION #> 119                                     STORAGE VESSELS (TANKS)- CONTROL LEVEL 2 #> 120                                     REINFORCED PLASTIC COMPOSITES PRODUCTION #> 121                                          HOSPITAL ETHYLENE OXIDE STERILIZERS #> 122                                AREA SOURCE: PLATING AND POLISHING OPERATIONS #> 123                                                      SECONDARY LEAD SMELTERS #> 124                       ETHYLENE MPF: HEAT EXCHANGE SYSTEMS & WASTE OPERATIONS #> 125                                                        FERROALLOY PRODUCTION #> 126                                                    RUBBER TIRE MANUFACTURING #> 127          AREA SOURCE: NINE METAL FABRICATION AND FINISHING SOURCE CATEGORIES #> 128                            MARINE TANK VESSEL LOADING & UNLOADING OPERATIONS #> 129                                                       GENERIC MACT STANDARDS #> 130                                               STATIONARY COMBUSTION TURBINES #> 131                     AREA SOURCE: ELECTRIC ARC FURNACE STEELMAKING FACILITIES #> 132                               AREA SOURCE: FERROALLOYS PRODUCTION FACILITIES #> 133                                                         CHEMICAL SECTOR RULE #> 134                  STATIONARY RECIPROCATING INTERNAL COMBUSTION ENGINES (RICE) #> 135                                        IRON AND STEEL FOUNDRIES AREA SOURCES #> 136                   AREA SOURCE: ALUMINUM, COPPER & OTHER NONFERROUS FOUNDRIES #>                                                                                  dropdown_label #> 1                                                                A - General Provisions (5,052) #> 2                                                 AA - Phosperic Acid Manufacturing Plants (15) #> 3                                                  AAAA - Municipal Solid Waste Landfills (711) #> 4                                                        AAAAA - Lime Manufacturing Plants (45) #> 5              AAAAAAA - Area Source: Asphalt Processing And Asphalt Roofing Manufacturing (34) #> 6                          B - Req For Control Technology Determinations For Major Sources (81) #> 7                                                               BB - Phosphate Fertilizers (15) #> 8                                                      BBBBB - Semiconductor Manufacturing (45) #> 9     BBBBBB - Gasoline Distribution Bulk Terminals, Bulk Plants, And Pipeline Facilities (943) #> 10                                    BBBBBBB - Area Source: Chemical Preparations Industry (3) #> 11                                                                   C - Delistings Of Haps (1) #> 12                                                              CC - Petroleum Refineries (186) #> 13                          CCC - Steel Pickling-Hci Process Facilities And Hci Reg Plants (51) #> 14                                                CCCC - Manufacturing Of Nutritional Yeast (6) #> 15                               CCCCC - Coke Ovens: Pushing, Quenching And Battery Stacks (27) #> 16                                              CCCCCC - Gasoline Dispensing Facilities (1,700) #> 17                          CCCCCCC - Area Source: Paint And Allied Products Manufacturing (40) #> 18                                              D - Compliance Extension, Early Hap Reductn (5) #> 19                                             DD - Off-Site Waste And Recovery Operations (97) #> 20                                                           DDD - Mineral Wool Production (13) #> 21                                             DDDD - Plywood And Composite Wood Products (392) #> 22  DDDDD - Major Sources: Industrial/Commercial/Institutional Boilers & Process Heater (2,737) #> 23                       DDDDDD - Polyvinyl Chloride And Copolymers Production Area Sources (7) #> 24                                              DDDDDDD - Area Source: Prepared Feeds Mfg (123) #> 25                                E - Approval Of State Programs &  Delegation Of Authority (1) #> 26                                                      EE - Magnetic Tape Mfg. Operations (11) #> 27                                                       EEE - Hazardous Waste Combustors (139) #> 28                                     EEEE - Organic Liquids Distribution (Non-Gasoline) (322) #> 29                                                        EEEEE - Iron And Steel Foundries (92) #> 30                           EEEEEEE - Area Source: Gold Mine Ore Processing And Production (3) #> 31                                     F - Synthetic Hazardous Organics (Socmi) Standards (269) #> 32                              FFFF - Miscellaneous Organic Chemical Manufacturing (Mon) (394) #> 33                              FFFFF - Integrated Iron And Steel Manufacturing Facilities (19) #> 34                                          FFFFFF - Secondary Copper Smelting Area Sources (1) #> 35              G - Socmi Process Vents, Storage Vessels, Transfer Operations, Wastewater (304) #> 36                                                           GG - Aerospace Mfg. & Rework (159) #> 37                                                      GGG - Pharmaceutical Manufacturing (76) #> 38                                 GGGG - Solvent Extraction For Vegetable Oil Production (102) #> 39                                                               GGGGG - Site Remediation (146) #> 40                                              H - Equipment Leaks Of Hazardous Organics (342) #> 41                                       HH - Oil And Natural Gas Production Facilities (3,656) #> 42                                    HHH - Natural Gas Transmission & Storage Facilities (107) #> 43                                              HHHH - Wet Formed Fiberglass Mat Production (8) #> 44                                            HHHHH - Miscellaneous Coating Manufacturing (182) #> 45               HHHHHH - Paint Strip & Misc Surface Coating Operations At Area Sources (3,169) #> 46                                  HHHHHHH - Polyvinyl Chloride And Copolymers Production (21) #> 47                                            I - Negotiated Regs: Equip Leaks, Haz-Orgncs (47) #> 48                                                         II - Shipbuilding & Ship Repair (96) #> 49                                             III - Flexible Polyurethane Foam Production (42) #> 50                                   IIII - Surface Coating Of Auto And Light Duty Trucks (116) #> 51                         IIIII - Mercury Emissions From Mercury Cell Chlor-Alkali Plants (12) #> 52                                         J - Polyvinyl Chloride And Copolymers Production (9) #> 53                                           JJ - Wood Furniture Manufacturing Operations (522) #> 54                                                      JJJ - Group Iv Polymers And Resins (63) #> 55                                                      JJJJ - Paper & Other Web Coatings (311) #> 56                                  JJJJJ - Brick & Structural Clay Products Manufacturing (98) #> 57                JJJJJJ - Industrial, Commercial, And Institutional Boilers Area Sources (740) #> 58                                                             KK - Printing & Publishing (395) #> 59                                                    KKKK - Surface Coating Of Metal Cans (60) #> 60                                                      KKKKK - Clay Ceramics Manufacturing (7) #> 61                                                                 L - Coke Oven Batteries (28) #> 62                                                  LL - Primary Aluminum Reduction Plants (16) #> 63                                                           LLL - Portland Cement Plants (121) #> 64                            LLLLL - Asphalt Processing And Asphalt Roofing Manufacturing (19) #> 65                           LLLLLL - Acrylic And Modacrylic Fibers Production Area Sources (2) #> 66                                                   M - Dry Cleaners Perchloroethylene (8,763) #> 67                                MM - Chemical Recovery Combustion Sources At Pulp Mills (117) #> 68                                            MMM - Pesticide Active Ingredient Production (30) #> 69                               MMMM - Surface Coating Of Misc. Metal Parts And Products (775) #> 70                                MMMMM - Flexible Polyurethane Foam Fabrication Operations (9) #> 71                                            MMMMMM - Carbon Black Production Area Sources (4) #> 72                                                          N - Chromium Electroplating (1,185) #> 73                                                     NNN - Wool Fiberglass Manufacturing (24) #> 74                                              NNNN - Surface Coating Of Large Appliances (20) #> 75                                                    NNNNN - Hydrochloric Acid Production (29) #> 76                         NNNNNN - Chemical Manufacturing Area Sources: Chromium Compounds (3) #> 77                                                         O - Ethylene Oxide Sterilizers (111) #> 78                                                           OO - Tank Standards - Level 1 (16) #> 79                                              OOO - Manufacture Of Amino/Phenolic Resins (39) #> 80                      OOOO - Printing, Coating And Dyeing Of Fabrics And Other Textiles (101) #> 81                             OOOOOO - Flexible Polyurethane Foam Prod & Fab Area Sources (43) #> 82                                                                PP - Container Standards (16) #> 83                                                      PPP - Polyether Polyols Production (31) #> 84                                   PPPP - Surface Coating Of Plastic Parts And Products (396) #> 85                                                        PPPPP - Engine Test Cells/Stands (30) #> 86                                   PPPPPP - Lead Acid Battery Manufacturing Area Sources (29) #> 87                                                  Q - Industrial Process Cooling Towers (115) #> 88                                                                 QQ - Surface Impoundment (2) #> 89                                        QQQQ - Surface Coating Of Wood Building Products (80) #> 90                                      QQQQQ - Friction Materials Manufacturing Facilities (3) #> 91                                                   QQQQQQ - Wood Perserving Area Sources (37) #> 92                                                              R - Gasoline Distribution (562) #> 93                                                           RR - Individual Drain Systems (18) #> 94                                                    RRR - Secondary Aluminum Production (340) #> 95                                               RRRR - Surface Coating Of Metal Furniture (31) #> 96                                                     RRRRR - Taconite Iron Ore Processing (6) #> 97                                                  RRRRRR - Clay Ceramics Mfg Area Sources (4) #> 98                                                                     S - Pulp And Paper (134) #> 99       SS - Closed Vent Sys/Ctrl Devices, Recovery Devices, Routing To Fuel Gas Sys/Proc (94) #> 100                                                   SSSS - Surface Coating Of Metal Coil (66) #> 101                                               SSSSS - Refractory Products Manufacturing (4) #> 102                                                        SSSSSS - Glass Mfg Area Sources (16) #> 103                                                    T - Halogenated Solvent Cleaning (1,255) #> 104                                                 TT - Equipment Leaks - Control Level 1 (13) #> 105                                                             TTT - Primary Lead Smelting (2) #> 106                                                    TTTT - Leather Finishing Operations (14) #> 107                                                      TTTTT - Primary Magnesium Refining (5) #> 108                           TTTTTT - Secondary Nonferrous Metals Processing Area Sources (10) #> 109                                                        U - Group 1 Polymers And Resins (28) #> 110                                                       UU - Equip Leaks-Control Level 2 (86) #> 111                                      UUU - Petroleum Refineries: Ccu's, Cru's & Sru's (126) #> 112                                                 UUUU - Cellulose Product Manufacturing (15) #> 113                                                      UUUUU - Coal & Oil-Fired Eusgu's (249) #> 114                                              VV - Oil-Water & Organic-Water Separators (16) #> 115                                                   VVV - Publicly Owned Treatment Works (18) #> 116                                                             VVVV - Boat Manufacturing (237) #> 117                                          VVVVVV -  Chemical Manufacturing Area Sources (81) #> 118                                     W - Epoxy Resins & Non-Nylon Polyamides Production (10) #> 119                                          WW - Storage Vessels (Tanks)- Control Level 2 (54) #> 120                                       WWWW - Reinforced Plastic Composites Production (729) #> 121                                           WWWWW - Hospital Ethylene Oxide Sterilizers (111) #> 122                                WWWWWW - Area Source: Plating And Polishing Operations (222) #> 123                                                            X - Secondary Lead Smelters (22) #> 124                            XX - Ethylene Mpf: Heat Exchange Systems & Waste Operations (23) #> 125                                                             XXX - Ferroalloy Production (4) #> 126                                                       XXXX - Rubber Tire Manufacturing (33) #> 127          XXXXXX - Area Source: Nine Metal Fabrication And Finishing Source Categories (228) #> 128                                 Y - Marine Tank Vessel Loading & Unloading Operations (185) #> 129                                                            YY - Generic Mact Standards (90) #> 130                                                 YYYY - Stationary Combustion Turbines (248) #> 131                       YYYYY - Area Source: Electric Arc Furnace Steelmaking Facilities (48) #> 132                                 YYYYYY - Area Source: Ferroalloys Production Facilities (6) #> 133                                                              ZZZ - Chemical Sector Rule (4) #> 134                 ZZZZ - Stationary Reciprocating Internal Combustion Engines (Rice) (25,996) #> 135                                         ZZZZZ - Iron And Steel Foundries Area Sources (149) #> 136                    ZZZZZZ - Area Source: Aluminum, Copper & Other Nonferrous Foundries (29) #>         N #> 1    5052 #> 2      15 #> 3     711 #> 4      45 #> 5      34 #> 6      81 #> 7      15 #> 8      45 #> 9     943 #> 10      3 #> 11      1 #> 12    186 #> 13     51 #> 14      6 #> 15     27 #> 16   1700 #> 17     40 #> 18      5 #> 19     97 #> 20     13 #> 21    392 #> 22   2737 #> 23      7 #> 24    123 #> 25      1 #> 26     11 #> 27    139 #> 28    322 #> 29     92 #> 30      3 #> 31    269 #> 32    394 #> 33     19 #> 34      1 #> 35    304 #> 36    159 #> 37     76 #> 38    102 #> 39    146 #> 40    342 #> 41   3656 #> 42    107 #> 43      8 #> 44    182 #> 45   3169 #> 46     21 #> 47     47 #> 48     96 #> 49     42 #> 50    116 #> 51     12 #> 52      9 #> 53    522 #> 54     63 #> 55    311 #> 56     98 #> 57    740 #> 58    395 #> 59     60 #> 60      7 #> 61     28 #> 62     16 #> 63    121 #> 64     19 #> 65      2 #> 66   8763 #> 67    117 #> 68     30 #> 69    775 #> 70      9 #> 71      4 #> 72   1185 #> 73     24 #> 74     20 #> 75     29 #> 76      3 #> 77    111 #> 78     16 #> 79     39 #> 80    101 #> 81     43 #> 82     16 #> 83     31 #> 84    396 #> 85     30 #> 86     29 #> 87    115 #> 88      2 #> 89     80 #> 90      3 #> 91     37 #> 92    562 #> 93     18 #> 94    340 #> 95     31 #> 96      6 #> 97      4 #> 98    134 #> 99     94 #> 100    66 #> 101     4 #> 102    16 #> 103  1255 #> 104    13 #> 105     2 #> 106    14 #> 107     5 #> 108    10 #> 109    28 #> 110    86 #> 111   126 #> 112    15 #> 113   249 #> 114    16 #> 115    18 #> 116   237 #> 117    81 #> 118    10 #> 119    54 #> 120   729 #> 121   111 #> 122   222 #> 123    22 #> 124    23 #> 125     4 #> 126    33 #> 127   228 #> 128   185 #> 129    90 #> 130   248 #> 131    48 #> 132     6 #> 133     4 #> 134 25996 #> 135   149 #> 136    29   mact_table[order(mact_table$title),] #>     subpart #> 117  VVVVVV #> 65   LLLLLL #> 36       GG #> 25        E #> 136  ZZZZZZ #> 5   AAAAAAA #> 10  BBBBBBB #> 131   YYYYY #> 132  YYYYYY #> 30  EEEEEEE #> 127  XXXXXX #> 17  CCCCCCC #> 122  WWWWWW #> 24  DDDDDDD #> 64    LLLLL #> 116    VVVV #> 56    JJJJJ #> 71   MMMMMM #> 112    UUUU #> 76   NNNNNN #> 67       MM #> 133     ZZZ #> 72        N #> 60    KKKKK #> 97   RRRRRR #> 99       SS #> 113   UUUUU #> 61        L #> 15    CCCCC #> 18        D #> 82       PP #> 11        C #> 66        M #> 85    PPPPP #> 118       W #> 110      UU #> 104      TT #> 40        H #> 124      XX #> 77        O #> 125     XXX #> 70    MMMMM #> 81   OOOOOO #> 49      III #> 90    QQQQQ #> 16   CCCCCC #> 92        R #> 9    BBBBBB #> 1         A #> 129      YY #> 102  SSSSSS #> 109       U #> 54      JJJ #> 103       T #> 27      EEE #> 121   WWWWW #> 75    NNNNN #> 93       RR #> 87        Q #> 57   JJJJJJ #> 33    FFFFF #> 29    EEEEE #> 135   ZZZZZ #> 86   PPPPPP #> 106    TTTT #> 4     AAAAA #> 26       EE #> 22    DDDDD #> 79      OOO #> 14     CCCC #> 128       Y #> 51    IIIII #> 20      DDD #> 44    HHHHH #> 32     FFFF #> 3      AAAA #> 42      HHH #> 47        I #> 19       DD #> 41       HH #> 114      VV #> 28     EEEE #> 45   HHHHHH #> 55     JJJJ #> 68      MMM #> 12       CC #> 111     UUU #> 37      GGG #> 2        AA #> 7        BB #> 21     DDDD #> 83      PPP #> 46  HHHHHHH #> 52        J #> 23   DDDDDD #> 63      LLL #> 62       LL #> 105     TTT #> 107   TTTTT #> 58       KK #> 80     OOOO #> 115     VVV #> 98        S #> 101   SSSSS #> 120    WWWW #> 6         B #> 126    XXXX #> 94      RRR #> 34   FFFFFF #> 123       X #> 108  TTTTTT #> 8     BBBBB #> 48       II #> 39    GGGGG #> 35        G #> 38     GGGG #> 130    YYYY #> 134    ZZZZ #> 13      CCC #> 119      WW #> 50     IIII #> 74     NNNN #> 59     KKKK #> 100    SSSS #> 95     RRRR #> 69     MMMM #> 84     PPPP #> 89     QQQQ #> 88       QQ #> 31        F #> 96    RRRRR #> 78       OO #> 43     HHHH #> 53       JJ #> 91   QQQQQQ #> 73      NNN #>                                                                            titledropdown_label #> 117                                          VVVVVV -  Chemical Manufacturing Area Sources (81) #> 65                           LLLLLL - Acrylic And Modacrylic Fibers Production Area Sources (2) #> 36                                                           GG - Aerospace Mfg. & Rework (159) #> 25                                E - Approval Of State Programs &  Delegation Of Authority (1) #> 136                    ZZZZZZ - Area Source: Aluminum, Copper & Other Nonferrous Foundries (29) #> 5              AAAAAAA - Area Source: Asphalt Processing And Asphalt Roofing Manufacturing (34) #> 10                                    BBBBBBB - Area Source: Chemical Preparations Industry (3) #> 131                       YYYYY - Area Source: Electric Arc Furnace Steelmaking Facilities (48) #> 132                                 YYYYYY - Area Source: Ferroalloys Production Facilities (6) #> 30                           EEEEEEE - Area Source: Gold Mine Ore Processing And Production (3) #> 127          XXXXXX - Area Source: Nine Metal Fabrication And Finishing Source Categories (228) #> 17                          CCCCCCC - Area Source: Paint And Allied Products Manufacturing (40) #> 122                                WWWWWW - Area Source: Plating And Polishing Operations (222) #> 24                                              DDDDDDD - Area Source: Prepared Feeds Mfg (123) #> 64                            LLLLL - Asphalt Processing And Asphalt Roofing Manufacturing (19) #> 116                                                             VVVV - Boat Manufacturing (237) #> 56                                  JJJJJ - Brick & Structural Clay Products Manufacturing (98) #> 71                                            MMMMMM - Carbon Black Production Area Sources (4) #> 112                                                 UUUU - Cellulose Product Manufacturing (15) #> 76                         NNNNNN - Chemical Manufacturing Area Sources: Chromium Compounds (3) #> 67                                MM - Chemical Recovery Combustion Sources At Pulp Mills (117) #> 133                                                              ZZZ - Chemical Sector Rule (4) #> 72                                                          N - Chromium Electroplating (1,185) #> 60                                                      KKKKK - Clay Ceramics Manufacturing (7) #> 97                                                  RRRRRR - Clay Ceramics Mfg Area Sources (4) #> 99       SS - Closed Vent Sys/Ctrl Devices, Recovery Devices, Routing To Fuel Gas Sys/Proc (94) #> 113                                                      UUUUU - Coal & Oil-Fired Eusgu's (249) #> 61                                                                 L - Coke Oven Batteries (28) #> 15                               CCCCC - Coke Ovens: Pushing, Quenching And Battery Stacks (27) #> 18                                              D - Compliance Extension, Early Hap Reductn (5) #> 82                                                                PP - Container Standards (16) #> 11                                                                   C - Delistings Of Haps (1) #> 66                                                   M - Dry Cleaners Perchloroethylene (8,763) #> 85                                                        PPPPP - Engine Test Cells/Stands (30) #> 118                                     W - Epoxy Resins & Non-Nylon Polyamides Production (10) #> 110                                                       UU - Equip Leaks-Control Level 2 (86) #> 104                                                 TT - Equipment Leaks - Control Level 1 (13) #> 40                                              H - Equipment Leaks Of Hazardous Organics (342) #> 124                            XX - Ethylene Mpf: Heat Exchange Systems & Waste Operations (23) #> 77                                                         O - Ethylene Oxide Sterilizers (111) #> 125                                                             XXX - Ferroalloy Production (4) #> 70                                MMMMM - Flexible Polyurethane Foam Fabrication Operations (9) #> 81                             OOOOOO - Flexible Polyurethane Foam Prod & Fab Area Sources (43) #> 49                                             III - Flexible Polyurethane Foam Production (42) #> 90                                      QQQQQ - Friction Materials Manufacturing Facilities (3) #> 16                                              CCCCCC - Gasoline Dispensing Facilities (1,700) #> 92                                                              R - Gasoline Distribution (562) #> 9     BBBBBB - Gasoline Distribution Bulk Terminals, Bulk Plants, And Pipeline Facilities (943) #> 1                                                                A - General Provisions (5,052) #> 129                                                            YY - Generic Mact Standards (90) #> 102                                                        SSSSSS - Glass Mfg Area Sources (16) #> 109                                                        U - Group 1 Polymers And Resins (28) #> 54                                                      JJJ - Group Iv Polymers And Resins (63) #> 103                                                    T - Halogenated Solvent Cleaning (1,255) #> 27                                                       EEE - Hazardous Waste Combustors (139) #> 121                                           WWWWW - Hospital Ethylene Oxide Sterilizers (111) #> 75                                                    NNNNN - Hydrochloric Acid Production (29) #> 93                                                           RR - Individual Drain Systems (18) #> 87                                                  Q - Industrial Process Cooling Towers (115) #> 57                JJJJJJ - Industrial, Commercial, And Institutional Boilers Area Sources (740) #> 33                              FFFFF - Integrated Iron And Steel Manufacturing Facilities (19) #> 29                                                        EEEEE - Iron And Steel Foundries (92) #> 135                                         ZZZZZ - Iron And Steel Foundries Area Sources (149) #> 86                                   PPPPPP - Lead Acid Battery Manufacturing Area Sources (29) #> 106                                                    TTTT - Leather Finishing Operations (14) #> 4                                                        AAAAA - Lime Manufacturing Plants (45) #> 26                                                      EE - Magnetic Tape Mfg. Operations (11) #> 22  DDDDD - Major Sources: Industrial/Commercial/Institutional Boilers & Process Heater (2,737) #> 79                                              OOO - Manufacture Of Amino/Phenolic Resins (39) #> 14                                                CCCC - Manufacturing Of Nutritional Yeast (6) #> 128                                 Y - Marine Tank Vessel Loading & Unloading Operations (185) #> 51                         IIIII - Mercury Emissions From Mercury Cell Chlor-Alkali Plants (12) #> 20                                                           DDD - Mineral Wool Production (13) #> 44                                            HHHHH - Miscellaneous Coating Manufacturing (182) #> 32                              FFFF - Miscellaneous Organic Chemical Manufacturing (Mon) (394) #> 3                                                  AAAA - Municipal Solid Waste Landfills (711) #> 42                                    HHH - Natural Gas Transmission & Storage Facilities (107) #> 47                                            I - Negotiated Regs: Equip Leaks, Haz-Orgncs (47) #> 19                                             DD - Off-Site Waste And Recovery Operations (97) #> 41                                       HH - Oil And Natural Gas Production Facilities (3,656) #> 114                                              VV - Oil-Water & Organic-Water Separators (16) #> 28                                     EEEE - Organic Liquids Distribution (Non-Gasoline) (322) #> 45               HHHHHH - Paint Strip & Misc Surface Coating Operations At Area Sources (3,169) #> 55                                                      JJJJ - Paper & Other Web Coatings (311) #> 68                                            MMM - Pesticide Active Ingredient Production (30) #> 12                                                              CC - Petroleum Refineries (186) #> 111                                      UUU - Petroleum Refineries: Ccu's, Cru's & Sru's (126) #> 37                                                      GGG - Pharmaceutical Manufacturing (76) #> 2                                                 AA - Phosperic Acid Manufacturing Plants (15) #> 7                                                               BB - Phosphate Fertilizers (15) #> 21                                             DDDD - Plywood And Composite Wood Products (392) #> 83                                                      PPP - Polyether Polyols Production (31) #> 46                                  HHHHHHH - Polyvinyl Chloride And Copolymers Production (21) #> 52                                         J - Polyvinyl Chloride And Copolymers Production (9) #> 23                       DDDDDD - Polyvinyl Chloride And Copolymers Production Area Sources (7) #> 63                                                           LLL - Portland Cement Plants (121) #> 62                                                  LL - Primary Aluminum Reduction Plants (16) #> 105                                                             TTT - Primary Lead Smelting (2) #> 107                                                      TTTTT - Primary Magnesium Refining (5) #> 58                                                             KK - Printing & Publishing (395) #> 80                      OOOO - Printing, Coating And Dyeing Of Fabrics And Other Textiles (101) #> 115                                                   VVV - Publicly Owned Treatment Works (18) #> 98                                                                     S - Pulp And Paper (134) #> 101                                               SSSSS - Refractory Products Manufacturing (4) #> 120                                       WWWW - Reinforced Plastic Composites Production (729) #> 6                          B - Req For Control Technology Determinations For Major Sources (81) #> 126                                                       XXXX - Rubber Tire Manufacturing (33) #> 94                                                    RRR - Secondary Aluminum Production (340) #> 34                                          FFFFFF - Secondary Copper Smelting Area Sources (1) #> 123                                                            X - Secondary Lead Smelters (22) #> 108                           TTTTTT - Secondary Nonferrous Metals Processing Area Sources (10) #> 8                                                      BBBBB - Semiconductor Manufacturing (45) #> 48                                                         II - Shipbuilding & Ship Repair (96) #> 39                                                               GGGGG - Site Remediation (146) #> 35              G - Socmi Process Vents, Storage Vessels, Transfer Operations, Wastewater (304) #> 38                                 GGGG - Solvent Extraction For Vegetable Oil Production (102) #> 130                                                 YYYY - Stationary Combustion Turbines (248) #> 134                 ZZZZ - Stationary Reciprocating Internal Combustion Engines (Rice) (25,996) #> 13                          CCC - Steel Pickling-Hci Process Facilities And Hci Reg Plants (51) #> 119                                          WW - Storage Vessels (Tanks)- Control Level 2 (54) #> 50                                   IIII - Surface Coating Of Auto And Light Duty Trucks (116) #> 74                                              NNNN - Surface Coating Of Large Appliances (20) #> 59                                                    KKKK - Surface Coating Of Metal Cans (60) #> 100                                                   SSSS - Surface Coating Of Metal Coil (66) #> 95                                               RRRR - Surface Coating Of Metal Furniture (31) #> 69                               MMMM - Surface Coating Of Misc. Metal Parts And Products (775) #> 84                                   PPPP - Surface Coating Of Plastic Parts And Products (396) #> 89                                        QQQQ - Surface Coating Of Wood Building Products (80) #> 88                                                                 QQ - Surface Impoundment (2) #> 31                                     F - Synthetic Hazardous Organics (Socmi) Standards (269) #> 96                                                     RRRRR - Taconite Iron Ore Processing (6) #> 78                                                           OO - Tank Standards - Level 1 (16) #> 43                                              HHHH - Wet Formed Fiberglass Mat Production (8) #> 53                                           JJ - Wood Furniture Manufacturing Operations (522) #> 91                                                   QQQQQQ - Wood Perserving Area Sources (37) #> 73                                                     NNN - Wool Fiberglass Manufacturing (24) #>         N #> 117    81 #> 65      2 #> 36    159 #> 25      1 #> 136    29 #> 5      34 #> 10      3 #> 131    48 #> 132     6 #> 30      3 #> 127   228 #> 17     40 #> 122   222 #> 24    123 #> 64     19 #> 116   237 #> 56     98 #> 71      4 #> 112    15 #> 76      3 #> 67    117 #> 133     4 #> 72   1185 #> 60      7 #> 97      4 #> 99     94 #> 113   249 #> 61     28 #> 15     27 #> 18      5 #> 82     16 #> 11      1 #> 66   8763 #> 85     30 #> 118    10 #> 110    86 #> 104    13 #> 40    342 #> 124    23 #> 77    111 #> 125     4 #> 70      9 #> 81     43 #> 49     42 #> 90      3 #> 16   1700 #> 92    562 #> 9     943 #> 1    5052 #> 129    90 #> 102    16 #> 109    28 #> 54     63 #> 103  1255 #> 27    139 #> 121   111 #> 75     29 #> 93     18 #> 87    115 #> 57    740 #> 33     19 #> 29     92 #> 135   149 #> 86     29 #> 106    14 #> 4      45 #> 26     11 #> 22   2737 #> 79     39 #> 14      6 #> 128   185 #> 51     12 #> 20     13 #> 44    182 #> 32    394 #> 3     711 #> 42    107 #> 47     47 #> 19     97 #> 41   3656 #> 114    16 #> 28    322 #> 45   3169 #> 55    311 #> 68     30 #> 12    186 #> 111   126 #> 37     76 #> 2      15 #> 7      15 #> 21    392 #> 83     31 #> 46     21 #> 52      9 #> 23      7 #> 63    121 #> 62     16 #> 105     2 #> 107     5 #> 58    395 #> 80    101 #> 115    18 #> 98    134 #> 101     4 #> 120   729 #> 6      81 #> 126    33 #> 94    340 #> 34      1 #> 123    22 #> 108    10 #> 8      45 #> 48     96 #> 39    146 #> 35    304 #> 38    102 #> 130   248 #> 134 25996 #> 13     51 #> 119    54 #> 50    116 #> 74     20 #> 59     60 #> 100    66 #> 95     31 #> 69    775 #> 84    396 #> 89     80 #> 88      2 #> 31    269 #> 96      6 #> 78     16 #> 43      8 #> 53    522 #> 91     37 #> 73     24   mycodes <- c(\"BBBBBB\", \"OOOO\")   frs_by_mact[subpart %in% mycodes, ] #> Error in eval(expr, envir, enclos): object 'frs_by_mact' not found   mact_table[grepl(\"smelt\", mact_table$title, ignore.case = T), ] #>     subpart                                  title #> 34   FFFFFF SECONDARY COPPER SMELTING AREA SOURCES #> 105     TTT                  PRIMARY LEAD SMELTING #> 123       X                SECONDARY LEAD SMELTERS #>                                          dropdown_label  N #> 34  FFFFFF - Secondary Copper Smelting Area Sources (1)  1 #> 105                     TTT - Primary Lead Smelting (2)  2 #> 123                    X - Secondary Lead Smelters (22) 22   frs_by_mact[grepl(\"smelt\", title, ignore.case = T), ] #> Error in eval(expr, envir, enclos): object 'frs_by_mact' not found   # a single site can be covered by 19 categories   frs_by_mact[, howmany := .N, by=\"programid\"][order(howmany), ]  #> Error in eval(expr, envir, enclos): object 'frs_by_mact' not found   table(frs_by_mact[, howmany := .N, by=\"programid\"][order(howmany), howmany]) #> Error in table(frs_by_mact[, `:=`(howmany, .N), by = \"programid\"][order(howmany),     howmany]): object 'frs_by_mact' not found"},{"path":"https://usepa.github.io/EJAM/reference/frs_by_naics.html","id":null,"dir":"Reference","previous_headings":"","what":"frs_by_naics (DATA) data.table of NAICS code(s) for each EPA-regulated site in Facility Registry Service — frs_by_naics","title":"frs_by_naics (DATA) data.table of NAICS code(s) for each EPA-regulated site in Facility Registry Service — frs_by_naics","text":"format one row per site-NAICS pair, multiple rows one site multiple NAICS. @details SITES LACK NAICS INFO FRS! NAICS missing 80 percent facilities. frs 2,571,750 unique REGISTRY_ID values, frs_by_naics 680,000 rows 4/1/2023, 562,000 unique REGISTRY_ID values 2,900 unique NAICS codes. length(unique(frs_by_naics$REGISTRY_ID)) length(unique(frs_by_naics[,REGISTRY_ID])) length(frs_by_naics[, unique(REGISTRY_ID)]) frs_by_naics[,uniqueN(REGISTRY_ID)]   1: 34.04722 -81.15136 110000854246 325211 2: 34.04722 -81.15136 110000854246 325220 3: 34.04722 -81.15136 110000854246 325222","code":"561,999  as of 3/26/23 but early 2023 had been 564,770          lat       lon  REGISTRY_ID  NAICS"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frs_by_naics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frs_by_naics (DATA) data.table of NAICS code(s) for each EPA-regulated site in Facility Registry Service — frs_by_naics","text":"","code":"# NAICS is missing for about 80 percent of facilities  `frs[ NAICS == \"\", .N] / frs[,.N] ` #> Error in eval(expr, envir, enclos): object 'frs[ NAICS == \"\", .N] / frs[,.N] ' not found  # only about 562k facilities have some NAICS info  `frs[ NAICS != \"\", .N]` #> Error in eval(expr, envir, enclos): object 'frs[ NAICS != \"\", .N]' not found  `frs_by_naics[, uniqueN(REGISTRY_ID)]` # almost exactly matches the above #> Error in eval(expr, envir, enclos): object 'frs_by_naics[, uniqueN(REGISTRY_ID)]' not found    dim(frs_by_naics)  #> Error in eval(expr, envir, enclos): object 'frs_by_naics' not found  # about 680k rows here, or pairs of 1 NAICS - 1 registry ID pair,  #  since some IDs have 2 or more NAICS so appear as 2 or more rows here.    # About 2,900 different NAICS codes appear here:  `frs_by_naics[,  uniqueN(NAICS)]` #> Error in eval(expr, envir, enclos): object 'frs_by_naics[,  uniqueN(NAICS)]' not found  `frs_by_naics[, .(sum(.N > 1)), by=NAICS][,sum(V1)]` #> Error in eval(expr, envir, enclos): object 'frs_by_naics[, .(sum(.N > 1)), by=NAICS][,sum(V1)]' not found    #  2,457 NAICS codes are used to describe more than one Registry ID   `frs_by_naics[, .(sum(.N == 1)), by=NAICS][,sum(V1)]` #> Error in eval(expr, envir, enclos): object 'frs_by_naics[, .(sum(.N == 1)), by=NAICS][,sum(V1)]' not found    # [1] 425 NAICS codes appear only once, i.e., apply to only a single facility!      # Which 2-digit NAICS are found here most often?  `frs_by_naics[ , .N, keyby=substr(NAICS,1,2)]` #> Error in eval(expr, envir, enclos): object 'frs_by_naics[ , .N, keyby=substr(NAICS,1,2)]' not found  `frs_by_naics[ , .N,   by=substr(NAICS,1,2)][order(N),]` # Most common is 33 #> Error in eval(expr, envir, enclos): object 'frs_by_naics[ , .N,   by=substr(NAICS,1,2)][order(N),]' not found  # Top 10 most common 3-digit NAICS here:  `x = tail(frs_by_naics[ , .N,   by=.(n3 = substr(NAICS,1,3))][order(N), ],10)` #> Error in eval(expr, envir, enclos): object 'x = tail(frs_by_naics[ , .N,   by=.(n3 = substr(NAICS,1,3))][order(N), ],10)' not found  `cbind(x, industry = rownames(naics_categories(3))[match(x$n3, naics_categories(3))])` #> Error in eval(expr, envir, enclos): object 'cbind(x, industry = rownames(naics_categories(3))[match(x$n3, naics_categories(3))])' not found"},{"path":"https://usepa.github.io/EJAM/reference/frs_by_programid.html","id":null,"dir":"Reference","previous_headings":"","what":"frs_by_programid (DATA) data.table of Program System ID code(s) for each EPA-regulated site in\r\nthe Facility Registry Service — frs_by_programid","title":"frs_by_programid (DATA) data.table of Program System ID code(s) for each EPA-regulated site in\r\nthe Facility Registry Service — frs_by_programid","text":"frs_by_programid (DATA) data.table Program System ID code(s) EPA-regulated site Facility Registry Service","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_by_programid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frs_by_programid (DATA) data.table of Program System ID code(s) for each EPA-regulated site in\r\nthe Facility Registry Service — frs_by_programid","text":"Created frs_make_programid_lookup()  EJAMfrsdata package","code":"This is the format with one row per site-programid pair,     so multiple rows for one site if it is in multiple programs.   > dim(frs_by_programid)  [1] 3440451       5   as of 1/3/2023  nn=sample(1:nrow(frs_by_programid), 1); frs_by_programid[REGISTRY_ID == frs_by_programid$REGISTRY_ID[nn],]               lat       lon  REGISTRY_ID  program         pgm_sys_id      1: 40.21262 -100.6464 110040499724 AIRS/AFS         3114500040      2: 40.21262 -100.6464 110040499724     NDEQ              87933      3: 40.21262 -100.6464 110040499724      AIR NE0000003114500040       nn=sample(1:nrow(frs_by_programid), 1); frs_by_programid[REGISTRY_ID == frs_by_programid$REGISTRY_ID[nn],]               lat       lon  REGISTRY_ID program   pgm_sys_id      1: 47.00071 -120.5649 110037546493 WA-FSIS      1796553      2: 47.00071 -120.5649 110037546493    ICIS   1800041945      3: 47.00071 -120.5649 110037546493 WA-FSIS      7886103"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frs_by_sic.html","id":null,"dir":"Reference","previous_headings":"","what":"frs_by_sic (DATA) data.table of SIC code(s) for each EPA-regulated site in Facility Registry Service — frs_by_sic","title":"frs_by_sic (DATA) data.table of SIC code(s) for each EPA-regulated site in Facility Registry Service — frs_by_sic","text":"format one row per site-SIC pair, multiple rows one site multiple SIC.","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_naics.html","id":null,"dir":"Reference","previous_headings":"","what":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","title":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","text":"Use NAICS code industry title text search see FRS Facility Registry Service data EPA-regulated sites","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_naics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","text":"","code":"frs_from_naics(naics_code_or_name, ...)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_naics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","text":"naics_code_or_name  ... passed naics_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_naics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"PGM_SYS_ACRNMS\"","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frs_from_naics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use NAICS code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_naics","text":"","code":"frs_from_naics(\"uranium\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs          - is NOT in memory. Checking local disk... frs         is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/frs.arrow  #> frs          - is NOT in local folder. #> frs         - was read from pins board server, into memory (to specified envir). #>  #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_naics   - is NOT in memory. Checking local disk... frs_by_naics  is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/frs_by_naics.arrow  #> frs_by_naics   - is NOT in local folder. #> frs_by_naics  - was read from pins board server, into memory (to specified envir). #>  #> Key: <REGISTRY_ID> #>          lat        lon  REGISTRY_ID #>        <num>      <num>       <char> #>  1: 34.58119  -92.51189 110001710890 #>  2: 28.00390  -82.09650 110002473966 #>  3: 39.84488 -105.28092 110007074370 #>  4: 38.40361 -106.29725 110010054092 #>  5: 38.06416 -109.20513 110010134416 #>  6: 38.57326 -109.55075 110010668599 #>  7: 38.36444 -108.73028 110010732332 #>  8: 42.20970 -120.36680 110014208730 #>  9: 47.93129 -118.06677 110018918527 #> 10: 35.81332 -108.07806 110021155943 #> 11: 34.46428  -92.94709 110024954334 #> 12: 35.36147 -107.68931 110033148626 #> 13: 27.60451  -98.40847 110033861603 #> 14: 32.98081 -102.82339 110034198491 #> 15: 26.89270  -98.31050 110034202994 #> 16: 28.90778  -98.09889 110034291255 #> 17: 38.31249 -109.30900 110035858765 #> 18: 38.31518 -109.23539 110037102079 #> 19: 38.64200 -109.04900 110037576058 #> 20: 38.08012 -108.82188 110038438125 #> 21: 38.11944 -109.15707 110039201477 #> 22: 37.56914 -109.47811 110041041486 #> 23: 35.39618 -107.64255 110041096284 #> 24: 37.59833 -110.19306 110046339119 #> 25: 32.71957 -103.33963 110046349572 #> 26: 34.58123  -92.51848 110056511421 #> 27: 43.77090 -105.92800 110058332807 #> 28: 42.80110 -107.50800 110058337134 #> 29: 43.88620 -106.11900 110058359379 #> 30: 41.13629 -104.81906 110058359486 #> 31: 43.05070 -105.68500 110058363578 #> 32: 42.33270 -120.52080 110064803075 #> 33: 40.07147  -75.42028 110070326975 #> 34: 37.69743 -122.40613 110070443812 #> 35: 37.76510 -110.70250 110070492598 #> 36: 43.04778 -105.70602 110070647328 #> 37: 42.85969 -106.33265 110070984780 #> 38: 41.67111 -107.97139 110070987873 #> 39: 42.85548 -106.33531 110070988026 #> 40: 42.39837 -107.84901 110070989587 #> 41: 43.87184 -106.13106 110070989597 #> 42: 42.84492 -106.23747 110070990432 #> 43: 42.33212 -107.79405 110071007259 #> 44: 41.31203 -105.59451 110071014333 #> 45: 39.51316 -115.96049 110071163119 #>          lat        lon  REGISTRY_ID #>                                           PRIMARY_NAME #>                                                 <charchar>     <char> #>  1: 212291, 212399, 327124, 327992       3295 #>  2:                         212291       1094 #>  3:                         212291            #>  4:                         212291 1094, 3341 #>  5:                         212291       1094 #>  6:                         212291       1094 #>  7:                         212291 1094, 4959 #>  8:                         212291       1094 #>  9:                         212291       1094 #> 10:                         212291       1094 #> 11:                         212291            #> 12:                         212291       1094 #> 13:                         212291       1094 #> 14:                         212291       1094 #> 15:                         212291       1094 #> 16:                         212291 1094, 1099 #> 17:                         212291       1094 #> 18:                         212291       1094 #> 19:                         212291       1094 #> 20:                         212291       1094 #> 21:                         212291       1094 #> 22:                         212291            #> 23:                         212291            #> 24:                         212291       1094 #> 25:                         212291       1094 #> 26:                 212291, 327992            #> 27:                         212291            #> 28:                         212291            #> 29:                         212291            #> 30:                         212291            #> 31:                         212291            #> 32:                         212291       1094 #> 33:                         212291            #> 34:                         212291            #> 35:                         212291            #> 36:                         212291            #> 37:                         212291            #> 38:                         212291            #> 39:                         212291            #> 40:                         212291            #> 41:                         212291            #> 42:                         212291            #> 43:                         212291            #> 44:                         212291            #> 45:                         212291            #>                              NAICS        SIC #>                                                                                                            PGM_SYS_ACRNMS #>                                                                                                                    <char> #>  1:                               AIR:AR0000000512500011, AIRS/AFS:0512500011, EIS:17077111, NPDES:ARR00B810, PDS:6300169 #>  2:                                                                                                  TRIS:33566MCFRTHWY39 #>  3:                                                                                                           EIS:4264311 #>  4:                                                              AIR:CO0000000810900002, AIRS/AFS:0810900002, EIS:4378211 #>  5:                                                                                                       NPDES:UT0023922 #>  6:                                                                                     ICIS:37092, RCRAINFO:UTD980717607 #>  7: AIR:CO0000000808500032, AIRS/AFS:0808500032, EIS:3887511, ICIS:37602, NCDB:D08#P-VIII-92-10, NCDB:I08#199109112295  1 #>  8:                                                                                                           OR-DEQ:7004 #>  9:                                                                        ICIS:2586012, NPDES:WA0025721, NPDES:WA0026841 #> 10:                                                                                             EIS:5597411, NM-TEMPO:916 #> 11:                                                                                                           PDS:2600277 #> 12:                                                                                                        NM-TEMPO:27123 #> 13:                                                                                               TX-TCEQ ACR:RN105231872 #> 14:                                                                                               TX-TCEQ ACR:RN101520385 #> 15:                                                                                               TX-TCEQ ACR:RN102360039 #> 16:                                                                                               TX-TCEQ ACR:RN105386866 #> 17:                                                                                                       NPDES:UT0025712 #> 18:                                                                                                       NPDES:UTR000829 #> 19:                                                             AIR:CO0000000807700450, AIRS/AFS:0807700450, EIS:12856611 #> 20:                                                             AIR:CO0000000811300100, AIRS/AFS:0811300100, EIS:12866511 #> 21:                                                                                                       NPDES:UT0025810 #> 22:                                                                                                           EIS:6432611 #> 23:                                                                                                           EIS:5596511 #> 24:                                                                                                       NPDES:UTR260661 #> 25:                                                           AIR:NM0000003502500377, AIRS/AFS:3502500377, NM-TEMPO:30806 #> 26:                                                                                 E-GGRT:1011316, RCRAINFO:ARR000024661 #> 27:                                                                                                          EIS:16457611 #> 28:                                                                                                          EIS:16468911 #> 29:                                                                                                          EIS:16464111 #> 30:                                                                    EIS:16465111, WDEQ:113811, WDEQ:113812, WDEQ:70267 #> 31:                                                                                                          EIS:16468011 #> 32:                                                          ICIS:23200, ICIS:5869493, OR-DEQ:39986, RADINFO:RAD200000047 #> 33:                                                                                                    OSHA-OIS:338335011 #> 34:                                                                                                 RCRAINFO:CAL000045563 #> 35:                                                                                                          EIS:18031911 #> 36:                                                                                                 RCRAINFO:WYR000000356 #> 37:                                WDEQ:107024, WDEQ:107026, WDEQ:107028, WDEQ:114402, WDEQ:71762, WDEQ:71763, WDEQ:71765 #> 38:                                                                                              WDEQ:114451, WDEQ:114805 #> 39:                                                                        WDEQ:70263, WDEQ:70264, WDEQ:70265, WDEQ:70266 #> 40:                                                                                                WDEQ:71719, WDEQ:71720 #> 41:                                                                                                            WDEQ:71766 #> 42:                                                                                                WDEQ:70987, WDEQ:70988 #> 43:                                                                                                            WDEQ:71725 #> 44:                                                                                                            WDEQ:71523 #> 45:                                                                                                          EIS:19061311 #>                                                                                                            PGM_SYS_ACRNMS   mapfast(frs_from_naics(naics_from_any(\"nuclear\")$code))  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[45.848263,27.6056,34.19677,45.803684,39.461501,34.06694,35.05157,30.00052,27.78869,43.522593,42.31543,39.968486,27.746143,45.04799,38.05477,29.9952,28.676723,37.83222,41.83909,41.54723,45.51563,45.01345,43.997748,42.013189,45.44999,43.2329,44.94855,45.60095,45.84959,45.26272,45.32588,45.336434,43.57867,45.62437,44.04615,45.51188,45.502778,45.61284,45.41356,45.494826,44.996967,45.21476,45.57908,44.58678,45.45879,45.39683,45.50296,45.54213,45.586072,28.60237,27.944133,28.75234,30.757,44.270815,43.263,26.864167,45.042741,43.913771,44.61042,45.923937,26.179879,26.306141,41.5967,44.341361,44.273,35.506199,43.709393,42.42343,44.792831,44.62872,28.36022,26.945,26.600837,38.160751,38.905521,45.3322,45.15225,45.49607,45.6137,45.52172,44.323,43.9863,44.9092,43.2436,45.5278,45.163,42.8536,43.7204,45.5536,45.3566,45.2419,44.4594,45.50785,45.51522,42.8263,44.04678,45.0855,45.482952,45.5758,45.52305,46.189707,44.298916,45.553801,44.64688,45.541905,42.122029,44.412819,44.5869,46.137362,44.9709,45.17333,44.93314,42.200364,44.974557,45.5625,45.5716,44.147523,45.50651,45.6169,45.215648,40.86273,40.07385,40.835246,39.82122,40.94854,45.57709,44.0927,45.631785,27.570365,39.821898,28.330984,27.95199,44.06953,35.210664,26.711782,37.5745,44.721407,28.270044,28.383814,29.01753,27.210529,35.308686,45.924541,44.751259,42.436539,43.266972,42.514547,42.224827,43.27577,44.450256,43.3556,43.275,43.293979,43.306049,40.678319,39.997623,40.91273,40.76105,40.559532,40.4511,40.90843,40.733836,40.23539,40.58532,40.56534,40.83922,33.1377,46.543357,45.093,44.0516,44.0316,45.673827,45.6916,45.3484,44.605807,37.78022,40.361597,37.097729,35.9539,37.083,36.726515,37.99018,45.64949,38.590917,45.61603,45.674731,35.37691,45.425105,36.93402,35.908081,38.286116,40.61973,44.1291,44.58814,28.885565,41.091671,42.730578,42.733067,42.730709,32.71055,44.6989,45.54666,45.48886,44.13782,45.267755,43.083882,38.125664,35.12186,31.999957,41.19214,35.26294,41.598278,41.092114,42.31818,27.79377,35.225572,41.3358,38.34131,42.31818,44.622912,36.44644,33.950506,46.606201,35.432644,38.25032,42.31818,39.50529,41.3358,41.97761,41.381106,39.50143,35.22476,35.18729,38.000741,37.458288,37.700793,32.727346,36.828173,37.94703,33.591303,43.252999,42.89326,29.880043,28.890228,27.839601],[-119.673734,-82.3463,-119.168423,-119.370341,-75.536035,-118.22734,-81.069059,-90.47687000000001,-81.87122599999999,-76.398059,-122.86637,-75.574856,-81.849835,-122.9622,-77.80041,-90.46562,-81.347736,-122.28616,-86.36302999999999,-81.44383999999999,-122.67423,-123.00033,-123.01268,-121.406502,-123.84315,-123.35072,-123.05218,-121.18509,-119.30214,-122.69335,-118.07385,-122.597545,-119.06105,-121.53555,-123.01259,-122.66586,-122.415106,-121.20537,-122.74908,-122.648037,-122.977313,-123.17448,-122.6439,-123.25604,-122.653023,-122.27522,-122.83583,-122.69536,-122.734728,-81.20777,-82.358598,-82.06076,-91.3327,-121.212845,-122.42127,-80.628056,-123.081258,-122.739655,-124.05023,-119.321411,-80.267262,-80.153588,-83.0861,-87.537361,-122.0498,-119.036438,-122.425563,-123.33191,-117.857555,-123.10086,-81.496814,-81.99972200000001,-81.879695,-121.689163,-121.971207,-122.7772,-122.83899,-122.64831,-122.79911,-122.56156,-123.2977,-117.2349,-118.0621,-120.9197,-121.563,-120.9031,-120.9865,-120.8527,-122.6752,-122.6152,-121.0952,-118.7111,-122.67393,-122.58524,-118.91379,-123.070569,-123.4647,-122.59312,-122.73334,-122.68719,-123.829983,-120.844645,-122.732333,-123.06287,-122.667007,-122.048015,-122.671771,-123.2571,-123.92059,-116.848,-123.53835,-123.02496,-121.781668,-116.858689,-122.6638,-122.6594,-121.343126,-122.78807,-122.7801,-123.189599,-74.01952,-74.85222,-74.016828,-74.20256999999999,-74.12987,-122.63337,-121.2936,-121.960768,-81.820193,-111.894659,-81.418237,-82.40555000000001,-122.834994,-120.847113,-81.838891,-120.9851,-122.250372,-80.69453799999999,-80.915583,-81.24032,-81.662019,-93.223192,-118.628687,-122.283044,-122.849261,-122.409966,-122.757019,-121.795386,-122.45523,-122.549234,-122.2506,-122.4011,-122.47277,-122.501727,-74.47913800000001,-74.968368,-74.03353,-74.116426,-74.581332,-74.68929300000001,-74.26192,-74.53868799999999,-74.72931,-74.46989499999999,-74.25868,-74.46212,-81.7483,-119.57714,-117.8172,-116.9783,-116.9629,-120.209015,-120.2416,-117.2322,-121.276853,-121.96739,-95.6429,-119.304667,-120.0676,-119.453,-119.77053,-121.28603,-120.61038,-121.560722,-121.12712,-120.310485,-119.0208,-123.801697,-81.05815,-84.38990800000001,-122.000393,-80.42605,-122.2391,-123.03771,-82.03096600000001,-76.14130299999999,-122.418421,-122.514938,-122.515191,-115.15862,-123.2335,-122.48109,-94.24556800000001,-122.61067,-122.319742,-70.798416,-121.833979,-118.87776,-91.055511,-75.996,-93.071,-83.096773,-76.136427,-86.30191000000001,-82.66722,-85.10334400000001,-72.152027,-76.42865,-86.30191000000001,-92.641549,-77.658143,-78.025006,-121.660965,-80.940033,-95.68420999999999,-86.30191000000001,-75.45958,-72.152027,-86.54291000000001,-88.268603,-75.46064,-80.84901000000001,-120.59918,-121.841296,-122.173983,-121.707037,-114.720747,-119.347528,-121.324398,-116.086612,-122.326333,-70.8728,-82.734386,-81.332724,-81.824111],4828.032,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"lat: 45.848263<br>lon: -119.673734<br>REGISTRY_ID: 110000488847<br>PRIMARY_NAME: COYOTE SPRINGS POWER GENERATING FACILITY<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4911, 4931<br>PGM_SYS_ACRNMS: AIR:OR0000004104900031, AIRS/AFS:4104900031, CAMDBS:7350, E-GGRT:1001119, EGRID:7350, EGRID:7931, EIA-860:7350, EIA-860:7931, EIS:8184111, ICIS:600033486, OR-DEQ:48780, OR-DEQ:90164, OR-DEQ:9780, RBLC:25449, RCRAINFO:ORQ000001826, TRIS:97818CYTSP200UL\",\"lat: 27.6056<br>lon: -82.3463<br>REGISTRY_ID: 110000496776<br>PRIMARY_NAME: FPL MANATEE PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 221320<br>SIC: 4911, 4952<br>PGM_SYS_ACRNMS: AIR:FL0000001208100010, AIRS/AFS:1208100010, CAMDBS:6042, E-GGRT:1007255, EGRID:6042, EIA-860:6042, EIS:537911, FDM:22356, FDM:74493, ICIS:2660155, ICIS:7824766, NPDES:FL0032174, NPDES:FLR20BO21, RBLC:25386, RCRAINFO:FLD000807297, SFDW:FL6412448, SFDW:FL6412448 127996412448, TRIS:34219FPLMN19050\",\"lat: 34.19677<br>lon: -119.168423<br>REGISTRY_ID: 110000514587<br>PRIMARY_NAME: E. F. OXNARD, LLC<br>NAICS: 221112, 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: AIR:CAVCA0000611100214, AIRS/AFS:0611100214, CA-CERS:10200499, CA-ENVIROVIEW:26959, CEDRI:CEDRI10039171, E-GGRT:1005565, EGRID:10776, EIA-860:10776, EIS:1589611, OSHA-OIS:341063485, RCRAINFO:CAL000291607\",\"lat: 45.803684<br>lon: -119.370341<br>REGISTRY_ID: 110000534100<br>PRIMARY_NAME: HERMISTON GENERATING PLANT<br>NAICS: 023491, 023492, 221111, 221112, 221113, 221119, 221121, 221122, 234910, 234920<br>SIC: 1623, 4911<br>PGM_SYS_ACRNMS: AIR:OR0000004105900113, AIRS/AFS:4105900113, CAMDBS:54761, E-GGRT:1003652, EGRID:54761, EIA-860:54761, EIS:8518911, ICIS:3400077352, OR-DEQ:8663, RBLC:24875, RCRAINFO:OR0000908871\",\"lat: 39.461501<br>lon: -75.536035<br>REGISTRY_ID: 110000603142<br>PRIMARY_NAME: PSE&G SALEM GENERATING STATION<br>NAICS: 221112, 221113<br>SIC: 3900, 4911, 4931<br>PGM_SYS_ACRNMS: CAMDBS:2410, EGRID:2410, EIA-860:2410, NJ-NJEMS:15647, NJ-NJEMS:69091, NPDES:NJ0005622, SFDW:NJ1704300\",\"lat: 34.06694<br>lon: -118.22734<br>REGISTRY_ID: 110000609155<br>PRIMARY_NAME: LA CITY, DWP<br>NAICS: 221113, 221122, 221310, 921190<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIRS/AQS:1081, EIS:395711, HWTS-DATAMART:CAD000632992, HWTS-DATAMART:CAD000633123, HWTS-DATAMART:CAD000633305, ICIS:2600034239, NCDB:I09#19950518T01CA 1, RCRAINFO:CAD000632992, RCRAINFO:CAD000633305\",\"lat: 35.05157<br>lon: -81.069059<br>REGISTRY_ID: 110000702017<br>PRIMARY_NAME: DUKE POWER COMPANY CATAWBA NUCLEAR STATION<br>NAICS: 221111, 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:SC00024400070, AIRS/AFS:4509100070, EGRID:6036, EIA-860:6036, EIS:5825711, NPDES:SC0004278, NPDES:SCR003773, RCRAINFO:SCD070619796, RCRAINFO:SCR000768200, SC-EFIS:SC0000006728, SC-EFIS:SC0000052813, SC-EFIS:SC0000073074, SC-EFIS:SC0000097240, SC-EFIS:SC0000097290, SC-EFIS:SC0000098247, SC-EFIS:SC0000152436, SC-EFIS:SC0000170499, SC-EFIS:SC0000180213, TSCA:TSCA10054512\",\"lat: 30.00052<br>lon: -90.47687<br>REGISTRY_ID: 110000732388<br>PRIMARY_NAME: ENTERGY LOUISIANA LLC - WATERFORD 1&2 GENERATING PLANT<br>NAICS: 221112, 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:LA0000002208900014, AIRS/AFS:2208900014, CAMDBS:8056, CEDRI:CEDRI10002122, EGRID:8056, EIA-860:8056, EIS:5609311, ICIS:3000007611, LA-TEMPO:83898, NPDES:LA0007439, RCRAINFO:LAD000757468, TRIS:70066NTRGY17705\",\"lat: 27.78869<br>lon: -81.871226<br>REGISTRY_ID: 110000753319<br>PRIMARY_NAME: DUKE ENERGY FLORIDA, LLC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 486210<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:FL0000001210500234, AIRS/AFS:1210500234, CAMDBS:7302, E-GGRT:1001112, EGRID:7302, EIA-860:7302, EIS:552011, EPS:EPS10101679, FDM:16780, FDM:56757, OSHA-OIS:339520835, RBLC:24571, RCRAINFO:FLR000045815, TRIS:33830PRGRS77CUN, TSCA:TSCA10054513\",\"lat: 43.522593<br>lon: -76.398059<br>REGISTRY_ID: 110000762023<br>PRIMARY_NAME: FITZPATRICK NUCLEAR POWER PLANT<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:NY0000007355600020, AIRS/AFS:3607500040, EGRID:6110, EIA-860:6110, FIS:7-3556-00020, ICIS:7345057, NCDB:D02#T-02-2005-9204, NPDES:NY0020109, RCRAINFO:NYD000765073\",\"lat: 42.31543<br>lon: -122.86637<br>REGISTRY_ID: 110000817046<br>PRIMARY_NAME: PACIFIC POWER & LIGHT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:30191, NCDB:D10#1088-02-24-2615, NCDB:D10#1092-05-32-2615, NCDB:I10#198608011513  1, NCDB:I10#198709024476  1, NCDB:I10#199008220884  1, OR-DEQ:129, RCRAINFO:ORD981762396\",\"lat: 39.968486<br>lon: -75.574856<br>REGISTRY_ID: 110001046181<br>PRIMARY_NAME: ON TIME CLEANERS<br>NAICS: 221113, 812320<br>SIC: 7216<br>PGM_SYS_ACRNMS: AIR:PA000638727, AIRS/AFS:4202995006, PA-EFACTS:00-1200036-1, PA-EFACTS:PAD987329281, RCRAINFO:PAD987329281\",\"lat: 27.746143<br>lon: -81.849835<br>REGISTRY_ID: 110001411794<br>PRIMARY_NAME: FLORIDA POWER CORP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:FL0000001210500223, AIRS/AFS:1210500223, CAMDBS:7699, E-GGRT:1001137, EGRID:7699, EIA-860:7699, EIS:8514711, FDM:54104, RBLC:24561, RCRAINFO:FL0000443176\",\"lat: 45.04799<br>lon: -122.9622<br>REGISTRY_ID: 110001653434<br>PRIMARY_NAME: COVANTA MARION ENERGY RECOVERY FACILITY<br>NAICS: 022132, 022133, 056292, 221111, 221112, 221113, 221119, 221121, 221122, 221320, 221330, 562211, 562212, 562213, 562219, 562920<br>SIC: 4911, 4952, 4953, 4961<br>PGM_SYS_ACRNMS: AIR:OR0000004104705398, AIRS/AFS:4104705398, E-GGRT:1001646, EGRID:50630, EIA-860:50630, EIS:8057311, ICIS:6680680, NPDES:OR0031305, NPDES:ORR501201, OR-DEQ:3920, OR-DEQ:3998, RBLC:1965, RCRAINFO:ORD987179470, SFDW:OR4194604, SFDW:OR4194604 1292\",\"lat: 38.05477<br>lon: -77.80041<br>REGISTRY_ID: 110001891114<br>PRIMARY_NAME: VIRGINIA ELECTRIC - NORTH ANNA POWER STATION<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:VA0000005110900025, AIRS/AFS:5110900025, CEDS:200000092842, EGRID:6168, EIA-860:6168, EIS:5023511, NPDES:VA0052451, RCRAINFO:VAD065376279, SFDW:VA2109600\",\"lat: 29.9952<br>lon: -90.46562<br>REGISTRY_ID: 110002042414<br>PRIMARY_NAME: ENTERGY LOUISIANA LLC - WATERFORD 3 STEAM ELECTRIC STATION<br>NAICS: 221112, 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:LA0000002208900091, AIRS/AFS:2208900091, EGRID:4270, EIA-860:4270, EIS:12480311, EIS:18976411, LA-TEMPO:35260, NPDES:LA0007374, RCRAINFO:LAD000757450\",\"lat: 28.676723<br>lon: -81.347736<br>REGISTRY_ID: 110002545229<br>PRIMARY_NAME: SIEMENS POWER GENERATION INC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 221210, 541380<br>SIC: 4911, 4931, 8734<br>PGM_SYS_ACRNMS: FDM:54791, RCRAINFO:FLD981470073\",\"lat: 37.83222<br>lon: -122.28616<br>REGISTRY_ID: 110002910495<br>PRIMARY_NAME: P G AND E EMERYVILLE<br>NAICS: 221113, 221122<br>SIC: 4931<br>PGM_SYS_ACRNMS: CA-CERS:10147023, CA-ENVIROVIEW:143265, HWTS-DATAMART:CAR000009795, RCRAINFO:CAR000009795\",\"lat: 41.83909<br>lon: -86.36303<br>REGISTRY_ID: 110003695680<br>PRIMARY_NAME: AMERICAN ELECTRIC POWER<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:MIR000014985\",\"lat: 41.54723<br>lon: -81.44384<br>REGISTRY_ID: 110004698603<br>PRIMARY_NAME: FIRSTENERGY NUCLEAR OPERATING CO BETA LABORATORY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OH-CORE:234531, RCRAINFO:OHD987045556\",\"lat: 45.51563<br>lon: -122.67423<br>REGISTRY_ID: 110004775592<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC CO WORLD TRADE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:8257, RCRAINFO:OR0001014901\",\"lat: 45.01345<br>lon: -123.00033<br>REGISTRY_ID: 110004776582<br>PRIMARY_NAME: USDOE BPA CHEMAWA SUBSTATION<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: OR-DEQ:1328, RCRAINFO:OR6891406351\",\"lat: 43.997748<br>lon: -123.01268<br>REGISTRY_ID: 110004776797<br>PRIMARY_NAME: USDOE BPA ALVEY SUBSTATION<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: OR-DEQ:1356, RCRAINFO:OR8891406334, SEMS:OR8891406334\",\"lat: 42.013189<br>lon: -121.406502<br>REGISTRY_ID: 110004776895<br>PRIMARY_NAME: USDOE BPA MALIN MAINTENANCE HEADQUARTERS<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: OR-DEQ:1363, RCRAINFO:OR9891400088\",\"lat: 45.44999<br>lon: -123.84315<br>REGISTRY_ID: 110004778018<br>PRIMARY_NAME: TILLAMOOK PEOPLES UTILITIES DISTRICT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:3051, NCDB:D10#10-95-0055-TSCA, NCDB:D10#1086-02-20-2615, NCDB:I10#198506113266  1, NCDB:I10#199501111709  1, NCDB:I10#2001050916131 2, OR-DEQ:1298, RCRAINFO:ORD003886785\",\"lat: 43.2329<br>lon: -123.35072<br>REGISTRY_ID: 110004778269<br>PRIMARY_NAME: DOUGLAS ELECTRIC COOPERATIVE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#198604291449  1, NPDES:ORR10G617, OR-DEQ:1318, RCRAINFO:ORD008934507\",\"lat: 44.94855<br>lon: -123.05218<br>REGISTRY_ID: 110004780185<br>PRIMARY_NAME: SALEM ELECTRIC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#198607301513  1, OR-DEQ:1107, RCRAINFO:ORD009860107\",\"lat: 45.60095<br>lon: -121.18509<br>REGISTRY_ID: 110004780201<br>PRIMARY_NAME: WASCO ELECTRIC COOPERATIVE INC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:2046, OR-DEQ:1108, RCRAINFO:ORD009861725\",\"lat: 45.84959<br>lon: -119.30214<br>REGISTRY_ID: 110004782441<br>PRIMARY_NAME: UMATILLA ELECTRIC COOPERATIVE<br>NAICS: 023491, 023492, 221111, 221112, 221113, 221119, 221121, 221122, 234910, 234920<br>SIC: 1623, 4911<br>PGM_SYS_ACRNMS: NCDB:C10#10-84171-01-NON, NCDB:C10#10-87140-01-WR, NCDB:I10#198406191605  1, NPDES:ORR10H395, OR-DEQ:879, RCRAINFO:ORD041268376\",\"lat: 45.26272<br>lon: -122.69335<br>REGISTRY_ID: 110004783477<br>PRIMARY_NAME: CANBY UTILITY BOARD<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: NCDB:C10#10-87268-03-WR, OR-DEQ:815, RCRAINFO:ORD050141514\",\"lat: 45.32588<br>lon: -118.07385<br>REGISTRY_ID: 110004788132<br>PRIMARY_NAME: OREGON TRAIL ELECTRIC COOP LA GRANDE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:13185, OR-DEQ:19977, OR-DEQ:473, RCRAINFO:ORD103021226\",\"lat: 45.336434<br>lon: -122.597545<br>REGISTRY_ID: 110004788613<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 811111<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:200002439, OR-DEQ:376, RCRAINFO:ORD120561519\",\"lat: 43.57867<br>lon: -119.06105<br>REGISTRY_ID: 110004788935<br>PRIMARY_NAME: OREGON TRAIL ELECTRIC COOP BURNS<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:400, RCRAINFO:ORD137128120\",\"lat: 45.62437<br>lon: -121.53555<br>REGISTRY_ID: 110004789854<br>PRIMARY_NAME: HOOD RIVER ELECTRIC COOP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#199410192778  1, OR-DEQ:3669, RCRAINFO:ORD980722375\",\"lat: 44.04615<br>lon: -123.01259<br>REGISTRY_ID: 110004790003<br>PRIMARY_NAME: SPRINGFIELD UTILITY BOARD<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 237110<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:1800001225, NCDB:C10#10-84163-02-NON, NCDB:I10#198406121642  2, OR-DEQ:209, RCRAINFO:ORD980833289\",\"lat: 45.51188<br>lon: -122.66586<br>REGISTRY_ID: 110004792804<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:2790, RCRAINFO:ORD981763923\",\"lat: 45.502778<br>lon: -122.415106<br>REGISTRY_ID: 110004792831<br>PRIMARY_NAME: PGE GRESHAM SERVICE CENTER<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:5415318, OR-DEQ:62220, RCRAINFO:ORD981764111\",\"lat: 45.61284<br>lon: -121.20537<br>REGISTRY_ID: 110004793448<br>PRIMARY_NAME: THE DALLES SEWAGE DISTRICT 12 CONSOLIDATION POINT<br>NAICS: 033633, 033634, 033635, 221111, 221112, 221113, 221119, 221121, 221122, 336211, 336312, 336322, 336330, 336340, 336350, 336399<br>SIC: 3714, 4911<br>PGM_SYS_ACRNMS: OR-DEQ:2838, RCRAINFO:ORD981770969\",\"lat: 45.41356<br>lon: -122.74908<br>REGISTRY_ID: 110004793741<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:2719, RCRAINFO:ORD981773500\",\"lat: 45.494826<br>lon: -122.648037<br>REGISTRY_ID: 110004794152<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#198706291450  1, NCDB:I10#198710051450  1, OR-DEQ:2747, RCRAINFO:ORD980665376, RCRAINFO:ORD982652349\",\"lat: 44.996967<br>lon: -122.977313<br>REGISTRY_ID: 110004796043<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:2621, RCRAINFO:ORD987172558\",\"lat: 45.21476<br>lon: -123.17448<br>REGISTRY_ID: 110004797738<br>PRIMARY_NAME: MCMINNVILLE WATER AND LIGHT<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: OR-DEQ:2381, RCRAINFO:ORD987175593\",\"lat: 45.57908<br>lon: -122.6439<br>REGISTRY_ID: 110004801527<br>PRIMARY_NAME: PACIFIC POWER & LIGHT PORTLAND POWER<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:2029, RCRAINFO:ORD987189693\",\"lat: 44.58678<br>lon: -123.25604<br>REGISTRY_ID: 110004804187<br>PRIMARY_NAME: OSU FEDERAL CREDIT UNION&#8206;<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:1744, RCRAINFO:ORD987194305\",\"lat: 45.45879<br>lon: -122.653023<br>REGISTRY_ID: 110004804739<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:1807, RCRAINFO:ORD987195377\",\"lat: 45.39683<br>lon: -122.27522<br>REGISTRY_ID: 110004808682<br>PRIMARY_NAME: SANDY CITY OF<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4939<br>PGM_SYS_ACRNMS: OR-DEQ:9565, RCRAINFO:ORQ000000174\",\"lat: 45.50296<br>lon: -122.83583<br>REGISTRY_ID: 110004815825<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC BEAVERTON LINE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:10825, RCRAINFO:ORQ000009381\",\"lat: 45.54213<br>lon: -122.69536<br>REGISTRY_ID: 110004819019<br>PRIMARY_NAME: PGE-SUBSTATION E<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:26240, RCRAINFO:ORQ000013318\",\"lat: 45.586072<br>lon: -122.734728<br>REGISTRY_ID: 110004819028<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC CO N SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:32819, RCRAINFO:ORQ000013326\",\"lat: 28.60237<br>lon: -81.20777<br>REGISTRY_ID: 110005274201<br>PRIMARY_NAME: SIEMENS POWER GENERATION INC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 221210, 541330<br>SIC: 4911, 4931<br>PGM_SYS_ACRNMS: FDM:45244, RCRAINFO:FLD982140873\",\"lat: 27.944133<br>lon: -82.358598<br>REGISTRY_ID: 110005658243<br>PRIMARY_NAME: SYLVANIA LIGHTING SERVICES<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 561720, 561790<br>SIC: 4911, 7349<br>PGM_SYS_ACRNMS: FDM:61238, RCRAINFO:FLR000059444\",\"lat: 28.75234<br>lon: -82.06076<br>REGISTRY_ID: 110005990295<br>PRIMARY_NAME: SUMTER ELECTRIC CORP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:58639, RCRAINFO:FLD007975345\",\"lat: 30.757<br>lon: -91.3327<br>REGISTRY_ID: 110006020402<br>PRIMARY_NAME: ENTERGY OPERATIONS INCORPORATED RIVER BEND STATION<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:LA0000002212500009, AIRS/AFS:2212500009, EGRID:6462, EIA-860:6462, LA-TEMPO:2889, NPDES:LA0042731, RCRAINFO:LAD070664818\",\"lat: 44.270815<br>lon: -121.212845<br>REGISTRY_ID: 110006114249<br>PRIMARY_NAME: BPA REDMOND MAINTENANCE HEADQUARTERS<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: OR-DEQ:1365, OR-DEQ:15333, RCRAINFO:OR9891411135\",\"lat: 43.263<br>lon: -122.42127<br>REGISTRY_ID: 110006115088<br>PRIMARY_NAME: PACIFICORP NORTH UMPQUA HYDRO<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:11232, OR-DEQ:115769, OR-DEQ:12800, OR-DEQ:2028, RCRAINFO:ORD987189685\",\"lat: 26.864167<br>lon: -80.628056<br>REGISTRY_ID: 110006156685<br>PRIMARY_NAME: OSCEOLA COGENERATION PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4911, 4931<br>PGM_SYS_ACRNMS: FDM:38569, FDM:62708, RBLC:24559, RCRAINFO:FLR000012534, RCRAINFO:FLR000124875\",\"lat: 45.042741<br>lon: -123.081258<br>REGISTRY_ID: 110006364004<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: <br>PGM_SYS_ACRNMS: OR-DEQ:37938\",\"lat: 43.913771<br>lon: -122.739655<br>REGISTRY_ID: 110006376732<br>PRIMARY_NAME: LOOKOUT POINT DAM AND POWERHOUSE USACE<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:3083, EIA-860:3083, NCDB:C10#10-83110-01-FNN, NCDB:I10#198304193124  1, NCDB:I10#2003073020354 3, OR-DEQ:1358, RCRAINFO:OR8960000059\",\"lat: 44.61042<br>lon: -124.05023<br>REGISTRY_ID: 110006430790<br>PRIMARY_NAME: CENTRAL LINCOLN PUD<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:223, RCRAINFO:ORD980837322\",\"lat: 45.923937<br>lon: -119.321411<br>REGISTRY_ID: 110006479916<br>PRIMARY_NAME: USDOE BPA MCNARY MAINTENANCE HEADQUARTERS<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: OR-DEQ:1397, RCRAINFO:OR0891406357\",\"lat: 26.179879<br>lon: -80.267262<br>REGISTRY_ID: 110007480092<br>PRIMARY_NAME: FPL SPRINGTREE SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:56856, RCRAINFO:FLR000057901\",\"lat: 26.306141<br>lon: -80.153588<br>REGISTRY_ID: 110007480109<br>PRIMARY_NAME: FPL LAKEVIEW SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:33841, RCRAINFO:FLR000057943\",\"lat: 41.5967<br>lon: -83.0861<br>REGISTRY_ID: 110009489017<br>PRIMARY_NAME: FIRSTENERGY DAVIS-BESSE NUCLEAR POWER STATION<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:OH0000000362000091, AIRS/AFS:3912300022, CEDRI:CEDRI2561, EGRID:6149, EIA-860:6149, NCDB:D05#TSCA-V-C-022-89, NCDB:I05#19860825OH011 1, NPDES:OH0003786, OH-CORE:33886, OH-CORE:34153, RCRAINFO:OHD000720508, SFDW:OH7259212, SFDW:OH7259212 41654\",\"lat: 44.341361<br>lon: -87.537361<br>REGISTRY_ID: 110009513810<br>PRIMARY_NAME: DOMINION ENERGY KEWAUNEE POWER STATION<br>NAICS: 221113, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:WI0000005506102279, AIRS/AFS:5506102279, CEDRI:CEDRI3623, EIS:7325311, NPDES:WI0001571, RCRAINFO:WID000713016, WI-ESR:159637, WI-ESR:408885, WI-ESR:8850\",\"lat: 44.273<br>lon: -122.0498<br>REGISTRY_ID: 110009817715<br>PRIMARY_NAME: EUGENE WATER & ELECTRIC BOARD<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:12774\",\"lat: 35.506199<br>lon: -119.036438<br>REGISTRY_ID: 110010482138<br>PRIMARY_NAME: KERN FRONT LIMITED<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:454611, EIS:5813711\",\"lat: 43.709393<br>lon: -122.425563<br>REGISTRY_ID: 110011583287<br>PRIMARY_NAME: HILLS CREEK DAM USACE<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:3081, EIA-860:3081, NCDB:C10#10-86080-01-WR, NCDB:I10#198507161449  1, NCDB:I10#2003073020354 4, OR-DEQ:1325, RCRAINFO:OR6690000058\",\"lat: 42.42343<br>lon: -123.33191<br>REGISTRY_ID: 110011637149<br>PRIMARY_NAME: PACIFIC POWER & LIGHT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:C10#10-88263-01-WR, NCDB:I10#198806161513  2, OR-DEQ:11548, OR-DEQ:115635, RCRAINFO:ORQ000031388\",\"lat: 44.792831<br>lon: -117.857555<br>REGISTRY_ID: 110012176466<br>PRIMARY_NAME: OREGON TRAIL ELECTRIC CONSUMERS COOP HQ<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:37305, RCRAINFO:ORQ000016923\",\"lat: 44.62872<br>lon: -123.10086<br>REGISTRY_ID: 110012256520<br>PRIMARY_NAME: PACIFIC POWER WILLAMETTE POWER OFFICE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 237130<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:22271, RCRAINFO:ORQ000019984\",\"lat: 28.36022<br>lon: -81.496814<br>REGISTRY_ID: 110012576943<br>PRIMARY_NAME: FLORIDA POWER LAKE BRYAN<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:37906, RCRAINFO:FLR000086793\",\"lat: 26.945<br>lon: -81.999722<br>REGISTRY_ID: 110012579101<br>PRIMARY_NAME: CHARLOTTE SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:47309, RCRAINFO:FLR000083477\",\"lat: 26.600837<br>lon: -81.879695<br>REGISTRY_ID: 110013300463<br>PRIMARY_NAME: FPL COLONIAL SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:35894, RCRAINFO:FLR000090134\",\"lat: 38.160751<br>lon: -121.689163<br>REGISTRY_ID: 110013819403<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC/PG&E<br>NAICS: 221113, 221121<br>SIC: <br>PGM_SYS_ACRNMS: CA-ENVIROVIEW:54732, EIS:14226511, EIS:621711\",\"lat: 38.905521<br>lon: -121.971207<br>REGISTRY_ID: 110013852134<br>PRIMARY_NAME: PACIFIC GAS AND ELECTRIC COMPANY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:2185011, RCRAINFO:CAR000202333\",\"lat: 45.3322<br>lon: -122.7772<br>REGISTRY_ID: 110014072403<br>PRIMARY_NAME: PEARL SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:600006692, OR-DEQ:23434\",\"lat: 45.15225<br>lon: -122.83899<br>REGISTRY_ID: 110014120717<br>PRIMARY_NAME: WOODBURN SERVICE CENTER<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:18553\",\"lat: 45.49607<br>lon: -122.64831<br>REGISTRY_ID: 110014121985<br>PRIMARY_NAME: PGE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 1542, 4911<br>PGM_SYS_ACRNMS: NPDES:ORR10E027, OR-DEQ:113923, OR-DEQ:18520\",\"lat: 45.6137<br>lon: -122.79911<br>REGISTRY_ID: 110014129941<br>PRIMARY_NAME: PORTLAND GENERAL ELECTRIC COMPANY - HARBORTON SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: ICIS:2654742, OR-DEQ:43708\",\"lat: 45.52172<br>lon: -122.56156<br>REGISTRY_ID: 110014137380<br>PRIMARY_NAME: PACIFIC POWER & LIGHT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:17216\",\"lat: 44.323<br>lon: -123.2977<br>REGISTRY_ID: 110014145184<br>PRIMARY_NAME: MONROE BRICK AND TILE CO<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:16364\",\"lat: 43.9863<br>lon: -117.2349<br>REGISTRY_ID: 110014152308<br>PRIMARY_NAME: IDAHO POWER CO.<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40857\",\"lat: 44.9092<br>lon: -118.0621<br>REGISTRY_ID: 110014153851<br>PRIMARY_NAME: OREGON TRAIL ELECTRIC CO-OP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40801\",\"lat: 43.2436<br>lon: -120.9197<br>REGISTRY_ID: 110014153904<br>PRIMARY_NAME: BPA - FORT ROCK<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40760\",\"lat: 45.5278<br>lon: -121.563<br>REGISTRY_ID: 110014153995<br>PRIMARY_NAME: HOOD RIVER VALLEY SPRAYING<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40765\",\"lat: 45.163<br>lon: -120.9031<br>REGISTRY_ID: 110014154734<br>PRIMARY_NAME: BPA - BAKEOVEN COMPENSATION STATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40757\",\"lat: 42.8536<br>lon: -120.9865<br>REGISTRY_ID: 110014155387<br>PRIMARY_NAME: BPA - SYCAN SERIES<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40752\",\"lat: 43.7204<br>lon: -120.8527<br>REGISTRY_ID: 110014155403<br>PRIMARY_NAME: BPA - SAND SPRINGS<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40753\",\"lat: 45.5536<br>lon: -122.6752<br>REGISTRY_ID: 110014157232<br>PRIMARY_NAME: PACIFIC POWER & LIGHT - MASON SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40608\",\"lat: 45.3566<br>lon: -122.6152<br>REGISTRY_ID: 110014158598<br>PRIMARY_NAME: SULLIVAN ELECTRICAL SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40588\",\"lat: 45.2419<br>lon: -121.0952<br>REGISTRY_ID: 110014166552<br>PRIMARY_NAME: HYDROELECTRIC PLANT (ABANDONED)<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40178\",\"lat: 44.4594<br>lon: -118.7111<br>REGISTRY_ID: 110014172000<br>PRIMARY_NAME: CP NATIONAL SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:39968\",\"lat: 45.50785<br>lon: -122.67393<br>REGISTRY_ID: 110014172563<br>PRIMARY_NAME: SOUTH WATERFRONT REDEVELOPMENT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:39987\",\"lat: 45.51522<br>lon: -122.58524<br>REGISTRY_ID: 110014173161<br>PRIMARY_NAME: PGE - SE 76TH AVE & TAYLOR ST<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:39936\",\"lat: 42.8263<br>lon: -118.91379<br>REGISTRY_ID: 110014179851<br>PRIMARY_NAME: OREGON PARKS AND RECREATION DEPARMENT<br>NAICS: 092412, 221111, 221112, 221113, 221119, 221121, 221122, 924120<br>SIC: 4911, 9512<br>PGM_SYS_ACRNMS: OR-DEQ:39567\",\"lat: 44.04678<br>lon: -123.070569<br>REGISTRY_ID: 110014195487<br>PRIMARY_NAME: LANE ELECTRIC CO-OP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:9127\",\"lat: 45.0855<br>lon: -123.4647<br>REGISTRY_ID: 110014196663<br>PRIMARY_NAME: PGE - HOUSER RD<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:9099\",\"lat: 45.482952<br>lon: -122.59312<br>REGISTRY_ID: 110014198572<br>PRIMARY_NAME: PGE - SW 68TH AVE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:8967\",\"lat: 45.5758<br>lon: -122.73334<br>REGISTRY_ID: 110014199928<br>PRIMARY_NAME: TRIANGE PARK - NORTH PORTLAND YARD<br>NAICS: 023411, 033651, 048839, 056292, 221111, 221112, 221113, 221119, 221121, 221122, 234110, 321113, 321912, 321918, 321999, 333911, 336510, 336611, 488390, 562211, 562212, 562213, 562219, 562920<br>SIC: 1611, 2421, 3731, 3743, 4911, 4953<br>PGM_SYS_ACRNMS: OR-DEQ:8882\",\"lat: 45.52305<br>lon: -122.68719<br>REGISTRY_ID: 110014200186<br>PRIMARY_NAME: PCB SPILL - NW 16TH AVE<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: OR-DEQ:8902\",\"lat: 46.189707<br>lon: -123.829983<br>REGISTRY_ID: 110014201657<br>PRIMARY_NAME: PACIFIC POWER & LIGHT - ASTORIA SERVICE CENTER<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4911, 4925<br>PGM_SYS_ACRNMS: OR-DEQ:89094\",\"lat: 44.298916<br>lon: -120.844645<br>REGISTRY_ID: 110014202193<br>PRIMARY_NAME: PACIFIC POWER& LIGHT SUC CENTER HOT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:41268\",\"lat: 45.553801<br>lon: -122.732333<br>REGISTRY_ID: 110014214117<br>PRIMARY_NAME: BRAZIL& CO.<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:5229\",\"lat: 44.64688<br>lon: -123.06287<br>REGISTRY_ID: 110014215795<br>PRIMARY_NAME: PACIFICORP WILLAMETTE OPERATIONS CENTER<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:C10#10-83061-01-ADL, NCDB:I10#198303012826  1, OR-DEQ:4019, RCRAINFO:ORD980836282\",\"lat: 45.541905<br>lon: -122.667007<br>REGISTRY_ID: 110014217524<br>PRIMARY_NAME: PACIFICORP DBA PACIFIC POWER & LIGHT CO<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:3800, RCRAINFO:OR0000130690\",\"lat: 42.122029<br>lon: -122.048015<br>REGISTRY_ID: 110014222313<br>PRIMARY_NAME: J C BOYLE HYDROELECTRIC FACILITY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3028, EIA-860:3028, NPDES:ORG257012, OR-DEQ:1624, RCRAINFO:ORD987198314\",\"lat: 44.412819<br>lon: -122.671771<br>REGISTRY_ID: 110014223385<br>PRIMARY_NAME: FOSTER DAM USACE<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:6552, EIA-860:6552, NCDB:I10#2003072820354 4, OR-DEQ:1352, OR-DEQ:17498, RCRAINFO:OR8210800043\",\"lat: 44.5869<br>lon: -123.2571<br>REGISTRY_ID: 110014223535<br>PRIMARY_NAME: COMSUMERS POWER INCORPORATED<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4911, 4931<br>PGM_SYS_ACRNMS: NCDB:D10#1093-03-16-2615, NCDB:I10#199304122666  1, OR-DEQ:1297, RCRAINFO:ORD002797041\",\"lat: 46.137362<br>lon: -123.92059<br>REGISTRY_ID: 110014230091<br>PRIMARY_NAME: PACIFIC POWER/PACIFIC CORP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:23833\",\"lat: 44.9709<br>lon: -116.848<br>REGISTRY_ID: 110014238128<br>PRIMARY_NAME: HELLS CANYON, MAINT. SHOP & WAREHOUSE<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: OR-DEQ:21289\",\"lat: 45.17333<br>lon: -123.53835<br>REGISTRY_ID: 110014269433<br>PRIMARY_NAME: PGE - PUMPKINSEED RD<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:9100\",\"lat: 44.93314<br>lon: -123.02496<br>REGISTRY_ID: 110014269852<br>PRIMARY_NAME: RESIDENCE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:8998\",\"lat: 42.200364<br>lon: -121.781668<br>REGISTRY_ID: 110014274392<br>PRIMARY_NAME: PACIFIC POWER<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#198603134476  1, OR-DEQ:3801, RCRAINFO:ORD980983712\",\"lat: 44.974557<br>lon: -116.858689<br>REGISTRY_ID: 110014288261<br>PRIMARY_NAME: IDAHO POWER COMPANY OXBOW VILLAGE WWTF<br>NAICS: 022132, 221111, 221112, 221113, 221119, 221121, 221122, 221320<br>SIC: 4911, 4952<br>PGM_SYS_ACRNMS: OR-DEQ:45941\",\"lat: 45.5625<br>lon: -122.6638<br>REGISTRY_ID: 110014301031<br>PRIMARY_NAME: PACIFIC POWER & LIGHT - MALLORY SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40607\",\"lat: 45.5716<br>lon: -122.6594<br>REGISTRY_ID: 110014301219<br>PRIMARY_NAME: PACIFIC POWER & LIGHT - DEKUM SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40605\",\"lat: 44.147523<br>lon: -121.343126<br>REGISTRY_ID: 110014301424<br>PRIMARY_NAME: TUMALO SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40538\",\"lat: 45.50651<br>lon: -122.78807<br>REGISTRY_ID: 110014301549<br>PRIMARY_NAME: PGE - ONISHI PROPERTY<br>NAICS: 099999, 221111, 221112, 221113, 221119, 221121, 221122, 999990<br>SIC: 4911, 9999<br>PGM_SYS_ACRNMS: OR-DEQ:40567\",\"lat: 45.6169<br>lon: -122.7801<br>REGISTRY_ID: 110014302977<br>PRIMARY_NAME: ST. JOHNS - KEELER #2 RIGHT-OF-WAY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40097\",\"lat: 45.215648<br>lon: -123.189599<br>REGISTRY_ID: 110014303574<br>PRIMARY_NAME: MCMINNVILLE WATER& LIGHT<br>NAICS: 022121, 221111, 221112, 221113, 221119, 221121, 221122, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: OR-DEQ:39921\",\"lat: 40.86273<br>lon: -74.01952<br>REGISTRY_ID: 110014674218<br>PRIMARY_NAME: STEVES AUTO CARE CENTER<br>NAICS: 221113<br>SIC: 7538<br>PGM_SYS_ACRNMS: NJ-NJEMS:26955\",\"lat: 40.07385<br>lon: -74.85222<br>REGISTRY_ID: 110014876580<br>PRIMARY_NAME: PSE&G WALL STREET SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21556\",\"lat: 40.835246<br>lon: -74.016828<br>REGISTRY_ID: 110014878579<br>PRIMARY_NAME: PSE&G RIDGEFIELD SUBSTATION<br>NAICS: 221113, 221121, 221122<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21548\",\"lat: 39.82122<br>lon: -74.20257<br>REGISTRY_ID: 110014880156<br>PRIMARY_NAME: JCP&L FORKED RIVER GENERATING STATION<br>NAICS: 221112, 221113<br>SIC: 4910, 4911, 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21477\",\"lat: 40.94854<br>lon: -74.12987<br>REGISTRY_ID: 110014888078<br>PRIMARY_NAME: PSE&G FAIRLAWN M&R SWITCHING STATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21253\",\"lat: 45.57709<br>lon: -122.63337<br>REGISTRY_ID: 110016622582<br>PRIMARY_NAME: PACIFICORP<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NPDES:ORR127190, OR-DEQ:2196, OR-DEQ:45454, RCRAINFO:ORD987188166\",\"lat: 44.0927<br>lon: -121.2936<br>REGISTRY_ID: 110016655029<br>PRIMARY_NAME: ORNI 4 LLC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:9585\",\"lat: 45.631785<br>lon: -121.960768<br>REGISTRY_ID: 110016655564<br>PRIMARY_NAME: TANNER CREEK WASTEWATER TREATMENT PLANT<br>NAICS: 022132, 221111, 221112, 221113, 221119, 221121, 221122, 221320<br>SIC: 4911, 4952<br>PGM_SYS_ACRNMS: NPDES:OR0022624, OR-DEQ:11418\",\"lat: 27.570365<br>lon: -81.820193<br>REGISTRY_ID: 110016727648<br>PRIMARY_NAME: PEACE RIVER ELECTRIC COOP INC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:47695, RCRAINFO:FLR000100842\",\"lat: 39.821898<br>lon: -111.894659<br>REGISTRY_ID: 110017841601<br>PRIMARY_NAME: CURRANT CREEK POWER PROJECT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:UT0000004902300026, AIRS/AFS:4902300026, CAMDBS:56102, CEDRI:CEDRI10134182, E-GGRT:1000436, EGRID:56102, EIA-860:56102, NPDES:UTR000744, RCRAINFO:UTR000008359\",\"lat: 28.330984<br>lon: -81.418237<br>REGISTRY_ID: 110017861839<br>PRIMARY_NAME: KISSIMMEE UTILITY AUTHORITY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:33932, NCDB:I04#2004010820113 1, RCRAINFO:FLR000108977\",\"lat: 27.95199<br>lon: -82.40555<br>REGISTRY_ID: 110017877127<br>PRIMARY_NAME: PRO LITE SERVICES INC<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 484110, 484210, 484220, 562111, 562112, 562119<br>SIC: 4212, 4911<br>PGM_SYS_ACRNMS: FDM:33933, RCRAINFO:FLR000108985\",\"lat: 44.06953<br>lon: -122.834994<br>REGISTRY_ID: 110018497964<br>PRIMARY_NAME: WALTERVILLE POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3071, EIA-860:3071, NPDES:ORG253526, OR-DEQ:37458, OR-DEQ:48208, RCRAINFO:ORQ000022079\",\"lat: 35.210664<br>lon: -120.847113<br>REGISTRY_ID: 110018998450<br>PRIMARY_NAME: PG&E DIABLO CANYON<br>NAICS: 221113, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:6099, EIA-860:6099, EIS:7123711, HWTS-DATAMART:CAD077966349, ICIS:3923, NCDB:C09#9TSCA02091102P4, NCDB:I09#200209109ST12 2, NPDES:CA0003751, RCRAINFO:CAD077966349, RCRAINFO:CAD983639741\",\"lat: 26.711782<br>lon: -81.838891<br>REGISTRY_ID: 110020488729<br>PRIMARY_NAME: MIDWESTERN POWERLINE OF FLORIDA<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:47661, RCRAINFO:FLR000113787\",\"lat: 37.5745<br>lon: -120.9851<br>REGISTRY_ID: 110021087517<br>PRIMARY_NAME: ALMOND POWER PLANT<br>NAICS: 221112, 221113, 221122<br>SIC: 4911, 4931<br>PGM_SYS_ACRNMS: AIR:CASJV00006099N3299, AIRS/AFS:06099N3299, CAMDBS:7315, E-GGRT:1007315, EGRID:7315, EIA-860:7315, EIS:1218311, EPS:EPS10151940, ICIS:21075\",\"lat: 44.721407<br>lon: -122.250372<br>REGISTRY_ID: 110022537824<br>PRIMARY_NAME: DETROIT DAM AND POWER PLANT<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:3077, EIA-860:3077, FFEP:FFEP10046730, NCDB:I10#2003072820354 2, OR-DEQ:1443, OR-DEQ:17503, RCRAINFO:OR4960000053\",\"lat: 28.270044<br>lon: -80.694538<br>REGISTRY_ID: 110024249277<br>PRIMARY_NAME: FPL YORKE SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:42481, RCRAINFO:FLR000121269\",\"lat: 28.383814<br>lon: -80.915583<br>REGISTRY_ID: 110024249302<br>PRIMARY_NAME: FPL POINSETT SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:42482, RCRAINFO:FLR000121293\",\"lat: 29.01753<br>lon: -81.24032<br>REGISTRY_ID: 110024551867<br>PRIMARY_NAME: FLORIDA POWER & LIGHT COMPANY - DELAND SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:62723, RCRAINFO:FLR000124818\",\"lat: 27.210529<br>lon: -81.662019<br>REGISTRY_ID: 110024551901<br>PRIMARY_NAME: FLORIDA POWER & LIGHT COMPANY - DORRFIELD SUBSTATION<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: FDM:62802, RCRAINFO:FLR000124859\",\"lat: 35.308686<br>lon: -93.223192<br>REGISTRY_ID: 110028034721<br>PRIMARY_NAME: ARKANSAS NUCLEAR ONE<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:AR0000000511500002, AIRS/AFS:0511500002, CEDRI:CEDRI1317, EGRID:8055, EIA-860:8055, NPDES:AR0001392, PDS:5800002, PDS:5800035, PDS:5800497, PDS:5800505, PDS:5800777, RCRAINFO:ARD000632752\",\"lat: 45.924541<br>lon: -118.628687<br>REGISTRY_ID: 110028047860<br>PRIMARY_NAME: VANSYCLE WIND PROJECT<br>NAICS: 221111, 221112, 221113, 221115, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:55125, EGRID:55560, EGRID:55989, EIA-860:55125, EIA-860:55560, EIA-860:55989, OR-DEQ:34363, RCRAINFO:WAH000035095, SFDW:WA5300595, WA-FSIS:19078\",\"lat: 44.751259<br>lon: -122.283044<br>REGISTRY_ID: 110028049840<br>PRIMARY_NAME: BIG CLIFF DAM USACE<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:3074, EIA-860:3074, NCDB:I10#2003072820354 3, OR-DEQ:1457, RCRAINFO:OR5960000052\",\"lat: 42.436539<br>lon: -122.849261<br>REGISTRY_ID: 110028049859<br>PRIMARY_NAME: BIOMASS ONE<br>NAICS: 022121, 022133, 221111, 221112, 221113, 221119, 221121, 221122, 221210, 221330, 423440<br>SIC: 4911, 4931, 4953, 4961<br>PGM_SYS_ACRNMS: AIR:OR0000004102900159, AIRS/AFS:4102900159, EGRID:10869, EIA-860:10869, EIS:8056211, NPDES:ORG253531, NPDES:ORG754115, NPDES:ORR701088, OR-DEQ:5915, OSHA-OIS:341132140\",\"lat: 43.266972<br>lon: -122.409966<br>REGISTRY_ID: 110028049902<br>PRIMARY_NAME: CLEARWATER 2 HYDRO POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3021, EIA-860:3021, NPDES:ORG253522, OR-DEQ:12791\",\"lat: 42.514547<br>lon: -122.757019<br>REGISTRY_ID: 110028050052<br>PRIMARY_NAME: EAGLE POINT POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3024, EIA-860:3024, NPDES:ORG253521, OR-DEQ:12792\",\"lat: 42.224827<br>lon: -121.795386<br>REGISTRY_ID: 110028050061<br>PRIMARY_NAME: EAST SIDE POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3025, EIA-860:3025, NPDES:ORG257010, OR-DEQ:12790\",\"lat: 43.27577<br>lon: -122.45523<br>REGISTRY_ID: 110028050098<br>PRIMARY_NAME: FISH CREEK POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3026, EIA-860:3026, OR-DEQ:12789\",\"lat: 44.450256<br>lon: -122.549234<br>REGISTRY_ID: 110028050604<br>PRIMARY_NAME: GREEN PETER DAM USACE<br>NAICS: 092411, 221111, 221112, 221113, 221119, 221121, 221122, 924110<br>SIC: 4911, 9511<br>PGM_SYS_ACRNMS: EGRID:3080, EIA-860:3080, NCDB:I10#2003072820354 5, OR-DEQ:1407, RCRAINFO:OR1960000056\",\"lat: 43.3556<br>lon: -122.2506<br>REGISTRY_ID: 110028050702<br>PRIMARY_NAME: LEMOLO 1 POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3029, EIA-860:3029, OR-DEQ:12785\",\"lat: 43.275<br>lon: -122.4011<br>REGISTRY_ID: 110028050711<br>PRIMARY_NAME: LEMOLO 2 POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122, 234910, 234920<br>SIC: 1623, 4911<br>PGM_SYS_ACRNMS: EGRID:6421, EIA-860:6421, OR-DEQ:116746, OR-DEQ:12787, RCRAINFO:ORQ000035399\",\"lat: 43.293979<br>lon: -122.47277<br>REGISTRY_ID: 110028050999<br>PRIMARY_NAME: SLIDE CREEK POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3036, EIA-860:3036, NPDES:ORG253529, OR-DEQ:12802\",\"lat: 43.306049<br>lon: -122.501727<br>REGISTRY_ID: 110028051006<br>PRIMARY_NAME: SODA SPRINGS POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3037, EIA-860:3037, NPDES:ORG253540, OR-DEQ:12801, RCRAINFO:ORQ000031360\",\"lat: 40.678319<br>lon: -74.479138<br>REGISTRY_ID: 110029593367<br>PRIMARY_NAME: PSE&G GILLETTE M&R STATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:3494\",\"lat: 39.997623<br>lon: -74.968368<br>REGISTRY_ID: 110029935774<br>PRIMARY_NAME: PSE&G<br>NAICS: 221113, 221121<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21559, NJ-NJEMS:343847\",\"lat: 40.91273<br>lon: -74.03353<br>REGISTRY_ID: 110030583385<br>PRIMARY_NAME: PSE&G RIVER EDGE SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21550\",\"lat: 40.76105<br>lon: -74.116426<br>REGISTRY_ID: 110030780787<br>PRIMARY_NAME: PSE&G TURNPIKE SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21634\",\"lat: 40.559532<br>lon: -74.581332<br>REGISTRY_ID: 110031623447<br>PRIMARY_NAME: PSE&G FINDERNE AVENUE SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21220\",\"lat: 40.4511<br>lon: -74.689293<br>REGISTRY_ID: 110031730740<br>PRIMARY_NAME: PSE&G M&R STATION BELLE MEAD<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:33587\",\"lat: 40.90843<br>lon: -74.26192<br>REGISTRY_ID: 110031739670<br>PRIMARY_NAME: PSE&G<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21213\",\"lat: 40.733836<br>lon: -74.538688<br>REGISTRY_ID: 110031835593<br>PRIMARY_NAME: PSE&G DISPATCHING CENTER<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21514\",\"lat: 40.23539<br>lon: -74.72931<br>REGISTRY_ID: 110032149976<br>PRIMARY_NAME: PSE&G HAMILTON SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21648\",\"lat: 40.58532<br>lon: -74.469895<br>REGISTRY_ID: 110032152355<br>PRIMARY_NAME: PSE&G NEW MARKET SUBSTATION<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:33785\",\"lat: 40.56534<br>lon: -74.25868<br>REGISTRY_ID: 110032163343<br>PRIMARY_NAME: PSE&G AVENEL METERING STATION<br>NAICS: 221113, 221210<br>SIC: 4931<br>PGM_SYS_ACRNMS: NJ-NJEMS:21254\",\"lat: 40.83922<br>lon: -74.46212<br>REGISTRY_ID: 110032310005<br>PRIMARY_NAME: PSE&G PARSIPPANY M&R STATION @ JOHNSON PLAZA<br>NAICS: 221113<br>SIC: 4923<br>PGM_SYS_ACRNMS: NJ-NJEMS:200699, NJ-NJEMS:92161\",\"lat: 33.1377<br>lon: -81.7483<br>REGISTRY_ID: 110032877849<br>PRIMARY_NAME: WILSON COMBUSTION TURBINE PLANT<br>NAICS: 221112, 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:GA0000001303300008, AIRS/AFS:1303300008, CAMDBS:6258, CEDRI:CEDRI10156819, EGRID:6258, EIS:15028311, EPS:EPS10172858, ICIS:1400022193, NPDES:GA0026786, TRIS:30830STHRN8803R\",\"lat: 46.543357<br>lon: -119.57714<br>REGISTRY_ID: 110036141190<br>PRIMARY_NAME: US DOE 200-CS-1<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: WA-FSIS:394233\",\"lat: 45.093<br>lon: -117.8172<br>REGISTRY_ID: 110037743305<br>PRIMARY_NAME: ELKHORN WIND POWER PROJECT - 20 ACRE LAYDOWN SITE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:101347, OR-DEQ:99871\",\"lat: 44.0516<br>lon: -116.9783<br>REGISTRY_ID: 110037758744<br>PRIMARY_NAME: IDAHO POWER COMPANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:106835\",\"lat: 44.0316<br>lon: -116.9629<br>REGISTRY_ID: 110037758762<br>PRIMARY_NAME: IDAHO POWER SUBSTATION - NW 1ST ST & NW 5TH AVE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:107272\",\"lat: 45.673827<br>lon: -120.209015<br>REGISTRY_ID: 110037769518<br>PRIMARY_NAME: LEANING JUNIPER WIND POWER FACILITY<br>NAICS: 221111, 221112, 221113, 221115, 221119, 221121, 221122, 333120, 333923, 336510<br>SIC: 1794, 3531, 4911<br>PGM_SYS_ACRNMS: EGRID:56360, EGRID:57333, EIA-860:56360, EIA-860:57333, NPDES:ORR109277, OR-DEQ:102013, OR-DEQ:113428, RCRAINFO:ORQ000041615\",\"lat: 45.6916<br>lon: -120.2416<br>REGISTRY_ID: 110037785590<br>PRIMARY_NAME: RATTLESNAKE ROAD WIND POWER FACILITY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:105929\",\"lat: 45.3484<br>lon: -117.2322<br>REGISTRY_ID: 110037787972<br>PRIMARY_NAME: PP&L - JOSEPH PLANT (FORMER)<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:108834\",\"lat: 44.605807<br>lon: -121.276853<br>REGISTRY_ID: 110037800350<br>PRIMARY_NAME: ROUND BUTTE DAM AND FISH HATCHERY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 0921, 4911<br>PGM_SYS_ACRNMS: EGRID:3050, EIA-860:3050, NCDB:I10#198901301450  1, NPDES:ORG137006, OR-DEQ:403, OSHA-OIS:317101871, OSHA-OIS:317101889\",\"lat: 37.78022<br>lon: -121.96739<br>REGISTRY_ID: 110037972619<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC COMPANY<br>NAICS: 221112, 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10526211, RCRAINFO:CAL000022550\",\"lat: 40.361597<br>lon: -95.6429<br>REGISTRY_ID: 110037978935<br>PRIMARY_NAME: NPPD COOPER NUCLEAR STATION<br>NAICS: 221113<br>SIC: 4911, 8999<br>PGM_SYS_ACRNMS: AIR:NE0000003112700024, AIRS/AFS:3112700024, EGRID:8036, EIA-860:8036, EIS:9423511, NCDB:I07#19970218NE006 1, NDEQ:36750, NPDES:NE0001244, RCRAINFO:NED055071062, SFDW:NE3150505, SFDW:NE3150505 5162\",\"lat: 37.097729<br>lon: -119.304667<br>REGISTRY_ID: 110037989530<br>PRIMARY_NAME: SOUTHERN CALIFORNIA EDISON CO<br>NAICS: 221113, 221118<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10419911, EIS:10434611\",\"lat: 35.9539<br>lon: -120.0676<br>REGISTRY_ID: 110038014591<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC CO - ISTS DEPT<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10286111\",\"lat: 37.083<br>lon: -119.453<br>REGISTRY_ID: 110038018579<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC CO<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10364911\",\"lat: 36.726515<br>lon: -119.77053<br>REGISTRY_ID: 110038070636<br>PRIMARY_NAME: CALCO GEN LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10375211\",\"lat: 37.99018<br>lon: -121.28603<br>REGISTRY_ID: 110038083221<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC CO<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:10082811\",\"lat: 45.64949<br>lon: -120.61038<br>REGISTRY_ID: 110040571075<br>PRIMARY_NAME: BIGLOW CANYON WIND FARM<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:56485, EIA-860:56485, OR-DEQ:90676, OSHA-OIS:341504595, RCRAINFO:ORS000008920\",\"lat: 38.590917<br>lon: -121.560722<br>REGISTRY_ID: 110041886876<br>PRIMARY_NAME: TONY'S FINE FOODS/UNFI<br>NAICS: 221112, 221113, 312112, 424410<br>SIC: 5149<br>PGM_SYS_ACRNMS: CA-CERS:10213129, CA-ENVIROVIEW:198825, CA-ENVIROVIEW:76970, EIS:16021411, EIS:20985911, ICIS:1800059267, NPDES:CAZ456238, RCRAINFO:CAL000066808\",\"lat: 45.61603<br>lon: -121.12712<br>REGISTRY_ID: 110043319833<br>PRIMARY_NAME: THE DALLES DAM USACE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911, 4971, 7999, 9999<br>PGM_SYS_ACRNMS: EGRID:3895, EGRID:7431, EIA-860:3895, EIA-860:7431, ICIS:2200000473, ICIS:2600026394, ICIS:35609, ICIS:6682889, NCDB:C10#10-89280-01-NON, NCDB:I10#198909132874  1, NCDB:I10#2004011620354 1, OR-DEQ:1427, RCRAINFO:OR3210800030, SEMS:OR3210800030, WA-FSIS:44557699\",\"lat: 45.674731<br>lon: -120.310485<br>REGISTRY_ID: 110045952126<br>PRIMARY_NAME: WHEAT FIELD WIND POWER PROJECT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:56854, EIA-860:56854, OR-DEQ:106904\",\"lat: 35.37691<br>lon: -119.0208<br>REGISTRY_ID: 110054268840<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC CO.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:13900111\",\"lat: 45.425105<br>lon: -123.801697<br>REGISTRY_ID: 110054993708<br>PRIMARY_NAME: TILLAMOOK INDUSTRIAL PARK  STP<br>NAICS: 022132, 048819, 056172, 221111, 221112, 221113, 221119, 221121, 221122, 221320, 488111, 488119, 488190, 561720<br>SIC: 4581, 4952<br>PGM_SYS_ACRNMS: ACRES:160201, NPDES:OR0022918, NPDES:ORR800180, NPDES:ORU000210, OR-DEQ:10711\",\"lat: 36.93402<br>lon: -81.05815<br>REGISTRY_ID: 110055597803<br>PRIMARY_NAME: TOWN OF WYTHEVILLE WASTEWATER TREATMENT PLANT<br>NAICS: 221113<br>SIC: 4939<br>PGM_SYS_ACRNMS: AIR:VA0000005119700111, AIRS/AFS:5119700111\",\"lat: 35.908081<br>lon: -84.389908<br>REGISTRY_ID: 110056335425<br>PRIMARY_NAME: TVA, CLINCH RIVER SMALL MODULAR REACTOR PROJECT<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:TNR000036616\",\"lat: 38.286116<br>lon: -122.000393<br>REGISTRY_ID: 110058308861<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC COMPANY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:16020311\",\"lat: 40.61973<br>lon: -80.42605<br>REGISTRY_ID: 110059978261<br>PRIMARY_NAME: ENERGY HARBOR GENERATION LLC/BEAVER VLY<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:PA000495712, PA-EFACTS:01-0846394-1\",\"lat: 44.1291<br>lon: -122.2391<br>REGISTRY_ID: 110060845304<br>PRIMARY_NAME: COUGAR DAM PROJECT USACE<br>NAICS: 092119, 221111, 221112, 221113, 221119, 221121, 221122, 921190<br>SIC: 4911, 9199<br>PGM_SYS_ACRNMS: EGRID:3076, EIA-860:3076, NCDB:I10#2003073020354 1, OR-DEQ:1344, OR-DEQ:41297, RCRAINFO:OR7960013517\",\"lat: 44.58814<br>lon: -123.03771<br>REGISTRY_ID: 110060977439<br>PRIMARY_NAME: FRY SUBSTATION - ALBANY<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:40101\",\"lat: 28.885565<br>lon: -82.030966<br>REGISTRY_ID: 110061406376<br>PRIMARY_NAME: WILDWOOD SERVICE COMPLEX<br>NAICS: 221111, 221112, 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:FLD029436631\",\"lat: 41.091671<br>lon: -76.141303<br>REGISTRY_ID: 110064626720<br>PRIMARY_NAME: SUSQ STEAM ELECT STA<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: NPDES:PA0047325\",\"lat: 42.730578<br>lon: -122.418421<br>REGISTRY_ID: 110064858015<br>PRIMARY_NAME: PROSPECT 3 POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3034, EIA-860:3034, NPDES:ORG253518, OR-DEQ:12804\",\"lat: 42.733067<br>lon: -122.514938<br>REGISTRY_ID: 110064862304<br>PRIMARY_NAME: PROSPECT 4 POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3035, EIA-860:3035, NPDES:ORG253517, OR-DEQ:12803\",\"lat: 42.730709<br>lon: -122.515191<br>REGISTRY_ID: 110064874015<br>PRIMARY_NAME: PROSPECT 1 POWERHOUSE<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3032, EIA-860:3032, NPDES:ORG253514, OR-DEQ:11209, OR-DEQ:2417, RCRAINFO:ORD987176344\",\"lat: 32.71055<br>lon: -115.15862<br>REGISTRY_ID: 110065712232<br>PRIMARY_NAME: IMPERIAL IRRIGATION DIST/HYDRO DROP 4<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: CA-ENVIROVIEW:37736, RCRAINFO:CAL000220289\",\"lat: 44.6989<br>lon: -123.2335<br>REGISTRY_ID: 110067387802<br>PRIMARY_NAME: COFFIN BUTTE LANDFILL GAS GENERATION PROJECT<br>NAICS: 221111, 221112, 221113, 221117, 221118, 221119, 221121, 221122, 335312, 562212<br>SIC: 3621, 4911<br>PGM_SYS_ACRNMS: AIR:OR0000004100309503, AIRS/AFS:4100309503, E-GGRT:1011083, EGRID:7725, EIA-860:7725, EIS:16006411, EIS:733111, LMOP:1246, OR-DEQ:10611, OSHA-OIS:316947753\",\"lat: 45.54666<br>lon: -122.48109<br>REGISTRY_ID: 110067388099<br>PRIMARY_NAME: US BANK COLUMBIA CENTER<br>NAICS: 052211, 052221, 053112, 071131, 221111, 221112, 221113, 221119, 221121, 221122, 522110, 522210<br>SIC: 6021<br>PGM_SYS_ACRNMS: CEDRI:CEDRI99506, EIS:19083111, ICIS:5415317, OR-DEQ:8623\",\"lat: 45.48886<br>lon: -94.245568<br>REGISTRY_ID: 110068883774<br>PRIMARY_NAME: KNOLLWOOD ESTATES PLAT 4<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: MN-TEMPO:79064\",\"lat: 44.13782<br>lon: -122.61067<br>REGISTRY_ID: 110069205078<br>PRIMARY_NAME: LEABURG DAM<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: NCDB:I10#2003072920354 4, OR-DEQ:37219, RCRAINFO:ORQ000016774\",\"lat: 45.267755<br>lon: -122.319742<br>REGISTRY_ID: 110069236268<br>PRIMARY_NAME: FARADAY DAM AND POWERPLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: EGRID:3045, EIA-860:3045, NCDB:I10#2003080120354 2, NCDB:I10#2003080120354 6, OR-DEQ:49294, OR-DEQ:82671, OSHA-OIS:341264349, RCRAINFO:ORD987198892, SFDW:OR4193957\",\"lat: 43.083882<br>lon: -70.798416<br>REGISTRY_ID: 110069326606<br>PRIMARY_NAME: NEXTERA ENERGY SEABROOK EMERGENCY OPERATIONS FACILITY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: AIR:NH0000003301500120\",\"lat: 38.125664<br>lon: -121.833979<br>REGISTRY_ID: 110070059938<br>PRIMARY_NAME: EDF RENEWABLES SERVICES, INC.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:17188311\",\"lat: 35.12186<br>lon: -118.87776<br>REGISTRY_ID: 110070062379<br>PRIMARY_NAME: ORION SOLAR I LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EIS:17347911\",\"lat: 31.999957<br>lon: -91.055511<br>REGISTRY_ID: 110070201837<br>PRIMARY_NAME: ENTERGY MISSISSIPPI INC, GRAND GULF NUCLEAR STATION<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: NPDES:MSR000883\",\"lat: 41.19214<br>lon: -75.996<br>REGISTRY_ID: 110070275787<br>PRIMARY_NAME: PPL SUSQUEHANNA LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:337563217\",\"lat: 35.26294<br>lon: -93.071<br>REGISTRY_ID: 110070277483<br>PRIMARY_NAME: SIEMENS ENERGY, INC.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:339005456\",\"lat: 41.598278<br>lon: -83.096773<br>REGISTRY_ID: 110070279219<br>PRIMARY_NAME: FIRSTENERGY NUCLEAR OPERATING CO.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:339623639\",\"lat: 41.092114<br>lon: -76.136427<br>REGISTRY_ID: 110070291895<br>PRIMARY_NAME: SUSQUEHANNA NUCLEAR LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341347474, OSHA-OIS:342014404, OSHA-OIS:343058731\",\"lat: 42.31818<br>lon: -86.30191<br>REGISTRY_ID: 110070296456<br>PRIMARY_NAME: PALISADES NUCLEAR POWER PLANT<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341942902\",\"lat: 27.79377<br>lon: -82.66722<br>REGISTRY_ID: 110070296992<br>PRIMARY_NAME: DUKE ENERGY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:342670759\",\"lat: 35.225572<br>lon: -85.103344<br>REGISTRY_ID: 110070305493<br>PRIMARY_NAME: TENNESSEE VALLEY AUTHORITY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:343058723\",\"lat: 41.3358<br>lon: -72.152027<br>REGISTRY_ID: 110070306117<br>PRIMARY_NAME: DOMINION ENERGY NUCLEAR CONNECTICUT, INC.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:342632577\",\"lat: 38.34131<br>lon: -76.42865<br>REGISTRY_ID: 110070311141<br>PRIMARY_NAME: EXELON GENERATION COMPANY, LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341303055, OSHA-OIS:343009098\",\"lat: 42.31818<br>lon: -86.30191<br>REGISTRY_ID: 110070314901<br>PRIMARY_NAME: PALISADES NUCLEAR PLT<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:315375014\",\"lat: 44.622912<br>lon: -92.641549<br>REGISTRY_ID: 110070319616<br>PRIMARY_NAME: NORTHERN STATES POWER COMPANY<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:316852649\",\"lat: 36.44644<br>lon: -77.658143<br>REGISTRY_ID: 110070320992<br>PRIMARY_NAME: VIRGINIA ELECTRIC AND POWER COMPANY<br>NAICS: 221113<br>SIC: 4931<br>PGM_SYS_ACRNMS: OSHA-OIS:317942654\",\"lat: 33.950506<br>lon: -78.025006<br>REGISTRY_ID: 110070322310<br>PRIMARY_NAME: DUKE ENERGY PROGRESS, INC<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:317021483\",\"lat: 46.606201<br>lon: -121.660965<br>REGISTRY_ID: 110070322787<br>PRIMARY_NAME: ENERGY NORTHWEST<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:316965359\",\"lat: 35.432644<br>lon: -80.940033<br>REGISTRY_ID: 110070327041<br>PRIMARY_NAME: DUKE ENERGY CAROLINAS, LLC<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:317999563\",\"lat: 38.25032<br>lon: -95.68421<br>REGISTRY_ID: 110070329739<br>PRIMARY_NAME: KAN - SEAL<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:340562172\",\"lat: 42.31818<br>lon: -86.30191<br>REGISTRY_ID: 110070335346<br>PRIMARY_NAME: PALISADES NUCLEAR PLANT<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341643492\",\"lat: 39.50529<br>lon: -75.45958<br>REGISTRY_ID: 110070336443<br>PRIMARY_NAME: PSEG NUCLEAR LLC HOPE CREEK<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341155059, TSCA:TSCA10056503\",\"lat: 41.3358<br>lon: -72.152027<br>REGISTRY_ID: 110070339135<br>PRIMARY_NAME: DOMINION NUCLEAR CONNECTICUT, INC.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341961993\",\"lat: 41.97761<br>lon: -86.54291<br>REGISTRY_ID: 110070342125<br>PRIMARY_NAME: AEP INDIANA MICHIGAN POWER COMPANY<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341806677\",\"lat: 41.381106<br>lon: -88.268603<br>REGISTRY_ID: 110070343488<br>PRIMARY_NAME: CBI SERVICES, INC.<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341651032\",\"lat: 39.50143<br>lon: -75.46064<br>REGISTRY_ID: 110070344628<br>PRIMARY_NAME: SALEM NUCLEAR POWER PLANT<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:342290152\",\"lat: 35.22476<br>lon: -80.84901<br>REGISTRY_ID: 110070347058<br>PRIMARY_NAME: 137505 - DUKE ENERGY CAROLINAS, LLC<br>NAICS: 221113<br>SIC: 4911<br>PGM_SYS_ACRNMS: OSHA-OIS:343053724\",\"lat: 35.18729<br>lon: -120.59918<br>REGISTRY_ID: 110070412427<br>PRIMARY_NAME: TORO ENERGY OF CALIFORINA SLO LLC<br>NAICS: 221111, 221113, 221118, 221119<br>SIC: <br>PGM_SYS_ACRNMS: EIS:17292711, RCRAINFO:CAL000391417\",\"lat: 38.000741<br>lon: -121.841296<br>REGISTRY_ID: 110070442418<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC ANTIOCH SITE<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAD981636038\",\"lat: 37.458288<br>lon: -122.173983<br>REGISTRY_ID: 110070445393<br>PRIMARY_NAME: SRI INTERNATIONAL COGENERATION<br>NAICS: 221112, 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAL000006915\",\"lat: 37.700793<br>lon: -121.707037<br>REGISTRY_ID: 110070447736<br>PRIMARY_NAME: PACIFIC GAS & ELECTRIC/ LIVERMORE LEARNING CENTER<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAL000115804\",\"lat: 32.727346<br>lon: -114.720747<br>REGISTRY_ID: 110070451783<br>PRIMARY_NAME: IMPERIAL IRRIGATION DIST/PILOT KNOB<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAL000220291\",\"lat: 36.828173<br>lon: -119.347528<br>REGISTRY_ID: 110070453326<br>PRIMARY_NAME: KING'S RIVER CONSERVATION DISTRICT<br>NAICS: 221111, 221113, 221119<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAL000238575\",\"lat: 37.94703<br>lon: -121.324398<br>REGISTRY_ID: 110070469627<br>PRIMARY_NAME: CALAMCO COGEN STATION<br>NAICS: 221111, 221113, 221119<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAL000308104\",\"lat: 33.591303<br>lon: -116.086612<br>REGISTRY_ID: 110070480538<br>PRIMARY_NAME: DESERT VIEW POWER INC<br>NAICS: 221111, 221113, 221119<br>SIC: <br>PGM_SYS_ACRNMS: CEDRI:CEDRI10163067, NPDES:CAR05IA00, NPDES:CAW522693, RCRAINFO:CAL000375436\",\"lat: 43.252999<br>lon: -122.326333<br>REGISTRY_ID: 110070524132<br>PRIMARY_NAME: CLEARWATER 1 HYDRO POWER PLANT<br>NAICS: 221111, 221112, 221113, 221119, 221121, 221122<br>SIC: 4911<br>PGM_SYS_ACRNMS: OR-DEQ:12793\",\"lat: 42.89326<br>lon: -70.8728<br>REGISTRY_ID: 110071198069<br>PRIMARY_NAME: NEXTERA ENERGY SEABROOK, LLC<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: EPS:EPS10121866\",\"lat: 29.880043<br>lon: -82.734386<br>REGISTRY_ID: 110071268556<br>PRIMARY_NAME: DUKE ENERGY FLORIDA LLC - SANTA FE SOLAR SITE<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:FLR000254599\",\"lat: 28.890228<br>lon: -81.332724<br>REGISTRY_ID: 110071318857<br>PRIMARY_NAME: DUKE ENERGY FLORIDA LLC DEBARY SOLAR<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:FLR000256271\",\"lat: 27.839601<br>lon: -81.824111<br>REGISTRY_ID: 110071334098<br>PRIMARY_NAME: TAMPA ELECTRIC CO - LAKE HANCOCK SOLAR SITE<br>NAICS: 221113<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:FLR000257402\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[26.179879,46.606201],\"lng\":[-124.05023,-70.798416]}},\"evals\":[],\"jsHooks\":[]}  naics_from_any(\"silver\") #>      code     n2     n3     n4     n5     n6 #>     <num> <char> <char> <char> <char> <char> #> 1:  21222     21    212   2122  21222  21222 #> 2: 212222     21    212   2122  21222 212222 #> 3: 332812     33    332   3328  33281 332812 #> 4:  33991     33    339   3399  33991  33991 #> 5: 339910     33    339   3399  33991 339910 #>                                                                                              name #>                                                                                            <char> #> 1:                                                                 Gold Ore and Silver Ore Mining #> 2:                                                                              Silver Ore Mining #> 3: Metal Coating, Engraving (except Jewelry and Silverware), and Allied Services to Manufacturers #> 4:                                                           Jewelry and Silverware Manufacturing #> 5:                                                           Jewelry and Silverware Manufacturing #>                                                                                                   num_name #>                                                                                                     <char> #> 1:                                                                  21222 - Gold Ore and Silver Ore Mining #> 2:                                                                              212222 - Silver Ore Mining #> 3: 332812 - Metal Coating, Engraving (except Jewelry and Silverware), and Allied Services to Manufacturers #> 4:                                                            33991 - Jewelry and Silverware Manufacturing #> 5:                                                           339910 - Jewelry and Silverware Manufacturing   naics_from_name(\"silver\") #> Error in naics_from_name(\"silver\"): could not find function \"naics_from_name\"   naics_from_any(212222 ) #>      code     n2     n3     n4     n5     n6              name #>     <num> <char> <char> <char> <char> <char>            <char> #> 1: 212222     21    212   2122  21222 212222 Silver Ore Mining #>                      num_name #>                        <char> #> 1: 212222 - Silver Ore Mining   frs_from_naics(21222) #> Key: <REGISTRY_ID> #>         lat       lon  REGISTRY_ID            PRIMARY_NAME  NAICS    SIC #>       <num>     <num>       <char>                  <char> <char> <char> #> 1: 48.88601 -118.0281 110036140306 HOPE & TWIN CABINS MINE 021222        #>     PGM_SYS_ACRNMS #>             <char> #> 1: WA-FSIS:9672131   regid_from_naics(21222) #> Key: <NAICS, REGISTRY_ID> #>         lat       lon  REGISTRY_ID NAICS #>       <num>     <num>       <char> <num> #> 1: 48.88601 -118.0281 110036140306 21222   latlon_from_naics(21222) #> Key: <NAICS, REGISTRY_ID> #>         lat       lon  REGISTRY_ID NAICS #>       <num>     <num>       <char> <num> #> 1: 48.88601 -118.0281 110036140306 21222"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Use EPA Program acronym like TRIS to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_program","title":"Use EPA Program acronym like TRIS to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_program","text":"Get data.table based given FRS Program System CATEGORY. Find FRS sites program like RCRAINFO, TRIS, others.","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use EPA Program acronym like TRIS to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_program","text":"","code":"frs_from_program(program)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use EPA Program acronym like TRIS to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_program","text":"program vector one EPA Program names used FRS","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use EPA Program acronym like TRIS to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_program","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"PGM_SYS_ACRNMS\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_programid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","title":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","text":"Use EPA Program ID see FRS Facility Registry Service data EPA-regulated sites","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_programid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","text":"","code":"frs_from_programid(programid)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_programid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","text":"programid vector one EPA Program ID codes used FRS","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_programid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"PGM_SYS_ACRNMS\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_programid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use EPA Program ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_programid","text":"","code":"x = frs_from_programid(testids_program_sys_id) #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_programid   - is NOT in memory. Checking local disk... frs_by_programid  is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/frs_by_programid.arrow  #> frs_by_programid   - is NOT in local folder. #> frs_by_programid  - was read from pins board server, into memory (to specified envir). #>   x #> Key: <REGISTRY_ID> #>         lat        lon  REGISTRY_ID                  PRIMARY_NAME  NAICS    SIC #>       <num>      <num>       <char>                        <char> <char> <char> #> 1: 43.00028  -76.69323 110019033810 HEJAMADA CAMPGROUND & RV PARK          8999 #> 2: 41.38786  -73.43935 110044340807            NEJAME & SONS INC.               #> 3: 40.77499  -74.15929 110056111559      LA VEJAMA DISCOUNT STORE               #> 4: 30.25468  -90.94284 110056982323           GRACEJAMES ENT, LLC          7542 #> 5: 38.22678 -121.02361 110066714951      CAMANCHE DAM POWER HOUSE          4911 #> 6: 32.80406 -117.02753 110070538057             BEJAMIN HAFERTEPE               #> 7: 33.66110 -117.86959 110070874073                     EJAM INC.               #> 8: 33.70369 -117.86675 110071293460                      EJAM INC               #>           PGM_SYS_ACRNMS #>                   <char> #> 1:      FIS:7-0540-00003 #> 2:          SIMS:1513529 #> 3:       NJ-NJEMS:485659 #> 4:       NPDES:LAG750956 #> 5:  CA-ENVIROVIEW:354362 #> 6: RCRAINFO:CAC002995519 #> 7:       ICIS:3601252181 #> 8:       ICIS:3601439158  mapfast(x)  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[43.000285,41.38786,40.774995,30.25468,38.226778,32.804064,33.6611,33.70369],[-76.693229,-73.43935,-74.159288,-90.942841,-121.023611,-117.027527,-117.86959,-117.86675],4828.032,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"lat: 43.000285<br>lon: -76.693229<br>REGISTRY_ID: 110019033810<br>PRIMARY_NAME: HEJAMADA CAMPGROUND & RV PARK<br>NAICS: <br>SIC: 8999<br>PGM_SYS_ACRNMS: FIS:7-0540-00003\",\"lat: 41.38786<br>lon: -73.43935<br>REGISTRY_ID: 110044340807<br>PRIMARY_NAME: NEJAME & SONS INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: SIMS:1513529\",\"lat: 40.774995<br>lon: -74.159288<br>REGISTRY_ID: 110056111559<br>PRIMARY_NAME: LA VEJAMA DISCOUNT STORE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NJ-NJEMS:485659\",\"lat: 30.25468<br>lon: -90.942841<br>REGISTRY_ID: 110056982323<br>PRIMARY_NAME: GRACEJAMES ENT, LLC<br>NAICS: <br>SIC: 7542<br>PGM_SYS_ACRNMS: NPDES:LAG750956\",\"lat: 38.226778<br>lon: -121.023611<br>REGISTRY_ID: 110066714951<br>PRIMARY_NAME: CAMANCHE DAM POWER HOUSE<br>NAICS: <br>SIC: 4911<br>PGM_SYS_ACRNMS: CA-ENVIROVIEW:354362\",\"lat: 32.804064<br>lon: -117.027527<br>REGISTRY_ID: 110070538057<br>PRIMARY_NAME: BEJAMIN HAFERTEPE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:CAC002995519\",\"lat: 33.6611<br>lon: -117.86959<br>REGISTRY_ID: 110070874073<br>PRIMARY_NAME: EJAM INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3601252181\",\"lat: 33.70369<br>lon: -117.86675<br>REGISTRY_ID: 110071293460<br>PRIMARY_NAME: EJAM INC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3601439158\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[30.25468,43.000285],\"lng\":[-121.023611,-73.43935]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_regid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","title":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","text":"Use registry ID see FRS Facility Registry Service data EPA-regulated sites","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_regid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","text":"","code":"frs_from_regid(regid)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_regid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","text":"regid vector one EPA Registry ID codes used FRS","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_regid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"PGM_SYS_ACRNMS\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_regid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use registry ID to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_regid","text":"","code":"frs_from_regid(testids_registry_id) #> Key: <REGISTRY_ID> #>         lat        lon  REGISTRY_ID                  PRIMARY_NAME  NAICS    SIC #>       <num>      <num>       <char>                        <char> <char> <char> #> 1: 43.00028  -76.69323 110019033810 HEJAMADA CAMPGROUND & RV PARK          8999 #> 2: 40.99173  -74.03191 110030509215                   KREJAM CORP               #> 3: 41.38786  -73.43935 110044340807            NEJAME & SONS INC.               #> 4: 40.77499  -74.15929 110056111559      LA VEJAMA DISCOUNT STORE               #> 5: 30.25468  -90.94284 110056982323           GRACEJAMES ENT, LLC          7542 #> 6: 32.80406 -117.02753 110070538057             BEJAMIN HAFERTEPE               #> 7: 33.66110 -117.86959 110070874073                     EJAM INC.               #> 8: 33.70369 -117.86675 110071293460                      EJAM INC               #>           PGM_SYS_ACRNMS #>                   <char> #> 1:      FIS:7-0540-00003 #> 2:       NJ-NJEMS:354362 #> 3:          SIMS:1513529 #> 4:       NJ-NJEMS:485659 #> 5:       NPDES:LAG750956 #> 6: RCRAINFO:CAC002995519 #> 7:       ICIS:3601252181 #> 8:       ICIS:3601439158   frs_from_regid(110000307695) #> Key: <REGISTRY_ID> #>         lat       lon  REGISTRY_ID                 PRIMARY_NAME  NAICS    SIC #>       <num>     <num>       <char>                       <char> <char> <char> #> 1: 18.37269 -66.14207 110000307695 RAMCO CHEMICALS INCORPORATED          2842 #>          PGM_SYS_ACRNMS #>                  <char> #> 1: TRIS:00620RMCCH83EST   frs_from_regid(\"110000307695\") #> Key: <REGISTRY_ID> #>         lat       lon  REGISTRY_ID                 PRIMARY_NAME  NAICS    SIC #>       <num>     <num>       <char>                       <char> <char> <char> #> 1: 18.37269 -66.14207 110000307695 RAMCO CHEMICALS INCORPORATED          2842 #>          PGM_SYS_ACRNMS #>                  <char> #> 1: TRIS:00620RMCCH83EST"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sic.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","title":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","text":"Use SIC code industry title text search see FRS Facility Registry Service data EPA-regulated sites","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","text":"","code":"frs_from_sic(sic_code_or_name, ...)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","text":"sic_code_or_name passed sic_from_any() ... passed sic_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"SIC\" \"PGM_SYS_ACRNMS\"","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SIC code or industry title text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sic","text":"","code":"frs_from_sic(\"glass\") #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_sic   - is NOT in memory. Checking local disk... frs_by_sic  is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/frs_by_sic.arrow  #> frs_by_sic   - is NOT in local folder. #> frs_by_sic  - was read from pins board server, into memory (to specified envir). #>  #> Key: <REGISTRY_ID> #>           lat        lon  REGISTRY_ID #>         <num>      <num>       <char> #>   1: 39.39124  -75.03496 110000321553 #>   2: 37.39273  -76.80001 110000341657 #>   3: 39.03713  -80.45324 110000344887 #>   4: 35.75617  -80.28095 110000346082 #>   5: 35.76020  -77.88260 110000347802 #>  ---                                  #> 432: 34.95398  -88.20364 110070668053 #> 433: 37.64852 -121.02679 110070695449 #> 434: 32.66828 -117.10933 110070704402 #> 435: 42.98655  -70.92952 110071066291 #> 436: 40.68816  -75.47968 110071097474 #>                                    PRIMARY_NAME  NAICS        SIC #>                                          <char> <char>     <char> #>   1:         BALL-FOSTER GLASS CONTAINER CO LLC 327213       3221 #>   2:    OWENS-BROCKWAY GLASS CONTAINER DIVISION 327213       3221 #>   3:                         GLASS WORKS WV LLC 327212       3229 #>   4:          ELECTRIC GLASS FIBER AMERICA, LLC 327212 3229, 9999 #>   5:                           ARDAGH GLASS INC 327213       3221 #>  ---                                                              #> 432: GENERAL ATOMICS EMS SYSTEMS, IUKA FACILITY 327212       3229 #> 433:                                WOLFRAM INC              3229 #> 434:               WHELAN SCIENTIFIC GLASS INCE              3229 #> 435:                  OSRAM OPTO-SEMICONDUCTORS              3229 #> 436:                                FINES PLANT              3221 #>                                                                                                                                                                                                                                   PGM_SYS_ACRNMS #>                                                                                                                                                                                                                                           <char> #>   1:                                                                                                                                                                                                                        TRIS:08332MRCNN328SO #>   2:                                                             AIR:VA0000005109500022, AIRS/AFS:5109500022, CEDRI:CEDRI10171441, CEDS:200000091498, EIS:6148011, NPDES:VAR050374, RCRAINFO:VAD000765503, TRIS:23168WNSLL150IN, TSCA:TSCA123931 #>   3:                                                                                                                                                              ICIS:25572, NCDB:D03#EPCRA-062, NCDB:I03#19910312A3003 1, TRIS:26452LGLSS631EA #>   4: AIR:NC0000003702900109, AIRS/AFS:3705700109, BR:NCD043712298, CEDRI:CEDRI10045193, E-GGRT:1002322, EIA-860:58046, EIS:7377911, EPS:EPS10139559, NC-FITS:3325, NPDES:NC0004626, NPDES:NCG070030, RCRAINFO:NCD043712298, TRIS:27292PPGNDNEWJE #>   5:                                                        AIR:NC0000003709800155, AIRS/AFS:3719500155, E-GGRT:1000026, EIS:8006411, EPS:EPS10053435, NC-FITS:15083, NC-FITS:6196, NPDES:NCG070099, RCRAINFO:NCD084170570, TRIS:27893MRCNN2200F #>  ---                                                                                                                                                                                                                                             #> 432:                                                                                                                                                                                                                             NPDES:MSR002393 #> 433:                                                                                                                                                                                                                             NPDES:CAZ516042 #> 434:                                                                                                                                                                                                                             NPDES:CAZ518218 #> 435:                                                                                                                                                                                                                             NPDES:NHNOEJ01I #> 436:                                                                                                                                                                                                                             NPDES:PAG032272   mapfast(frs_from_sic(sic_from_any(\"silver\")$code))  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[29.18101,45.75103,18.077278,46.334,68.06150700000001,40.50066,42.73391,42.07396,42.39866,42.81728,30.405495,40.81217,39.800376,40.3342,41.125664,44.8204,41.838333,45.016607,44.8265,44.83,39.52744,37.349444,47.731719,38.69802,48.36632,45.63116,42.07732,46.27051,43.07657,44.9173,44.8548,44.8556,44.8129,44.7949,44.8153,44.8412,44.8501,44.8628,44.8269,44.8094,44.7833,46.940556,40.720159,40.38794,40.915382,29.81222,29.817777,47.983333,46.358056,36.07682,46.257806,39.767269,46.66836,47.504908,47.933333,47.915412,37.975262,46.7475,45.234449,40.9449,46.268361,48.0625,29.817777,48.141111,32.858852,36.11828,47.50321,47.486111,38.32283,37.27148,38.63037,44.93414,47.476618,38.882285,37.919015,46.455169,46.67648,46.024264],[-82.16873,-108.58061,-67.029144,-111.43,-162.855492,-117.10615,-92.50233,-78.40689,-71.60149,-70.88146,-88.863581,-73.92637999999999,-105.499111,-74.07445800000001,-117.24518,-118.2133,-115.963333,-109.937404,-118.1928,-118.2,-119.73901,-106.530278,-116.795154,-90.43850999999999,-115.53978,-109.26356,-78.40673,-112.25965,-75.18165,-117.4689,-118.105,-118.1609,-118.2981,-118.4762,-118.2254,-118.4286,-118.3996,-118.1817,-118.2056,-118.2065,-118.45,-110.471111,-74.268485,-74.36023,-74.366789,-104.32722,-104.327222,-115.738889,-112.107778,-115.07316,-112.21475,-105.537592,-89.99706999999999,-116.074306,-116.442222,-116.4315,-107.751941,-112.295556,-110.659078,-117.76588,-113.197639,-115.698611,-104.307222,-115.556389,-114.790362,-117.09533,-116.07174,-115.975,-85.81702,-76.69529,-77.28876,-93.13874,-115.943218,-107.119016,-107.675887,-111.67861,-112.49806,-112.543194],4828.032,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"lat: 29.18101<br>lon: -82.16873<br>REGISTRY_ID: 110000362660<br>PRIMARY_NAME: CLOSETMAID<br>NAICS: 332211, 332618, 332999, 339912<br>SIC: 3496, 3914<br>PGM_SYS_ACRNMS: AIR:FL0000001208300052, AIRS/AFS:1208300052, EIS:533811, FDM:50868, OSHA-OIS:315481010, OSHA-OIS:338187420, RCRAINFO:FLD148657539, TRIS:32674CLRSN650SO\",\"lat: 45.75103<br>lon: -108.58061<br>REGISTRY_ID: 110000498943<br>PRIMARY_NAME: MONTANA SILVERSMITHS INC - BILLINGS FACILITY<br>NAICS: 339993<br>SIC: 3914<br>PGM_SYS_ACRNMS: NPDES:MTRNE0004, TRIS:59102MNTNS2521E\",\"lat: 18.077278<br>lon: -67.029144<br>REGISTRY_ID: 110000580853<br>PRIMARY_NAME: WALLACE SILVERSMITHS DE PUERTO RICO LTD<br>NAICS: 339912<br>SIC: 3914<br>PGM_SYS_ACRNMS: ICIS:31955, NCDB:I02#1999092814684 1, RCRAINFO:PRD090405648, TRIS:00753WLLCNBSTRE\",\"lat: 46.334<br>lon: -111.43<br>REGISTRY_ID: 110000595213<br>PRIMARY_NAME: DIAMOND HILL MINING INC<br>NAICS: 212221<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: AIRS/AFS:3000700006, TRIS:59644DMNDH8MILE\",\"lat: 68.061507<br>lon: -162.855492<br>REGISTRY_ID: 110000601705<br>PRIMARY_NAME: RED DOG MINE<br>NAICS: 212230, 212231, 212290<br>SIC: 1031, 1044<br>PGM_SYS_ACRNMS: AIR:AK0000000218800002, AIRS/AFS:0218800002, EIS:10566811, EIS:542511, EPS:EPS10044885, ICIS:31546, NCDB:C10#10-98209-01-ADL, NCDB:I10#199706171709  1, NCDB:I10#200008088036  1, NPDES:AK0038652, RBLC:22882, RBLC:24449, RBLC:25372, RCRAINFO:AKD983066390, SFDW:AK2340670, SFDW:AK2340670 42614, TRIS:99752RDDGP90MIL, TSCA:100608224, TSCA:6519, TSCA:TSCA9084\",\"lat: 40.50066<br>lon: -117.10615<br>REGISTRY_ID: 110000607362<br>PRIMARY_NAME: NEWMONT MINING CORP COPPER CANYON FACILITY<br>NAICS: 212230<br>SIC: 1044<br>PGM_SYS_ACRNMS: EIS:9438611, NPDES:NVU000007, TRIS:89820BTTLMCOPPE, TSCA:TSCA7515\",\"lat: 42.73391<br>lon: -92.50233<br>REGISTRY_ID: 110001331247<br>PRIMARY_NAME: RADA MFG CO<br>NAICS: 332211<br>SIC: 3914<br>PGM_SYS_ACRNMS: AIR:IA0000001901700052, AIRS/AFS:1901700052, IDNR_EFD:311113609, NPDES:IAU001296, OSHA-OIS:340506443\",\"lat: 42.07396<br>lon: -78.40689<br>REGISTRY_ID: 110001566902<br>PRIMARY_NAME: CUTCO CUTLERY CORP<br>NAICS: 332211, 332215<br>SIC: 3421, 3914<br>PGM_SYS_ACRNMS: EIS:7804011, FIS:9-0412-00041, NPDES:NY0101583, RCRAINFO:NYD002100618, RCRAINFO:NYD980528657, TRIS:14760LCSCT1116E\",\"lat: 42.39866<br>lon: -71.60149<br>REGISTRY_ID: 110002000030<br>PRIMARY_NAME: HUDSON CREEK LLC CO<br>NAICS: 339912, 541711<br>SIC: 3914<br>PGM_SYS_ACRNMS: AIR:MA0000002511900903, AIRS/AFS:2511900903, MA-EPICS:130612, RCRAINFO:MAD001770585, TRIS:01749THLNC32CEN\",\"lat: 42.81728<br>lon: -70.88146<br>REGISTRY_ID: 110002086484<br>PRIMARY_NAME: TOWLE MANUFACTURING CO<br>NAICS: 339912<br>SIC: 3914<br>PGM_SYS_ACRNMS: MA-EPICS:134252, TRIS:01950TWLMN260ME\",\"lat: 30.405495<br>lon: -88.863581<br>REGISTRY_ID: 110002107942<br>PRIMARY_NAME: KITCHEN INNOVATIONS INC<br>NAICS: 339912<br>SIC: 3914, 5719<br>PGM_SYS_ACRNMS: MS-ENSITE:4410, RCRAINFO:MSD006252944, TRIS:39530THMHG17018\",\"lat: 40.81217<br>lon: -73.92638<br>REGISTRY_ID: 110004492175<br>PRIMARY_NAME: GRAND SILVER CO<br>NAICS: <br>SIC: 3914<br>PGM_SYS_ACRNMS: FIS:2-6004-00430, RCRAINFO:NYD987007812\",\"lat: 39.800376<br>lon: -105.499111<br>REGISTRY_ID: 110006781143<br>PRIMARY_NAME: BATES HUNTER MINE<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:CO0043168\",\"lat: 40.3342<br>lon: -74.074458<br>REGISTRY_ID: 110007138695<br>PRIMARY_NAME: MONMOUTH SILVERSMITH INC<br>NAICS: <br>SIC: 3914, 5094<br>PGM_SYS_ACRNMS: AIR:NJ0000003402500048, AIRS/AFS:3402500048\",\"lat: 41.125664<br>lon: -117.24518<br>REGISTRY_ID: 110007978983<br>PRIMARY_NAME: PINSON MINE<br>NAICS: 212220<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:NVU000005, RCRAINFO:NVD099530966, TRIS:89414PNSNM22MIL\",\"lat: 44.8204<br>lon: -118.2133<br>REGISTRY_ID: 110009306562<br>PRIMARY_NAME: GOLCONDA MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40847\",\"lat: 41.838333<br>lon: -115.963333<br>REGISTRY_ID: 110009324105<br>PRIMARY_NAME: RIO TINTO MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: ICIS:3600003836, NPDES:NVU000002, SEMS:NV3141190030\",\"lat: 45.016607<br>lon: -109.937404<br>REGISTRY_ID: 110009339821<br>PRIMARY_NAME: MCLAREN MILL TAILINGS<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: ICIS:44934\",\"lat: 44.8265<br>lon: -118.1928<br>REGISTRY_ID: 110009343656<br>PRIMARY_NAME: NORTH POLE MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40844\",\"lat: 44.83<br>lon: -118.2<br>REGISTRY_ID: 110009816878<br>PRIMARY_NAME: BOURNE MINING CORPORATION<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:13110\",\"lat: 39.52744<br>lon: -119.73901<br>REGISTRY_ID: 110009830781<br>PRIMARY_NAME: ALHAMBRA MINES<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:NVU000024\",\"lat: 37.349444<br>lon: -106.530278<br>REGISTRY_ID: 110010053547<br>PRIMARY_NAME: PLATORO JOINT VENTURE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:CO0038954\",\"lat: 47.731719<br>lon: -116.795154<br>REGISTRY_ID: 110010588499<br>PRIMARY_NAME: HECLA MINING CO<br>NAICS: <br>SIC: 1031, 1041, 1044, 1455, 1499, 3339<br>PGM_SYS_ACRNMS: CDAFLP:110010588499, ICIS:25897, NCDB:I10#199203202383  1\",\"lat: 38.69802<br>lon: -90.43851<br>REGISTRY_ID: 110010663371<br>PRIMARY_NAME: DOE RUN CO<br>NAICS: <br>SIC: 1021, 1031, 1044<br>PGM_SYS_ACRNMS: ICIS:3794, MO-DNR:18937\",\"lat: 48.36632<br>lon: -115.53978<br>REGISTRY_ID: 110011046670<br>PRIMARY_NAME: MONTANORE MINERALS CORP. - MONTANORE PROJECT<br>NAICS: <br>SIC: 1021, 1044, 1629<br>PGM_SYS_ACRNMS: NPDES:MT0030279, NPDES:MTR102278\",\"lat: 45.63116<br>lon: -109.26356<br>REGISTRY_ID: 110011675106<br>PRIMARY_NAME: MONTANA SILVERSMITHS INC<br>NAICS: 339910, 339911<br>SIC: 3911, 3914<br>PGM_SYS_ACRNMS: AIR:MT0000003009500005, AIRS/AFS:3009500005, EIS:5256111, ICIS:44659, MT-CEDARS:150629, NCDB:D08#E-VIII-94-05, NCDB:I08#19930824UT006 1, NPDES:MTRNE0003, RCRAINFO:MTD071412340, TRIS:59019MNTNS1STER\",\"lat: 42.07732<br>lon: -78.40673<br>REGISTRY_ID: 110013329460<br>PRIMARY_NAME: CUTCO CUTLERY CORPORATION<br>NAICS: <br>SIC: 3421, 3914<br>PGM_SYS_ACRNMS: AIR:NY0000009041200074, AIRS/AFS:36009R1945, FIS:9-0412-00074\",\"lat: 46.27051<br>lon: -112.25965<br>REGISTRY_ID: 110013342819<br>PRIMARY_NAME: OT MINING CORPORATION<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:MTX000014\",\"lat: 43.07657<br>lon: -75.18165<br>REGISTRY_ID: 110013395735<br>PRIMARY_NAME: FASTER-FORM CORPORATION<br>NAICS: <br>SIC: 2499, 3914, 5193<br>PGM_SYS_ACRNMS: AIR:NY0000006212600095, AIRS/AFS:36043R2496, FIS:6-2126-00095\",\"lat: 44.9173<br>lon: -117.4689<br>REGISTRY_ID: 110013798569<br>PRIMARY_NAME: USDOI BLM BALM CREEK- POORMAN MINE COMPLEX<br>NAICS: 212221, 212222, 212234<br>SIC: 1021, 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:41013, SEMS:ORN001002416\",\"lat: 44.8548<br>lon: -118.105<br>REGISTRY_ID: 110013799014<br>PRIMARY_NAME: HIGHLAND MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40846\",\"lat: 44.8556<br>lon: -118.1609<br>REGISTRY_ID: 110014149019<br>PRIMARY_NAME: ROCK CREEK MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:41025\",\"lat: 44.8129<br>lon: -118.2981<br>REGISTRY_ID: 110014149457<br>PRIMARY_NAME: IBEX MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:41049, SEMS:ORSFN1002200\",\"lat: 44.7949<br>lon: -118.4762<br>REGISTRY_ID: 110014152095<br>PRIMARY_NAME: RED BOY MINE<br>NAICS: 212221, 212222, 212234<br>SIC: 1021, 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40842\",\"lat: 44.8153<br>lon: -118.2254<br>REGISTRY_ID: 110014152148<br>PRIMARY_NAME: MOUNTAIN BELLE MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40845\",\"lat: 44.8412<br>lon: -118.4286<br>REGISTRY_ID: 110014157526<br>PRIMARY_NAME: MIDDLE REACH OF EAST TEN CENT CREEK<br>NAICS: 092412, 212221, 212222, 212234, 924120<br>SIC: 1021, 1041, 1044, 9512<br>PGM_SYS_ACRNMS: OR-DEQ:40618\",\"lat: 44.8501<br>lon: -118.3996<br>REGISTRY_ID: 110014157553<br>PRIMARY_NAME: UPPER GRANITE CREEK MINES - ABOVE SAWMILL FLAT<br>NAICS: 092412, 212221, 212222, 212234, 924120<br>SIC: 1021, 1041, 1044, 9512<br>PGM_SYS_ACRNMS: OR-DEQ:40619\",\"lat: 44.8628<br>lon: -118.1817<br>REGISTRY_ID: 110014299721<br>PRIMARY_NAME: WESTERN UNION MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:41051\",\"lat: 44.8269<br>lon: -118.2056<br>REGISTRY_ID: 110014300201<br>PRIMARY_NAME: COLUMBIA MINE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40843\",\"lat: 44.8094<br>lon: -118.2065<br>REGISTRY_ID: 110014300461<br>PRIMARY_NAME: UPPER POWDER RIVER BASIN AREAWIDE MINING SITES<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40832\",\"lat: 44.7833<br>lon: -118.45<br>REGISTRY_ID: 110014301380<br>PRIMARY_NAME: GRANITE CREEK AREAWIDE MINING SITES<br>NAICS: 212221, 212222, 212234<br>SIC: 1021, 1041, 1044<br>PGM_SYS_ACRNMS: OR-DEQ:40603\",\"lat: 46.940556<br>lon: -110.471111<br>REGISTRY_ID: 110030485133<br>PRIMARY_NAME: YUKON MINE<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MT0030776\",\"lat: 40.720159<br>lon: -74.268485<br>REGISTRY_ID: 110031936993<br>PRIMARY_NAME: UBALDO VITALI INC<br>NAICS: 331522<br>SIC: 3364, 3914<br>PGM_SYS_ACRNMS: NJ-NJEMS:22193, OSHA-OIS:315793612\",\"lat: 40.38794<br>lon: -74.36023<br>REGISTRY_ID: 110032147399<br>PRIMARY_NAME: A&L ENGRAVERS<br>NAICS: <br>SIC: 3914<br>PGM_SYS_ACRNMS: NJ-NJEMS:33021\",\"lat: 40.915382<br>lon: -74.366789<br>REGISTRY_ID: 110032518737<br>PRIMARY_NAME: HICKOK MATTHEWS CO<br>NAICS: 448150<br>SIC: 3914<br>PGM_SYS_ACRNMS: NJ-NJEMS:174234\",\"lat: 29.81222<br>lon: -104.32722<br>REGISTRY_ID: 110034837817<br>PRIMARY_NAME: SHAFTER MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: TX-TCEQ ACR:RN104981485\",\"lat: 29.817777<br>lon: -104.327222<br>REGISTRY_ID: 110035210232<br>PRIMARY_NAME: SHAFTER MINE<br>NAICS: 212222<br>SIC: 1044<br>PGM_SYS_ACRNMS: TX-TCEQ ACR:RN100812502\",\"lat: 47.983333<br>lon: -115.738889<br>REGISTRY_ID: 110035854634<br>PRIMARY_NAME: RC RESOURCES - ROCK CREEK EXPLORATION ADIT<br>NAICS: <br>SIC: 1021, 1044<br>PGM_SYS_ACRNMS: NPDES:MTR102896, NPDES:MTR103115\",\"lat: 46.358056<br>lon: -112.107778<br>REGISTRY_ID: 110038050916<br>PRIMARY_NAME: MONTANA TUNNELS MINING INC<br>NAICS: 212200, 212221, 212222, 212231<br>SIC: 1031, 1041, 1044<br>PGM_SYS_ACRNMS: AIRS/AFS:3004300003, MT-CEDARS:150635, NPDES:MT0028428, RCRAINFO:MTD173613985, TRIS:59638MNTNT5MILE\",\"lat: 36.07682<br>lon: -115.07316<br>REGISTRY_ID: 110041289469<br>PRIMARY_NAME: VSR INDUSTRIES, INC<br>NAICS: 332999<br>SIC: 3499, 3914<br>PGM_SYS_ACRNMS: NPDES:NVIS02683, NV-FP:25379378, OSHA-OIS:317376390, OSHA-OIS:340641653\",\"lat: 46.257806<br>lon: -112.21475<br>REGISTRY_ID: 110043743697<br>PRIMARY_NAME: WILLIAM DUNCAN MIDSUMMER DREAM BOULDER RIVER<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MTG370322\",\"lat: 39.767269<br>lon: -105.537592<br>REGISTRY_ID: 110046386530<br>PRIMARY_NAME: VENTURE RES - HUKILL GULCH MILLSITE<br>NAICS: 212221, 212222<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: AIR:CO0000000801900034, AIRS/AFS:0801900034, EIS:16165211\",\"lat: 46.66836<br>lon: -89.99707<br>REGISTRY_ID: 110055042234<br>PRIMARY_NAME: COPPERWOOD MINE<br>NAICS: 212222, 212234<br>SIC: 1021, 1044<br>PGM_SYS_ACRNMS: NPDES:MI0058969\",\"lat: 47.504908<br>lon: -116.074306<br>REGISTRY_ID: 110055487904<br>PRIMARY_NAME: UNITED MINE SERVICES - CRESCENT MINE<br>NAICS: 212222<br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:IDR05CA75\",\"lat: 47.933333<br>lon: -116.442222<br>REGISTRY_ID: 110055487913<br>PRIMARY_NAME: ABM MINING CORPORATION - LAKEVIEW MILL<br>NAICS: 212222<br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:IDR05CV74\",\"lat: 47.915412<br>lon: -116.4315<br>REGISTRY_ID: 110055487922<br>PRIMARY_NAME: ABM MINING CORPORATION - CONJECTURE MINE EXPLORATION<br>NAICS: 212222<br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:IDR12BG31\",\"lat: 37.975262<br>lon: -107.751941<br>REGISTRY_ID: 110055623918<br>PRIMARY_NAME: REVENUE MINE<br>NAICS: <br>SIC: 1031, 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:CO0000003\",\"lat: 46.7475<br>lon: -112.295556<br>REGISTRY_ID: 110056149270<br>PRIMARY_NAME: DRUMLUMMON GOLD MINE<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MT0031721\",\"lat: 45.234449<br>lon: -110.659078<br>REGISTRY_ID: 110059709686<br>PRIMARY_NAME: TYLER HAGAN - EMIGRANT CREEK SOUTH FORK<br>NAICS: <br>SIC: 1011, 1021, 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MTG370354\",\"lat: 40.9449<br>lon: -117.76588<br>REGISTRY_ID: 110059818522<br>PRIMARY_NAME: HOLLISTER MINE<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NV-FP:25583379\",\"lat: 46.268361<br>lon: -113.197639<br>REGISTRY_ID: 110064622582<br>PRIMARY_NAME: GOLDEN JUBLIEE MINE<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MTR000573\",\"lat: 48.0625<br>lon: -115.698611<br>REGISTRY_ID: 110064634285<br>PRIMARY_NAME: RC RESOURCES - ROCK CREEK EXPLORATION ADIT (SW MINING)<br>NAICS: <br>SIC: 1021, 1044<br>PGM_SYS_ACRNMS: NPDES:MTR300247\",\"lat: 29.817777<br>lon: -104.307222<br>REGISTRY_ID: 110064645184<br>PRIMARY_NAME: SHAFTER MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:TX0132624\",\"lat: 48.141111<br>lon: -115.556389<br>REGISTRY_ID: 110064647486<br>PRIMARY_NAME: MINES MANAGEMENT INC MONTANORE MINE<br>NAICS: <br>SIC: 1021, 1044<br>PGM_SYS_ACRNMS: NPDES:MT0031470\",\"lat: 32.858852<br>lon: -114.790362<br>REGISTRY_ID: 110065770179<br>PRIMARY_NAME: AMERICAN GIRL MINE 98-095<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: CA-ENVIROVIEW:217047, CA-ENVIROVIEW:345584\",\"lat: 36.11828<br>lon: -117.09533<br>REGISTRY_ID: 110066126383<br>PRIMARY_NAME: BRIGGS MINE PROJECT<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: CA-ENVIROVIEW:100041, CA-ENVIROVIEW:225398\",\"lat: 47.50321<br>lon: -116.07174<br>REGISTRY_ID: 110067014411<br>PRIMARY_NAME: CRESCENT MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:IDR053080\",\"lat: 47.486111<br>lon: -115.975<br>REGISTRY_ID: 110067027130<br>PRIMARY_NAME: U.S. SILVER CORPORATION - IDAHO INC (OSBURN TAILINGS IMPOUNDMENT)<br>NAICS: 212222<br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:IDR053040, NPDES:IDR12BJ79\",\"lat: 38.32283<br>lon: -85.81702<br>REGISTRY_ID: 110070292781<br>PRIMARY_NAME: 105527 - FOX GROUP INCORPORATED<br>NAICS: 332999<br>SIC: 3914<br>PGM_SYS_ACRNMS: OSHA-OIS:341824043\",\"lat: 37.27148<br>lon: -76.69529<br>REGISTRY_ID: 110070320413<br>PRIMARY_NAME: SHIRLEY PEWTER<br>NAICS: 339912<br>SIC: 3914<br>PGM_SYS_ACRNMS: OSHA-OIS:317335834\",\"lat: 38.63037<br>lon: -77.28876<br>REGISTRY_ID: 110070322983<br>PRIMARY_NAME: QUINN'S GOLDSMITH INC<br>NAICS: 332999<br>SIC: 3914<br>PGM_SYS_ACRNMS: OSHA-OIS:316954239\",\"lat: 44.93414<br>lon: -93.13874<br>REGISTRY_ID: 110070336509<br>PRIMARY_NAME: 92384 - AJ SCHAAKE COMPANY<br>NAICS: 332812<br>SIC: 3914<br>PGM_SYS_ACRNMS: OSHA-OIS:341209963\",\"lat: 47.476618<br>lon: -115.943218<br>REGISTRY_ID: 110070385158<br>PRIMARY_NAME: CALADAY MINE<br>NAICS: 212222, 213114<br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:ID0025429, NPDES:IDR05C300\",\"lat: 38.882285<br>lon: -107.119016<br>REGISTRY_ID: 110070599510<br>PRIMARY_NAME: BOULLION KING MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:CO0049041\",\"lat: 37.919015<br>lon: -107.675887<br>REGISTRY_ID: 110070826893<br>PRIMARY_NAME: VON DOOSE MINE<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:COR409446\",\"lat: 46.455169<br>lon: -111.67861<br>REGISTRY_ID: 110070892862<br>PRIMARY_NAME: WINSTON MINE<br>NAICS: 212220, 212221<br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MTR000713, NPDES:MTX000264, RCRAINFO:MTR000212167\",\"lat: 46.67648<br>lon: -112.49806<br>REGISTRY_ID: 110071076717<br>PRIMARY_NAME: DONT KNOW YET #5<br>NAICS: <br>SIC: 1041, 1044<br>PGM_SYS_ACRNMS: NPDES:MTG370407\",\"lat: 46.024264<br>lon: -112.543194<br>REGISTRY_ID: 110071094254<br>PRIMARY_NAME: BLACKJACK PROJECT<br>NAICS: <br>SIC: 1044<br>PGM_SYS_ACRNMS: NPDES:MTR109160\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[18.077278,68.06150700000001],\"lng\":[-162.855492,-67.029144]}},\"evals\":[],\"jsHooks\":[]}  sic_from_any(\"silver\") #>      code     n2     n3     n4                                 name #>    <char> <char> <char> <char>                               <char> #> 1:   1040     10    104   1040                 Gold and silver ores #> 2:   1044     10    104   1044                          Silver ores #> 3:   3910     39    391   3910 Jewelry, silverware, and plated ware #> 4:   3914     39    391   3914           Silverware and plated ware #>                                       num_name #>                                         <char> #> 1:                 1040 - Gold and silver ores #> 2:                          1044 - Silver ores #> 3: 3910 - Jewelry, silverware, and plated ware #> 4:           3914 - Silverware and plated ware   sic_from_name(\"silver\") #>      code     n2     n3     n4                                 name #>    <char> <char> <char> <char>                               <char> #> 1:   1040     10    104   1040                 Gold and silver ores #> 2:   1044     10    104   1044                          Silver ores #> 3:   3910     39    391   3910 Jewelry, silverware, and plated ware #> 4:   3914     39    391   3914           Silverware and plated ware #>                                       num_name #>                                         <char> #> 1:                 1040 - Gold and silver ores #> 2:                          1044 - Silver ores #> 3: 3910 - Jewelry, silverware, and plated ware #> 4:           3914 - Silverware and plated ware   sic_from_any('0780') #>      code     n2     n3     n4                                 name #>    <char> <char> <char> <char>                               <char> #> 1:   0780     07    078   0780 Landscape and horticultural services #>                                       num_name #>                                         <char> #> 1: 0780 - Landscape and horticultural services   frs_from_sic('0780') #> Key: <REGISTRY_ID> #>         lat        lon  REGISTRY_ID                   PRIMARY_NAME  NAICS #>       <num>      <num>       <char>                         <char> <char> #> 1: 34.01928 -118.06651 110002942059    WHITTIER FERTILIZER COMPANY 444220 #> 2: 39.46249  -75.31125 110032015067                 ARC GREENHOUSE        #> 3: 40.56092  -74.55954 110032369568      BRIDGEWATER TRANSPORT INC        #> 4: 39.76020  -75.38356 110032373036 GREEN ACRES LAWNS & LANDSCAPES        #> 5: 38.51118 -121.35022 110065267570      NATURE CARE LANDSCAPE INC        #> 6: 40.15182 -124.08750 110065281572        A123 LAWN AND LANDSCAPE        #>                 SIC #>              <char> #> 1:             0780 #> 2:             0780 #> 3: 0780, 0782, 5032 #> 4:       0780, 0782 #> 5:             0780 #> 6:             0780 #>                                                                                            PGM_SYS_ACRNMS #>                                                                                                    <char> #> 1: CA-CERS:10281400, CA-ENVIROVIEW:85922, EIS:17222211, HWTS-DATAMART:CAR000080473, RCRAINFO:CAR000080473 #> 2:                                                                                        NJ-NJEMS:148036 #> 3:                                                                                          NJ-NJEMS:1781 #> 4:                                                                                        NJ-NJEMS:197107 #> 5:                                                                                    CA-ENVIROVIEW:51231 #> 6:                                                             CA-ENVIROVIEW:89083, RCRAINFO:CAL000363297   regid_from_sic('0780') #> Key: <SIC, REGISTRY_ID> #>         lat        lon  REGISTRY_ID    SIC #>       <num>      <num>       <char> <char> #> 1: 34.01928 -118.06651 110002942059   0780 #> 2: 39.46249  -75.31125 110032015067   0780 #> 3: 40.56092  -74.55954 110032369568   0780 #> 4: 39.76020  -75.38356 110032373036   0780 #> 5: 38.51118 -121.35022 110065267570   0780 #> 6: 40.15182 -124.08750 110065281572   0780   latlon_from_sic('0780') #> Key: <SIC, REGISTRY_ID> #>         lat        lon  REGISTRY_ID    SIC #>       <num>      <num>       <char> <char> #> 1: 34.01928 -118.06651 110002942059   0780 #> 2: 39.46249  -75.31125 110032015067   0780 #> 3: 40.56092  -74.55954 110032369568   0780 #> 4: 39.76020  -75.38356 110032373036   0780 #> 5: 38.51118 -121.35022 110065267570   0780 #> 6: 40.15182 -124.08750 110065281572   0780"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sitename.html","id":null,"dir":"Reference","previous_headings":"","what":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","title":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","text":"SLOW search within PRIMARY_NAME facilities matching text","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sitename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","text":"","code":"frs_from_sitename(sitenames, ignore.case = TRUE, fixed = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sitename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","text":"sitenames one strings vector, can regular expressions query exact match using fixed=TRUE ignore.case logical, search case sensitive default (unlike grepl() default) fixed see grepl(), set TRUE looks exact matches","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sitename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","text":"relevant rows data.table called frs, column names \"lat\" \"lon\" \"REGISTRY_ID\" \"PRIMARY_NAME\" \"NAICS\" \"PGM_SYS_ACRNMS\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_from_sitename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use site name text search to see FRS Facility Registry Service data on those EPA-regulated sites — frs_from_sitename","text":"","code":"if (FALSE) {  # very slow  x=frs_from_sitename  nrow(x)  head(x) }"},{"path":"https://usepa.github.io/EJAM/reference/frs_is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","title":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","text":"Check proper colname (seems valid alias)","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","text":"","code":"frs_is_valid(frs_upload)"},{"path":"https://usepa.github.io/EJAM/reference/frs_is_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","text":"frs_upload upload frs registry IDs table converted data frame (data.table gets handled ) ids column whose name among allowed aliases get tried : colname FRS regids must one REGISTRY_ID, RegistryID, regid, siteid, checked order preference.","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_is_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","text":"boolean value (valid valid)","code":""},{"path":"https://usepa.github.io/EJAM/reference/frs_is_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate FRS Registry ID table uploaded (just checks colname, mostly) — frs_is_valid","text":"note checks aliases (REGISTRY_ID, RegistryID, regid, siteid) order valid name found even fails actually contain valid ids, func go back try rest possible aliases, two cols regid siteid siteid valid registry ID values, func fail figure say invalid.","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_in_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","title":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","text":"utility see objects loaded/attached package exported functions, internal (unexported) objects, datasets","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_in_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","text":"","code":"functions_in_pkg(   pkg,   alphasort_table = FALSE,   internal_included = TRUE,   exportedfuncs_included = TRUE,   data_included = TRUE,   vectoronly = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/functions_in_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","text":"pkg name package character like \"EJAM\" alphasort_table default FALSE, show internal first group, exported funcs, datasets internal_included default TRUE includes internal (unexported) objects list exportedfuncs_included default TRUE includes exported functions (non-datasets, actually) list data_included default TRUE includes datasets list, seen via data(package=pkg) vectoronly set TRUE just get character vector object names instead data.frame table output","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_in_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","text":"data.table colnames object, exported, data  exported data 1 0 T/F, unless vectoronly = TRUE case returns character vector","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/functions_in_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utility to see which objects in a loaded/attached package are exported functions, internal (unexported) objects, or datasets — functions_in_pkg","text":"","code":"functions_in_pkg(\"datasets\") # functions_in_pkg(\"EJAMejscreenapi\") #> Error in functions_in_pkg(\"datasets\"): could not find function \"functions_in_pkg\""},{"path":"https://usepa.github.io/EJAM/reference/functions_that_use.html","id":null,"dir":"Reference","previous_headings":"","what":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","title":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","text":"utility developing package - searches text function exported pkg (.R source file pkg/R)","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_that_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","text":"","code":"functions_that_use(text = \"stop\\\\(\", pkg = \"EJAM\", ignore_comments = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/functions_that_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","text":"text something like \"EJAM::\" \"stop\\(\" \"library\\(\" \"***\" pkg name package path source package root folder - checks exported functions installed package, pkg = installed package character string like \"EJAM\" checks .R source FILE actual function, pkg = root folder source package subfolder called R .R source files ignore_comments logical, ignore_comments ignored treated TRUE pkg = installed package ignore_comments used pkg = folder contains .R files Note fail ignore comments .R files end line actual code like  print(1) # prints 1","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_that_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","text":"vector names functions paths .R files","code":""},{"path":"https://usepa.github.io/EJAM/reference/functions_that_use.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"utility for developing package - searches for text in each function exported by pkg (or each .R source file in pkg/R) — functions_that_use","text":"Searches body parameter defaults exported functions.","code":""},{"path":"https://usepa.github.io/EJAM/reference/generate_demog_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Build header for demog. + envt. tables in community report — generate_demog_header","title":"Build header for demog. + envt. tables in community report — generate_demog_header","text":"Build header demog. + envt. tables community report","code":""},{"path":"https://usepa.github.io/EJAM/reference/generate_demog_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build header for demog. + envt. tables in community report — generate_demog_header","text":"","code":"generate_demog_header()"},{"path":"https://usepa.github.io/EJAM/reference/generate_ej_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Build header for EJ index table in community report — generate_ej_header","title":"Build header for EJ index table in community report — generate_ej_header","text":"Build header EJ index table community report","code":""},{"path":"https://usepa.github.io/EJAM/reference/generate_ej_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build header for EJ index table in community report — generate_ej_header","text":"","code":"generate_ej_header()"},{"path":"https://usepa.github.io/EJAM/reference/generate_ej_supp_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Build header for EJ supp indexes in community report — generate_ej_supp_header","title":"Build header for EJ supp indexes in community report — generate_ej_supp_header","text":"Build header EJ supp indexes community report","code":""},{"path":"https://usepa.github.io/EJAM/reference/generate_ej_supp_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build header for EJ supp indexes in community report — generate_ej_supp_header","text":"","code":"generate_ej_supp_header()"},{"path":"https://usepa.github.io/EJAM/reference/generate_html_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Build HTML header for community report — generate_html_header","title":"Build HTML header for community report — generate_html_header","text":"Build HTML header community report","code":""},{"path":"https://usepa.github.io/EJAM/reference/generate_html_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build HTML header for community report — generate_html_header","text":"","code":"generate_html_header(analysis_title, totalpop, locationstr, in_shiny = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/generate_html_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build HTML header for community report — generate_html_header","text":"analysis_title, title use header report totalpop, total population included location(s) analyzed locationstr, description location(s) analyzed in_shiny, whether function called outside shiny - affects location header","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby.html","id":null,"dir":"Reference","previous_headings":"","what":"Very fast way to distances to all nearby Census blocks — getblocksnearby","title":"Very fast way to distances to all nearby Census blocks — getblocksnearby","text":"Get distance site (e.g., facility) Census block centroid within radius Given set points specified radius, function quickly finds US Census blocks near point. point, uses specified radius distance finds distance every block within circle defined radius. block defined Census-provided internal point, latitude longitude. point can location regulated facility type site, blocks high-resolution source information residents live. Finding blocks internal points circle provides way quickly estimate fraction block group inside circular buffer accurately quickly areal apportionment block groups provide.","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Very fast way to distances to all nearby Census blocks — getblocksnearby","text":"","code":"getblocksnearby(   sitepoints,   radius = 3,   maxradius = 31.07,   avoidorphans = FALSE,   quadtree = NULL,   quiet = FALSE,   parallel = FALSE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Very fast way to distances to all nearby Census blocks — getblocksnearby","text":"sitepoints data.table columns lat, lon giving point locations sites facilities around circular buffers radius miles, defining circular buffer around site point maxradius miles distance (max distance check even 1 block point within radius) avoidorphans logical TRUE, even 1 BLOCK internal point within radius SITE, keeps looking past radius, maxradius, find nearest 1 BLOCK. EJScreen case report NA, right? , EJAM really need report stats residents presumed within radius, block centroid within radius? Best estimate might report indicators nearest block centroid probably almost always one site sitting inside , ideally adjust total count fraction blockwt based area circular buffer fraction area block apparently inside . Setting TRUE can produce unexpected results, match EJScreen numbers. Note creating proximity score, contrast, instead want find nearest 1 SITE none within radius BLOCK. quadtree (pointer large quadtree object) created using indexblocks() uses SearchTree package. Takes 2-5 seconds create time needed. can automatically created package attached via .onAttach() function quiet Optional. set TRUE avoid message using getblock_diagnostics(), relevant user saved output function. ... passed getblocksnearbyviaQuadTree() functions","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Very fast way to distances to all nearby Census blocks — getblocksnearby","text":"data.table like testoutput_getblocksnearby_10pts_1miles, columns named \"ejam_uniq_id\", \"blockid\", \"distance\", etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Very fast way to distances to all nearby Census blocks — getblocksnearby","text":"See ejamit() examples. getblocksnearby() wrapper redirecting right version, like getblocksnearbyviaQuadTree() Census block \"internal points\" (defined Census Bureau) actually looks , like centroids. blocks pre-indexed whole USA, via data object quadtree aka localtree","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby2.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT / WAS WORK IN PROGRESS  Key buffering function - wrapper redirecting to the right version of getblocksnearby() — getblocksnearby2","title":"DRAFT / WAS WORK IN PROGRESS  Key buffering function - wrapper redirecting to the right version of getblocksnearby() — getblocksnearby2","text":"DRAFT / WORK PROGRESS  Key buffering function - wrapper redirecting right version getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT / WAS WORK IN PROGRESS  Key buffering function - wrapper redirecting to the right version of getblocksnearby() — getblocksnearby2","text":"","code":"getblocksnearby2(   sitepoints,   radius = 3,   maxradius = 31.07,   avoidorphans = FALSE,   quadtree = is.null,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT / WAS WORK IN PROGRESS  Key buffering function - wrapper redirecting to the right version of getblocksnearby() — getblocksnearby2","text":"sitepoints see getblocksnearbyviaQuadTree() functions radius see getblocksnearbyviaQuadTree() functions maxradius see getblocksnearbyviaQuadTree() functions avoidorphans see getblocksnearbyviaQuadTree() functions quadtree large quadtree object created SearchTree package example: SearchTrees::createTree( quaddata, treeType = \"quad\", dataType = \"point\") ... see getblocksnearbyviaQuadTree_Clustered() functions","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DRAFT / WAS WORK IN PROGRESS  Key buffering function - wrapper redirecting to the right version of getblocksnearby() — getblocksnearby2","text":"examples, see ejamit() Like getblocksnearby() tries handle localtree quadtree parameter differently sure check right environment.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","title":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","text":"getblocksnearby() uses work. Given set points specified radius miles, function quickly finds US Census blocks near point. work actually supporting getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","text":"","code":"getblocksnearbyviaQuadTree(   sitepoints,   radius = 3,   maxradius = 31.07,   avoidorphans = FALSE,   report_progress_every_n = 500,   quiet = FALSE,   retain_unadjusted_distance = TRUE,   quadtree,   updateProgress = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","text":"sitepoints data.table columns lat, lon giving point locations sites facilities around circular buffers radius miles, defining circular buffer around site point maxradius miles distance (max distance check even 1 block point within radius) avoidorphans logical TRUE, even 1 BLOCK internal point within radius SITE, keeps looking past radius, maxradius, find nearest 1 BLOCK. EJScreen case report NA, right? , EJAM really need report stats residents presumed within radius, block centroid within radius? Best estimate might report indicators nearest block centroid probably almost always one site sitting inside , ideally adjust total count fraction blockwt based area circular buffer fraction area block apparently inside . Setting TRUE can produce unexpected results, match EJScreen numbers. Note creating proximity score, contrast, instead want find nearest 1 SITE none within radius BLOCK. report_progress_every_n Reports progress console every n points, mostly testing, progress bar feature might useful unless super fast. quiet Optional. set TRUE avoid message using getblock_diagnostics(), relevant user saved output function. retain_unadjusted_distance set FALSE drop save memory/storage. TRUE, distance_unadjusted column save actual distance site block internal point -- distance column always represents distance average resident block, estimated adjusting site block distance cases small relative size block, put lower limit , can result large estimate distance block large. See EJScreen documentation. quadtree (pointer large quadtree object) created using indexblocks() uses SearchTree package. Takes 2-5 seconds create time needed. can automatically created package attached via .onAttach() function updateProgress, optional function update Shiny progress bar","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","text":"point, uses specified search radius finds distance every block within circle defined radius. block defined Census-provided internal point, latitude longitude. Results sites2blocks table used doaggregate(), distance miles one output column data.table. Adjusts distance avg resident block small relative block size, way EJScreen adjusts distances creating proximity scores. point can location regulated facility type site, blocks high-resolution source information residents live. Finding blocks internal points circle provides way quickly estimate fraction block group inside circular buffer accurately quickly areal apportionment block groups provide.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast way to find nearby points (distance to each Census block centroid near each site) — getblocksnearbyviaQuadTree","text":"","code":"# indexblocks() # if localtree not available yet, quadtree = localtree   x = getblocksnearby(testpoints_1000, radius = 3) #> Analyzing 1000 points, radius of 3 miles around each. #> Finding Census blocks with internal point within  3  miles of the site (point), for each of 1000  sites (points)... #> Stats via getblocks_diagnostics(), but BEFORE ADJUSTING UP FOR VERY SHORT DISTANCES:  #> min distance before adjustment:  0.000345267  #> max distance before adjustment:  15.48261  #>  #>  #>    Summary stats on distances reported from any sites to any nearby blocks #>  #> Warning: no non-missing arguments to max; returning -Inf #> -Inf miles is max. distance to block internal point (distance_unadjusted)    #> 15.48261 miles is max. distance to average resident in block (distance reported)    #> Warning: no non-missing arguments to min; returning Inf #> Inf miles is shortest distance to block internal point (distance_unadjusted)    #> 0.000345267 miles is shortest distance to average resident in block (distance reported)    #>  #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> 1,000 unique output sites #> 1,366 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 1,365,749 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 932,522 actual unique blocks total #> 668,136 blocks (and their residents) have exactly 1 site nearby  #> 164,215 blocks (and their residents) have exactly 2 sites nearby  #> 56,494 blocks (and their residents) have exactly 3 sites nearby  #> 1.464576 is ratio of blocks including multicounting / actual count of unique blocks #> 28.4% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point #>  #>  #> Adjusting upwards the very short distances now... #>  Stats via getblocks_diagnostics(), AFTER ADJUSTING up FOR SHORT DISTANCES:  #> min distance AFTER adjustment:  0.009  #> max distance AFTER adjustment:  2.999998  #>  #>"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree_Clustered.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT / WAS WORK IN PROGRESS  - find nearby blocks using Quad Tree data structure for speed, CLUSTERED FOR PARALLEL PROCESSING — getblocksnearbyviaQuadTree_Clustered","title":"DRAFT / WAS WORK IN PROGRESS  - find nearby blocks using Quad Tree data structure for speed, CLUSTERED FOR PARALLEL PROCESSING — getblocksnearbyviaQuadTree_Clustered","text":"Uses packages parallel snow. parallel::makePSOCKcluster enhanced version snow::makeSOCKcluster package snow. runs Rscript specified host(s) set worker process listens socket expressions evaluate, returns results (serialized objects).","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree_Clustered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT / WAS WORK IN PROGRESS  - find nearby blocks using Quad Tree data structure for speed, CLUSTERED FOR PARALLEL PROCESSING — getblocksnearbyviaQuadTree_Clustered","text":"","code":"getblocksnearbyviaQuadTree_Clustered(   sitepoints,   radius,   maxradius,   avoidorphans,   CountCPU = 1,   quadtree )"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree_Clustered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT / WAS WORK IN PROGRESS  - find nearby blocks using Quad Tree data structure for speed, CLUSTERED FOR PARALLEL PROCESSING — getblocksnearbyviaQuadTree_Clustered","text":"sitepoints data.table columns LAT, LONG radius miles maxradius miles distance avoidorphans logical CountCPU parallel processing via makeCluster() doSNOW::registerDoSNOW() quadtree index US blocks like localtree","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearbyviaQuadTree_Clustered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DRAFT / WAS WORK IN PROGRESS  - find nearby blocks using Quad Tree data structure for speed, CLUSTERED FOR PARALLEL PROCESSING — getblocksnearbyviaQuadTree_Clustered","text":"examples, see getblocksnearbyviaQuadTree() Uses indexgridsize quaddata  variables come global environment (pass function rather assume global env?)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby_from_fips.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","title":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","text":"Allows EJAM analyze compare Counties, example","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby_from_fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","text":"","code":"getblocksnearby_from_fips(fips, inshiny = FALSE, need_blockwt = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby_from_fips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","text":"fips vector FIPS codes identifying blockgroups, tracts, counties, states. useful -- instead gettings stats comparing circular buffers polygons -- one getting stats one tracts, analyzing comparing blockgroups county, comparing whole counties , within State. inshiny used shiny app server code handle errors via validate() instead stop() need_blockwt set FALSE speed need blockwt","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby_from_fips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","text":"getblocksnearby one row per FIPS, distance column irrelevant","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocksnearby_from_fips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all blocks within each of the FIPS codes provided — getblocksnearby_from_fips","text":"","code":"x <- getblocksnearby_from_fips(fips_counties_from_state_abbrev(\"DE\")) #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> blockid2fips   - is NOT in memory. Checking local disk... blockid2fips  is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/blockid2fips.arrow  #> blockid2fips   - is NOT in local folder. #> blockid2fips  - was read from pins board server, into memory (to specified envir). #>  #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> bgid2fips    - is NOT in memory. Checking local disk... bgid2fips   is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/bgid2fips.arrow  #> bgid2fips    - is NOT in local folder. #> bgid2fips   - was read from pins board server, into memory (to specified envir). #>  #> Joining with `by = join_by(blockid)` #> Warning: Unknown argument 'on' has been passed.   counties_ej <- doaggregate(x)   #cannot use mapfast(counties_ej$results_bysite) since no lat lon.  mapfastej_counties() should work...   y =  ejamit(fips=fips_counties_from_statename(\"Delaware\")) #> Finding blocks in each FIPS Census unit. #> Joining with `by = join_by(blockid)` #> Warning: Unknown argument 'on' has been passed. #> Aggregating at each FIPS Census unit and overall. #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number.      # x=getblocksnearby_from_fips(\"482011000011\") # one blockgroup only   # y=doaggregate(x)"},{"path":"https://usepa.github.io/EJAM/reference/getblocks_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","title":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","text":"utility - many blocks many stats blocks sites","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","text":"","code":"getblocks_diagnostics(   x,   detailed = FALSE,   see_pctiles = FALSE,   see_distanceplot = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/getblocks_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","text":"x output getblocksnearby() like testoutput_getblocksnearby_10pts_1miles detailed TRUE, also shows console long table frequencies via getblocks_summarize_blocks_per_site() see_pctiles set TRUE see 20 percentiles distance table see_distanceplot TRUE, also draws scatter plot adjusted vs unadj distances","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","text":"list stats","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocks_diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utility - How many blocks and many other stats about blocks and sites — getblocks_diagnostics","text":"","code":"getblocks_diagnostics(testoutput_getblocksnearby_10pts_1miles) #>  #>    Summary stats on distances reported from any sites to any nearby blocks #>  #> 0.9998549 miles is max. distance to block internal point (distance_unadjusted)    #> 0.9998549 miles is max. distance to average resident in block (distance reported)    #> 0.008486795 miles is shortest distance to block internal point (distance_unadjusted)    #> 0.018 miles is shortest distance to average resident in block (distance reported)    #> 7 block distances were adjusted (these stats may count some blocks twice if adjusted at 2+ sites) #>   6 block distances were adjusted up (reported dist to avg resident is > dist to block internal point) #>   1 block distances were adjusted down (reported < unadjusted) #> 6 unique sites had one or more block distances adjusted due to large block and short distance to block point #>  #> 9 unique output sites #> 128 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 1,152 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 1,152 actual unique blocks total #> 1,152 blocks (and their residents) have exactly 1 site nearby  #> 0 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1 is ratio of blocks including multicounting / actual count of unique blocks #> 0% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point   # library(data.table)   x <- data.table::copy(testpoints_10)   setDT(x) #> Error in setDT(x): could not find function \"setDT\"   pts <- rbind(data.table(lat = 40.3, lon = -96.23),     x[ , .(lat, lon)]) #> Error in data.table(lat = 40.3, lon = -96.23): could not find function \"data.table\"  z <- getblocksnearbyviaQuadTree(pts, 1, quadtree = localtree, quiet = T) #> Error in is.data.frame(sitepoints): object 'pts' not found  z[ , .(blocks = .N) , keyby = 'ejam_uniq_id'] #> Error in eval(expr, envir, enclos): object 'z' not found  plotblocksnearby(pts, radius = 1, sites2blocks = z) #> Error in c(\"blockid\", \"distance\", siteidvarname) %in% names(sitepoints): object 'pts' not found  zz <- getblocks_diagnostics(z, detailed = T, see_pctiles = T) #> Error in NROW(x): object 'z' not found cbind(stats = zz) #> Error in cbind(stats = zz): object 'zz' not found    getblocks_diagostics(testoutput_getblocksnearby_1000pts_1miles, see_distanceplot = TRUE) #> Error in getblocks_diagostics(testoutput_getblocksnearby_1000pts_1miles,     see_distanceplot = TRUE): could not find function \"getblocks_diagostics\""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_predict_blocks_per_site.html","id":null,"dir":"Reference","previous_headings":"","what":"utility - estimate how large table might be that will be output of getblocksnearby() — getblocks_predict_blocks_per_site","title":"utility - estimate how large table might be that will be output of getblocksnearby() — getblocks_predict_blocks_per_site","text":"utility - estimate large table might output getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_predict_blocks_per_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility - estimate how large table might be that will be output of getblocksnearby() — getblocks_predict_blocks_per_site","text":"","code":"getblocks_predict_blocks_per_site(nsites, radius)"},{"path":"https://usepa.github.io/EJAM/reference/getblocks_predict_blocks_per_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility - estimate how large table might be that will be output of getblocksnearby() — getblocks_predict_blocks_per_site","text":"nsites count sites radius radius miles","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_predict_blocks_per_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility - estimate how large table might be that will be output of getblocksnearby() — getblocks_predict_blocks_per_site","text":"number","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_blocks_per_site.html","id":null,"dir":"Reference","previous_headings":"","what":"utility - How many blocks are near the sites (pop density affects accuracy) — getblocks_summarize_blocks_per_site","title":"utility - How many blocks are near the sites (pop density affects accuracy) — getblocks_summarize_blocks_per_site","text":"Number blocks near avg site, many sites 1 fewer 30 blocks nearby, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_blocks_per_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility - How many blocks are near the sites (pop density affects accuracy) — getblocks_summarize_blocks_per_site","text":"","code":"getblocks_summarize_blocks_per_site(x, varname = \"ejam_uniq_id\")"},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_blocks_per_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility - How many blocks are near the sites (pop density affects accuracy) — getblocks_summarize_blocks_per_site","text":"x output getblocksnearby() varname colname variable data.table x one summarize ","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_blocks_per_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility - How many blocks are near the sites (pop density affects accuracy) — getblocks_summarize_blocks_per_site","text":"invisibly, list stats","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_sites_per_block.html","id":null,"dir":"Reference","previous_headings":"","what":"utility - How many sites are near the blocks (site density near residents) — getblocks_summarize_sites_per_block","title":"utility - How many sites are near the blocks (site density near residents) — getblocks_summarize_sites_per_block","text":"utility - many sites near blocks (site density near residents)","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_sites_per_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility - How many sites are near the blocks (site density near residents) — getblocks_summarize_sites_per_block","text":"","code":"getblocks_summarize_sites_per_block(x, varname = \"blockid\")"},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_sites_per_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility - How many sites are near the blocks (site density near residents) — getblocks_summarize_sites_per_block","text":"x output getblocksnearby() like testoutput_getblocksnearby_10pts_1miles varname colname variable data.table x one summarize ","code":""},{"path":"https://usepa.github.io/EJAM/reference/getblocks_summarize_sites_per_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility - How many sites are near the blocks (site density near residents) — getblocks_summarize_sites_per_block","text":"invisibly, list stats","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/getfrsnearby.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFTING A FUNCTION TO COUNT NEARBY SITES OF A CERTAIN TYPE — getfrsnearby","title":"DRAFTING A FUNCTION TO COUNT NEARBY SITES OF A CERTAIN TYPE — getfrsnearby","text":"DRAFTING FUNCTION COUNT NEARBY SITES CERTAIN TYPE","code":""},{"path":"https://usepa.github.io/EJAM/reference/getfrsnearby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFTING A FUNCTION TO COUNT NEARBY SITES OF A CERTAIN TYPE — getfrsnearby","text":"","code":"getfrsnearby(sitepoints, frspoints, radius = 1, quadtree = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/getfrsnearby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFTING A FUNCTION TO COUNT NEARBY SITES OF A CERTAIN TYPE — getfrsnearby","text":"sitepoints sitepoints frspoints frspoints radius radius quadtree quadtree","code":""},{"path":"https://usepa.github.io/EJAM/reference/getfrsnearby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DRAFTING A FUNCTION TO COUNT NEARBY SITES OF A CERTAIN TYPE — getfrsnearby","text":"table","code":""},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"Like getblocksnearby(), blocks polygon rather blocks near facility. analyzing residents certain zones places elevated risk, redlined areas, watersheds, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"","code":"get_blockpoints_in_shape(   polys,   addedbuffermiles = 0,   blocksnearby = NULL,   dissolved = FALSE,   safety_margin_ratio = 1.1,   crs = 4269,   updateProgress = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"polys Spatial data sf::st_as_sf(), points shapefile_from_sitepoints(), table points lat,lon columns first converted using function, polygons addedbuffermiles width optional buffering add points (edges), miles blocksnearby optional table blocks blockid, etc (lat,lon can looked blockpoints dt) dissolved TRUE, use sf::st_union(polys) find unique blocks inside one polys safety_margin_ratio multiplied addedbuffermiles, far search blocks nearby using getblocksnearby(), using found intersection via sf:: crs used st_as_sf() st_transform() shape_buffered_from_shapefile_points(), crs = 4269 Geodetic CRS NAD83 updateProgress optional Shiny progress bar update","code":""},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"Block points table blocks whose internal point inside buffer just circular buffer specified radius polys just points.","code":""},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"uses getblocksnearby() get fast rough/good estimate US block points nearby (safety margin - see param ), using sf:: carefully identify candidate blocks actually inside polygon (e.g., circle) according sf:: methods. circular buffers, just using getblocksnearby() work need function. noncircular polygons, buffered , function provide way quickly filter millions US blocks examined sf:: join / intersect, since otherwise takes forever sf:: check US blocks.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/get_blockpoints_in_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all Census blocks in a polygon, using internal point of block — get_blockpoints_in_shape","text":"","code":"# y <- get_blockpoints_in_shape()    # x = shapefile_from_sitepoints(testpoints_n(2))   # y = get_blockpoints_in_shape(x, 1)  # very very slow"},{"path":"https://usepa.github.io/EJAM/reference/high_pctiles_tied_with_min.html","id":null,"dir":"Reference","previous_headings":"","what":"high_pctiles_tied_with_min (DATA) internal data used to handle cases where multiple places are tied for the lowest indicator score — high_pctiles_tied_with_min","title":"high_pctiles_tied_with_min (DATA) internal data used to handle cases where multiple places are tied for the lowest indicator score — high_pctiles_tied_with_min","text":"high_pctiles_tied_with_min (DATA) internal data used handle cases multiple places tied lowest indicator score","code":""},{"path":"https://usepa.github.io/EJAM/reference/indexblocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create localtree (a quadtree index of all US block centroids) in global environment — indexblocks","title":"Create localtree (a quadtree index of all US block centroids) in global environment — indexblocks","text":"Create localtree (quadtree index US block centroids) global environment","code":""},{"path":"https://usepa.github.io/EJAM/reference/indexblocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create localtree (a quadtree index of all US block centroids) in global environment — indexblocks","text":"","code":"indexblocks()"},{"path":"https://usepa.github.io/EJAM/reference/indexblocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create localtree (a quadtree index of all US block centroids) in global environment — indexblocks","text":"Returns TRUE done. Side effect creates index memory.","code":""},{"path":"https://usepa.github.io/EJAM/reference/indexblocks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create localtree (a quadtree index of all US block centroids) in global environment — indexblocks","text":"Note duplicated code .onAttach() also global.R .onAttach() can edited create package loads, takes time time developer rebuilds/installs package others load EJAM. also happen global.R already.","code":""},{"path":"https://usepa.github.io/EJAM/reference/input_names_listing.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility checking values of input$ that appear in this code — input_names_listing","title":"Utility checking values of input$ that appear in this code — input_names_listing","text":"See appsilon pkg shiny.info now","code":""},{"path":"https://usepa.github.io/EJAM/reference/input_names_listing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility checking values of input$ that appear in this code — input_names_listing","text":"","code":"input_names_listing(file = \"./R/app_server.R\")"},{"path":"https://usepa.github.io/EJAM/reference/input_names_listing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility checking values of input$ that appear in this code — input_names_listing","text":"file path source file search ","code":""},{"path":"https://usepa.github.io/EJAM/reference/input_names_listing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility checking values of input$ that appear in this code — input_names_listing","text":"character vector ids inputs like x,y,z found input$x input$y input$z","code":""},{"path":"https://usepa.github.io/EJAM/reference/islandareas.html","id":null,"dir":"Reference","previous_headings":"","what":"islandareas (DATA) table, bounds info on lat lon of US Island Areas — islandareas","title":"islandareas (DATA) table, bounds info on lat lon of US Island Areas — islandareas","text":"data.frame info approximate lat lon bounding boxes around American Samoa, Guam, Commonwealth Northern Mariana Islands (Northern Mariana Islands), United States Virgin Islands. See also stateinfo [] See http://www.census.gov/geo/reference/gtc/gtc_island.html See datacreate_islandareas.R data-raw/islandareas.xlsx Note US minor outlying islands list widely dispersed. include Midway Islands, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"Try figure user provided latitude / longitude vectors, data.frame, file, interactively pick file.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"","code":"latlon_any_format(x, y)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"x missing interactive mode RStudio, prompts user file. Otherwise, can filename (csv xlsx, path), data.frame/ data.table/ matrix, vector longitudes (case y must latitudes). Note even though called latlon_etc lon x comes lat among parameters x,y (unlike functions using lat,lon) File data.frame/data.table/matrix must columns called lat lon, names can inferred latlon_infer() y x vector longitudes, y must latitudes. Ignored otherwise.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"data.frame least columns lon lat (others x)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"function relies read_csv_or_xl()  latlon_df_clean() turn uses latlon_infer() latlon_as.numeric() latlon_is.valid() read_and_clean_points() EJAMejscreenapi general / flexible broadest way get points, still work progress similar done latlon_from_anything() except also uses functions: latlon_from_regid() latlon_from_programid()    _from_naics() ?","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_any_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_any_format","text":"","code":"if (FALSE) {  if (interactive()) {  pts <- latlon_from_anything()  }}  latlon_from_anything(testpoints_100[1:6,] ) #>        lat        lon sitenumber       sitename valid #> 1 40.66478  -74.89137          1 Example Site 1  TRUE #> 2 38.39657  -98.70086          2 Example Site 2  TRUE #> 3 40.34971  -79.84964          3 Example Site 3  TRUE #> 4 34.23836 -118.25343          4 Example Site 4  TRUE #> 5 41.35163  -85.13566          5 Example Site 5  TRUE #> 6 42.21061  -93.21535          6 Example Site 6  TRUE  latlon_from_anything(testpoints_100[1:6, c('lat','lon')] ) #>        lat        lon valid #> 1 40.66478  -74.89137  TRUE #> 2 38.39657  -98.70086  TRUE #> 3 40.34971  -79.84964  TRUE #> 4 34.23836 -118.25343  TRUE #> 5 41.35163  -85.13566  TRUE #> 6 42.21061  -93.21535  TRUE  latlon_from_anything(x=testpoints_100$lon[1:6], y=testpoints_100$lat[1:6] ) #>          lon      lat valid #> 1  -74.89137 40.66478  TRUE #> 2  -98.70086 38.39657  TRUE #> 3  -79.84964 40.34971  TRUE #> 4 -118.25343 34.23836  TRUE #> 5  -85.13566 41.35163  TRUE #> 6  -93.21535 42.21061  TRUE"},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip non-numeric characters from a vector — latlon_as.numeric","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"Remove characters minus signs, decimal points, numeric digits","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"","code":"latlon_as.numeric(x)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"x vector something supposed numbers like latitude longitude may character vector characters like tab space percent sign dollar sign","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"numeric vector length x","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"Useful latitude longitude vector spaces, tabs, etc. CAUTION - Assumes stripping making numeric fix whatever problem end result valid set numbers. Inf etc. turned NA values. Empty zero length string turned NA without warning. NA left NA. anything empty NA interpreted number, returns NA offers warning.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_as.numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip non-numeric characters from a vector — latlon_as.numeric","text":"","code":"latlon_as.numeric(c(\"-97.179167000000007\", \" -94.0533\", \"-95.152083000000005\")) #> Error in latlon_as.numeric(c(\"-97.179167000000007\", \" -94.0533\", \"-95.152083000000005\")): could not find function \"latlon_as.numeric\"   latlon_as.numeric(-3:3) #> Error in latlon_as.numeric(-3:3): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c(1:3, NA)) #> Error in latlon_as.numeric(c(1:3, NA)): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c(1, 'asdf')) #> Error in latlon_as.numeric(c(1, \"asdf\")): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c(1, '')) #> Error in latlon_as.numeric(c(1, \"\")): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c(1, '', NA)) #> Error in latlon_as.numeric(c(1, \"\", NA)): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c('aword', '$b')) #> Error in latlon_as.numeric(c(\"aword\", \"$b\")): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c('-10.5%', '<5', '$100')) #> Error in latlon_as.numeric(c(\"-10.5%\", \"<5\", \"$100\")): could not find function \"latlon_as.numeric\"   latlon_as.numeric(c(Inf, 1)) #> Error in latlon_as.numeric(c(Inf, 1)): could not find function \"latlon_as.numeric\""},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"Utility identify lat lon columns, renaming cleaning .","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"","code":"latlon_df_clean(df)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"df data.frame columns lat lon names can interpreted ","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"Returns data.frame relevant colnames changed lat lon, invalid lat lon values cleaned possible else replaced NA","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"Tries figure columns seem lat lon values, renames data.frame. Cleans lat lon values (removes extra characters, makes numeric)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_df_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat lon columns and clean up those latitude and longitude columns in a data.frame — latlon_df_clean","text":"","code":"#  x <- latlon_df_clean(x)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address.html","id":null,"dir":"Reference","previous_headings":"","what":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","title":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","text":"geocode, AOI package installed attached imports like tidygeocoder etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","text":"","code":"latlon_from_address(address, xy = FALSE, pt = FALSE, aoimap = FALSE, ...)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","text":"address vector addresses, tested 1 xy set TRUE want x,y returned, see help AOI pkg pt see help AOI pkg, return geometry set TRUE, allowing map. param provided ignored set TRUE aoimap=TRUE aoimap see help AOI pkg, create map set TRUE ... passed geocode() see help AOI pkg","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","text":"returns tibble table x,y lat,lon values geometries. see helpf AOI pkg","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocode, but only if AOI package is installed and attached\r\nand what it imports like tidygeocoder etc. — latlon_from_address","text":"","code":"# only works if AOI package installed already and attached too   # #test_addresses2b <- c(\"1200 Pennsylvania Ave, NW Washington DC\", \"Research Triangle Park\")   # #x <- geocode(test_addresses2b)   # out <- ejamit(x, radius = 3)   # fname = system.file(\"testdata/address/street_address_9.xlsx\", package=\"EJAM\")  #x1 <- EJAMejscreenapi::read_csv_or_xl(fname) #x2 <- latlon_any_format(fname) #x3 <- latlon_from_anything(fname) #names(x1) #names(x2)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address_table.html","id":null,"dir":"Reference","previous_headings":"","what":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","title":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","text":"get lat,lon table contains USPS addresses","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","text":"","code":"latlon_from_address_table(x)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","text":"x data.frame can missing interactive","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","text":"output latlon_from_address()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_address_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get lat,lon from table that contains USPS addresses — latlon_from_address_table","text":"","code":"address_from_table(test_address_table) #> [1] \"1200 Pennsylvania Ave Washington DC \" #> [2] \"5 pARK AVE NY NY \"                     ## fname <- system.file(\"testdata/address/street_address_9.xlsx\", package = \"EJAM\") ## pts <- address_from_table(fname)  pts <- latlon_from_address(test_addresses_9[1:2]) #> for this to work you would need to use library( AOI ) first #> Error in geocode(address, pt = pt, xy = xy, ...): could not find function \"geocode\" ## out <- ejamit(pts, radius = 1) ## ejam2report(out)  latlon_from_address_table(test_address_table) #> for this to work you would need to use library( AOI ) first #> Error in geocode(address, pt = pt, xy = xy, ...): could not find function \"geocode\" latlon_from_address_table(test_address_table_withfull) #> for this to work you would need to use library( AOI ) first #> Error in geocode(address, pt = pt, xy = xy, ...): could not find function \"geocode\" ## *** NOTE IT FAILS IF A COLUMN WITH STREET NAME ONLY IS CALLED \"address\" ##   instead of that storing the full address.  fixcolnames_infer(currentnames = test_address_parts1) #> [1] \"lat\"     \"lon\"     \"address\" \"street\"  \"city\"    \"state\"   \"zip\"     fixcolnames_infer(currentnames = names(test_address_table)) #> [1] \"Acol\"         \"street\"       \"city\"         \"state\"        \"zip\"          #> [6] \"other_column\""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"Try figure user provided latitude / longitude vectors, data.frame, file, interactively pick file.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"","code":"latlon_from_anything(x, y)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"x missing interactive mode RStudio, prompts user file. Otherwise, can filename (csv xlsx, path), data.frame/ data.table/ matrix, vector longitudes (case y must latitudes). Note even though called latlon_etc lon x comes lat among parameters x,y (unlike functions using lat,lon) File data.frame/data.table/matrix must columns called lat lon, names can inferred latlon_infer() y x vector longitudes, y must latitudes. Ignored otherwise.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"data.frame least columns lon lat (others x)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"function relies read_csv_or_xl()  latlon_df_clean() turn uses latlon_infer() latlon_as.numeric() latlon_is.valid() read_and_clean_points() EJAMejscreenapi general / flexible broadest way get points, still work progress similar done latlon_from_anything() except also uses functions: latlon_from_regid() latlon_from_programid()    _from_naics() ?","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_anything.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat/lon flexibly - from file, data.frame, data.table, or lat/lon vectors — latlon_from_anything","text":"","code":"if (FALSE) {  if (interactive()) {  pts <- latlon_from_anything()  }}  latlon_from_anything(testpoints_100[1:6,] ) #>        lat        lon sitenumber       sitename valid #> 1 40.66478  -74.89137          1 Example Site 1  TRUE #> 2 38.39657  -98.70086          2 Example Site 2  TRUE #> 3 40.34971  -79.84964          3 Example Site 3  TRUE #> 4 34.23836 -118.25343          4 Example Site 4  TRUE #> 5 41.35163  -85.13566          5 Example Site 5  TRUE #> 6 42.21061  -93.21535          6 Example Site 6  TRUE  latlon_from_anything(testpoints_100[1:6, c('lat','lon')] ) #>        lat        lon valid #> 1 40.66478  -74.89137  TRUE #> 2 38.39657  -98.70086  TRUE #> 3 40.34971  -79.84964  TRUE #> 4 34.23836 -118.25343  TRUE #> 5 41.35163  -85.13566  TRUE #> 6 42.21061  -93.21535  TRUE  latlon_from_anything(x=testpoints_100$lon[1:6], y=testpoints_100$lat[1:6] ) #>          lon      lat valid #> 1  -74.89137 40.66478  TRUE #> 2  -98.70086 38.39657  TRUE #> 3  -79.84964 40.34971  TRUE #> 4 -118.25343 34.23836  TRUE #> 5  -85.13566 41.35163  TRUE #> 6  -93.21535 42.21061  TRUE"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":null,"dir":"Reference","previous_headings":"","what":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"Get point locations US EPA-regulated facilities sources subject Maximum Achievable Control Technology (MACT) standards Clean Air Act.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"","code":"latlon_from_mactsubpart(subpart = \"JJJ\", include_if_no_latlon = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"subpart vector one strings indicating Subpart CFR Title 40 Part 63 covers source category interest, \"FFFF\" - see example, https://www.ecfr.gov/current/title-40/part-63/subpart-FFFF include_if_no_latlon logical - many database lack lat lon values MACT code","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"data.table columns named programid, subpart, title, lat, lon, REGISTRY_ID, program US EPA FRS sites MACT code. NA none found.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"See https://www.epa.gov/stationary-sources-air-pollution/national-emission-standards-hazardous-air-pollutants-neshap-8","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_mactsubpart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get point locations for US EPA-regulated facilities that have\r\nsources subject to Maximum Achievable Control Technology (MACT) standards\r\nunder the Clean Air Act. — latlon_from_mactsubpart","text":"","code":"mact_table #>     subpart #> 1         A #> 2        AA #> 3      AAAA #> 4     AAAAA #> 5   AAAAAAA #> 6         B #> 7        BB #> 8     BBBBB #> 9    BBBBBB #> 10  BBBBBBB #> 11        C #> 12       CC #> 13      CCC #> 14     CCCC #> 15    CCCCC #> 16   CCCCCC #> 17  CCCCCCC #> 18        D #> 19       DD #> 20      DDD #> 21     DDDD #> 22    DDDDD #> 23   DDDDDD #> 24  DDDDDDD #> 25        E #> 26       EE #> 27      EEE #> 28     EEEE #> 29    EEEEE #> 30  EEEEEEE #> 31        F #> 32     FFFF #> 33    FFFFF #> 34   FFFFFF #> 35        G #> 36       GG #> 37      GGG #> 38     GGGG #> 39    GGGGG #> 40        H #> 41       HH #> 42      HHH #> 43     HHHH #> 44    HHHHH #> 45   HHHHHH #> 46  HHHHHHH #> 47        I #> 48       II #> 49      III #> 50     IIII #> 51    IIIII #> 52        J #> 53       JJ #> 54      JJJ #> 55     JJJJ #> 56    JJJJJ #> 57   JJJJJJ #> 58       KK #> 59     KKKK #> 60    KKKKK #> 61        L #> 62       LL #> 63      LLL #> 64    LLLLL #> 65   LLLLLL #> 66        M #> 67       MM #> 68      MMM #> 69     MMMM #> 70    MMMMM #> 71   MMMMMM #> 72        N #> 73      NNN #> 74     NNNN #> 75    NNNNN #> 76   NNNNNN #> 77        O #> 78       OO #> 79      OOO #> 80     OOOO #> 81   OOOOOO #> 82       PP #> 83      PPP #> 84     PPPP #> 85    PPPPP #> 86   PPPPPP #> 87        Q #> 88       QQ #> 89     QQQQ #> 90    QQQQQ #> 91   QQQQQQ #> 92        R #> 93       RR #> 94      RRR #> 95     RRRR #> 96    RRRRR #> 97   RRRRRR #> 98        S #> 99       SS #> 100    SSSS #> 101   SSSSS #> 102  SSSSSS #> 103       T #> 104      TT #> 105     TTT #> 106    TTTT #> 107   TTTTT #> 108  TTTTTT #> 109       U #> 110      UU #> 111     UUU #> 112    UUUU #> 113   UUUUU #> 114      VV #> 115     VVV #> 116    VVVV #> 117  VVVVVV #> 118       W #> 119      WW #> 120    WWWW #> 121   WWWWW #> 122  WWWWWW #> 123       X #> 124      XX #> 125     XXX #> 126    XXXX #> 127  XXXXXX #> 128       Y #> 129      YY #> 130    YYYY #> 131   YYYYY #> 132  YYYYYY #> 133     ZZZ #> 134    ZZZZ #> 135   ZZZZZ #> 136  ZZZZZZ #>                                                                            title #> 1                                                             GENERAL PROVISIONS #> 2                                            PHOSPERIC ACID MANUFACTURING PLANTS #> 3                                                MUNICIPAL SOLID WASTE LANDFILLS #> 4                                                      LIME MANUFACTURING PLANTS #> 5              AREA SOURCE: ASPHALT PROCESSING AND ASPHALT ROOFING MANUFACTURING #> 6                    REQ FOR CONTROL TECHNOLOGY DETERMINATIONS FOR MAJOR SOURCES #> 7                                                          PHOSPHATE FERTILIZERS #> 8                                                    SEMICONDUCTOR MANUFACTURING #> 9     GASOLINE DISTRIBUTION BULK TERMINALS, BULK PLANTS, AND PIPELINE FACILITIES #> 10                                   AREA SOURCE: CHEMICAL PREPARATIONS INDUSTRY #> 11                                                            DELISTINGS OF HAPS #> 12                                                          PETROLEUM REFINERIES #> 13                      STEEL PICKLING-HCI PROCESS FACILITIES AND HCI REG PLANTS #> 14                                            MANUFACTURING OF NUTRITIONAL YEAST #> 15                             COKE OVENS: PUSHING, QUENCHING AND BATTERY STACKS #> 16                                                GASOLINE DISPENSING FACILITIES #> 17                          AREA SOURCE: PAINT AND ALLIED PRODUCTS MANUFACTURING #> 18                                       COMPLIANCE EXTENSION, EARLY HAP REDUCTN #> 19                                        OFF-SITE WASTE AND RECOVERY OPERATIONS #> 20                                                       MINERAL WOOL PRODUCTION #> 21                                           PLYWOOD AND COMPOSITE WOOD PRODUCTS #> 22   MAJOR SOURCES: INDUSTRIAL/COMMERCIAL/INSTITUTIONAL BOILERS & PROCESS HEATER #> 23                     POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION AREA SOURCES #> 24                                               AREA SOURCE: PREPARED FEEDS MFG #> 25                         APPROVAL OF STATE PROGRAMS &  DELEGATION OF AUTHORITY #> 26                                                 MAGNETIC TAPE MFG. OPERATIONS #> 27                                                    HAZARDOUS WASTE COMBUSTORS #> 28                                   ORGANIC LIQUIDS DISTRIBUTION (NON-GASOLINE) #> 29                                                      IRON AND STEEL FOUNDRIES #> 30                          AREA SOURCE: GOLD MINE ORE PROCESSING AND PRODUCTION #> 31                                SYNTHETIC HAZARDOUS ORGANICS (SOCMI) STANDARDS #> 32                            MISCELLANEOUS ORGANIC CHEMICAL MANUFACTURING (MON) #> 33                            INTEGRATED IRON AND STEEL MANUFACTURING FACILITIES #> 34                                        SECONDARY COPPER SMELTING AREA SOURCES #> 35         SOCMI PROCESS VENTS, STORAGE VESSELS, TRANSFER OPERATIONS, WASTEWATER #> 36                                                       AEROSPACE MFG. & REWORK #> 37                                                  PHARMACEUTICAL MANUFACTURING #> 38                               SOLVENT EXTRACTION FOR VEGETABLE OIL PRODUCTION #> 39                                                              SITE REMEDIATION #> 40                                         EQUIPMENT LEAKS OF HAZARDOUS ORGANICS #> 41                                     OIL AND NATURAL GAS PRODUCTION FACILITIES #> 42                                 NATURAL GAS TRANSMISSION & STORAGE FACILITIES #> 43                                          WET FORMED FIBERGLASS MAT PRODUCTION #> 44                                           MISCELLANEOUS COATING MANUFACTURING #> 45                 PAINT STRIP & MISC SURFACE COATING OPERATIONS AT AREA SOURCES #> 46                                  POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION #> 47                                      NEGOTIATED REGS: EQUIP LEAKS, HAZ-ORGNCS #> 48                                                    SHIPBUILDING & SHIP REPAIR #> 49                                         FLEXIBLE POLYURETHANE FOAM PRODUCTION #> 50                                 SURFACE COATING OF AUTO AND LIGHT DUTY TRUCKS #> 51                       MERCURY EMISSIONS FROM MERCURY CELL CHLOR-ALKALI PLANTS #> 52                                  POLYVINYL CHLORIDE AND COPOLYMERS PRODUCTION #> 53                                       WOOD FURNITURE MANUFACTURING OPERATIONS #> 54                                                  GROUP IV POLYMERS AND RESINS #> 55                                                    PAPER & OTHER WEB COATINGS #> 56                                BRICK & STRUCTURAL CLAY PRODUCTS MANUFACTURING #> 57                INDUSTRIAL, COMMERCIAL, AND INSTITUTIONAL BOILERS AREA SOURCES #> 58                                                         PRINTING & PUBLISHING #> 59                                                 SURFACE COATING OF METAL CANS #> 60                                                   CLAY CERAMICS MANUFACTURING #> 61                                                           COKE OVEN BATTERIES #> 62                                             PRIMARY ALUMINUM REDUCTION PLANTS #> 63                                                        PORTLAND CEMENT PLANTS #> 64                          ASPHALT PROCESSING AND ASPHALT ROOFING MANUFACTURING #> 65                         ACRYLIC AND MODACRYLIC FIBERS PRODUCTION AREA SOURCES #> 66                                                DRY CLEANERS PERCHLOROETHYLENE #> 67                            CHEMICAL RECOVERY COMBUSTION SOURCES AT PULP MILLS #> 68                                        PESTICIDE ACTIVE INGREDIENT PRODUCTION #> 69                             SURFACE COATING OF MISC. METAL PARTS AND PRODUCTS #> 70                             FLEXIBLE POLYURETHANE FOAM FABRICATION OPERATIONS #> 71                                          CARBON BLACK PRODUCTION AREA SOURCES #> 72                                                       CHROMIUM ELECTROPLATING #> 73                                                 WOOL FIBERGLASS MANUFACTURING #> 74                                           SURFACE COATING OF LARGE APPLIANCES #> 75                                                  HYDROCHLORIC ACID PRODUCTION #> 76                       CHEMICAL MANUFACTURING AREA SOURCES: CHROMIUM COMPOUNDS #> 77                                                    ETHYLENE OXIDE STERILIZERS #> 78                                                      TANK STANDARDS - LEVEL 1 #> 79                                          MANUFACTURE OF AMINO/PHENOLIC RESINS #> 80                    PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES #> 81                            FLEXIBLE POLYURETHANE FOAM PROD & FAB AREA SOURCES #> 82                                                           CONTAINER STANDARDS #> 83                                                  POLYETHER POLYOLS PRODUCTION #> 84                                 SURFACE COATING OF PLASTIC PARTS AND PRODUCTS #> 85                                                      ENGINE TEST CELLS/STANDS #> 86                                  LEAD ACID BATTERY MANUFACTURING AREA SOURCES #> 87                                             INDUSTRIAL PROCESS COOLING TOWERS #> 88                                                           SURFACE IMPOUNDMENT #> 89                                     SURFACE COATING OF WOOD BUILDING PRODUCTS #> 90                                   FRICTION MATERIALS MANUFACTURING FACILITIES #> 91                                                  WOOD PERSERVING AREA SOURCES #> 92                                                         GASOLINE DISTRIBUTION #> 93                                                      INDIVIDUAL DRAIN SYSTEMS #> 94                                                 SECONDARY ALUMINUM PRODUCTION #> 95                                            SURFACE COATING OF METAL FURNITURE #> 96                                                  TACONITE IRON ORE PROCESSING #> 97                                                CLAY CERAMICS MFG AREA SOURCES #> 98                                                                PULP AND PAPER #> 99  CLOSED VENT SYS/CTRL DEVICES, RECOVERY DEVICES, ROUTING TO FUEL GAS SYS/PROC #> 100                                                SURFACE COATING OF METAL COIL #> 101                                            REFRACTORY PRODUCTS MANUFACTURING #> 102                                                       GLASS MFG AREA SOURCES #> 103                                                 HALOGENATED SOLVENT CLEANING #> 104                                            EQUIPMENT LEAKS - CONTROL LEVEL 1 #> 105                                                        PRIMARY LEAD SMELTING #> 106                                                 LEATHER FINISHING OPERATIONS #> 107                                                   PRIMARY MAGNESIUM REFINING #> 108                          SECONDARY NONFERROUS METALS PROCESSING AREA SOURCES #> 109                                                  GROUP 1 POLYMERS AND RESINS #> 110                                                  EQUIP LEAKS-CONTROL LEVEL 2 #> 111                                   PETROLEUM REFINERIES: CCU'S, CRU'S & SRU'S #> 112                                              CELLULOSE PRODUCT MANUFACTURING #> 113                                                     COAL & OIL-FIRED EUSGU'S #> 114                                         OIL-WATER & ORGANIC-WATER SEPARATORS #> 115                                               PUBLICLY OWNED TREATMENT WORKS #> 116                                                           BOAT MANUFACTURING #> 117                                          CHEMICAL MANUFACTURING AREA SOURCES #> 118                               EPOXY RESINS & NON-NYLON POLYAMIDES PRODUCTION #> 119                                     STORAGE VESSELS (TANKS)- CONTROL LEVEL 2 #> 120                                     REINFORCED PLASTIC COMPOSITES PRODUCTION #> 121                                          HOSPITAL ETHYLENE OXIDE STERILIZERS #> 122                                AREA SOURCE: PLATING AND POLISHING OPERATIONS #> 123                                                      SECONDARY LEAD SMELTERS #> 124                       ETHYLENE MPF: HEAT EXCHANGE SYSTEMS & WASTE OPERATIONS #> 125                                                        FERROALLOY PRODUCTION #> 126                                                    RUBBER TIRE MANUFACTURING #> 127          AREA SOURCE: NINE METAL FABRICATION AND FINISHING SOURCE CATEGORIES #> 128                            MARINE TANK VESSEL LOADING & UNLOADING OPERATIONS #> 129                                                       GENERIC MACT STANDARDS #> 130                                               STATIONARY COMBUSTION TURBINES #> 131                     AREA SOURCE: ELECTRIC ARC FURNACE STEELMAKING FACILITIES #> 132                               AREA SOURCE: FERROALLOYS PRODUCTION FACILITIES #> 133                                                         CHEMICAL SECTOR RULE #> 134                  STATIONARY RECIPROCATING INTERNAL COMBUSTION ENGINES (RICE) #> 135                                        IRON AND STEEL FOUNDRIES AREA SOURCES #> 136                   AREA SOURCE: ALUMINUM, COPPER & OTHER NONFERROUS FOUNDRIES #>                                                                                  dropdown_label #> 1                                                                A - General Provisions (5,052) #> 2                                                 AA - Phosperic Acid Manufacturing Plants (15) #> 3                                                  AAAA - Municipal Solid Waste Landfills (711) #> 4                                                        AAAAA - Lime Manufacturing Plants (45) #> 5              AAAAAAA - Area Source: Asphalt Processing And Asphalt Roofing Manufacturing (34) #> 6                          B - Req For Control Technology Determinations For Major Sources (81) #> 7                                                               BB - Phosphate Fertilizers (15) #> 8                                                      BBBBB - Semiconductor Manufacturing (45) #> 9     BBBBBB - Gasoline Distribution Bulk Terminals, Bulk Plants, And Pipeline Facilities (943) #> 10                                    BBBBBBB - Area Source: Chemical Preparations Industry (3) #> 11                                                                   C - Delistings Of Haps (1) #> 12                                                              CC - Petroleum Refineries (186) #> 13                          CCC - Steel Pickling-Hci Process Facilities And Hci Reg Plants (51) #> 14                                                CCCC - Manufacturing Of Nutritional Yeast (6) #> 15                               CCCCC - Coke Ovens: Pushing, Quenching And Battery Stacks (27) #> 16                                              CCCCCC - Gasoline Dispensing Facilities (1,700) #> 17                          CCCCCCC - Area Source: Paint And Allied Products Manufacturing (40) #> 18                                              D - Compliance Extension, Early Hap Reductn (5) #> 19                                             DD - Off-Site Waste And Recovery Operations (97) #> 20                                                           DDD - Mineral Wool Production (13) #> 21                                             DDDD - Plywood And Composite Wood Products (392) #> 22  DDDDD - Major Sources: Industrial/Commercial/Institutional Boilers & Process Heater (2,737) #> 23                       DDDDDD - Polyvinyl Chloride And Copolymers Production Area Sources (7) #> 24                                              DDDDDDD - Area Source: Prepared Feeds Mfg (123) #> 25                                E - Approval Of State Programs &  Delegation Of Authority (1) #> 26                                                      EE - Magnetic Tape Mfg. Operations (11) #> 27                                                       EEE - Hazardous Waste Combustors (139) #> 28                                     EEEE - Organic Liquids Distribution (Non-Gasoline) (322) #> 29                                                        EEEEE - Iron And Steel Foundries (92) #> 30                           EEEEEEE - Area Source: Gold Mine Ore Processing And Production (3) #> 31                                     F - Synthetic Hazardous Organics (Socmi) Standards (269) #> 32                              FFFF - Miscellaneous Organic Chemical Manufacturing (Mon) (394) #> 33                              FFFFF - Integrated Iron And Steel Manufacturing Facilities (19) #> 34                                          FFFFFF - Secondary Copper Smelting Area Sources (1) #> 35              G - Socmi Process Vents, Storage Vessels, Transfer Operations, Wastewater (304) #> 36                                                           GG - Aerospace Mfg. & Rework (159) #> 37                                                      GGG - Pharmaceutical Manufacturing (76) #> 38                                 GGGG - Solvent Extraction For Vegetable Oil Production (102) #> 39                                                               GGGGG - Site Remediation (146) #> 40                                              H - Equipment Leaks Of Hazardous Organics (342) #> 41                                       HH - Oil And Natural Gas Production Facilities (3,656) #> 42                                    HHH - Natural Gas Transmission & Storage Facilities (107) #> 43                                              HHHH - Wet Formed Fiberglass Mat Production (8) #> 44                                            HHHHH - Miscellaneous Coating Manufacturing (182) #> 45               HHHHHH - Paint Strip & Misc Surface Coating Operations At Area Sources (3,169) #> 46                                  HHHHHHH - Polyvinyl Chloride And Copolymers Production (21) #> 47                                            I - Negotiated Regs: Equip Leaks, Haz-Orgncs (47) #> 48                                                         II - Shipbuilding & Ship Repair (96) #> 49                                             III - Flexible Polyurethane Foam Production (42) #> 50                                   IIII - Surface Coating Of Auto And Light Duty Trucks (116) #> 51                         IIIII - Mercury Emissions From Mercury Cell Chlor-Alkali Plants (12) #> 52                                         J - Polyvinyl Chloride And Copolymers Production (9) #> 53                                           JJ - Wood Furniture Manufacturing Operations (522) #> 54                                                      JJJ - Group Iv Polymers And Resins (63) #> 55                                                      JJJJ - Paper & Other Web Coatings (311) #> 56                                  JJJJJ - Brick & Structural Clay Products Manufacturing (98) #> 57                JJJJJJ - Industrial, Commercial, And Institutional Boilers Area Sources (740) #> 58                                                             KK - Printing & Publishing (395) #> 59                                                    KKKK - Surface Coating Of Metal Cans (60) #> 60                                                      KKKKK - Clay Ceramics Manufacturing (7) #> 61                                                                 L - Coke Oven Batteries (28) #> 62                                                  LL - Primary Aluminum Reduction Plants (16) #> 63                                                           LLL - Portland Cement Plants (121) #> 64                            LLLLL - Asphalt Processing And Asphalt Roofing Manufacturing (19) #> 65                           LLLLLL - Acrylic And Modacrylic Fibers Production Area Sources (2) #> 66                                                   M - Dry Cleaners Perchloroethylene (8,763) #> 67                                MM - Chemical Recovery Combustion Sources At Pulp Mills (117) #> 68                                            MMM - Pesticide Active Ingredient Production (30) #> 69                               MMMM - Surface Coating Of Misc. Metal Parts And Products (775) #> 70                                MMMMM - Flexible Polyurethane Foam Fabrication Operations (9) #> 71                                            MMMMMM - Carbon Black Production Area Sources (4) #> 72                                                          N - Chromium Electroplating (1,185) #> 73                                                     NNN - Wool Fiberglass Manufacturing (24) #> 74                                              NNNN - Surface Coating Of Large Appliances (20) #> 75                                                    NNNNN - Hydrochloric Acid Production (29) #> 76                         NNNNNN - Chemical Manufacturing Area Sources: Chromium Compounds (3) #> 77                                                         O - Ethylene Oxide Sterilizers (111) #> 78                                                           OO - Tank Standards - Level 1 (16) #> 79                                              OOO - Manufacture Of Amino/Phenolic Resins (39) #> 80                      OOOO - Printing, Coating And Dyeing Of Fabrics And Other Textiles (101) #> 81                             OOOOOO - Flexible Polyurethane Foam Prod & Fab Area Sources (43) #> 82                                                                PP - Container Standards (16) #> 83                                                      PPP - Polyether Polyols Production (31) #> 84                                   PPPP - Surface Coating Of Plastic Parts And Products (396) #> 85                                                        PPPPP - Engine Test Cells/Stands (30) #> 86                                   PPPPPP - Lead Acid Battery Manufacturing Area Sources (29) #> 87                                                  Q - Industrial Process Cooling Towers (115) #> 88                                                                 QQ - Surface Impoundment (2) #> 89                                        QQQQ - Surface Coating Of Wood Building Products (80) #> 90                                      QQQQQ - Friction Materials Manufacturing Facilities (3) #> 91                                                   QQQQQQ - Wood Perserving Area Sources (37) #> 92                                                              R - Gasoline Distribution (562) #> 93                                                           RR - Individual Drain Systems (18) #> 94                                                    RRR - Secondary Aluminum Production (340) #> 95                                               RRRR - Surface Coating Of Metal Furniture (31) #> 96                                                     RRRRR - Taconite Iron Ore Processing (6) #> 97                                                  RRRRRR - Clay Ceramics Mfg Area Sources (4) #> 98                                                                     S - Pulp And Paper (134) #> 99       SS - Closed Vent Sys/Ctrl Devices, Recovery Devices, Routing To Fuel Gas Sys/Proc (94) #> 100                                                   SSSS - Surface Coating Of Metal Coil (66) #> 101                                               SSSSS - Refractory Products Manufacturing (4) #> 102                                                        SSSSSS - Glass Mfg Area Sources (16) #> 103                                                    T - Halogenated Solvent Cleaning (1,255) #> 104                                                 TT - Equipment Leaks - Control Level 1 (13) #> 105                                                             TTT - Primary Lead Smelting (2) #> 106                                                    TTTT - Leather Finishing Operations (14) #> 107                                                      TTTTT - Primary Magnesium Refining (5) #> 108                           TTTTTT - Secondary Nonferrous Metals Processing Area Sources (10) #> 109                                                        U - Group 1 Polymers And Resins (28) #> 110                                                       UU - Equip Leaks-Control Level 2 (86) #> 111                                      UUU - Petroleum Refineries: Ccu's, Cru's & Sru's (126) #> 112                                                 UUUU - Cellulose Product Manufacturing (15) #> 113                                                      UUUUU - Coal & Oil-Fired Eusgu's (249) #> 114                                              VV - Oil-Water & Organic-Water Separators (16) #> 115                                                   VVV - Publicly Owned Treatment Works (18) #> 116                                                             VVVV - Boat Manufacturing (237) #> 117                                          VVVVVV -  Chemical Manufacturing Area Sources (81) #> 118                                     W - Epoxy Resins & Non-Nylon Polyamides Production (10) #> 119                                          WW - Storage Vessels (Tanks)- Control Level 2 (54) #> 120                                       WWWW - Reinforced Plastic Composites Production (729) #> 121                                           WWWWW - Hospital Ethylene Oxide Sterilizers (111) #> 122                                WWWWWW - Area Source: Plating And Polishing Operations (222) #> 123                                                            X - Secondary Lead Smelters (22) #> 124                            XX - Ethylene Mpf: Heat Exchange Systems & Waste Operations (23) #> 125                                                             XXX - Ferroalloy Production (4) #> 126                                                       XXXX - Rubber Tire Manufacturing (33) #> 127          XXXXXX - Area Source: Nine Metal Fabrication And Finishing Source Categories (228) #> 128                                 Y - Marine Tank Vessel Loading & Unloading Operations (185) #> 129                                                            YY - Generic Mact Standards (90) #> 130                                                 YYYY - Stationary Combustion Turbines (248) #> 131                       YYYYY - Area Source: Electric Arc Furnace Steelmaking Facilities (48) #> 132                                 YYYYYY - Area Source: Ferroalloys Production Facilities (6) #> 133                                                              ZZZ - Chemical Sector Rule (4) #> 134                 ZZZZ - Stationary Reciprocating Internal Combustion Engines (Rice) (25,996) #> 135                                         ZZZZZ - Iron And Steel Foundries Area Sources (149) #> 136                    ZZZZZZ - Area Source: Aluminum, Copper & Other Nonferrous Foundries (29) #>         N #> 1    5052 #> 2      15 #> 3     711 #> 4      45 #> 5      34 #> 6      81 #> 7      15 #> 8      45 #> 9     943 #> 10      3 #> 11      1 #> 12    186 #> 13     51 #> 14      6 #> 15     27 #> 16   1700 #> 17     40 #> 18      5 #> 19     97 #> 20     13 #> 21    392 #> 22   2737 #> 23      7 #> 24    123 #> 25      1 #> 26     11 #> 27    139 #> 28    322 #> 29     92 #> 30      3 #> 31    269 #> 32    394 #> 33     19 #> 34      1 #> 35    304 #> 36    159 #> 37     76 #> 38    102 #> 39    146 #> 40    342 #> 41   3656 #> 42    107 #> 43      8 #> 44    182 #> 45   3169 #> 46     21 #> 47     47 #> 48     96 #> 49     42 #> 50    116 #> 51     12 #> 52      9 #> 53    522 #> 54     63 #> 55    311 #> 56     98 #> 57    740 #> 58    395 #> 59     60 #> 60      7 #> 61     28 #> 62     16 #> 63    121 #> 64     19 #> 65      2 #> 66   8763 #> 67    117 #> 68     30 #> 69    775 #> 70      9 #> 71      4 #> 72   1185 #> 73     24 #> 74     20 #> 75     29 #> 76      3 #> 77    111 #> 78     16 #> 79     39 #> 80    101 #> 81     43 #> 82     16 #> 83     31 #> 84    396 #> 85     30 #> 86     29 #> 87    115 #> 88      2 #> 89     80 #> 90      3 #> 91     37 #> 92    562 #> 93     18 #> 94    340 #> 95     31 #> 96      6 #> 97      4 #> 98    134 #> 99     94 #> 100    66 #> 101     4 #> 102    16 #> 103  1255 #> 104    13 #> 105     2 #> 106    14 #> 107     5 #> 108    10 #> 109    28 #> 110    86 #> 111   126 #> 112    15 #> 113   249 #> 114    16 #> 115    18 #> 116   237 #> 117    81 #> 118    10 #> 119    54 #> 120   729 #> 121   111 #> 122   222 #> 123    22 #> 124    23 #> 125     4 #> 126    33 #> 127   228 #> 128   185 #> 129    90 #> 130   248 #> 131    48 #> 132     6 #> 133     4 #> 134 25996 #> 135   149 #> 136    29   latlon_from_mactsubpart(\"OOOO\", include_if_no_latlon = FALSE) # default #> Connecting to Posit Connect 2024.01.0 at #> <https://rstudio-connect.dmap-stage.aws.epa.gov> #> Successfully connected to Posit Connect pins board. #>  #> frs_by_mact   - is NOT in memory. Checking local disk... frs_by_mact  is NOT found locally on disk at ~/../Downloads/EJAMbigfiles/frs_by_mact.arrow  #> frs_by_mact   - is NOT in local folder. #> frs_by_mact  - was read from pins board server, into memory (to specified envir). #>  #> Key: <subpart, programid> #>              programid subpart #>                 <char>  <char> #>  1: 080000003800500001    OOOO #>  2: 0900000006111R9011    OOOO #>  3: AR0000000500100022    OOOO #>  4: CO0000000812300098    OOOO #>  5: CT0000000900500003    OOOO #>  6: CT0000000901501138    OOOO #>  7: GA0000001318900002    OOOO #>  8: KS0000002013300027    OOOO #>  9: MA0000002512000290    OOOO #> 10: MA0000002512100102    OOOO #> 11: MI00000000000P0634    OOOO #> 12: MO0000002918901012    OOOO #> 13: MS0000002808100088    OOOO #> 14: MT0000003007500005    OOOO #> 15: NC0000003701800493    OOOO #> 16: NC0000003705100014    OOOO #> 17: NC0000003708100164    OOOO #> 18: NH0000003301100129    OOOO #> 19: NY0000005532600004    OOOO #> 20: NY0000006301300065    OOOO #> 21: OH0000000616010036    OOOO #> 22: OH0000001667060088    OOOO #> 23:        PA000492043    OOOO #> 24: RI0000004400900010    OOOO #> 25:      SC00000800027    OOOO #> 26:      SC00002000032    OOOO #> 27:      SC00012000029    OOOO #> 28:      SC00018800040    OOOO #> 29: TN0000004706300275    OOOO #> 30: TN0000004716300007    OOOO #> 31: VA0000005115500016    OOOO #> 32: WI0000005502500072    OOOO #>              programid subpart #>                                                          title      lat #>                                                         <char>    <num> #>  1: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 47.97940 #>  2: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.22082 #>  3: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.27496 #>  4: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 40.27542 #>  5: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 41.61256 #>  6: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 41.66805 #>  7: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 33.44801 #>  8: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 37.68370 #>  9: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 41.60689 #> 10: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 42.72361 #> 11: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 42.88929 #> 12: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 38.76637 #> 13: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.27973 #> 14: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 45.11306 #> 15: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 35.72438 #> 16: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 35.36954 #> 17: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 35.25610 #> 18: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 42.75050 #> 19: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 43.11147 #> 20: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 43.21786 #> 21: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 40.26201 #> 22: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 41.16331 #> 23: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 40.20903 #> 24: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 41.44594 #> 25: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 33.56057 #> 26: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.61164 #> 27: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 35.01979 #> 28: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.78693 #> 29: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 36.16847 #> 30: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 36.56050 #> 31: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 37.04957 #> 32: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 43.11747 #>                                                          title      lat #>            lon  REGISTRY_ID program #>          <num>       <char>  <char> #>  1:  -99.02064 110000825867     AIR #>  2: -119.02272 110043415578     AIR #>  3:  -91.34179 110025082924     AIR #>  4: -104.80199 110001718053     AIR #>  5:  -73.08986 110039211064     AIR #>  6:  -71.91848 110001732554     AIR #>  7:  -82.53785 110000359406     AIR #>  8:  -95.46628 110000445938     AIR #>  9:  -70.90407 110000739675     AIR #> 10:  -70.96296 110000309773     AIR #> 11:  -85.63853 110067012878     AIR #> 12:  -90.47491 110000440381     AIR #> 13:  -88.76446 110013841432     AIR #> 14: -105.08569 110046594146     AIR #> 15:  -81.37813 110000350584     AIR #> 16:  -78.55103 110001478730     AIR #> 17:  -81.77920 110013792921     AIR #> 18:  -71.82836 110001522184     AIR #> 19:  -73.56985 110000582619     AIR #> 20:  -75.46524 110000325871     AIR #> 21:  -81.86949 110000384753     AIR #> 22:  -81.25312 110000766644     AIR #> 23:  -77.02432 110012697812     AIR #> 24:  -71.62625 110000312117     AIR #> 25:  -81.80997 110031367036     AIR #> 26:  -82.47996 110001664823     AIR #> 27:  -82.56309 110041625989     AIR #> 28:  -82.68964 110001667802     AIR #> 29:  -83.39178 110038045139     AIR #> 30:  -82.17101 110000913548     AIR #> 31:  -80.75514 110000343469     AIR #> 32:  -89.50733 110000419878     AIR #>            lon  REGISTRY_ID program   latlon_from_mactsubpart(\"OOOO\", include_if_no_latlon = TRUE) #> Key: <subpart, programid> #>               programid subpart #>                  <char>  <char> #>   1: 080000003800500001    OOOO #>   2: 0900000006111R9011    OOOO #>   3: AR0000000500100022    OOOO #>   4: AZMCA004013X138761    OOOO #>   5: CO0000000812300098    OOOO #>  ---                            #>  97: VA0000005115500016    OOOO #>  98: VA0000005116300001    OOOO #>  99: VA0000005159000002    OOOO #> 100: VA0000005170000091    OOOO #> 101: WI0000005502500072    OOOO #>                                                           title      lat #>                                                          <char>    <num> #>   1: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 47.97940 #>   2: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.22082 #>   3: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 34.27496 #>   4: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES       NA #>   5: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 40.27542 #>  ---                                                                     #>  97: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 37.04957 #>  98: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES       NA #>  99: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES       NA #> 100: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES       NA #> 101: PRINTING, COATING AND DYEING OF FABRICS AND OTHER TEXTILES 43.11747 #>             lon  REGISTRY_ID program #>           <num>       <char>  <char> #>   1:  -99.02064 110000825867     AIR #>   2: -119.02272 110043415578     AIR #>   3:  -91.34179 110025082924     AIR #>   4:         NA         <NA>    <NA> #>   5: -104.80199 110001718053     AIR #>  ---                                 #>  97:  -80.75514 110000343469     AIR #>  98:         NA         <NA>    <NA> #>  99:         NA         <NA>    <NA> #> 100:         NA         <NA>    <NA> #> 101:  -89.50733 110000419878     AIR"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":null,"dir":"Reference","previous_headings":"","what":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"Get lat lon, Registry ID, given NAICS industry code(s) Find EPA Facility Registry Service (FRS) sites exact NAICS code (subcategories)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"","code":"latlon_from_naics(naics, id_only = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"naics vector naics codes, data.table column named code, output naics_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"data.table (just data.frame) columns called lat, lon, REGISTRY_ID, NAICS (see id_only parameter)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"NOTE: many FRS sites lack NAICS code! Also, function find sites identified FRS data child NAICS (subcategory exact query)! Relies  frs_by_naics (data.table) See info NAICS industry codes https://www.naics.com/search","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_naics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — latlon_from_naics","text":"","code":"regid_from_naics(321114) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 18.41565  -66.20266 110000307837 321114 #>   2: 42.69898  -73.82309 110000324505 321114 #>   3: 41.71228  -73.93705 110000324809 321114 #>   4: 40.08626  -76.18172 110000333826 321114 #>   5: 40.18434  -74.79960 110000336253 321114 #>  ---                                         #> 493: 35.59275  -84.46818 110071307905 321114 #> 494: 35.42391  -87.28222 110071334308 321114 #> 495: 37.50455 -122.21792 110071380069 321114 #> 496: 39.79828 -104.99275 110071414306 321114 #> 497: 35.89974  -88.75981 110071434078 321114   latlon_from_naics(321114) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 18.41565  -66.20266 110000307837 321114 #>   2: 42.69898  -73.82309 110000324505 321114 #>   3: 41.71228  -73.93705 110000324809 321114 #>   4: 40.08626  -76.18172 110000333826 321114 #>   5: 40.18434  -74.79960 110000336253 321114 #>  ---                                         #> 493: 35.59275  -84.46818 110071307905 321114 #> 494: 35.42391  -87.28222 110071334308 321114 #> 495: 37.50455 -122.21792 110071380069 321114 #> 496: 39.79828 -104.99275 110071414306 321114 #> 497: 35.89974  -88.75981 110071434078 321114   latlon_from_naics(EJAM::naics_from_any(\"cheese\")[,code] ) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 44.18750  -75.95694 110000326102 311513 #>   2: 42.87593  -78.86949 110000326825 311513 #>   3: 42.83404  -78.82388 110000327183 311513 #>   4: 41.47924  -81.07851 110000385798 311513 #>   5: 43.59796  -85.14557 110000410207 311513 #>  ---                                         #> 397: 44.91011  -72.79787 110071292784 311513 #> 398: 42.84509  -90.69292 110071433364 311513 #> 399: 42.84416  -73.98835 110071433604 311513 #> 400: 32.87831 -111.78364 110071434204 311513 #> 401: 44.75453  -90.29649 110071498797 311513   head(latlon_from_naics(c(3366, 33661, 336611), id_only=TRUE)) #> [1] \"110000897290\" \"110000332621\" \"110000360564\" \"110000369869\" \"110000377333\" #> [6] \"110000448962\"   # mapfast(frs_from_naics(336611)) # simple map"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"Get lat lon, Registry ID, NAICS, given FRS Program System CATEGORY Find FRS sites program like RCRAINFO, TRIS, others","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"","code":"latlon_from_program(query)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"program like \"RMP\", \"RCRAINFO\", \"TRIS\", \"RMP\", others.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"data.table lat  lon  REGISTRY_ID  program -- pgm_sys_id since duplicates REGISTRY_ID 2 different pgm_sys_id values program, results sometimes longer using frs_from_program()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"info FRS program codes general, see https://www.epa.gov/frs/frs-program-crosswalks Also see information https://echo.epa.gov/tools/data-downloads/frs-download-summary file FRS_PROGRAM_LINKS.csv info program codes ECHO uses, see https://echo.epa.gov/resources/echo-data/--data including https://www.epa.gov/frs/frs-environmental-interest-types list program acronyms, https://www.epa.gov/frs/frs-rest-services#appendixa acronym abbreviated name represents name information management system environmental program. Federal ones least 100k facilities RCRAINFO (500k sites), NPDES, ICIS, AIR, FIS, EIS, AIRS/AFS.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_program.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System CATEGORY\r\n\r\nFind all FRS sites in a program like RCRAINFO, TRIS, or others — latlon_from_program","text":"","code":"if (FALSE) {  x = latlon_from_program(\"CAMDBS\")   mapfast(x)  program <- c(\"EIS\", \"UST\")  x = latlon_from_program(program)  # to get the facility name as well:  x = frs[grepl(\"RCRAINFO\", PGM_SYS_ACRNMS), ] # fast  ## x = latlon_from_regid(latlon_from_program(program)[,REGISTRY_ID])  # slower!  mapfast(x[sample(1:nrow(x), 1000), ]) }"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"Get lat lon, Registry ID, NAICS, given FRS Program System ID","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"","code":"latlon_from_programid(programid)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"programid like \"XJW000012435\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"data.table lat  lon  REGISTRY_ID  program   pgm_sys_id","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"ID identification number, permit number, assigned information management system represents facility site, waste site, operable unit, feature tracked Environmental Information System. Also note FRS API: https://www.epa.gov/frs/facility-registry-service-frs-api https://www.epa.gov/frs/frs-rest-services","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_programid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat lon, Registry ID, and NAICS, for given FRS Program System ID — latlon_from_programid","text":"","code":"latlon_from_programid(c(\"XJW000012435\", \"00768SRTRSROAD1\")) #>         lat        lon  REGISTRY_ID  program      pgm_sys_id #>       <num>      <num>       <char>   <char>          <char> #> 1: 48.39008 -122.50088 110071133925 RCRAINFO    XJW000012435 #> 2: 18.06229  -66.85967 110000307855     TRIS 00768SRTRSROAD1  pids <- c(\"7-0540-00003\", \"354362\", \"1513529\", \"485659\", \"LAG750956\",     \"CAC002995519\", \"3601252181\", \"3601439158\")  latlon_from_regid(latlon_from_programid(pids)[,REGISTRY_ID]) #>         lat        lon  REGISTRY_ID                  PRIMARY_NAME  NAICS    SIC #>       <num>      <num>       <char>                        <char> <char> <char> #> 1: 43.00028  -76.69323 110019033810 HEJAMADA CAMPGROUND & RV PARK          8999 #> 2: 38.22678 -121.02361 110066714951      CAMANCHE DAM POWER HOUSE          4911 #> 3: 41.38786  -73.43935 110044340807            NEJAME & SONS INC.               #> 4: 40.77499  -74.15929 110056111559      LA VEJAMA DISCOUNT STORE               #> 5: 30.25468  -90.94284 110056982323           GRACEJAMES ENT, LLC          7542 #> 6: 32.80406 -117.02753 110070538057             BEJAMIN HAFERTEPE               #> 7: 33.66110 -117.86959 110070874073                     EJAM INC.               #> 8: 33.70369 -117.86675 110071293460                      EJAM INC               #>           PGM_SYS_ACRNMS #>                   <char> #> 1:      FIS:7-0540-00003 #> 2:  CA-ENVIROVIEW:354362 #> 3:          SIMS:1513529 #> 4:       NJ-NJEMS:485659 #> 5:       NPDES:LAG750956 #> 6: RCRAINFO:CAC002995519 #> 7:       ICIS:3601252181 #> 8:       ICIS:3601439158  latlon_from_programid(c(\"XJW000012435\", \"00768SRTRSROAD1\", \"asdfsdf\"))[,.(lat,lon)] #>         lat        lon #>       <num>      <num> #> 1: 48.39008 -122.50088 #> 2: 18.06229  -66.85967 #> 3:       NA         NA"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_regid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","title":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","text":"Get lat lon (NAICS) via Facility Registry ID","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_regid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","text":"","code":"latlon_from_regid(regid)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_regid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","text":"regid Facility Registry Service ID like 110010052520","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_regid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","text":"data.table columns lat,lon,REGISTRY_ID,PRIMARY_NAME,NAICS,PGM_SYS_ACRNMS","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_regid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lat lon (and NAICS) via Facility Registry ID — latlon_from_regid","text":"","code":"latlon_from_regid(110070874073) #> Key: <REGISTRY_ID> #>        lat       lon  REGISTRY_ID PRIMARY_NAME  NAICS    SIC  PGM_SYS_ACRNMS #>      <num>     <num>       <char>       <char> <char> <char>          <char> #> 1: 33.6611 -117.8696 110070874073    EJAM INC.               ICIS:3601252181 x = latlon_from_regid(     c(110071293460, 110070874073, 110070538057, 110044340807,        110030509215, 110019033810, 110056111559, 110056982323)         )"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":null,"dir":"Reference","previous_headings":"","what":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"Get lat lon, Registry ID, given SIC industry code(s) Find EPA Facility Registry Service (FRS) sites exact SIC code (subcategories)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"","code":"latlon_from_sic(sic, id_only = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"sic vector SIC codes, data.table column named code, output sic_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"data.table (just data.frame) columns called lat, lon, REGISTRY_ID, SIC (see id_only parameter)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"NOTE: many FRS sites lack SIC code! Also, function find sites identified FRS data child SIC (subcategory exact query)! Relies  frs_by_sic (data.table) See info SIC industry codes https://www.naics.com/search","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_from_sic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — latlon_from_sic","text":"","code":"regid_from_sic('7300') #> Key: <SIC, REGISTRY_ID> #>          lat        lon  REGISTRY_ID    SIC #>        <num>      <num>       <char> <char> #>  1: 34.22987 -118.55510 110002900736   7300 #>  2: 41.08589  -74.33128 110004267800   7300 #>  3: 42.54940 -114.47859 110010752550   7300 #>  4: 34.01392 -118.19359 110011611648   7300 #>  5: 38.68731  -90.39718 110024449658   7300 #>  6: 40.73294  -74.06308 110030543437   7300 #>  7: 41.04292  -74.07526 110031793806   7300 #>  8: 40.40642  -74.66741 110032477861   7300 #>  9: 39.83567  -75.21408 110040259485   7300 #> 10: 34.06951 -118.34760 110065446244   7300 #> 11: 34.08792 -118.34194 110065723667   7300 #> 12: 34.27237 -118.42343 110065865282   7300 #> 13: 34.25945 -118.43181 110066299856   7300 #> 14: 34.10202 -118.32319 110066397241   7300 #> 15: 33.79480 -118.24245 110066691048   7300 #> 16: 33.99711 -118.30928 110066717627   7300   latlon_from_sic('7300') #> Key: <SIC, REGISTRY_ID> #>          lat        lon  REGISTRY_ID    SIC #>        <num>      <num>       <char> <char> #>  1: 34.22987 -118.55510 110002900736   7300 #>  2: 41.08589  -74.33128 110004267800   7300 #>  3: 42.54940 -114.47859 110010752550   7300 #>  4: 34.01392 -118.19359 110011611648   7300 #>  5: 38.68731  -90.39718 110024449658   7300 #>  6: 40.73294  -74.06308 110030543437   7300 #>  7: 41.04292  -74.07526 110031793806   7300 #>  8: 40.40642  -74.66741 110032477861   7300 #>  9: 39.83567  -75.21408 110040259485   7300 #> 10: 34.06951 -118.34760 110065446244   7300 #> 11: 34.08792 -118.34194 110065723667   7300 #> 12: 34.27237 -118.42343 110065865282   7300 #> 13: 34.25945 -118.43181 110066299856   7300 #> 14: 34.10202 -118.32319 110066397241   7300 #> 15: 33.79480 -118.24245 110066691048   7300 #> 16: 33.99711 -118.30928 110066717627   7300   latlon_from_sic(sic_from_any(\"cheese\")[,code] ) #> Key: <SIC, REGISTRY_ID> #>           lat        lon  REGISTRY_ID    SIC #>         <num>      <num>       <char> <char> #>   1: 44.18750  -75.95694 110000326102   2022 #>   2: 42.87593  -78.86949 110000326825   2022 #>   3: 42.83404  -78.82388 110000327183   2022 #>   4: 41.47924  -81.07851 110000385798   2022 #>   5: 43.59796  -85.14557 110000410207   2022 #>  ---                                         #> 363: 42.66670  -90.12916 110070384941   2022 #> 364: 38.23239 -122.59286 110070686024   2022 #> 365: 34.24911 -119.22682 110070816358   2022 #> 366: 43.01911  -84.54965 110070870126   2022 #> 367: 44.75453  -90.29649 110071498797   2022   head(latlon_from_sic(c('6150', '6300', '5995'), id_only=TRUE)) #> [1] \"110000346545\" \"110000524200\" \"110000528616\" \"110001362427\" \"110002218546\" #> [6] \"110007563252\"   # mapfast(frs_from_sic('6150')) # simple map"},{"path":"https://usepa.github.io/EJAM/reference/latlon_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","title":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","text":"Guess columns lat lon based aliases like latitude, FacLat, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","text":"","code":"latlon_infer(mycolnames)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","text":"mycolnames e.g., colnames(x) x data.frame read.csv","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","text":"returns mycolnames except replacing best candidates lat lon","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_infer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess which columns have lat and lon based on aliases like latitude, FacLat, etc. — latlon_infer","text":"","code":"latlon_infer(c('trilat', 'belong', 'belong')) # warns if no alias found,  #> Error in latlon_infer(c(\"trilat\", \"belong\", \"belong\")): could not find function \"latlon_infer\"     #  but doesnt warn of dupes in other terms, just preferred term.   latlon_infer(c('a', 'LONG', 'Longitude', 'lat')) # only the best alias is converted/used #> Error in latlon_infer(c(\"a\", \"LONG\", \"Longitude\", \"lat\")): could not find function \"latlon_infer\"   latlon_infer(c('a', 'LONGITUDE', 'Long', 'Lat')) # only the best alias is converted/used #> Error in latlon_infer(c(\"a\", \"LONGITUDE\", \"Long\", \"Lat\")): could not find function \"latlon_infer\"   latlon_infer(c('a', 'longing', 'Lat', 'lat', 'LAT')) # case variants of preferred are  #> Error in latlon_infer(c(\"a\", \"longing\", \"Lat\", \"lat\", \"LAT\")): could not find function \"latlon_infer\"       # left alone only if lowercase one is found   latlon_infer(c('LONG', 'long', 'lat')) # case variants of a single alias are  #> Error in latlon_infer(c(\"LONG\", \"long\", \"lat\")): could not find function \"latlon_infer\"       # converted to preferred word (if pref not found), creating dupes!  warn!   latlon_infer(c('LONG', 'LONG')) # dupes of an alias are renamed and still are dupes! warn! #> Error in latlon_infer(c(\"LONG\", \"LONG\")): could not find function \"latlon_infer\"   latlon_infer(c('lat', 'lat', 'Lon')) # dupes left as dupes but warn! #> Error in latlon_infer(c(\"lat\", \"lat\", \"Lon\")): could not find function \"latlon_infer\""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if lat lon not NA using !is.na() — latlon_is.available","title":"Check if lat lon not NA using !is.na() — latlon_is.available","text":"Check lat lon NA using !.na()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if lat lon not NA using !is.na() — latlon_is.available","text":"","code":"latlon_is.available(lat, lon)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if lat lon not NA using !is.na() — latlon_is.available","text":"lat vector latitudes lon vector longitudes","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if lat lon not NA using !is.na() — latlon_is.available","text":"logical vector, one element per lat lon pair (location)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.islandareas.html","id":null,"dir":"Reference","previous_headings":"","what":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","title":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","text":"See islandareas","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.islandareas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","text":"","code":"latlon_is.islandareas(lat, lon)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.islandareas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","text":"lat vector latitudes lon vector longitudes","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.islandareas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","text":"vector TRUE / FALSE values indicating given lat lon pair approximately one rough bounding boxes includes 4 Island Areas.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.islandareas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check lat lon coordinates to see if each is approx. in general area of US Island Areas Guam, USVI, Amer Samoa or N Marianas — latlon_is.islandareas","text":"","code":"if (FALSE) { # this would require the testpoints_1000 data from the EJAM package:   isles <- which(latlon_is.islandareas(lat = testpoints_1000$lat, lon = testpoints_1000$lon))   mapfast(testpoints_1000[isles, ]) # c(213,785)   which(!(latlon_is.usa(lat = testpoints_1000$lat, lon = testpoints_1000$lon))) }"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.possible.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if lat lon between -180 and +180 — latlon_is.possible","title":"Check if lat lon between -180 and +180 — latlon_is.possible","text":"Check lat lon -180 +180","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.possible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if lat lon between -180 and +180 — latlon_is.possible","text":"","code":"latlon_is.possible(lat, lon)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.possible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if lat lon between -180 and +180 — latlon_is.possible","text":"lat vector latitudes lon vector longitudes","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.possible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if lat lon between -180 and +180 — latlon_is.possible","text":"logical vector, one element per lat lon pair (location)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.usa.html","id":null,"dir":"Reference","previous_headings":"","what":"Check lat lon coordinates to see if each is approx. in general area of USA excluding Island Areas — latlon_is.usa","title":"Check lat lon coordinates to see if each is approx. in general area of USA excluding Island Areas — latlon_is.usa","text":"Check lat lon coordinates see approx. general area USA excluding Island Areas","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.usa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check lat lon coordinates to see if each is approx. in general area of USA excluding Island Areas — latlon_is.usa","text":"","code":"latlon_is.usa(lat, lon)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.usa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check lat lon coordinates to see if each is approx. in general area of USA excluding Island Areas — latlon_is.usa","text":"lat vector latitudes lon vector longitudes","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.usa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check lat lon coordinates to see if each is approx. in general area of USA excluding Island Areas — latlon_is.usa","text":"logical vector, one element per lat lon pair (location) Indicates point approximately one rough bounding boxes includes USA without Island Areas Guam, American Samoa, USVI, N Marianas Islands.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"Check latitude longitude value see valid.","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"","code":"latlon_is.valid(lat, lon, quiet = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"lat vector latitudes lon vector longitudes quiet optional logical, TRUE, show list bad values console","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"logical vector, one element per lat lon pair (location)","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"NA outside expected numeric ranges (based approx ranges lat lon seen among block internal points dataset) note Guam, American Samoa, Northern Mariana Islands, U.S. Virgin Islands outside ranges! EJScreen 2.2 provide demographic data locations anyway, can map sites . lat must 17.5 71.5, lon must ( -180 -64) (172 180)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/latlon_is.valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if lat lon are OK -- validate latitudes and longitudes — latlon_is.valid","text":"","code":"if (FALSE) {  # this would only work using the EJAM package datasets frs and blockpoints:    if (!exists(\"frs\")) dataload_from_pins(\"frs\")  table(latlon_is.valid(lat =  frs$lat, lon =  frs$lon))  # blockpoints may need to be downloaded using dataload_from_pins()  table(latlon_is.valid(lat =  blockpoints$lat, lon =  blockpoints$lon))   }"},{"path":"https://usepa.github.io/EJAM/reference/latlon_join_on_blockid.html","id":null,"dir":"Reference","previous_headings":"","what":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","title":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","text":"get expanded version sites2blocks data.table, new lat,lon columns","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_join_on_blockid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","text":"","code":"latlon_join_on_blockid(s2b)"},{"path":"https://usepa.github.io/EJAM/reference/latlon_join_on_blockid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","text":"s2b like testoutput_getblocksnearby_10pts_1miles, output getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_join_on_blockid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","text":"returns input data.table lat,lon columns added block coordinates","code":""},{"path":"https://usepa.github.io/EJAM/reference/latlon_join_on_blockid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get lat,lon of each block internal point via blockid — latlon_join_on_blockid","text":"","code":"s2b = copy(testoutput_getblocksnearby_10pts_1miles) #> Error in copy(testoutput_getblocksnearby_10pts_1miles): could not find function \"copy\"  latlon_join_on_blockid(s2b) # done by trilaterate also #> Error in latlon_join_on_blockid(s2b): could not find function \"latlon_join_on_blockid\""},{"path":"https://usepa.github.io/EJAM/reference/lat_alias.html","id":null,"dir":"Reference","previous_headings":"","what":"lat_alias, lon_alias (DATA) Synonyms for lat and lon — lat_alias","title":"lat_alias, lon_alias (DATA) Synonyms for lat and lon — lat_alias","text":"lists synonyms \"latitude\" \"longitude\" used guessing column user-provided tables coordinates","code":""},{"path":"https://usepa.github.io/EJAM/reference/linesofcode2.html","id":null,"dir":"Reference","previous_headings":"","what":"linesofcode2 - UTILITY - count lines of source code per .R file (not per function) - NOT TESTED — linesofcode2","title":"linesofcode2 - UTILITY - count lines of source code per .R file (not per function) - NOT TESTED — linesofcode2","text":"linesofcode2 - UTILITY - count lines source code per .R file (per function) - TESTED","code":""},{"path":"https://usepa.github.io/EJAM/reference/linesofcode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"linesofcode2 - UTILITY - count lines of source code per .R file (not per function) - NOT TESTED — linesofcode2","text":"","code":"linesofcode2(   folder = getwd(),   packages,   recursive = TRUE,   sums = FALSE,   rfolderonly = FALSE,   cropfilename = 40,   croppath = 20,   showrows = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/linesofcode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"linesofcode2 - UTILITY - count lines of source code per .R file (not per function) - NOT TESTED — linesofcode2","text":"folder path folder .R files packages optional vector names packages source code recursive logical, look subfolders sums logical, TRUE, returns sums info, otherwise just prints console returns info rfolderonly logical cropfilename number character truncate filename display console croppath limit path display showrows optional","code":""},{"path":"https://usepa.github.io/EJAM/reference/linesofcode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"linesofcode2 - UTILITY - count lines of source code per .R file (not per function) - NOT TESTED — linesofcode2","text":"data.frame info files","code":""},{"path":"https://usepa.github.io/EJAM/reference/lookup_pctile.html","id":null,"dir":"Reference","previous_headings":"","what":"Find approx percentiles in lookup table that is in memory — lookup_pctile","title":"Find approx percentiles in lookup table that is in memory — lookup_pctile","text":"Find approx percentiles lookup table memory","code":""},{"path":"https://usepa.github.io/EJAM/reference/lookup_pctile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find approx percentiles in lookup table that is in memory — lookup_pctile","text":"","code":"lookup_pctile(   myvector,   varname.in.lookup.table,   lookup = usastats,   zone = \"USA\" )"},{"path":"https://usepa.github.io/EJAM/reference/lookup_pctile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find approx percentiles in lookup table that is in memory — lookup_pctile","text":"myvector Numeric vector, required. Values look lookup table. varname..lookup.table Character element, required. Name column lookup table look find interval given element myvector values . *** vector provided, must length myvector, 1 value zone can provided. lookup Either lookup must provided, quoted, lookup table called usastats must already memory. lookup table data.frame PCTILE column, REGION column, column whose name value varname..lookup.table use state lookups set lookup=statestats zone Character element (vector long myvector), optional. specified, must appear column called REGION within lookup table, NA returned item looked warning given. example, \"NY\" New York State, \"USA\" national percentiles.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/mact_table.html","id":null,"dir":"Reference","previous_headings":"","what":"mact_table (DATA) MACT NESHAP subparts (the code and the description) — mact_table","title":"mact_table (DATA) MACT NESHAP subparts (the code and the description) — mact_table","text":"data.table one row per MACT subpart BBBBBB ZZZZZZ title category. ECHO download ICIS Air @seealso frs_by_mact","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a leaflet html widget map of data.frame with lat lon — mapfast","title":"Get a leaflet html widget map of data.frame with lat lon — mapfast","text":"Get leaflet html widget map data.frame lat lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a leaflet html widget map of data.frame with lat lon — mapfast","text":"","code":"mapfast(mydf, radius = 3, column_names = \"all\", labels = column_names)"},{"path":"https://usepa.github.io/EJAM/reference/mapfast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a leaflet html widget map of data.frame with lat lon — mapfast","text":"mydf data.frame data.table lat lon columns columns latlon_infer() can infer radius miles, converted meters passed leaflet::addCircles() column_names \"ej\" nice popup made based just key EJScreen indicators. \"\" every column entire mydf table shown popup. vector colnames, shown popups. labels labels used column_names, map popups, like  label: column_name  (ignored column_names ej )","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a leaflet html widget map of data.frame with lat lon — mapfast","text":"plots leaflet map popups columns mydf, returns html widget","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/mapfast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a leaflet html widget map of data.frame with lat lon — mapfast","text":"","code":"mapfast(testpoints_500)  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[32.799793,35.3827475,44.7965521,32.6766865,42.2248182,32.5915393,35.8078861,27.592857,40.326107,32.9507471,40.7709118,39.7731546,33.5852027,39.3746921,32.0764505,40.6670871,35.7156579,40.7728643,38.4400141,38.8377272,28.0291884,36.7738989,40.7554458,32.4397229,38.7234698,36.2307637,36.0341953,42.4713055,18.1578482,32.2336382,42.0333128,33.844307,37.9920338,42.788257,46.0544789,45.4259959,37.3418777,33.145824,35.7089653,41.3239256,37.3417076,32.7933531,25.4973153,30.5666946,41.8288061,40.3690316,37.3117645,42.6658023,34.0598748,35.2165011,33.9102525,42.3014926,46.5968456,41.7347429,38.9402158,28.778461,42.4446926,40.8698573,48.2063416,40.1706788,42.873033,38.4620404,30.2868029,40.6367521,40.7223038,40.8646866,38.7824927,41.9222845,40.7074484,47.5448195,48.3919373,38.6446919,48.2188837,32.7050779,35.2900519,42.4452367,39.3086363,45.0717786,39.936399,38.5206127,38.7716981,43.1151154,42.5541095,37.5839481,25.8097593,20.8805936,44.2874738,38.9615971,34.4107141,37.2559815,38.6853728,28.3280766,36.6531056,42.0863072,40.936648,28.6359953,31.7148612,40.7857899,38.9076072,29.5911563,42.9294118,42.0328563,42.0456118,34.2629343,35.1359435,35.6669048,30.8508463,39.4992858,42.5482713,32.5670076,33.8848473,31.7722401,42.1310085,33.0464342,36.0585798,42.5398921,41.6836479,35.5434654,34.9566265,40.2816353,36.2029108,32.7354701,41.7890305,42.3556757,42.5626326,21.3899769,41.6340593,35.2394533,26.8050657,42.0819578,37.3996793,40.6417161,36.354953,46.221185,40.7854333,42.6150497,45.164853,39.3664185,40.7779205,33.927791,35.1271179,38.8746506,34.0285477,33.7923219,33.6059781,35.9460969,43.5382247,29.6101192,35.9745877,64.7595645,29.6597829,40.3181264,35.1607969,29.5838438,33.6435679,41.3645971,45.4372235,29.6768045,37.3872012,26.2644456,37.8725911,41.6447118,32.8147341,42.8830848,47.3980182,43.845308,29.4224696,41.6959564,35.5356274,41.2587377,25.7504509,41.522672,32.851285,42.9927589,40.9159033,42.8973127,31.5612255,28.2223976,40.8309816,30.243081,33.6997108,37.7480133,28.9941203,40.997141,40.6909935,32.4930042,48.8556824,30.9057195,34.9684676,42.4322704,33.6776145,41.4633842,32.9949464,37.4933734,33.8903319,41.066655,30.6507863,33.2828999,40.097096,38.2573148,37.3225639,44.9082943,39.9993682,34.7283646,41.2856311,29.9174401,32.1648101,39.4336097,39.6851939,38.7779787,28.2363512,42.7870135,46.6527739,39.6840596,37.3353765,39.3319331,39.5027624,26.2184147,28.1614901,32.2233241,28.4236711,30.4882424,41.6838598,44.5333509,39.9201797,44.9877522,31.4668151,40.7304218,34.1886737,29.7885871,42.5909269,33.8887479,45.4504052,42.3013899,41.5719651,33.6976159,26.2924675,35.8868837,42.2660874,37.5559026,30.8354012,33.848849,33.6210387,41.0245793,37.9357505,36.8036311,19.4685627,40.9755724,26.1501485,34.4000148,45.1217954,20.8900477,36.810908,34.0695655,35.7470558,42.4468827,34.2223577,47.7740994,38.9364487,39.7135894,30.4117431,41.8141404,38.7548708,40.9138345,34.1461642,38.128753,32.1414625,40.6562862,42.7642721,36.1391323,38.8098522,38.0391014,41.18858,35.8484394,39.3084832,41.0796809,42.2137591,39.3627405,40.6681945,38.5385058,34.5048008,39.7806357,33.6874139,33.9733921,36.0860635,36.0463335,40.9076088,41.8991222,45.5217948,30.36866,43.571447,30.2945423,29.1811731,36.7770152,39.8732022,46.7567756,29.3510103,37.1311801,41.0106245,31.8342916,30.2274448,44.9070522,31.7756007,41.9886398,38.2106578,34.2274312,40.468354,32.9093269,36.8262745,39.9381958,30.5193238,31.3099968,34.6306651,27.7938665,32.184157,45.112165,31.4494933,45.2260423,32.1384335,21.3379128,38.1806703,45.3108842,40.6739346,42.6330767,40.1748527,42.1430067,42.4328923,42.4662938,40.7320768,45.2995814,39.6470063,40.8917221,43.7485396,40.7490183,33.2727232,33.6792868,29.4645131,31.1517521,39.1431112,39.8310075,30.1525801,33.84056,37.1823496,45.2655676,42.0268646,30.9135603,36.2111517,32.8111025,37.7565483,40.9530005,34.1048619,38.6813641,41.1594581,34.2625316,40.7689714,34.7558785,25.9690742,41.2557425,35.2075134,42.0490114,32.782921,33.2491978,40.0533189,38.7469256,40.8923447,40.7067136,35.0269528,36.0510748,32.7145647,41.676318,34.9776595,45.510806,33.8005736,42.5167344,40.7466077,32.6660946,41.9270269,40.822412,39.5709676,33.8780113,41.7084362,39.1806427,30.0445511,41.3625198,41.6731483,42.0518818,38.4467313,45.4089403,39.0756832,40.1341081,41.5025214,47.2793332,47.538109,40.3930586,41.6575545,33.2560821,41.1845577,32.7874791,43.2059642,40.9038709,45.4978447,35.9760149,45.1016802,33.9295705,38.7551495,40.7863666,42.3823963,41.5945244,42.5225015,27.9122141,29.4616217,33.8916499,29.8790503,41.2801514,43.8930519,18.3661179,42.7784878,31.0898874,33.8367613,40.2421863,40.8950093,37.5331189,39.0279563,34.1268792,30.1408378,33.928014,40.1840453,41.9204921,43.7378612,33.2570676,42.6641415,37.404343,46.5276162,40.7053428,25.7796001,32.3024787,34.2630573,26.9998312,31.3766583,41.4676672,38.2772874,35.0646349,41.5498406,32.8034334,36.1460004,34.9482551,47.8694642,38.7722249,40.5767153,40.6206165,41.8893582,30.2097418,37.8271172,45.5275628,31.6755651,43.1147753,34.0605926,32.9520063,35.403178,33.0189202,39.6532653,30.0922544,28.0234988,43.9941622,43.5068509,43.2853603,40.5303717,32.6099586,38.7579863,37.735251,40.7343483,41.6134904,28.7555438,33.0127641,39.9218853,32.9275402,45.5302078,33.9217458,42.526345,41.2353435,40.4604154,31.6467845,30.0520359,38.9697725,18.4506504,32.3647802,39.9938898,31.3573187,40.8022525,30.4050548,40.6702045,39.3586875,33.3647627,35.7949648,26.1911814,18.2543328,45.2051372,38.6781199,44.6799708,39.8525126],[-117.2506882,-86.2464592,-93.36018540000001,-96.8524393,-83.19186240000001,-84.9617911,-84.34370199999999,-99.525192,-74.7286343,-97.0675979,-73.2387557,-86.2814632,-117.7437376,-76.574877,-84.2417315,-73.98808750000001,-78.90438829999999,-73.95083099999999,-94.92758670000001,-121.1918688,-82.58740280000001,-90.4139667,-73.64179900000001,-91.4987898,-90.1454147,-115.2735373,-115.1466987,-78.93735959999999,-66.032918,-80.7108289,-96.0782529,-117.8672513,-87.6077365,-86.0412749,-118.3812236,-122.6723973,-81.97532769999999,-97.0903576,-87.1721333,-96.0286069,-121.9857732,-97.0602762,-80.4267212,-88.3622714,-79.15258710000001,-80.62181409999999,-121.8585568,-84.5498102,-118.270668,-111.4556387,-82.55513550000001,-87.9706331,-122.7596789,-87.8357476,-84.5014627,-82.48121279999999,-83.0270745,-111.7919037,-101.3263423,-74.0378328,-85.65479740000001,-77.4296401,-90.9755535,-75.4142295,-74.0476446,-79.89954969999999,-77.2848317,-79.6409438,-74.20595849999999,-122.1792575,-115.5612322,-121.3202486,-101.2817207,-117.0761004,-77.3694883,-71.2305356,-76.6535933,-93.4233763,-76.8823763,-121.4117604,-94.813095,-88.15742210000001,-70.88370639999999,-83.14451270000001,-80.294892,-156.514062,-105.4915776,-82.1421697,-118.4547111,-121.9605303,-90.1024005,-97.5615243,-79.8509081,-76.0286528,-74.1486025,-81.1860923,-84.7994616,-86.3424285,-95.06904280000001,-95.0959245,-85.6695143,-87.8295605,-88.1001861,-118.4859714,-90.21306180000001,-77.433324,-93.2771867,-104.5794095,-83.4293234,-96.76879529999999,-86.0516259,-81.617283,-91.88317499999999,-97.0522011,-86.73798410000001,-83.7640492,-91.5848519,-88.348099,-79.7402486,-75.3146885,-80.3597671,-96.9696848,-87.763977,-71.11228800000001,-82.8622695,-157.7349528,-87.4421174,-81.0759183,-80.1388668,-86.4991125,-79.1740345,-73.94454090000001,-94.2780624,-119.2537816,-74.0116779,-83.6477977,-106.7936034,-84.31336690000001,-82.7119082,-84.030109,-106.5908875,-77.17240030000001,-117.7448171,-117.9465017,-112.3383227,-78.9891554,-91.5873927,-95.4732952,-106.1893707,-147.4024811,-95.4880027,-76.934242,-84.86005900000001,-95.2530253,-88.5711431,-74.6982919,-122.5581901,-95.3609447,-120.4843255,-80.2789033,-97.31532230000001,-72.65835060000001,-79.8946232,-71.082275,-122.1993583,-72.62636190000001,-90.6398111,-83.5878841,-93.1698559,-80.4151715,-80.2013243,-88.06683219999999,-115.5752847,-71.439173,-74.51004519999999,-73.7345205,-110.2859159,-82.686699,-73.90508699999999,-95.4871405,-117.2534257,-88.89952599999999,-95.95664120000001,-73.7976256,-73.8363193,-97.3961822,-122.6086893,-98.19486860000001,-90.02392159999999,-71.86367610000001,-117.9907869,-74.1566637,-96.42195580000001,-88.7374654,-118.3051488,-85.2922789,-96.35244109999999,-111.7456111,-88.5196625,-122.0124016,-78.90275819999999,-72.1080486,-75.7732524,-86.6580979,-72.90208440000001,-90.1121521,-80.7866667,-91.66230779999999,-105.0436071,-87.3204312,-81.4921851,-86.1191602,-120.549856,-74.9860417,-81.11282439999999,-76.5682437,-82.3731401,-81.765984,-82.2771161,-96.16473329999999,-81.03190360000001,-84.3407866,-87.63852230000001,-95.11613319999999,-75.2611345,-93.25886730000001,-110.2741354,-74.00563699999999,-97.905089,-95.5130522,-71.68872760000001,-117.2100192,-93.5614477,-83.1309881,-72.8663677,-117.9759167,-80.1918897,-115.5098589,-83.76223469999999,-121.9924422,-91.303978,-117.9460588,-117.9117437,-85.0819462,-121.2827178,-84.69500979999999,-155.1486787,-72.6302458,-98.0078364,-119.7059049,-93.4720356,-156.6844129,-76.1456969,-81.0984227,-78.68837379999999,-83.3580584,-118.576593,-122.3338954,-76.9068788,-79.0233121,-90.1317908,-88.0211503,-89.9722842,-96.5312752,-77.8424016,-77.5780331,-81.2896827,-73.6996238,-83.36141859999999,-115.3229641,-121.2687886,-121.8943604,-73.15116310000001,-86.3622605,-76.8291464,-73.91710809999999,-122.7247176,-76.6003079,-73.6051306,-91.06235220000001,-83.5534298,-86.43160109999999,-117.8088534,-118.0986614,-79.8904813,-79.20546229999999,-73.7861326,-70.5669566,-123.1167741,-95.3095428,-116.5263357,-85.78389850000001,-96.2795474,-76.1164309,-105.0203066,-123.0183002,-98.5433038,-76.44481450000001,-73.6618182,-81.4486429,-92.37232830000001,-93.2556577,-90.598484,-87.6920418,-77.4809803,-77.8646452,-81.7219324,-117.133441,-119.858018,-75.1865669,-96.2392837,-89.56803789999999,-90.2981245,-97.6622228,-91.73970439999999,-93.372998,-98.57124930000001,-93.34666559999999,-110.902953,-157.9086742,-85.5936852,-108.9188694,-74.0101586,-73.83048359999999,-74.8653992,-79.9569434,-71.0550078,-83.196839,-73.59902099999999,-95.1829686,-86.0540586,-74.0265558,-121.4876443,-88.6994794,-96.9576869,-85.8338011,-95.6487401,-87.03857929999999,-77.0604383,-105.0603913,-85.64872920000001,-117.9986665,-79.0890725,-94.07383369999999,-93.6571824,-81.57296770000001,-115.2673239,-96.6785033,-122.3947728,-74.1236753,-117.971565,-77.3908316,-87.8757957,-118.4088637,-73.90491470000001,-92.3038062,-80.20215140000001,-95.67878899999999,-80.7583728,-77.2568327,-97.30235159999999,-97.1270475,-83.0912161,-75.195018,-74.0636729,-74.01399619999999,-80.82050599999999,-95.84174779999999,-117.2379281,-70.12950619999999,-89.8778325,-93.625257,-117.9019751,-70.88357619999999,-111.8507716,-97.1111277,-72.53502949999999,-73.41638260000001,-104.9328223,-118.163603,-88.2910486,-77.227152,-96.0721929,-83.81579379999999,-71.0439119,-94.8786794,-121.4382653,-122.580032,-76.8523884,-74.9100595,-74.0177,-122.2108084,-122.6064926,-79.9468861,-86.0871849,-111.8474984,-73.169045,-105.9702421,-89.4481964,-73.9086155,-122.656887,-80.0847746,-69.5406152,-84.29992129999999,-77.3912875,-74.4485445,-74.0384033,-75.9915274,-83.8911244,-81.52267759999999,-89.67112659999999,-117.4816228,-95.27454590000001,-73.31706920000001,-116.7871888,-67.05391109999999,-87.8004092,-97.3587113,-118.0698415,-82.8538484,-80.83957030000001,-120.8701597,-95.6605955,-117.8857494,-95.64905880000001,-118.1519832,-74.82903949999999,-87.95017110000001,-116.4971662,-111.8736279,-82.958833,-122.00405,-87.6557887,-73.9640153,-80.36032059999999,-86.3438233,-118.7586158,-82.0838546,-92.5187866,-86.1318461,-85.5949507,-79.0567678,-85.60397260000001,-97.2401674,-120.0943186,-78.5368515,-122.1935985,-104.8299853,-73.8409346,-75.3886498,-87.8282174,-81.5409282,-94.6803304,-122.5208598,-92.14658059999999,-75.1881916,-118.3140273,-97.0165897,-118.9543593,-96.06361099999999,-83.8970533,-95.1210753,-80.5841649,-123.0922327,-96.8169139,-70.851461,-111.943557,-117.0843978,-121.2053027,-122.1291753,-73.1250247,-71.8306376,-100.4921329,-79.8275141,-75.17519489999999,-97.2041325,-122.6269899,-118.4094361,-82.9778204,-80.4612092,-109.5334624,-84.06016440000001,-95.5649945,-104.7575114,-66.178629,-95.3208892,-75.0103091,-94.65262269999999,-76.54754699999999,-87.00961169999999,-73.3506285,-120.1673988,-111.966177,-78.6580799,-97.6983549,-65.688694,-93.2606806,-89.9802981,-124.0458236,-76.63091230000001],4828.032,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"sitenumber: 1<br>sitename: site 1<br>lon: -117.2506882<br>lat: 32.799793\",\"sitenumber: 2<br>sitename: site 2<br>lon: -86.2464592<br>lat: 35.3827475\",\"sitenumber: 3<br>sitename: site 3<br>lon: -93.3601854<br>lat: 44.7965521\",\"sitenumber: 4<br>sitename: site 4<br>lon: -96.8524393<br>lat: 32.6766865\",\"sitenumber: 5<br>sitename: site 5<br>lon: -83.1918624<br>lat: 42.2248182\",\"sitenumber: 6<br>sitename: site 6<br>lon: -84.9617911<br>lat: 32.5915393\",\"sitenumber: 7<br>sitename: site 7<br>lon: -84.343702<br>lat: 35.8078861\",\"sitenumber: 8<br>sitename: site 8<br>lon: -99.525192<br>lat: 27.592857\",\"sitenumber: 9<br>sitename: site 9<br>lon: -74.7286343<br>lat: 40.326107\",\"sitenumber: 10<br>sitename: site 10<br>lon: -97.0675979<br>lat: 32.9507471\",\"sitenumber: 11<br>sitename: site 11<br>lon: -73.2387557<br>lat: 40.7709118\",\"sitenumber: 12<br>sitename: site 12<br>lon: -86.2814632<br>lat: 39.7731546\",\"sitenumber: 13<br>sitename: site 13<br>lon: -117.7437376<br>lat: 33.5852027\",\"sitenumber: 14<br>sitename: site 14<br>lon: -76.574877<br>lat: 39.3746921\",\"sitenumber: 15<br>sitename: site 15<br>lon: -84.2417315<br>lat: 32.0764505\",\"sitenumber: 16<br>sitename: site 16<br>lon: -73.9880875<br>lat: 40.6670871\",\"sitenumber: 17<br>sitename: site 17<br>lon: -78.9043883<br>lat: 35.7156579\",\"sitenumber: 18<br>sitename: site 18<br>lon: -73.950831<br>lat: 40.7728643\",\"sitenumber: 19<br>sitename: site 19<br>lon: -94.9275867<br>lat: 38.4400141\",\"sitenumber: 20<br>sitename: site 20<br>lon: -121.1918688<br>lat: 38.8377272\",\"sitenumber: 21<br>sitename: site 21<br>lon: -82.5874028<br>lat: 28.0291884\",\"sitenumber: 22<br>sitename: site 22<br>lon: -90.4139667<br>lat: 36.7738989\",\"sitenumber: 23<br>sitename: site 23<br>lon: -73.641799<br>lat: 40.7554458\",\"sitenumber: 24<br>sitename: site 24<br>lon: -91.4987898<br>lat: 32.4397229\",\"sitenumber: 25<br>sitename: site 25<br>lon: -90.1454147<br>lat: 38.7234698\",\"sitenumber: 26<br>sitename: site 26<br>lon: -115.2735373<br>lat: 36.2307637\",\"sitenumber: 27<br>sitename: site 27<br>lon: -115.1466987<br>lat: 36.0341953\",\"sitenumber: 28<br>sitename: site 28<br>lon: -78.9373596<br>lat: 42.4713055\",\"sitenumber: 29<br>sitename: site 29<br>lon: -66.032918<br>lat: 18.1578482\",\"sitenumber: 30<br>sitename: site 30<br>lon: -80.7108289<br>lat: 32.2336382\",\"sitenumber: 31<br>sitename: site 31<br>lon: -96.0782529<br>lat: 42.0333128\",\"sitenumber: 32<br>sitename: site 32<br>lon: -117.8672513<br>lat: 33.844307\",\"sitenumber: 33<br>sitename: site 33<br>lon: -87.6077365<br>lat: 37.9920338\",\"sitenumber: 34<br>sitename: site 34<br>lon: -86.0412749<br>lat: 42.788257\",\"sitenumber: 35<br>sitename: site 35<br>lon: -118.3812236<br>lat: 46.0544789\",\"sitenumber: 36<br>sitename: site 36<br>lon: -122.6723973<br>lat: 45.4259959\",\"sitenumber: 37<br>sitename: site 37<br>lon: -81.9753277<br>lat: 37.3418777\",\"sitenumber: 38<br>sitename: site 38<br>lon: -97.0903576<br>lat: 33.145824\",\"sitenumber: 39<br>sitename: site 39<br>lon: -87.1721333<br>lat: 35.7089653\",\"sitenumber: 40<br>sitename: site 40<br>lon: -96.0286069<br>lat: 41.3239256\",\"sitenumber: 41<br>sitename: site 41<br>lon: -121.9857732<br>lat: 37.3417076\",\"sitenumber: 42<br>sitename: site 42<br>lon: -97.0602762<br>lat: 32.7933531\",\"sitenumber: 43<br>sitename: site 43<br>lon: -80.4267212<br>lat: 25.4973153\",\"sitenumber: 44<br>sitename: site 44<br>lon: -88.3622714<br>lat: 30.5666946\",\"sitenumber: 45<br>sitename: site 45<br>lon: -79.1525871<br>lat: 41.8288061\",\"sitenumber: 46<br>sitename: site 46<br>lon: -80.6218141<br>lat: 40.3690316\",\"sitenumber: 47<br>sitename: site 47<br>lon: -121.8585568<br>lat: 37.3117645\",\"sitenumber: 48<br>sitename: site 48<br>lon: -84.5498102<br>lat: 42.6658023\",\"sitenumber: 49<br>sitename: site 49<br>lon: -118.270668<br>lat: 34.0598748\",\"sitenumber: 50<br>sitename: site 50<br>lon: -111.4556387<br>lat: 35.2165011\",\"sitenumber: 51<br>sitename: site 51<br>lon: -82.5551355<br>lat: 33.9102525\",\"sitenumber: 52<br>sitename: site 52<br>lon: -87.9706331<br>lat: 42.3014926\",\"sitenumber: 53<br>sitename: site 53<br>lon: -122.7596789<br>lat: 46.5968456\",\"sitenumber: 54<br>sitename: site 54<br>lon: -87.8357476<br>lat: 41.7347429\",\"sitenumber: 55<br>sitename: site 55<br>lon: -84.5014627<br>lat: 38.9402158\",\"sitenumber: 56<br>sitename: site 56<br>lon: -82.4812128<br>lat: 28.778461\",\"sitenumber: 57<br>sitename: site 57<br>lon: -83.0270745<br>lat: 42.4446926\",\"sitenumber: 58<br>sitename: site 58<br>lon: -111.7919037<br>lat: 40.8698573\",\"sitenumber: 59<br>sitename: site 59<br>lon: -101.3263423<br>lat: 48.2063416\",\"sitenumber: 60<br>sitename: site 60<br>lon: -74.0378328<br>lat: 40.1706788\",\"sitenumber: 61<br>sitename: site 61<br>lon: -85.6547974<br>lat: 42.873033\",\"sitenumber: 62<br>sitename: site 62<br>lon: -77.4296401<br>lat: 38.4620404\",\"sitenumber: 63<br>sitename: site 63<br>lon: -90.9755535<br>lat: 30.2868029\",\"sitenumber: 64<br>sitename: site 64<br>lon: -75.4142295<br>lat: 40.6367521\",\"sitenumber: 65<br>sitename: site 65<br>lon: -74.0476446<br>lat: 40.7223038\",\"sitenumber: 66<br>sitename: site 66<br>lon: -79.8995497<br>lat: 40.8646866\",\"sitenumber: 67<br>sitename: site 67<br>lon: -77.2848317<br>lat: 38.7824927\",\"sitenumber: 68<br>sitename: site 68<br>lon: -79.6409438<br>lat: 41.9222845\",\"sitenumber: 69<br>sitename: site 69<br>lon: -74.2059585<br>lat: 40.7074484\",\"sitenumber: 70<br>sitename: site 70<br>lon: -122.1792575<br>lat: 47.5448195\",\"sitenumber: 71<br>sitename: site 71<br>lon: -115.5612322<br>lat: 48.3919373\",\"sitenumber: 72<br>sitename: site 72<br>lon: -121.3202486<br>lat: 38.6446919\",\"sitenumber: 73<br>sitename: site 73<br>lon: -101.2817207<br>lat: 48.2188837\",\"sitenumber: 74<br>sitename: site 74<br>lon: -117.0761004<br>lat: 32.7050779\",\"sitenumber: 75<br>sitename: site 75<br>lon: -77.3694883<br>lat: 35.2900519\",\"sitenumber: 76<br>sitename: site 76<br>lon: -71.2305356<br>lat: 42.4452367\",\"sitenumber: 77<br>sitename: site 77<br>lon: -76.6535933<br>lat: 39.3086363\",\"sitenumber: 78<br>sitename: site 78<br>lon: -93.4233763<br>lat: 45.0717786\",\"sitenumber: 79<br>sitename: site 79<br>lon: -76.8823763<br>lat: 39.936399\",\"sitenumber: 80<br>sitename: site 80<br>lon: -121.4117604<br>lat: 38.5206127\",\"sitenumber: 81<br>sitename: site 81<br>lon: -94.813095<br>lat: 38.7716981\",\"sitenumber: 82<br>sitename: site 82<br>lon: -88.1574221<br>lat: 43.1151154\",\"sitenumber: 83<br>sitename: site 83<br>lon: -70.8837064<br>lat: 42.5541095\",\"sitenumber: 84<br>sitename: site 84<br>lon: -83.1445127<br>lat: 37.5839481\",\"sitenumber: 85<br>sitename: site 85<br>lon: -80.294892<br>lat: 25.8097593\",\"sitenumber: 86<br>sitename: site 86<br>lon: -156.514062<br>lat: 20.8805936\",\"sitenumber: 87<br>sitename: site 87<br>lon: -105.4915776<br>lat: 44.2874738\",\"sitenumber: 88<br>sitename: site 88<br>lon: -82.1421697<br>lat: 38.9615971\",\"sitenumber: 89<br>sitename: site 89<br>lon: -118.4547111<br>lat: 34.4107141\",\"sitenumber: 90<br>sitename: site 90<br>lon: -121.9605303<br>lat: 37.2559815\",\"sitenumber: 91<br>sitename: site 91<br>lon: -90.1024005<br>lat: 38.6853728\",\"sitenumber: 92<br>sitename: site 92<br>lon: -97.5615243<br>lat: 28.3280766\",\"sitenumber: 93<br>sitename: site 93<br>lon: -79.8509081<br>lat: 36.6531056\",\"sitenumber: 94<br>sitename: site 94<br>lon: -76.0286528<br>lat: 42.0863072\",\"sitenumber: 95<br>sitename: site 95<br>lon: -74.1486025<br>lat: 40.936648\",\"sitenumber: 96<br>sitename: site 96<br>lon: -81.1860923<br>lat: 28.6359953\",\"sitenumber: 97<br>sitename: site 97<br>lon: -84.7994616<br>lat: 31.7148612\",\"sitenumber: 98<br>sitename: site 98<br>lon: -86.3424285<br>lat: 40.7857899\",\"sitenumber: 99<br>sitename: site 99<br>lon: -95.0690428<br>lat: 38.9076072\",\"sitenumber: 100<br>sitename: site 100<br>lon: -95.0959245<br>lat: 29.5911563\",\"sitenumber: 101<br>sitename: site 101<br>lon: -85.6695143<br>lat: 42.9294118\",\"sitenumber: 102<br>sitename: site 102<br>lon: -87.8295605<br>lat: 42.0328563\",\"sitenumber: 103<br>sitename: site 103<br>lon: -88.1001861<br>lat: 42.0456118\",\"sitenumber: 104<br>sitename: site 104<br>lon: -118.4859714<br>lat: 34.2629343\",\"sitenumber: 105<br>sitename: site 105<br>lon: -90.2130618<br>lat: 35.1359435\",\"sitenumber: 106<br>sitename: site 106<br>lon: -77.433324<br>lat: 35.6669048\",\"sitenumber: 107<br>sitename: site 107<br>lon: -93.2771867<br>lat: 30.8508463\",\"sitenumber: 108<br>sitename: site 108<br>lon: -104.5794095<br>lat: 39.4992858\",\"sitenumber: 109<br>sitename: site 109<br>lon: -83.4293234<br>lat: 42.5482713\",\"sitenumber: 110<br>sitename: site 110<br>lon: -96.7687953<br>lat: 32.5670076\",\"sitenumber: 111<br>sitename: site 111<br>lon: -86.0516259<br>lat: 33.8848473\",\"sitenumber: 112<br>sitename: site 112<br>lon: -81.617283<br>lat: 31.7722401\",\"sitenumber: 113<br>sitename: site 113<br>lon: -91.883175<br>lat: 42.1310085\",\"sitenumber: 114<br>sitename: site 114<br>lon: -97.0522011<br>lat: 33.0464342\",\"sitenumber: 115<br>sitename: site 115<br>lon: -86.7379841<br>lat: 36.0585798\",\"sitenumber: 116<br>sitename: site 116<br>lon: -83.7640492<br>lat: 42.5398921\",\"sitenumber: 117<br>sitename: site 117<br>lon: -91.5848519<br>lat: 41.6836479\",\"sitenumber: 118<br>sitename: site 118<br>lon: -88.348099<br>lat: 35.5434654\",\"sitenumber: 119<br>sitename: site 119<br>lon: -79.7402486<br>lat: 34.9566265\",\"sitenumber: 120<br>sitename: site 120<br>lon: -75.3146885<br>lat: 40.2816353\",\"sitenumber: 121<br>sitename: site 121<br>lon: -80.3597671<br>lat: 36.2029108\",\"sitenumber: 122<br>sitename: site 122<br>lon: -96.9696848<br>lat: 32.7354701\",\"sitenumber: 123<br>sitename: site 123<br>lon: -87.763977<br>lat: 41.7890305\",\"sitenumber: 124<br>sitename: site 124<br>lon: -71.112288<br>lat: 42.3556757\",\"sitenumber: 125<br>sitename: site 125<br>lon: -82.8622695<br>lat: 42.5626326\",\"sitenumber: 126<br>sitename: site 126<br>lon: -157.7349528<br>lat: 21.3899769\",\"sitenumber: 127<br>sitename: site 127<br>lon: -87.4421174<br>lat: 41.6340593\",\"sitenumber: 128<br>sitename: site 128<br>lon: -81.0759183<br>lat: 35.2394533\",\"sitenumber: 129<br>sitename: site 129<br>lon: -80.1388668<br>lat: 26.8050657\",\"sitenumber: 130<br>sitename: site 130<br>lon: -86.4991125<br>lat: 42.0819578\",\"sitenumber: 131<br>sitename: site 131<br>lon: -79.1740345<br>lat: 37.3996793\",\"sitenumber: 132<br>sitename: site 132<br>lon: -73.9445409<br>lat: 40.6417161\",\"sitenumber: 133<br>sitename: site 133<br>lon: -94.2780624<br>lat: 36.354953\",\"sitenumber: 134<br>sitename: site 134<br>lon: -119.2537816<br>lat: 46.221185\",\"sitenumber: 135<br>sitename: site 135<br>lon: -74.0116779<br>lat: 40.7854333\",\"sitenumber: 136<br>sitename: site 136<br>lon: -83.6477977<br>lat: 42.6150497\",\"sitenumber: 137<br>sitename: site 137<br>lon: -106.7936034<br>lat: 45.164853\",\"sitenumber: 138<br>sitename: site 138<br>lon: -84.3133669<br>lat: 39.3664185\",\"sitenumber: 139<br>sitename: site 139<br>lon: -82.7119082<br>lat: 40.7779205\",\"sitenumber: 140<br>sitename: site 140<br>lon: -84.030109<br>lat: 33.927791\",\"sitenumber: 141<br>sitename: site 141<br>lon: -106.5908875<br>lat: 35.1271179\",\"sitenumber: 142<br>sitename: site 142<br>lon: -77.1724003<br>lat: 38.8746506\",\"sitenumber: 143<br>sitename: site 143<br>lon: -117.7448171<br>lat: 34.0285477\",\"sitenumber: 144<br>sitename: site 144<br>lon: -117.9465017<br>lat: 33.7923219\",\"sitenumber: 145<br>sitename: site 145<br>lon: -112.3383227<br>lat: 33.6059781\",\"sitenumber: 146<br>sitename: site 146<br>lon: -78.9891554<br>lat: 35.9460969\",\"sitenumber: 147<br>sitename: site 147<br>lon: -91.5873927<br>lat: 43.5382247\",\"sitenumber: 148<br>sitename: site 148<br>lon: -95.4732952<br>lat: 29.6101192\",\"sitenumber: 149<br>sitename: site 149<br>lon: -106.1893707<br>lat: 35.9745877\",\"sitenumber: 150<br>sitename: site 150<br>lon: -147.4024811<br>lat: 64.7595645\",\"sitenumber: 151<br>sitename: site 151<br>lon: -95.4880027<br>lat: 29.6597829\",\"sitenumber: 152<br>sitename: site 152<br>lon: -76.934242<br>lat: 40.3181264\",\"sitenumber: 153<br>sitename: site 153<br>lon: -84.860059<br>lat: 35.1607969\",\"sitenumber: 154<br>sitename: site 154<br>lon: -95.2530253<br>lat: 29.5838438\",\"sitenumber: 155<br>sitename: site 155<br>lon: -88.5711431<br>lat: 33.6435679\",\"sitenumber: 156<br>sitename: site 156<br>lon: -74.6982919<br>lat: 41.3645971\",\"sitenumber: 157<br>sitename: site 157<br>lon: -122.5581901<br>lat: 45.4372235\",\"sitenumber: 158<br>sitename: site 158<br>lon: -95.3609447<br>lat: 29.6768045\",\"sitenumber: 159<br>sitename: site 159<br>lon: -120.4843255<br>lat: 37.3872012\",\"sitenumber: 160<br>sitename: site 160<br>lon: -80.2789033<br>lat: 26.2644456\",\"sitenumber: 161<br>sitename: site 161<br>lon: -97.3153223<br>lat: 37.8725911\",\"sitenumber: 162<br>sitename: site 162<br>lon: -72.6583506<br>lat: 41.6447118\",\"sitenumber: 163<br>sitename: site 163<br>lon: -79.8946232<br>lat: 32.8147341\",\"sitenumber: 164<br>sitename: site 164<br>lon: -71.082275<br>lat: 42.8830848\",\"sitenumber: 165<br>sitename: site 165<br>lon: -122.1993583<br>lat: 47.3980182\",\"sitenumber: 166<br>sitename: site 166<br>lon: -72.6263619<br>lat: 43.845308\",\"sitenumber: 167<br>sitename: site 167<br>lon: -90.6398111<br>lat: 29.4224696\",\"sitenumber: 168<br>sitename: site 168<br>lon: -83.5878841<br>lat: 41.6959564\",\"sitenumber: 169<br>sitename: site 169<br>lon: -93.1698559<br>lat: 35.5356274\",\"sitenumber: 170<br>sitename: site 170<br>lon: -80.4151715<br>lat: 41.2587377\",\"sitenumber: 171<br>sitename: site 171<br>lon: -80.2013243<br>lat: 25.7504509\",\"sitenumber: 172<br>sitename: site 172<br>lon: -88.0668322<br>lat: 41.522672\",\"sitenumber: 173<br>sitename: site 173<br>lon: -115.5752847<br>lat: 32.851285\",\"sitenumber: 174<br>sitename: site 174<br>lon: -71.439173<br>lat: 42.9927589\",\"sitenumber: 175<br>sitename: site 175<br>lon: -74.5100452<br>lat: 40.9159033\",\"sitenumber: 176<br>sitename: site 176<br>lon: -73.7345205<br>lat: 42.8973127\",\"sitenumber: 177<br>sitename: site 177<br>lon: -110.2859159<br>lat: 31.5612255\",\"sitenumber: 178<br>sitename: site 178<br>lon: -82.686699<br>lat: 28.2223976\",\"sitenumber: 179<br>sitename: site 179<br>lon: -73.905087<br>lat: 40.8309816\",\"sitenumber: 180<br>sitename: site 180<br>lon: -95.4871405<br>lat: 30.243081\",\"sitenumber: 181<br>sitename: site 181<br>lon: -117.2534257<br>lat: 33.6997108\",\"sitenumber: 182<br>sitename: site 182<br>lon: -88.899526<br>lat: 37.7480133\",\"sitenumber: 183<br>sitename: site 183<br>lon: -95.9566412<br>lat: 28.9941203\",\"sitenumber: 184<br>sitename: site 184<br>lon: -73.7976256<br>lat: 40.997141\",\"sitenumber: 185<br>sitename: site 185<br>lon: -73.8363193<br>lat: 40.6909935\",\"sitenumber: 186<br>sitename: site 186<br>lon: -97.3961822<br>lat: 32.4930042\",\"sitenumber: 187<br>sitename: site 187<br>lon: -122.6086893<br>lat: 48.8556824\",\"sitenumber: 188<br>sitename: site 188<br>lon: -98.1948686<br>lat: 30.9057195\",\"sitenumber: 189<br>sitename: site 189<br>lon: -90.0239216<br>lat: 34.9684676\",\"sitenumber: 190<br>sitename: site 190<br>lon: -71.8636761<br>lat: 42.4322704\",\"sitenumber: 191<br>sitename: site 191<br>lon: -117.9907869<br>lat: 33.6776145\",\"sitenumber: 192<br>sitename: site 192<br>lon: -74.1566637<br>lat: 41.4633842\",\"sitenumber: 193<br>sitename: site 193<br>lon: -96.4219558<br>lat: 32.9949464\",\"sitenumber: 194<br>sitename: site 194<br>lon: -88.7374654<br>lat: 37.4933734\",\"sitenumber: 195<br>sitename: site 195<br>lon: -118.3051488<br>lat: 33.8903319\",\"sitenumber: 196<br>sitename: site 196<br>lon: -85.2922789<br>lat: 41.066655\",\"sitenumber: 197<br>sitename: site 197<br>lon: -96.3524411<br>lat: 30.6507863\",\"sitenumber: 198<br>sitename: site 198<br>lon: -111.7456111<br>lat: 33.2828999\",\"sitenumber: 199<br>sitename: site 199<br>lon: -88.5196625<br>lat: 40.097096\",\"sitenumber: 200<br>sitename: site 200<br>lon: -122.0124016<br>lat: 38.2573148\",\"sitenumber: 201<br>sitename: site 201<br>lon: -78.9027582<br>lat: 37.3225639\",\"sitenumber: 202<br>sitename: site 202<br>lon: -72.1080486<br>lat: 44.9082943\",\"sitenumber: 203<br>sitename: site 203<br>lon: -75.7732524<br>lat: 39.9993682\",\"sitenumber: 204<br>sitename: site 204<br>lon: -86.6580979<br>lat: 34.7283646\",\"sitenumber: 205<br>sitename: site 205<br>lon: -72.9020844<br>lat: 41.2856311\",\"sitenumber: 206<br>sitename: site 206<br>lon: -90.1121521<br>lat: 29.9174401\",\"sitenumber: 207<br>sitename: site 207<br>lon: -80.7866667<br>lat: 32.1648101\",\"sitenumber: 208<br>sitename: site 208<br>lon: -91.6623078<br>lat: 39.4336097\",\"sitenumber: 209<br>sitename: site 209<br>lon: -105.0436071<br>lat: 39.6851939\",\"sitenumber: 210<br>sitename: site 210<br>lon: -87.3204312<br>lat: 38.7779787\",\"sitenumber: 211<br>sitename: site 211<br>lon: -81.4921851<br>lat: 28.2363512\",\"sitenumber: 212<br>sitename: site 212<br>lon: -86.1191602<br>lat: 42.7870135\",\"sitenumber: 213<br>sitename: site 213<br>lon: -120.549856<br>lat: 46.6527739\",\"sitenumber: 214<br>sitename: site 214<br>lon: -74.9860417<br>lat: 39.6840596\",\"sitenumber: 215<br>sitename: site 215<br>lon: -81.1128244<br>lat: 37.3353765\",\"sitenumber: 216<br>sitename: site 216<br>lon: -76.5682437<br>lat: 39.3319331\",\"sitenumber: 217<br>sitename: site 217<br>lon: -82.3731401<br>lat: 39.5027624\",\"sitenumber: 218<br>sitename: site 218<br>lon: -81.765984<br>lat: 26.2184147\",\"sitenumber: 219<br>sitename: site 219<br>lon: -82.2771161<br>lat: 28.1614901\",\"sitenumber: 220<br>sitename: site 220<br>lon: -96.1647333<br>lat: 32.2233241\",\"sitenumber: 221<br>sitename: site 221<br>lon: -81.0319036<br>lat: 28.4236711\",\"sitenumber: 222<br>sitename: site 222<br>lon: -84.3407866<br>lat: 30.4882424\",\"sitenumber: 223<br>sitename: site 223<br>lon: -87.6385223<br>lat: 41.6838598\",\"sitenumber: 224<br>sitename: site 224<br>lon: -95.1161332<br>lat: 44.5333509\",\"sitenumber: 225<br>sitename: site 225<br>lon: -75.2611345<br>lat: 39.9201797\",\"sitenumber: 226<br>sitename: site 226<br>lon: -93.2588673<br>lat: 44.9877522\",\"sitenumber: 227<br>sitename: site 227<br>lon: -110.2741354<br>lat: 31.4668151\",\"sitenumber: 228<br>sitename: site 228<br>lon: -74.005637<br>lat: 40.7304218\",\"sitenumber: 229<br>sitename: site 229<br>lon: -97.905089<br>lat: 34.1886737\",\"sitenumber: 230<br>sitename: site 230<br>lon: -95.5130522<br>lat: 29.7885871\",\"sitenumber: 231<br>sitename: site 231<br>lon: -71.6887276<br>lat: 42.5909269\",\"sitenumber: 232<br>sitename: site 232<br>lon: -117.2100192<br>lat: 33.8887479\",\"sitenumber: 233<br>sitename: site 233<br>lon: -93.5614477<br>lat: 45.4504052\",\"sitenumber: 234<br>sitename: site 234<br>lon: -83.1309881<br>lat: 42.3013899\",\"sitenumber: 235<br>sitename: site 235<br>lon: -72.8663677<br>lat: 41.5719651\",\"sitenumber: 236<br>sitename: site 236<br>lon: -117.9759167<br>lat: 33.6976159\",\"sitenumber: 237<br>sitename: site 237<br>lon: -80.1918897<br>lat: 26.2924675\",\"sitenumber: 238<br>sitename: site 238<br>lon: -115.5098589<br>lat: 35.8868837\",\"sitenumber: 239<br>sitename: site 239<br>lon: -83.7622347<br>lat: 42.2660874\",\"sitenumber: 240<br>sitename: site 240<br>lon: -121.9924422<br>lat: 37.5559026\",\"sitenumber: 241<br>sitename: site 241<br>lon: -91.303978<br>lat: 30.8354012\",\"sitenumber: 242<br>sitename: site 242<br>lon: -117.9460588<br>lat: 33.848849\",\"sitenumber: 243<br>sitename: site 243<br>lon: -117.9117437<br>lat: 33.6210387\",\"sitenumber: 244<br>sitename: site 244<br>lon: -85.0819462<br>lat: 41.0245793\",\"sitenumber: 245<br>sitename: site 245<br>lon: -121.2827178<br>lat: 37.9357505\",\"sitenumber: 246<br>sitename: site 246<br>lon: -84.6950098<br>lat: 36.8036311\",\"sitenumber: 247<br>sitename: site 247<br>lon: -155.1486787<br>lat: 19.4685627\",\"sitenumber: 248<br>sitename: site 248<br>lon: -72.6302458<br>lat: 40.9755724\",\"sitenumber: 249<br>sitename: site 249<br>lon: -98.0078364<br>lat: 26.1501485\",\"sitenumber: 250<br>sitename: site 250<br>lon: -119.7059049<br>lat: 34.4000148\",\"sitenumber: 251<br>sitename: site 251<br>lon: -93.4720356<br>lat: 45.1217954\",\"sitenumber: 252<br>sitename: site 252<br>lon: -156.6844129<br>lat: 20.8900477\",\"sitenumber: 253<br>sitename: site 253<br>lon: -76.1456969<br>lat: 36.810908\",\"sitenumber: 254<br>sitename: site 254<br>lon: -81.0984227<br>lat: 34.0695655\",\"sitenumber: 255<br>sitename: site 255<br>lon: -78.6883738<br>lat: 35.7470558\",\"sitenumber: 256<br>sitename: site 256<br>lon: -83.3580584<br>lat: 42.4468827\",\"sitenumber: 257<br>sitename: site 257<br>lon: -118.576593<br>lat: 34.2223577\",\"sitenumber: 258<br>sitename: site 258<br>lon: -122.3338954<br>lat: 47.7740994\",\"sitenumber: 259<br>sitename: site 259<br>lon: -76.9068788<br>lat: 38.9364487\",\"sitenumber: 260<br>sitename: site 260<br>lon: -79.0233121<br>lat: 39.7135894\",\"sitenumber: 261<br>sitename: site 261<br>lon: -90.1317908<br>lat: 30.4117431\",\"sitenumber: 262<br>sitename: site 262<br>lon: -88.0211503<br>lat: 41.8141404\",\"sitenumber: 263<br>sitename: site 263<br>lon: -89.9722842<br>lat: 38.7548708\",\"sitenumber: 264<br>sitename: site 264<br>lon: -96.5312752<br>lat: 40.9138345\",\"sitenumber: 265<br>sitename: site 265<br>lon: -77.8424016<br>lat: 34.1461642\",\"sitenumber: 266<br>sitename: site 266<br>lon: -77.5780331<br>lat: 38.128753\",\"sitenumber: 267<br>sitename: site 267<br>lon: -81.2896827<br>lat: 32.1414625\",\"sitenumber: 268<br>sitename: site 268<br>lon: -73.6996238<br>lat: 40.6562862\",\"sitenumber: 269<br>sitename: site 269<br>lon: -83.3614186<br>lat: 42.7642721\",\"sitenumber: 270<br>sitename: site 270<br>lon: -115.3229641<br>lat: 36.1391323\",\"sitenumber: 271<br>sitename: site 271<br>lon: -121.2687886<br>lat: 38.8098522\",\"sitenumber: 272<br>sitename: site 272<br>lon: -121.8943604<br>lat: 38.0391014\",\"sitenumber: 273<br>sitename: site 273<br>lon: -73.1511631<br>lat: 41.18858\",\"sitenumber: 274<br>sitename: site 274<br>lon: -86.3622605<br>lat: 35.8484394\",\"sitenumber: 275<br>sitename: site 275<br>lon: -76.8291464<br>lat: 39.3084832\",\"sitenumber: 276<br>sitename: site 276<br>lon: -73.9171081<br>lat: 41.0796809\",\"sitenumber: 277<br>sitename: site 277<br>lon: -122.7247176<br>lat: 42.2137591\",\"sitenumber: 278<br>sitename: site 278<br>lon: -76.6003079<br>lat: 39.3627405\",\"sitenumber: 279<br>sitename: site 279<br>lon: -73.6051306<br>lat: 40.6681945\",\"sitenumber: 280<br>sitename: site 280<br>lon: -91.0623522<br>lat: 38.5385058\",\"sitenumber: 281<br>sitename: site 281<br>lon: -83.5534298<br>lat: 34.5048008\",\"sitenumber: 282<br>sitename: site 282<br>lon: -86.4316011<br>lat: 39.7806357\",\"sitenumber: 283<br>sitename: site 283<br>lon: -117.8088534<br>lat: 33.6874139\",\"sitenumber: 284<br>sitename: site 284<br>lon: -118.0986614<br>lat: 33.9733921\",\"sitenumber: 285<br>sitename: site 285<br>lon: -79.8904813<br>lat: 36.0860635\",\"sitenumber: 286<br>sitename: site 286<br>lon: -79.2054623<br>lat: 36.0463335\",\"sitenumber: 287<br>sitename: site 287<br>lon: -73.7861326<br>lat: 40.9076088\",\"sitenumber: 288<br>sitename: site 288<br>lon: -70.5669566<br>lat: 41.8991222\",\"sitenumber: 289<br>sitename: site 289<br>lon: -123.1167741<br>lat: 45.5217948\",\"sitenumber: 290<br>sitename: site 290<br>lon: -95.3095428<br>lat: 30.36866\",\"sitenumber: 291<br>sitename: site 291<br>lon: -116.5263357<br>lat: 43.571447\",\"sitenumber: 292<br>sitename: site 292<br>lon: -85.7838985<br>lat: 30.2945423\",\"sitenumber: 293<br>sitename: site 293<br>lon: -96.2795474<br>lat: 29.1811731\",\"sitenumber: 294<br>sitename: site 294<br>lon: -76.1164309<br>lat: 36.7770152\",\"sitenumber: 295<br>sitename: site 295<br>lon: -105.0203066<br>lat: 39.8732022\",\"sitenumber: 296<br>sitename: site 296<br>lon: -123.0183002<br>lat: 46.7567756\",\"sitenumber: 297<br>sitename: site 297<br>lon: -98.5433038<br>lat: 29.3510103\",\"sitenumber: 298<br>sitename: site 298<br>lon: -76.4448145<br>lat: 37.1311801\",\"sitenumber: 299<br>sitename: site 299<br>lon: -73.6618182<br>lat: 41.0106245\",\"sitenumber: 300<br>sitename: site 300<br>lon: -81.4486429<br>lat: 31.8342916\",\"sitenumber: 301<br>sitename: site 301<br>lon: -92.3723283<br>lat: 30.2274448\",\"sitenumber: 302<br>sitename: site 302<br>lon: -93.2556577<br>lat: 44.9070522\",\"sitenumber: 303<br>sitename: site 303<br>lon: -90.598484<br>lat: 31.7756007\",\"sitenumber: 304<br>sitename: site 304<br>lon: -87.6920418<br>lat: 41.9886398\",\"sitenumber: 305<br>sitename: site 305<br>lon: -77.4809803<br>lat: 38.2106578\",\"sitenumber: 306<br>sitename: site 306<br>lon: -77.8646452<br>lat: 34.2274312\",\"sitenumber: 307<br>sitename: site 307<br>lon: -81.7219324<br>lat: 40.468354\",\"sitenumber: 308<br>sitename: site 308<br>lon: -117.133441<br>lat: 32.9093269\",\"sitenumber: 309<br>sitename: site 309<br>lon: -119.858018<br>lat: 36.8262745\",\"sitenumber: 310<br>sitename: site 310<br>lon: -75.1865669<br>lat: 39.9381958\",\"sitenumber: 311<br>sitename: site 311<br>lon: -96.2392837<br>lat: 30.5193238\",\"sitenumber: 312<br>sitename: site 312<br>lon: -89.5680379<br>lat: 31.3099968\",\"sitenumber: 313<br>sitename: site 313<br>lon: -90.2981245<br>lat: 34.6306651\",\"sitenumber: 314<br>sitename: site 314<br>lon: -97.6622228<br>lat: 27.7938665\",\"sitenumber: 315<br>sitename: site 315<br>lon: -91.7397044<br>lat: 32.184157\",\"sitenumber: 316<br>sitename: site 316<br>lon: -93.372998<br>lat: 45.112165\",\"sitenumber: 317<br>sitename: site 317<br>lon: -98.5712493<br>lat: 31.4494933\",\"sitenumber: 318<br>sitename: site 318<br>lon: -93.3466656<br>lat: 45.2260423\",\"sitenumber: 319<br>sitename: site 319<br>lon: -110.902953<br>lat: 32.1384335\",\"sitenumber: 320<br>sitename: site 320<br>lon: -157.9086742<br>lat: 21.3379128\",\"sitenumber: 321<br>sitename: site 321<br>lon: -85.5936852<br>lat: 38.1806703\",\"sitenumber: 322<br>sitename: site 322<br>lon: -108.9188694<br>lat: 45.3108842\",\"sitenumber: 323<br>sitename: site 323<br>lon: -74.0101586<br>lat: 40.6739346\",\"sitenumber: 324<br>sitename: site 324<br>lon: -73.8304836<br>lat: 42.6330767\",\"sitenumber: 325<br>sitename: site 325<br>lon: -74.8653992<br>lat: 40.1748527\",\"sitenumber: 326<br>sitename: site 326<br>lon: -79.9569434<br>lat: 42.1430067\",\"sitenumber: 327<br>sitename: site 327<br>lon: -71.0550078<br>lat: 42.4328923\",\"sitenumber: 328<br>sitename: site 328<br>lon: -83.196839<br>lat: 42.4662938\",\"sitenumber: 329<br>sitename: site 329<br>lon: -73.599021<br>lat: 40.7320768\",\"sitenumber: 330<br>sitename: site 330<br>lon: -95.1829686<br>lat: 45.2995814\",\"sitenumber: 331<br>sitename: site 331<br>lon: -86.0540586<br>lat: 39.6470063\",\"sitenumber: 332<br>sitename: site 332<br>lon: -74.0265558<br>lat: 40.8917221\",\"sitenumber: 333<br>sitename: site 333<br>lon: -121.4876443<br>lat: 43.7485396\",\"sitenumber: 334<br>sitename: site 334<br>lon: -88.6994794<br>lat: 40.7490183\",\"sitenumber: 335<br>sitename: site 335<br>lon: -96.9576869<br>lat: 33.2727232\",\"sitenumber: 336<br>sitename: site 336<br>lon: -85.8338011<br>lat: 33.6792868\",\"sitenumber: 337<br>sitename: site 337<br>lon: -95.6487401<br>lat: 29.4645131\",\"sitenumber: 338<br>sitename: site 338<br>lon: -87.0385793<br>lat: 31.1517521\",\"sitenumber: 339<br>sitename: site 339<br>lon: -77.0604383<br>lat: 39.1431112\",\"sitenumber: 340<br>sitename: site 340<br>lon: -105.0603913<br>lat: 39.8310075\",\"sitenumber: 341<br>sitename: site 341<br>lon: -85.6487292<br>lat: 30.1525801\",\"sitenumber: 342<br>sitename: site 342<br>lon: -117.9986665<br>lat: 33.84056\",\"sitenumber: 343<br>sitename: site 343<br>lon: -79.0890725<br>lat: 37.1823496\",\"sitenumber: 344<br>sitename: site 344<br>lon: -94.0738337<br>lat: 45.2655676\",\"sitenumber: 345<br>sitename: site 345<br>lon: -93.6571824<br>lat: 42.0268646\",\"sitenumber: 346<br>sitename: site 346<br>lon: -81.5729677<br>lat: 30.9135603\",\"sitenumber: 347<br>sitename: site 347<br>lon: -115.2673239<br>lat: 36.2111517\",\"sitenumber: 348<br>sitename: site 348<br>lon: -96.6785033<br>lat: 32.8111025\",\"sitenumber: 349<br>sitename: site 349<br>lon: -122.3947728<br>lat: 37.7565483\",\"sitenumber: 350<br>sitename: site 350<br>lon: -74.1236753<br>lat: 40.9530005\",\"sitenumber: 351<br>sitename: site 351<br>lon: -117.971565<br>lat: 34.1048619\",\"sitenumber: 352<br>sitename: site 352<br>lon: -77.3908316<br>lat: 38.6813641\",\"sitenumber: 353<br>sitename: site 353<br>lon: -87.8757957<br>lat: 41.1594581\",\"sitenumber: 354<br>sitename: site 354<br>lon: -118.4088637<br>lat: 34.2625316\",\"sitenumber: 355<br>sitename: site 355<br>lon: -73.9049147<br>lat: 40.7689714\",\"sitenumber: 356<br>sitename: site 356<br>lon: -92.3038062<br>lat: 34.7558785\",\"sitenumber: 357<br>sitename: site 357<br>lon: -80.2021514<br>lat: 25.9690742\",\"sitenumber: 358<br>sitename: site 358<br>lon: -95.678789<br>lat: 41.2557425\",\"sitenumber: 359<br>sitename: site 359<br>lon: -80.7583728<br>lat: 35.2075134\",\"sitenumber: 360<br>sitename: site 360<br>lon: -77.2568327<br>lat: 42.0490114\",\"sitenumber: 361<br>sitename: site 361<br>lon: -97.3023516<br>lat: 32.782921\",\"sitenumber: 362<br>sitename: site 362<br>lon: -97.1270475<br>lat: 33.2491978\",\"sitenumber: 363<br>sitename: site 363<br>lon: -83.0912161<br>lat: 40.0533189\",\"sitenumber: 364<br>sitename: site 364<br>lon: -75.195018<br>lat: 38.7469256\",\"sitenumber: 365<br>sitename: site 365<br>lon: -74.0636729<br>lat: 40.8923447\",\"sitenumber: 366<br>sitename: site 366<br>lon: -74.0139962<br>lat: 40.7067136\",\"sitenumber: 367<br>sitename: site 367<br>lon: -80.820506<br>lat: 35.0269528\",\"sitenumber: 368<br>sitename: site 368<br>lon: -95.8417478<br>lat: 36.0510748\",\"sitenumber: 369<br>sitename: site 369<br>lon: -117.2379281<br>lat: 32.7145647\",\"sitenumber: 370<br>sitename: site 370<br>lon: -70.1295062<br>lat: 41.676318\",\"sitenumber: 371<br>sitename: site 371<br>lon: -89.8778325<br>lat: 34.9776595\",\"sitenumber: 372<br>sitename: site 372<br>lon: -93.625257<br>lat: 45.510806\",\"sitenumber: 373<br>sitename: site 373<br>lon: -117.9019751<br>lat: 33.8005736\",\"sitenumber: 374<br>sitename: site 374<br>lon: -70.8835762<br>lat: 42.5167344\",\"sitenumber: 375<br>sitename: site 375<br>lon: -111.8507716<br>lat: 40.7466077\",\"sitenumber: 376<br>sitename: site 376<br>lon: -97.1111277<br>lat: 32.6660946\",\"sitenumber: 377<br>sitename: site 377<br>lon: -72.5350295<br>lat: 41.9270269\",\"sitenumber: 378<br>sitename: site 378<br>lon: -73.4163826<br>lat: 40.822412\",\"sitenumber: 379<br>sitename: site 379<br>lon: -104.9328223<br>lat: 39.5709676\",\"sitenumber: 380<br>sitename: site 380<br>lon: -118.163603<br>lat: 33.8780113\",\"sitenumber: 381<br>sitename: site 381<br>lon: -88.2910486<br>lat: 41.7084362\",\"sitenumber: 382<br>sitename: site 382<br>lon: -77.227152<br>lat: 39.1806427\",\"sitenumber: 383<br>sitename: site 383<br>lon: -96.0721929<br>lat: 30.0445511\",\"sitenumber: 384<br>sitename: site 384<br>lon: -83.8157938<br>lat: 41.3625198\",\"sitenumber: 385<br>sitename: site 385<br>lon: -71.0439119<br>lat: 41.6731483\",\"sitenumber: 386<br>sitename: site 386<br>lon: -94.8786794<br>lat: 42.0518818\",\"sitenumber: 387<br>sitename: site 387<br>lon: -121.4382653<br>lat: 38.4467313\",\"sitenumber: 388<br>sitename: site 388<br>lon: -122.580032<br>lat: 45.4089403\",\"sitenumber: 389<br>sitename: site 389<br>lon: -76.8523884<br>lat: 39.0756832\",\"sitenumber: 390<br>sitename: site 390<br>lon: -74.9100595<br>lat: 40.1341081\",\"sitenumber: 391<br>sitename: site 391<br>lon: -74.0177<br>lat: 41.5025214\",\"sitenumber: 392<br>sitename: site 392<br>lon: -122.2108084<br>lat: 47.2793332\",\"sitenumber: 393<br>sitename: site 393<br>lon: -122.6064926<br>lat: 47.538109\",\"sitenumber: 394<br>sitename: site 394<br>lon: -79.9468861<br>lat: 40.3930586\",\"sitenumber: 395<br>sitename: site 395<br>lon: -86.0871849<br>lat: 41.6575545\",\"sitenumber: 396<br>sitename: site 396<br>lon: -111.8474984<br>lat: 33.2560821\",\"sitenumber: 397<br>sitename: site 397<br>lon: -73.169045<br>lat: 41.1845577\",\"sitenumber: 398<br>sitename: site 398<br>lon: -105.9702421<br>lat: 32.7874791\",\"sitenumber: 399<br>sitename: site 399<br>lon: -89.4481964<br>lat: 43.2059642\",\"sitenumber: 400<br>sitename: site 400<br>lon: -73.9086155<br>lat: 40.9038709\",\"sitenumber: 401<br>sitename: site 401<br>lon: -122.656887<br>lat: 45.4978447\",\"sitenumber: 402<br>sitename: site 402<br>lon: -80.0847746<br>lat: 35.9760149\",\"sitenumber: 403<br>sitename: site 403<br>lon: -69.5406152<br>lat: 45.1016802\",\"sitenumber: 404<br>sitename: site 404<br>lon: -84.2999213<br>lat: 33.9295705\",\"sitenumber: 405<br>sitename: site 405<br>lon: -77.3912875<br>lat: 38.7551495\",\"sitenumber: 406<br>sitename: site 406<br>lon: -74.4485445<br>lat: 40.7863666\",\"sitenumber: 407<br>sitename: site 407<br>lon: -74.0384033<br>lat: 42.3823963\",\"sitenumber: 408<br>sitename: site 408<br>lon: -75.9915274<br>lat: 41.5945244\",\"sitenumber: 409<br>sitename: site 409<br>lon: -83.8911244<br>lat: 42.5225015\",\"sitenumber: 410<br>sitename: site 410<br>lon: -81.5226776<br>lat: 27.9122141\",\"sitenumber: 411<br>sitename: site 411<br>lon: -89.6711266<br>lat: 29.4616217\",\"sitenumber: 412<br>sitename: site 412<br>lon: -117.4816228<br>lat: 33.8916499\",\"sitenumber: 413<br>sitename: site 413<br>lon: -95.2745459<br>lat: 29.8790503\",\"sitenumber: 414<br>sitename: site 414<br>lon: -73.3170692<br>lat: 41.2801514\",\"sitenumber: 415<br>sitename: site 415<br>lon: -116.7871888<br>lat: 43.8930519\",\"sitenumber: 416<br>sitename: site 416<br>lon: -67.0539111<br>lat: 18.3661179\",\"sitenumber: 417<br>sitename: site 417<br>lon: -87.8004092<br>lat: 42.7784878\",\"sitenumber: 418<br>sitename: site 418<br>lon: -97.3587113<br>lat: 31.0898874\",\"sitenumber: 419<br>sitename: site 419<br>lon: -118.0698415<br>lat: 33.8367613\",\"sitenumber: 420<br>sitename: site 420<br>lon: -82.8538484<br>lat: 40.2421863\",\"sitenumber: 421<br>sitename: site 421<br>lon: -80.8395703<br>lat: 40.8950093\",\"sitenumber: 422<br>sitename: site 422<br>lon: -120.8701597<br>lat: 37.5331189\",\"sitenumber: 423<br>sitename: site 423<br>lon: -95.6605955<br>lat: 39.0279563\",\"sitenumber: 424<br>sitename: site 424<br>lon: -117.8857494<br>lat: 34.1268792\",\"sitenumber: 425<br>sitename: site 425<br>lon: -95.6490588<br>lat: 30.1408378\",\"sitenumber: 426<br>sitename: site 426<br>lon: -118.1519832<br>lat: 33.928014\",\"sitenumber: 427<br>sitename: site 427<br>lon: -74.8290395<br>lat: 40.1840453\",\"sitenumber: 428<br>sitename: site 428<br>lon: -87.9501711<br>lat: 41.9204921\",\"sitenumber: 429<br>sitename: site 429<br>lon: -116.4971662<br>lat: 43.7378612\",\"sitenumber: 430<br>sitename: site 430<br>lon: -111.8736279<br>lat: 33.2570676\",\"sitenumber: 431<br>sitename: site 431<br>lon: -82.958833<br>lat: 42.6641415\",\"sitenumber: 432<br>sitename: site 432<br>lon: -122.00405<br>lat: 37.404343\",\"sitenumber: 433<br>sitename: site 433<br>lon: -87.6557887<br>lat: 46.5276162\",\"sitenumber: 434<br>sitename: site 434<br>lon: -73.9640153<br>lat: 40.7053428\",\"sitenumber: 435<br>sitename: site 435<br>lon: -80.3603206<br>lat: 25.7796001\",\"sitenumber: 436<br>sitename: site 436<br>lon: -86.3438233<br>lat: 32.3024787\",\"sitenumber: 437<br>sitename: site 437<br>lon: -118.7586158<br>lat: 34.2630573\",\"sitenumber: 438<br>sitename: site 438<br>lon: -82.0838546<br>lat: 26.9998312\",\"sitenumber: 439<br>sitename: site 439<br>lon: -92.5187866<br>lat: 31.3766583\",\"sitenumber: 440<br>sitename: site 440<br>lon: -86.1318461<br>lat: 41.4676672\",\"sitenumber: 441<br>sitename: site 441<br>lon: -85.5949507<br>lat: 38.2772874\",\"sitenumber: 442<br>sitename: site 442<br>lon: -79.0567678<br>lat: 35.0646349\",\"sitenumber: 443<br>sitename: site 443<br>lon: -85.6039726<br>lat: 41.5498406\",\"sitenumber: 444<br>sitename: site 444<br>lon: -97.2401674<br>lat: 32.8034334\",\"sitenumber: 445<br>sitename: site 445<br>lon: -120.0943186<br>lat: 36.1460004\",\"sitenumber: 446<br>sitename: site 446<br>lon: -78.5368515<br>lat: 34.9482551\",\"sitenumber: 447<br>sitename: site 447<br>lon: -122.1935985<br>lat: 47.8694642\",\"sitenumber: 448<br>sitename: site 448<br>lon: -104.8299853<br>lat: 38.7722249\",\"sitenumber: 449<br>sitename: site 449<br>lon: -73.8409346<br>lat: 40.5767153\",\"sitenumber: 450<br>sitename: site 450<br>lon: -75.3886498<br>lat: 40.6206165\",\"sitenumber: 451<br>sitename: site 451<br>lon: -87.8282174<br>lat: 41.8893582\",\"sitenumber: 452<br>sitename: site 452<br>lon: -81.5409282<br>lat: 30.2097418\",\"sitenumber: 453<br>sitename: site 453<br>lon: -94.6803304<br>lat: 37.8271172\",\"sitenumber: 454<br>sitename: site 454<br>lon: -122.5208598<br>lat: 45.5275628\",\"sitenumber: 455<br>sitename: site 455<br>lon: -92.1465806<br>lat: 31.6755651\",\"sitenumber: 456<br>sitename: site 456<br>lon: -75.1881916<br>lat: 43.1147753\",\"sitenumber: 457<br>sitename: site 457<br>lon: -118.3140273<br>lat: 34.0605926\",\"sitenumber: 458<br>sitename: site 458<br>lon: -97.0165897<br>lat: 32.9520063\",\"sitenumber: 459<br>sitename: site 459<br>lon: -118.9543593<br>lat: 35.403178\",\"sitenumber: 460<br>sitename: site 460<br>lon: -96.063611<br>lat: 33.0189202\",\"sitenumber: 461<br>sitename: site 461<br>lon: -83.8970533<br>lat: 39.6532653\",\"sitenumber: 462<br>sitename: site 462<br>lon: -95.1210753<br>lat: 30.0922544\",\"sitenumber: 463<br>sitename: site 463<br>lon: -80.5841649<br>lat: 28.0234988\",\"sitenumber: 464<br>sitename: site 464<br>lon: -123.0922327<br>lat: 43.9941622\",\"sitenumber: 465<br>sitename: site 465<br>lon: -96.8169139<br>lat: 43.5068509\",\"sitenumber: 466<br>sitename: site 466<br>lon: -70.851461<br>lat: 43.2853603\",\"sitenumber: 467<br>sitename: site 467<br>lon: -111.943557<br>lat: 40.5303717\",\"sitenumber: 468<br>sitename: site 468<br>lon: -117.0843978<br>lat: 32.6099586\",\"sitenumber: 469<br>sitename: site 469<br>lon: -121.2053027<br>lat: 38.7579863\",\"sitenumber: 470<br>sitename: site 470<br>lon: -122.1291753<br>lat: 37.735251\",\"sitenumber: 471<br>sitename: site 471<br>lon: -73.1250247<br>lat: 40.7343483\",\"sitenumber: 472<br>sitename: site 472<br>lon: -71.8306376<br>lat: 41.6134904\",\"sitenumber: 473<br>sitename: site 473<br>lon: -100.4921329<br>lat: 28.7555438\",\"sitenumber: 474<br>sitename: site 474<br>lon: -79.8275141<br>lat: 33.0127641\",\"sitenumber: 475<br>sitename: site 475<br>lon: -75.1751949<br>lat: 39.9218853\",\"sitenumber: 476<br>sitename: site 476<br>lon: -97.2041325<br>lat: 32.9275402\",\"sitenumber: 477<br>sitename: site 477<br>lon: -122.6269899<br>lat: 45.5302078\",\"sitenumber: 478<br>sitename: site 478<br>lon: -118.4094361<br>lat: 33.9217458\",\"sitenumber: 479<br>sitename: site 479<br>lon: -82.9778204<br>lat: 42.526345\",\"sitenumber: 480<br>sitename: site 480<br>lon: -80.4612092<br>lat: 41.2353435\",\"sitenumber: 481<br>sitename: site 481<br>lon: -109.5334624<br>lat: 40.4604154\",\"sitenumber: 482<br>sitename: site 482<br>lon: -84.0601644<br>lat: 31.6467845\",\"sitenumber: 483<br>sitename: site 483<br>lon: -95.5649945<br>lat: 30.0520359\",\"sitenumber: 484<br>sitename: site 484<br>lon: -104.7575114<br>lat: 38.9697725\",\"sitenumber: 485<br>sitename: site 485<br>lon: -66.178629<br>lat: 18.4506504\",\"sitenumber: 486<br>sitename: site 486<br>lon: -95.3208892<br>lat: 32.3647802\",\"sitenumber: 487<br>sitename: site 487<br>lon: -75.0103091<br>lat: 39.9938898\",\"sitenumber: 488<br>sitename: site 488<br>lon: -94.6526227<br>lat: 31.3573187\",\"sitenumber: 489<br>sitename: site 489<br>lon: -76.547547<br>lat: 40.8022525\",\"sitenumber: 490<br>sitename: site 490<br>lon: -87.0096117<br>lat: 30.4050548\",\"sitenumber: 491<br>sitename: site 491<br>lon: -73.3506285<br>lat: 40.6702045\",\"sitenumber: 492<br>sitename: site 492<br>lon: -120.1673988<br>lat: 39.3586875\",\"sitenumber: 493<br>sitename: site 493<br>lon: -111.966177<br>lat: 33.3647627\",\"sitenumber: 494<br>sitename: site 494<br>lon: -78.6580799<br>lat: 35.7949648\",\"sitenumber: 495<br>sitename: site 495<br>lon: -97.6983549<br>lat: 26.1911814\",\"sitenumber: 496<br>sitename: site 496<br>lon: -65.688694<br>lat: 18.2543328\",\"sitenumber: 497<br>sitename: site 497<br>lon: -93.2606806<br>lat: 45.2051372\",\"sitenumber: 498<br>sitename: site 498<br>lon: -89.9802981<br>lat: 38.6781199\",\"sitenumber: 499<br>sitename: site 499<br>lon: -124.0458236<br>lat: 44.6799708\",\"sitenumber: 500<br>sitename: site 500<br>lon: -76.6309123<br>lat: 39.8525126\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[18.1578482,64.7595645],\"lng\":[-157.9086742,-65.688694]}},\"evals\":[],\"jsHooks\":[]} if (FALSE) {  # see random sample of 1k FRS facilities  if (!exists(\"frs\")) {    x <- try(require(EJAM)); if (!inherits(x, \"try-error\")) {      dataload_from_pins(\"frs\")    }    mydf <-  frs[sample(1:NROW( frs), 1000), 1:5]    mapfast(mydf)  }  # out <- EJAMejscreenapi::testoutput_ejscreenit_50$table  # names(out) <- fixcolnames(names(out), 'long', 'r')  out <- testoutput_ejscreenapi_plus_50  mapfastej(out)  mapfast(out, column_names = 'ej')  mapfast(out)   # Save .html file and view it in your browser   mytable <- testoutput_ejscreenit_5$table  # names(mytable) <- fixcolnames(names(mytable), 'long', 'r')  ## now, that renaming is done by mapfast function  mymap <- mapfastej(mytable)  tfile <- paste0(tempfile(), '.html')  htmltools::save_html(mymap, file = tfile)  browseURL(tfile)   }"},{"path":"https://usepa.github.io/EJAM/reference/mapfastej.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a leaflet html widget map of data.frame with lat lon — mapfastej","title":"Get a leaflet html widget map of data.frame with lat lon — mapfastej","text":"Like mapfast() column_names = \"ej\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfastej.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a leaflet html widget map of data.frame with lat lon — mapfastej","text":"","code":"mapfastej(...)"},{"path":"https://usepa.github.io/EJAM/reference/mapfastej.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a leaflet html widget map of data.frame with lat lon — mapfastej","text":"like mapfast() returns","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfastej_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","title":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","text":"Map Counties - Create static HTML/leaflet map counties","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfastej_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","text":"","code":"mapfastej_counties(   mydf,   colorvarname = \"pctile.Demog.Index.Supp\",   static_not_leaflet = FALSE,   main = \"Selected Counties\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/mapfastej_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","text":"mydf something like  ejamit(fips = fips_counties_from_statename(\"Kentucky\"), radius = 0)$results_bysite colorvarname colname indicator mydf drives color-coding static_not_leaflet set TRUE use map_shapes_plot() instead map_shapes_leaflet() main title map ... passed map_shapes_plot() relevant","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfastej_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","text":"leaflet html widget (static_not_leaflet=T, returns just shapes_counties_from_countyfips(mydf$ejam_uniq_id))","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfastej_counties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Counties - Create static or HTML/leaflet map of counties — mapfastej_counties","text":"","code":"if (FALSE) {  fips_ky <- fips_counties_from_statename(\"Kentucky\")  x <- ejamit(fips = fips_ky, radius = 0)  mapfastej_counties(x$results_bysite)  }"},{"path":"https://usepa.github.io/EJAM/reference/mapfast_gg.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","title":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","text":"Map - ggplot2 map points USA - basic map","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast_gg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","text":"","code":"mapfast_gg(   mydf = data.frame(lat = 40, lon = -100)[0, ],   dotsize = 1,   ptcolor = \"black\",   xlab = \"Longitude\",   ylab = \"Latitude\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/mapfast_gg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","text":"mydf data.frame columns named lat lon dotsize optional, size dot representing point ptcolor optional, color dot xlab optional, text x label ylab optional, text y label ... optional, passed ggplot2::labs()","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast_gg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","text":"ggplot() object","code":""},{"path":"https://usepa.github.io/EJAM/reference/mapfast_gg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map - ggplot2 map of points in the USA - very basic map — mapfast_gg","text":"","code":"if (FALSE) {   mapfast_gg(EJAM::testpoints_10)    pts <- read.table(textConnection(   \"lat lon   39.5624775 -119.7410994   42.38748056 -94.61803333\"   ),   header = TRUE,   as.is = TRUE   )   mapfast_gg(pts)   # str(pts) # lon, not long   }"},{"path":"https://usepa.github.io/EJAM/reference/map_blockgroups_over_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Map blockgroup boundaries near 1 site, after plotblocksnearby() — map_blockgroups_over_blocks","title":"Map blockgroup boundaries near 1 site, after plotblocksnearby() — map_blockgroups_over_blocks","text":"Overlay blockgroups near 1 site, plotblocksnearby(returnmap = TRUE)","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_blockgroups_over_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map blockgroup boundaries near 1 site, after plotblocksnearby() — map_blockgroups_over_blocks","text":"","code":"map_blockgroups_over_blocks(y)"},{"path":"https://usepa.github.io/EJAM/reference/map_blockgroups_over_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map blockgroup boundaries near 1 site, after plotblocksnearby() — map_blockgroups_over_blocks","text":"y output plotblocksnearby() returnmap = TRUE","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_blockgroups_over_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map blockgroup boundaries near 1 site, after plotblocksnearby() — map_blockgroups_over_blocks","text":"leaflet map widget","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/map_facilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - Create leaflet map within EJAM shiny app — map_facilities","title":"Map - Create leaflet map within EJAM shiny app — map_facilities","text":"make leaflet map uploaded points","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_facilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - Create leaflet map within EJAM shiny app — map_facilities","text":"","code":"map_facilities(mypoints, rad = 3, highlight = FALSE, clustered)"},{"path":"https://usepa.github.io/EJAM/reference/map_facilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - Create leaflet map within EJAM shiny app — map_facilities","text":"mypoints, data frame uploaded points rad, size drawing circle (buffer search radius) highlight, logicial whether highlight overlapping points (defaults FALSE) clustered, vector T/F values point, indicating overlap another","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_facilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - Create leaflet map within EJAM shiny app — map_facilities","text":"leaflet map circles, circleMarkers, basic popup","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/map_facilities_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - Update leaflet map within EJAM shiny app — map_facilities_proxy","title":"Map - Update leaflet map within EJAM shiny app — map_facilities_proxy","text":"update leaflet map within EJAM shiny app uploaded points.","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_facilities_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - Update leaflet map within EJAM shiny app — map_facilities_proxy","text":"","code":"map_facilities_proxy(   mymap,   rad = 3,   highlight = FALSE,   clustered = FALSE,   popup_vec = NULL,   use_marker_clusters = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/map_facilities_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - Update leaflet map within EJAM shiny app — map_facilities_proxy","text":"mymap, leafletProxy map object added rad, size drawing circle (buffer search radius) highlight, logicial whether highlight overlapping points (defaults FALSE) clustered, vector T/F values point, indicating overlap another popup_vec, vector popup values display points clicked. Length match number rows dataset. use_marker_clusters, boolean whether group points markerClusters. Uses logic shiny app implement n > 1000.","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_facilities_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - Update leaflet map within EJAM shiny app — map_facilities_proxy","text":"leaflet map circles, circleMarkers, basic popup","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - Create a new leaflet map from shapefile data, in shiny app — map_shapes_leaflet","title":"Map - Create a new leaflet map from shapefile data, in shiny app — map_shapes_leaflet","text":"Map - Create new leaflet map shapefile data, shiny app","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - Create a new leaflet map from shapefile data, in shiny app — map_shapes_leaflet","text":"","code":"map_shapes_leaflet(shapes, color = \"green\", popup = shapes$NAME)"},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - Create a new leaflet map from shapefile data, in shiny app — map_shapes_leaflet","text":"shapes like shapes_counties_from_countyfips(fips_counties_from_state_abbrev(\"DE\")) color passed leaflet::addPolygons() popup passed leaflet::addPolygons()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - Create a new leaflet map from shapefile data, in shiny app — map_shapes_leaflet","text":"html widget leaflet::leaflet()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - Update existing leaflet map by adding shapefile data, in shiny app — map_shapes_leaflet_proxy","title":"Map - Update existing leaflet map by adding shapefile data, in shiny app — map_shapes_leaflet_proxy","text":"Map - Update existing leaflet map adding shapefile data, shiny app","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - Update existing leaflet map by adding shapefile data, in shiny app — map_shapes_leaflet_proxy","text":"","code":"map_shapes_leaflet_proxy(mymap, shapes, color = \"green\", popup = shapes$NAME)"},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - Update existing leaflet map by adding shapefile data, in shiny app — map_shapes_leaflet_proxy","text":"mymap map like leafletProxy() shapes like shapes_counties_from_countyfips(fips_counties_from_state_abbrev(\"DE\")) color passed leaflet::addPolygons() popup passed leaflet::addPolygons()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_leaflet_proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - Update existing leaflet map by adding shapefile data, in shiny app — map_shapes_leaflet_proxy","text":"html widget like leaflet::leafletProxy()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_mapview.html","id":null,"dir":"Reference","previous_headings":"","what":"Map - Use mapview from the mapview package if available — map_shapes_mapview","title":"Map - Use mapview from the mapview package if available — map_shapes_mapview","text":"Map - Use mapview mapview package available","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_mapview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map - Use mapview from the mapview package if available — map_shapes_mapview","text":"","code":"map_shapes_mapview(shapes, col.regions = \"green\", map.types = \"OpenStreetMap\")"},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_mapview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map - Use mapview from the mapview package if available — map_shapes_mapview","text":"shapes like shapes_counties_from_countyfips(fips_counties_from_state_abbrev(\"DE\")) col.regions passed mapview::mapview() map.types passed  mapview::mapview()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_mapview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map - Use mapview from the mapview package if available — map_shapes_mapview","text":"like output mapview function mapview::mapview(), mapview package installed, used input spatial object via sf::read_sf()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_mapview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map - Use mapview from the mapview package if available — map_shapes_mapview","text":"","code":"if (FALSE) {   map_shapes_mapview(     shapes_counties_from_countyfips(fips_counties_from_state_abbrev(\"DE\"))   ) }"},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Map using base R plot() — map_shapes_plot","title":"Map using base R plot() — map_shapes_plot","text":"Map using base R plot()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map using base R plot() — map_shapes_plot","text":"","code":"map_shapes_plot(shapes, main = \"Selected Census Units\", ...)"},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map using base R plot() — map_shapes_plot","text":"shapes like shapes_counties_from_countyfips(fips_counties_from_state_abbrev(\"DE\")) main title map ... passed plot()","code":""},{"path":"https://usepa.github.io/EJAM/reference/map_shapes_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map using base R plot() — map_shapes_plot","text":"Just draws map using plot()","code":""},{"path":"https://usepa.github.io/EJAM/reference/metadata_add.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function for package to set attributes of a dataset — metadata_add","title":"helper function for package to set attributes of a dataset — metadata_add","text":"can used annually update datasets package. just makes easier set metadata attributes similarly number data elements, example, add new update existing attributes.","code":""},{"path":"https://usepa.github.io/EJAM/reference/metadata_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function for package to set attributes of a dataset — metadata_add","text":"","code":"metadata_add(x, metadata)"},{"path":"https://usepa.github.io/EJAM/reference/metadata_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function for package to set attributes of a dataset — metadata_add","text":"x dataset (object) whose metadata want update create metadata must named list, function can : attr(x, =names(metadata)[]) <- metadata[[]]","code":""},{"path":"https://usepa.github.io/EJAM/reference/metadata_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function for package to set attributes of a dataset — metadata_add","text":"returns x new altered attributes","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/metadata_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"helper function for package to set attributes of a dataset — metadata_add","text":"","code":"x <- data.frame(a=1:10,b=1001:1010)   metadata <- list(   ejscreen_version =  '2.2',   acs_version =          '2017-2021',   census_version = 2020,   ejscreen_releasedate = '2023-06-23',   acs_releasedate =      '2022-12-08',   ejscreen_pkg_data = NA   )   x <- metadata_add(x, metadata) #> Error in metadata_add(x, metadata): could not find function \"metadata_add\"   attributes(x) #> $names #> [1] \"a\" \"b\" #>  #> $class #> [1] \"data.frame\" #>  #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 #>    x <- metadata_add(x, list(status='final')) #> Error in metadata_add(x, list(status = \"final\")): could not find function \"metadata_add\"   attr(x,'status') #> NULL"},{"path":"https://usepa.github.io/EJAM/reference/metadata_check.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function in updating the package metadata — metadata_check","title":"helper function in updating the package metadata — metadata_check","text":"Quick dirty helper development, check attributes data files relevant packages. loads unloaded packages needed, might want , coded able check attributes without .","code":""},{"path":"https://usepa.github.io/EJAM/reference/metadata_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function in updating the package metadata — metadata_check","text":"","code":"metadata_check(   packages = EJAM::ejampackages,   which = c(\"census_version\", \"acs_version\", \"acs_releasedate\", \"ACS\",     \"ejscreen_version\", \"ejscreen_releasedate\", \"ejscreen_pkg_data\", \"year\", \"released\"),   loadifnotloaded = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/metadata_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function in updating the package metadata — metadata_check","text":"packages Optional. e.g. 'EJAMejscreendata', can vector character strings, specified, default report packages EJ part name, like EJAMejscreenapi Optional vector (list) strings, attributes. Default typical ones used EJAM-related packages currently. loadifnotloaded Optional control func temporarily attach packages already loaded.","code":""},{"path":"https://usepa.github.io/EJAM/reference/NAICS.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS (DATA) named list of all NAICS code numbers and industry name for each — NAICS","title":"NAICS (DATA) named list of all NAICS code numbers and industry name for each — NAICS","text":"NAICS (DATA) named list NAICS code numbers industry name ","code":""},{"path":"https://usepa.github.io/EJAM/reference/NAICS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAICS (DATA) named list of all NAICS code numbers and industry name for each — NAICS","text":"see https://naics.com","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"Used naics_find()","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"","code":"naics2children(codes, allcodes = EJAM::NAICS, quiet = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"codes vector numerical character allcodes Optional (already loaded package) - dataset codes quiet whether avoid printing results console","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"vector codes names","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"start shortest (highest level) codes. since tied nchar, branches zero overlap, . , get children = rows parentcode == substr(allcodes, 1, nchar(parentcode)) put together list codes want include far. now next longest set codes original list codes, thing. etc. 5 digit ones get 6digit children. take unique(allthat) table(nchar(.character(NAICS))) 2    3    4    5    6 17   99  311  709 1057","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics2children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NAICS - query NAICS codes and also see all children (subcategories) of any of those — naics2children","text":"","code":"naics2children(211) #>  #> 211 - Oil and Gas Extraction  #> 2111 - Oil and Gas Extraction  #> 21112 - Crude Petroleum Extraction   #> 211120 - Crude Petroleum Extraction   #> 21113 - Natural Gas Extraction   #> 211130 - Natural Gas Extraction     naics_find(211, exactnumber=TRUE) #> Error in naics_find(211, exactnumber = TRUE): could not find function \"naics_find\"   naics_find(211, exactnumber=TRUE, add_children = TRUE) #> Error in naics_find(211, exactnumber = TRUE, add_children = TRUE): could not find function \"naics_find\"   NAICS[211][1:3] # wrong #> 236117 - New Housing For-Sale Builders                                   <NA>  #>                                 236117                                     NA  #>                                   <NA>  #>                                     NA    NAICS[NAICS == 211] #> 211 - Oil and Gas Extraction  #>                          211    NAICS[\"211 - Oil and Gas Extraction\"] #> 211 - Oil and Gas Extraction  #>                          211"},{"path":"https://usepa.github.io/EJAM/reference/naicstable.html","id":null,"dir":"Reference","previous_headings":"","what":"naicstable (DATA) data.table of NAICS code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3,4,5,and 6-digit NAICS that this code falls under, where relevant for given length — naicstable","title":"naicstable (DATA) data.table of NAICS code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3,4,5,and 6-digit NAICS that this code falls under, where relevant for given length — naicstable","text":"similar data file EJAM::NAICS useful format newer functions work .","code":""},{"path":"https://usepa.github.io/EJAM/reference/naicstable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"naicstable (DATA) data.table of NAICS code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3,4,5,and 6-digit NAICS that this code falls under, where relevant for given length — naicstable","text":"see https://naics.com","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"Easy way list 2-digit NAICS (17 categories), level","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"","code":"naics_categories(digits = 2, dataset = EJAM::NAICS)"},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"digits default 2, 2-digits NAICS, top level, 6. dataset default dataset called NAICS, installed package. see NAICS  Check attr(NAICS, 'year')","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"matrix 1 column 2-digit codes rownames look like \"22 - Utilities\" etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"Also see https://www.naics.com/search/ many NAICS codes roughly number digits code: table(nchar(NAICS)) 2    3    4    5    6 17   99  311  709 1057 See https://www.census.gov/naics/","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NAICS - See the names of industrial categories and their NAICS code — naics_categories","text":"","code":"naics_categories() #> Also see https://www.naics.com/search/  #>                                                                               [,1] #> 11 - Agriculture, Forestry, Fishing and Hunting                                 11 #> 21 - Mining, Quarrying, and Oil and Gas Extraction                              21 #> 22 - Utilities                                                                  22 #> 23 - Construction                                                               23 #> 42 - Wholesale Trade                                                            42 #> 51 - Information                                                                51 #> 52 - Finance and Insurance                                                      52 #> 53 - Real Estate and Rental and Leasing                                         53 #> 54 - Professional, Scientific, and Technical Services                           54 #> 55 - Management of Companies and Enterprises                                    55 #> 56 - Administrative and Support and Waste Management and Remediation Services   56 #> 61 - Educational Services                                                       61 #> 62 - Health Care and Social Assistance                                          62 #> 71 - Arts, Entertainment, and Recreation                                        71 #> 72 - Accommodation and Food Services                                            72 #> 81 - Other Services (except Public Administration)                              81 #> 92 - Public Administration                                                      92 #> 31 - Manufacturing                                                              31 #> 32 - Manufacturing                                                              32 #> 33 - Manufacturing                                                              33 #> 44 - Retail Trade                                                               44 #> 45 - Retail Trade                                                               45 #> 48 - Transportation and Warehousing                                             48 #> 49 - Transportation and Warehousing                                             49"},{"path":"https://usepa.github.io/EJAM/reference/naics_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"naics_counts (DATA) data.frame with counts for each NAICS code, with and without subcodes, and labels that include the site counts — naics_counts","title":"naics_counts (DATA) data.frame with counts for each NAICS code, with and without subcodes, and labels that include the site counts — naics_counts","text":"data frame containing 2200 NAICS codes (3/2024), count sites frs data, including subcodes. Used EJAM shiny app dropdown menu. @seealso frs_by_naics","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_download.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - Script to download NAICS file with code and name of sector — naics_download","title":"NAICS - Script to download NAICS file with code and name of sector — naics_download","text":"See source code. Mostly just short script get 2017 2022 codes names. See <'https://www.census.gov/naics/?48967'>","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - Script to download NAICS file with code and name of sector — naics_download","text":"","code":"naics_download(   year = 2017,   urlpattern = \"https://www.census.gov/naics/YYYYNAICS/2-6%20digit_YYYY_Codes.xlsx\",   destfile = paste0(\"~/Downloads/\", year, \"NAICS.xlsx\") )"},{"path":"https://usepa.github.io/EJAM/reference/naics_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - Script to download NAICS file with code and name of sector — naics_download","text":"year vintage NAICS codes use, 2012, 2017, 2022 urlpattern full url xlsx file use, YYYY instead year destfile full path name file save locally","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - Script to download NAICS file with code and name of sector — naics_download","text":"names list year attribute","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_findwebscrape.html","id":null,"dir":"Reference","previous_headings":"","what":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","title":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","text":"finds just naics_from_any() , since needs exact match looks naics.com website lists various aliases sector.","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_findwebscrape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","text":"","code":"naics_findwebscrape(query)"},{"path":"https://usepa.github.io/EJAM/reference/naics_findwebscrape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","text":"query text like \"gasoline\" \"copper smelting\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_findwebscrape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","text":"data.frame info found, naics title","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_findwebscrape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"for query term, show list of roughly matching NAICS, scraped from web — naics_findwebscrape","text":"","code":"# naics_from_any(\"copper smelting\")  # naics_from_any(\"copper smelting\", website_scrape=TRUE)  # browseURL(naics_from_any(\"copper smelting\", website_url=TRUE) )    url_naics.com(\"copper smelting\") #> [1] \"https://www.naics.com/code-search/?trms=copper+smelting&v=2017&styp=naics\"   if (FALSE) {   naics_findwebscrape(\"copper smelting\")   browseURL(url_naics.com(\"copper smelting\"))   browseURL(naics_url_of_code(326))   }"},{"path":"https://usepa.github.io/EJAM/reference/naics_from_any.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - General way to search for industry names and NAICS codes — naics_from_any","title":"NAICS - General way to search for industry names and NAICS codes — naics_from_any","text":"Find industry names codes searching queried code(s) text","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - General way to search for industry names and NAICS codes — naics_from_any","text":"","code":"naics_from_any(   query,   children = FALSE,   ignore.case = TRUE,   fixed = FALSE,   website_scrape = FALSE,   website_url = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/naics_from_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - General way to search for industry names and NAICS codes — naics_from_any","text":"query query string(s) /number(s), vector NAICS codes industry names regular expression partial words children logical, TRUE, also return subcategories - NAICS starts digits ignore.case see grepl() fixed exact match? see grepl() website_scrape whether scrape info NAICS website return table codes names match (web query uses synonyms gets hits) website_url whether return URL webpage info NAICS (web query uses synonyms gets hits)","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - General way to search for industry names and NAICS codes — naics_from_any","text":"subset naicstable data.table (just codes column)","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_from_code.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - search for industry names by NAICS code(s), 2-6 digits long each — naics_from_code","title":"NAICS - search for industry names by NAICS code(s), 2-6 digits long each — naics_from_code","text":"See naics_from_any() uses ","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - search for industry names by NAICS code(s), 2-6 digits long each — naics_from_code","text":"","code":"naics_from_code(mycodes, children = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/naics_from_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - search for industry names by NAICS code(s), 2-6 digits long each — naics_from_code","text":"mycodes vector numeric NAICS codes. see https://naics.com children logical, TRUE, also return subcategories - NAICS starts digits","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - search for industry names by NAICS code(s), 2-6 digits long each — naics_from_code","text":"subset naicstable data.table (just codes column)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_from_federalregister.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - Try to extract which NAICS could be affected by a rule published in the Federal Register\r\nby reading the NAICS listed near the top of the preamble - DRAFT WORK IN PROGRESS — naics_from_federalregister","title":"NAICS - Try to extract which NAICS could be affected by a rule published in the Federal Register\r\nby reading the NAICS listed near the top of the preamble - DRAFT WORK IN PROGRESS — naics_from_federalregister","text":"NAICS - Try extract NAICS affected rule published Federal Register reading NAICS listed near top preamble - DRAFT WORK PROGRESS","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_federalregister.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - Try to extract which NAICS could be affected by a rule published in the Federal Register\r\nby reading the NAICS listed near the top of the preamble - DRAFT WORK IN PROGRESS — naics_from_federalregister","text":"","code":"naics_from_federalregister(naics_text_copy_from_fr)"},{"path":"https://usepa.github.io/EJAM/reference/naics_from_federalregister.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - Try to extract which NAICS could be affected by a rule published in the Federal Register\r\nby reading the NAICS listed near the top of the preamble - DRAFT WORK IN PROGRESS — naics_from_federalregister","text":"naics_text_copy_from_fr","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"query parts words, etc. industry name.","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"","code":"naics_from_name(mynames, children = FALSE, ignore.case = TRUE, fixed = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"mynames query string, vector NAICS industry names regular expression partial words. See https://naics.com children logical, TRUE, also return subcategories - NAICS starts digits ignore.case see grepl() fixed exact match? see grepl() search_on_naics_website whether query naics website hits just search text industry title","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"subset naicstable data.table (just codes column)","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"See naics_from_any() uses ","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_from_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NAICS - Search for industry names and NAICS codes by query string — naics_from_name","text":"","code":"data.table::fintersect(naics_from_any( \"manufac\"), naics_from_any(\"chem\")) #>       code     n2     n3     n4     n5     n6 #>      <num> <char> <char> <char> <char> <char> #>  1:    325     32    325    325    325    325 #>  2:   3251     32    325   3251   3251   3251 #>  3:  32511     32    325   3251  32511  32511 #>  4: 325110     32    325   3251  32511 325110 #>  5:  32518     32    325   3251  32518  32518 #>  6: 325180     32    325   3251  32518 325180 #>  7:  32519     32    325   3251  32519  32519 #>  8: 325194     32    325   3251  32519 325194 #>  9: 325199     32    325   3251  32519 325199 #> 10:   3253     32    325   3253   3253   3253 #> 11:  32532     32    325   3253  32532  32532 #> 12: 325320     32    325   3253  32532 325320 #> 13:   3259     32    325   3259   3259   3259 #> 14:  32599     32    325   3259  32599  32599 #> 15: 325992     32    325   3259  32599 325992 #> 16: 325998     32    325   3259  32599 325998 #>                                                                       name #>                                                                     <char> #>  1:                                                 Chemical Manufacturing #>  2:                                           Basic Chemical Manufacturing #>  3:                                            Petrochemical Manufacturing #>  4:                                            Petrochemical Manufacturing #>  5:                           Other Basic Inorganic Chemical Manufacturing #>  6:                           Other Basic Inorganic Chemical Manufacturing #>  7:                             Other Basic Organic Chemical Manufacturing #>  8:    Cyclic Crude, Intermediate, and Gum and Wood Chemical Manufacturing #>  9:                         All Other Basic Organic Chemical Manufacturing #> 10:   Pesticide, Fertilizer, and Other Agricultural Chemical Manufacturing #> 11:                Pesticide and Other Agricultural Chemical Manufacturing #> 12:                Pesticide and Other Agricultural Chemical Manufacturing #> 13:                   Other Chemical Product and Preparation Manufacturing #> 14:               All Other Chemical Product and Preparation Manufacturing #> 15:            Photographic Film, Paper, Plate, and Chemical Manufacturing #> 16: All Other Miscellaneous Chemical Product and Preparation Manufacturing #>                                                                            num_name #>                                                                              <char> #>  1:                                                    325 - Chemical Manufacturing #>  2:                                             3251 - Basic Chemical Manufacturing #>  3:                                             32511 - Petrochemical Manufacturing #>  4:                                            325110 - Petrochemical Manufacturing #>  5:                            32518 - Other Basic Inorganic Chemical Manufacturing #>  6:                           325180 - Other Basic Inorganic Chemical Manufacturing #>  7:                              32519 - Other Basic Organic Chemical Manufacturing #>  8:    325194 - Cyclic Crude, Intermediate, and Gum and Wood Chemical Manufacturing #>  9:                         325199 - All Other Basic Organic Chemical Manufacturing #> 10:     3253 - Pesticide, Fertilizer, and Other Agricultural Chemical Manufacturing #> 11:                 32532 - Pesticide and Other Agricultural Chemical Manufacturing #> 12:                325320 - Pesticide and Other Agricultural Chemical Manufacturing #> 13:                     3259 - Other Chemical Product and Preparation Manufacturing #> 14:                32599 - All Other Chemical Product and Preparation Manufacturing #> 15:            325992 - Photographic Film, Paper, Plate, and Chemical Manufacturing #> 16: 325998 - All Other Miscellaneous Chemical Product and Preparation Manufacturing"},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"Given 3-digit NAICS code, example, get NAICS start digits.","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"","code":"naics_subcodes_from_code(mycodes)"},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"mycodes NAICS codes vector, 2 6 digits . See https://naics.com","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"subset naicstable data.table (just codes column)","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"similar idea naics2children() robust See naics_from_any() uses ","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/naics_subcodes_from_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NAICS - find subcategories of the given overall NAICS industry code(s) — naics_subcodes_from_code","text":"","code":"naics_categories() #> Also see https://www.naics.com/search/  #>                                                                               [,1] #> 11 - Agriculture, Forestry, Fishing and Hunting                                 11 #> 21 - Mining, Quarrying, and Oil and Gas Extraction                              21 #> 22 - Utilities                                                                  22 #> 23 - Construction                                                               23 #> 42 - Wholesale Trade                                                            42 #> 51 - Information                                                                51 #> 52 - Finance and Insurance                                                      52 #> 53 - Real Estate and Rental and Leasing                                         53 #> 54 - Professional, Scientific, and Technical Services                           54 #> 55 - Management of Companies and Enterprises                                    55 #> 56 - Administrative and Support and Waste Management and Remediation Services   56 #> 61 - Educational Services                                                       61 #> 62 - Health Care and Social Assistance                                          62 #> 71 - Arts, Entertainment, and Recreation                                        71 #> 72 - Accommodation and Food Services                                            72 #> 81 - Other Services (except Public Administration)                              81 #> 92 - Public Administration                                                      92 #> 31 - Manufacturing                                                              31 #> 32 - Manufacturing                                                              32 #> 33 - Manufacturing                                                              33 #> 44 - Retail Trade                                                               44 #> 45 - Retail Trade                                                               45 #> 48 - Transportation and Warehousing                                             48 #> 49 - Transportation and Warehousing                                             49"},{"path":"https://usepa.github.io/EJAM/reference/naics_url_of_code.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - Get URL for page with info about industry sector(s) by NAICS — naics_url_of_code","title":"NAICS - Get URL for page with info about industry sector(s) by NAICS — naics_url_of_code","text":"See (https://naics.com) information NAICS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_url_of_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - Get URL for page with info about industry sector(s) by NAICS — naics_url_of_code","text":"","code":"naics_url_of_code(naics)"},{"path":"https://usepa.github.io/EJAM/reference/naics_url_of_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - Get URL for page with info about industry sector(s) by NAICS — naics_url_of_code","text":"naics vector one NAICS codes, like 11,\"31-33\",325","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_url_of_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - Get URL for page with info about industry sector(s) by NAICS — naics_url_of_code","text":"vector URLs strings like https://www.naics.com/six-digit-naics/?v=2017&code=22","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"NAICS - Validate NAICS uploads — naics_validation","title":"NAICS - Validate NAICS uploads — naics_validation","text":"Validates prepares echo uploads","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAICS - Validate NAICS uploads — naics_validation","text":"","code":"naics_validation(naics_enter, naics_select)"},{"path":"https://usepa.github.io/EJAM/reference/naics_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NAICS - Validate NAICS uploads — naics_validation","text":"naics_enter vector naics naics_select single value","code":""},{"path":"https://usepa.github.io/EJAM/reference/naics_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NAICS - Validate NAICS uploads — naics_validation","text":"boolean value","code":""},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indicator names within a varlist like names_d — namesbyvarlist","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"Get indicator names within varlist like names_d","code":""},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"","code":"namesbyvarlist(   varlist,   nametype = c(\"rname\", \"longname_tableheader\", \"apiname\")[1] )"},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"varlist one character string like \"names_d\", vector nametype vector 1 names columns map_headernames, shortcut type can api, csv, r, original, long, shortlabel","code":""},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"data.frame one row per indicator, one col per nametype column identifying varlist","code":""},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"Note names_d_friendly refers semi-long names use labels","code":""},{"path":"https://usepa.github.io/EJAM/reference/namesbyvarlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get indicator names within a varlist like names_d — namesbyvarlist","text":"","code":"unique(map_headernames$varlist) #>  [1] \"names_d\"                                    #>  [2] \"names_d_ratio_to_avg\"                       #>  [3] \"names_d_ratio_to_state_avg\"                 #>  [4] \"names_d_pctile\"                             #>  [5] \"names_d_state_pctile\"                       #>  [6] \"names_d_avg\"                                #>  [7] \"names_d_state_avg\"                          #>  [8] \"names_d_count\"                              #>  [9] \"names_d_subgroups\"                          #> [10] \"names_d_subgroups_ratio_to_avg\"             #> [11] \"names_d_subgroups_ratio_to_state_avg\"       #> [12] \"names_d_subgroups_pctile\"                   #> [13] \"names_d_subgroups_state_pctile\"             #> [14] \"names_d_subgroups_avg\"                      #> [15] \"names_d_subgroups_state_avg\"                #> [16] \"names_d_subgroups_count\"                    #> [17] \"names_d_subgroups_alone\"                    #> [18] \"names_d_subgroups_alone_ratio_to_avg\"       #> [19] \"names_d_subgroups_alone_ratio_to_state_avg\" #> [20] \"names_d_subgroups_alone_pctile\"             #> [21] \"names_d_subgroups_alone_state_pctile\"       #> [22] \"names_d_subgroups_alone_avg\"                #> [23] \"names_d_subgroups_alone_state_avg\"          #> [24] \"names_d_subgroups_alone_count\"              #> [25] \"names_d_subgroups_nh\"                       #> [26] \"names_d_subgroups_nh_ratio_to_avg\"          #> [27] \"names_d_subgroups_nh_ratio_to_state_avg\"    #> [28] \"names_d_subgroups_nh_pctile\"                #> [29] \"names_d_subgroups_nh_state_pctile\"          #> [30] \"names_d_subgroups_nh_avg\"                   #> [31] \"names_d_subgroups_nh_state_avg\"             #> [32] \"names_d_subgroups_nh_count\"                 #> [33] \"names_d_other_count\"                        #> [34] \"x_mapcolor\"                                 #> [35] \"x_maptextpopup\"                             #> [36] \"x_anyother\"                                 #> [37] \"names_e\"                                    #> [38] \"names_e_ratio_to_avg\"                       #> [39] \"names_e_ratio_to_state_avg\"                 #> [40] \"names_e_pctile\"                             #> [41] \"names_e_state_pctile\"                       #> [42] \"names_e_avg\"                                #> [43] \"names_e_state_avg\"                          #> [44] \"names_ej\"                                   #> [45] \"names_ej_state\"                             #> [46] \"names_ej_supp\"                              #> [47] \"names_ej_supp_state\"                        #> [48] \"names_ej_pctile\"                            #> [49] \"names_ej_state_pctile\"                      #> [50] \"names_ej_supp_pctile\"                       #> [51] \"names_ej_supp_state_pctile\"                    namesbyvarlist('names_e_avg', 'rname') #>         varlist               rname #> 408 names_e_avg              avg.pm #> 409 names_e_avg              avg.o3 #> 410 names_e_avg          avg.cancer #> 411 names_e_avg            avg.resp #> 412 names_e_avg             avg.dpm #> 413 names_e_avg      avg.pctpre1960 #> 414 names_e_avg   avg.traffic.score #> 415 names_e_avg   avg.proximity.npl #> 416 names_e_avg   avg.proximity.rmp #> 417 names_e_avg  avg.proximity.tsdf #> 418 names_e_avg avg.proximity.npdes #> 419 names_e_avg             avg.ust #> 420 names_e_avg            avg.rsei  namesbyvarlist('names_d') #>    varlist            rname #> 1  names_d      Demog.Index #> 2  names_d Demog.Index.Supp #> 3  names_d        pctlowinc #> 4  names_d       pctlingiso #> 5  names_d    pctunemployed #> 6  names_d          pctlths #> 7  names_d         lowlifex #> 8  names_d        pctunder5 #> 9  names_d        pctover64 #> 10 names_d           pctmin  namesbyvarlist('names_d', 'r') #>    varlist            rname #> 1  names_d      Demog.Index #> 2  names_d Demog.Index.Supp #> 3  names_d        pctlowinc #> 4  names_d       pctlingiso #> 5  names_d    pctunemployed #> 6  names_d          pctlths #> 7  names_d         lowlifex #> 8  names_d        pctunder5 #> 9  names_d        pctover64 #> 10 names_d           pctmin  namesbyvarlist('names_d', 'friendly') #> Error in namesbyvarlist(\"names_d\", \"friendly\"): specified nametype not a known type and not found among colnames(map_headernames)  namesbyvarlist('names_d', 'shortlabel') #>    varlist           shortlabel #> 1  names_d           Demog.Ind. #> 2  names_d     Suppl Demog.Ind. #> 3  names_d            %Low-inc. #> 4  names_d     %Limited English #> 5  names_d          %Unemployed #> 6  names_d       %< High School #> 7  names_d %Low life expectancy #> 8  names_d             %< age 5 #> 9  names_d            %> age 64 #> 10 names_d                 %POC    namesbyvarlist( 'names_e_pctile', c('r', 'longname_tableheader'))     #>            varlist                  rname #> 382 names_e_pctile              pctile.pm #> 383 names_e_pctile              pctile.o3 #> 384 names_e_pctile          pctile.cancer #> 385 names_e_pctile            pctile.resp #> 386 names_e_pctile             pctile.dpm #> 387 names_e_pctile      pctile.pctpre1960 #> 388 names_e_pctile   pctile.traffic.score #> 389 names_e_pctile   pctile.proximity.npl #> 390 names_e_pctile   pctile.proximity.rmp #> 391 names_e_pctile  pctile.proximity.tsdf #> 392 names_e_pctile pctile.proximity.npdes #> 393 names_e_pctile             pctile.ust #> 394 names_e_pctile            pctile.rsei #>                                                                            longname_tableheader #> 382                                      US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 383                                                               US percentile for Ozone (ppb) #> 384                                 US percentile for Air Toxics Cancer Risk (risk per million) #> 385                                       US percentile for Air Toxics Respiratory Hazard Index #> 386                              US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 387                                US percentile for Lead Paint Indicator (% pre-1960s housing) #> 388       US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 389                              US percentile for Superfund Proximity (site count/km distance) #> 390                                US percentile for RMP Proximity (facility count/km distance) #> 391                    US percentile for Hazardous Waste Proximity (facility count/km distance) #> 392 US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 393                                 US percentile for Underground Storage Tanks (UST) indicator #> 394                                                     US percentile for Toxic Releases to Air  namesbyvarlist(c('names_e_pctile', 'names_e_state_pctile'),     c('varlist', 'r', 'api',   'names_friendly', 'longname_tableheader')) #>                  varlist            varlist.1                        rname #> 382       names_e_pctile       names_e_pctile                    pctile.pm #> 383       names_e_pctile       names_e_pctile                    pctile.o3 #> 384       names_e_pctile       names_e_pctile                pctile.cancer #> 385       names_e_pctile       names_e_pctile                  pctile.resp #> 386       names_e_pctile       names_e_pctile                   pctile.dpm #> 387       names_e_pctile       names_e_pctile            pctile.pctpre1960 #> 388       names_e_pctile       names_e_pctile         pctile.traffic.score #> 389       names_e_pctile       names_e_pctile         pctile.proximity.npl #> 390       names_e_pctile       names_e_pctile         pctile.proximity.rmp #> 391       names_e_pctile       names_e_pctile        pctile.proximity.tsdf #> 392       names_e_pctile       names_e_pctile       pctile.proximity.npdes #> 393       names_e_pctile       names_e_pctile                   pctile.ust #> 394       names_e_pctile       names_e_pctile                  pctile.rsei #> 395 names_e_state_pctile names_e_state_pctile              state.pctile.pm #> 396 names_e_state_pctile names_e_state_pctile              state.pctile.o3 #> 397 names_e_state_pctile names_e_state_pctile          state.pctile.cancer #> 398 names_e_state_pctile names_e_state_pctile            state.pctile.resp #> 399 names_e_state_pctile names_e_state_pctile             state.pctile.dpm #> 400 names_e_state_pctile names_e_state_pctile      state.pctile.pctpre1960 #> 401 names_e_state_pctile names_e_state_pctile   state.pctile.traffic.score #> 402 names_e_state_pctile names_e_state_pctile   state.pctile.proximity.npl #> 403 names_e_state_pctile names_e_state_pctile   state.pctile.proximity.rmp #> 404 names_e_state_pctile names_e_state_pctile  state.pctile.proximity.tsdf #> 405 names_e_state_pctile names_e_state_pctile state.pctile.proximity.npdes #> 406 names_e_state_pctile names_e_state_pctile             state.pctile.ust #> 407 names_e_state_pctile names_e_state_pctile            state.pctile.rsei #>              apiname #> 382     N_E_PM25_PER #> 383       N_E_O3_PER #> 384   N_E_CANCER_PER #> 385     N_E_RESP_PER #> 386   N_E_DIESEL_PER #> 387     N_E_LEAD_PER #> 388  N_E_TRAFFIC_PER #> 389      N_E_NPL_PER #> 390      N_E_RMP_PER #> 391     N_E_TSDF_PER #> 392    N_E_NPDES_PER #> 393      N_E_UST_PER #> 394 N_E_RSEI_AIR_PER #> 395     S_E_PM25_PER #> 396       S_E_O3_PER #> 397   S_E_CANCER_PER #> 398     S_E_RESP_PER #> 399   S_E_DIESEL_PER #> 400     S_E_LEAD_PER #> 401  S_E_TRAFFIC_PER #> 402      S_E_NPL_PER #> 403      S_E_RMP_PER #> 404     S_E_TSDF_PER #> 405    S_E_NPDES_PER #> 406      S_E_UST_PER #> 407 S_E_RSEI_AIR_PER #>                                                                                     names_friendly #> 382                                         US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 383                                                                  US percentile for Ozone (ppb) #> 384                                    US percentile for Air Toxics Cancer Risk (risk per million) #> 385                                          US percentile for Air Toxics Respiratory Hazard Index #> 386                                 US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 387                                   US percentile for Lead Paint Indicator (% pre-1960s housing) #> 388          US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 389                                 US percentile for Superfund Proximity (site count/km distance) #> 390                                   US percentile for RMP Proximity (facility count/km distance) #> 391                       US percentile for Hazardous Waste Proximity (facility count/km distance) #> 392    US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 393                                    US percentile for Underground Storage Tanks (UST) indicator #> 394                                                        US percentile for Toxic Releases to Air #> 395                                      State percentile for Particulate Matter (PM 2.5 in ug/m3) #> 396                                                               State percentile for Ozone (ppb) #> 397                                 State percentile for Air Toxics Cancer Risk (risk per million) #> 398                                       State percentile for Air Toxics Respiratory Hazard Index #> 399                              State percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 400                                State percentile for Lead Paint Indicator (% pre-1960s housing) #> 401       State percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 402                              State percentile for Superfund Proximity (site count/km distance) #> 403                                State percentile for RMP Proximity (facility count/km distance) #> 404                    State percentile for Hazardous Waste Proximity (facility count/km distance) #> 405 State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 406                                 State percentile for Underground Storage Tanks (UST) indicator #> 407                                                     State percentile for Toxic Releases to Air #>                                                                               longname_tableheader #> 382                                         US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 383                                                                  US percentile for Ozone (ppb) #> 384                                    US percentile for Air Toxics Cancer Risk (risk per million) #> 385                                          US percentile for Air Toxics Respiratory Hazard Index #> 386                                 US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 387                                   US percentile for Lead Paint Indicator (% pre-1960s housing) #> 388          US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 389                                 US percentile for Superfund Proximity (site count/km distance) #> 390                                   US percentile for RMP Proximity (facility count/km distance) #> 391                       US percentile for Hazardous Waste Proximity (facility count/km distance) #> 392    US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 393                                    US percentile for Underground Storage Tanks (UST) indicator #> 394                                                        US percentile for Toxic Releases to Air #> 395                                      State percentile for Particulate Matter (PM 2.5 in ug/m3) #> 396                                                               State percentile for Ozone (ppb) #> 397                                 State percentile for Air Toxics Cancer Risk (risk per million) #> 398                                       State percentile for Air Toxics Respiratory Hazard Index #> 399                              State percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 400                                State percentile for Lead Paint Indicator (% pre-1960s housing) #> 401       State percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 402                              State percentile for Superfund Proximity (site count/km distance) #> 403                                State percentile for RMP Proximity (facility count/km distance) #> 404                    State percentile for Hazardous Waste Proximity (facility count/km distance) #> 405 State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 406                                 State percentile for Underground Storage Tanks (UST) indicator #> 407                                                     State percentile for Toxic Releases to Air"},{"path":"https://usepa.github.io/EJAM/reference/names_d.html","id":null,"dir":"Reference","previous_headings":"","what":"names_d (DATA) list of demographic indicator names — names_d","title":"names_d (DATA) list of demographic indicator names — names_d","text":"names_d (DATA) list demographic indicator names","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/names_e.html","id":null,"dir":"Reference","previous_headings":"","what":"names_e (DATA) list of environmental indicator names — names_e","title":"names_e (DATA) list of environmental indicator names — names_e","text":"names_e (DATA) list environmental indicator names","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":null,"dir":"Reference","previous_headings":"","what":"See which of the lists of names a single term appears in — names_whichlist","title":"See which of the lists of names a single term appears in — names_whichlist","text":"See lists names single term appears ","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See which of the lists of names a single term appears in — names_whichlist","text":"","code":"names_whichlist(   x,   exact = T,   grepmatching = T,   ignore.case.exact = FALSE,   ignore.case.grep = FALSE,   keylists = F,   exactonly = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See which of the lists of names a single term appears in — names_whichlist","text":"x term, like part variable name, state.avg exact whether look exact matches grepmatching whether look matches via grep (partial match) ignore.case.exact whether ignore capitalization exact matches ignore.case.grep passed grep ignore.case param keylists true, report key lists friendly, , , need types. exactonly limit output rows exact matches","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See which of the lists of names a single term appears in — names_whichlist","text":"data.frame whichlist, exactmatch, grepmatch, grephits (examples)","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"See which of the lists of names a single term appears in — names_whichlist","text":"EJAM::namez list lists names used indicators variables, namez$d_friendly vector terms like \"Demog.Ind.\", \"Suppl Demog Index\",  \"% Low-inc.\", etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See which of the lists of names a single term appears in — names_whichlist","text":"","code":"x <- names_whichlist(\"rsei\", ignore.case.exact = T, ignore.case.grep = T) #> Error in names_whichlist(\"rsei\", ignore.case.exact = T, ignore.case.grep = T): could not find function \"names_whichlist\"    subset(x, !grepl(\"friendly\", x$whichlist)) #> Error in subset(x, !grepl(\"friendly\", x$whichlist)): object 'x' not found        subset(x,  grepl(\"friendly\", x$whichlist)) #> Error in subset(x, grepl(\"friendly\", x$whichlist)): object 'x' not found    subset(namez, names(namez) != \"all_r\" & names(namez) %in%       subset(x, x$grepmatch == \"yes\" & !grepl(\"friendly\", x$whichlist))$whichlist  ) #> Error in subset(x, x$grepmatch == \"yes\" & !grepl(\"friendly\", x$whichlist)): object 'x' not found    grep(\"\\\\.eo$\", namez$ej, value = T) #>  [1] \"EJ.DISPARITY.pm.eo\"              \"EJ.DISPARITY.o3.eo\"              #>  [3] \"EJ.DISPARITY.cancer.eo\"          \"EJ.DISPARITY.resp.eo\"            #>  [5] \"EJ.DISPARITY.dpm.eo\"             \"EJ.DISPARITY.pctpre1960.eo\"      #>  [7] \"EJ.DISPARITY.traffic.score.eo\"   \"EJ.DISPARITY.proximity.npl.eo\"   #>  [9] \"EJ.DISPARITY.proximity.rmp.eo\"   \"EJ.DISPARITY.proximity.tsdf.eo\"  #> [11] \"EJ.DISPARITY.proximity.npdes.eo\" \"EJ.DISPARITY.ust.eo\"             #> [13] \"EJ.DISPARITY.rsei.eo\""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"See which lists of names the given indicator names are in — names_whichlist_multi","title":"See which lists of names the given indicator names are in — names_whichlist_multi","text":"See lists names given indicator names ","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See which lists of names the given indicator names are in — names_whichlist_multi","text":"","code":"names_whichlist_multi(x, ...)"},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See which lists of names the given indicator names are in — names_whichlist_multi","text":"x vector names (query terms) ... passed names_whichlist()","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See which lists of names the given indicator names are in — names_whichlist_multi","text":"list sets names","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi_key.html","id":null,"dir":"Reference","previous_headings":"","what":"See which key lists of names the given indicator names are in — names_whichlist_multi_key","title":"See which key lists of names the given indicator names are in — names_whichlist_multi_key","text":"See key lists names given indicator names ","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See which key lists of names the given indicator names are in — names_whichlist_multi_key","text":"","code":"names_whichlist_multi_key(x, ...)"},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See which key lists of names the given indicator names are in — names_whichlist_multi_key","text":"x vector names ... passed names_whichlist_multi()","code":""},{"path":"https://usepa.github.io/EJAM/reference/names_whichlist_multi_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See which key lists of names the given indicator names are in — names_whichlist_multi_key","text":"vector maybe","code":""},{"path":"https://usepa.github.io/EJAM/reference/namez.html","id":null,"dir":"Reference","previous_headings":"","what":"namez (DATA) list of lists of indicator names (complete list in 1 object) — namez","title":"namez (DATA) list of lists of indicator names (complete list in 1 object) — namez","text":"namez (DATA) list lists indicator names (complete list 1 object)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/pctiles_lookup_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to create lookup table of percentiles 0 to 100 and mean for each indicator by State or USA total — pctiles_lookup_create","title":"Utility to create lookup table of percentiles 0 to 100 and mean for each indicator by State or USA total — pctiles_lookup_create","text":"Utility create lookup table percentiles 0 100 mean indicator State USA total","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctiles_lookup_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to create lookup table of percentiles 0 to 100 and mean for each indicator by State or USA total — pctiles_lookup_create","text":"","code":"pctiles_lookup_create(   x,   zone.vector = NULL,   zoneOverallName = \"USA\",   wts = NULL,   usecollapse = TRUE,   type = 7 )"},{"path":"https://usepa.github.io/EJAM/reference/pctiles_lookup_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to create lookup table of percentiles 0 to 100 and mean for each indicator by State or USA total — pctiles_lookup_create","text":"x data.frame numeric data. column examined calculate mean,   percentiles, zone zone.vector optional names states regions, example. length wts, rows mydf zoneOverallName optional. Default USA. wts leave default since weighted percentiles blockgroups used EJScreen percentiles anymore usecollapse logical, whether use collapse::fquantile() instead Hmisc package wtd.quantile stats pkg quantile, test fully removing dependency Hmisc also speed . type CHANGE - moot EJScreen/EJAM - SEE SOURCE CODE - Hmisc pkg wtd.quantile type \"1/n\" used past possibly EJScreen (EJScreen longer uses weighted percentiles moot weighted case) collapse pkg fquantile now used avoid Hmisc dependency fquantile type 4 seems Hmisc type \"1/n\" confirmed, function default uses fquantile type 1, inverse ECDF however, seems simpler using type 4 linear interpolation points ECDF! ***  NEED CONFIRM CREATES TABLE DIFFERENT EJSCREEN CREATE","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctiles_lookup_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility to create lookup table of percentiles 0 to 100 and mean for each indicator by State or USA total — pctiles_lookup_create","text":"EJScreen assigns indicator block group percentile value via python script, using https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html","code":"The way the python function is used as of 2023 is that percentileofscore is 80   80   are less than (NOT equal to) the indicator value   in the specified block group (since kind=\"strict\").   The percentile recorded in the EJScreen dataset is the floor of that,   meaning if the 81.9   The EJScreen python script used to create percentile lookup tables is in a file   called cal_statepctile_0222.py and the key lines of code and functions it uses are    pctile = math.floor(stats.percentileofscore(barray, indicatorscore, kind=\"strict\"))    binvalue = getBinvalue(pctile)    and    def getBinvalue(pct):  if pct is None:   return 0 else:     if pct >= 95:     return 11 elif pct >= 90 and pct < 95:   return 10 elif pct >= 80 and pct < 90:   return 9 elif pct >= 70 and pct < 80:   return 8 elif pct >= 60 and pct < 70:   return 7 elif pct >= 50 and pct < 60:   return 6 elif pct >= 40 and pct < 50:   return 5 elif pct >= 30 and pct < 40:   return 4 elif pct >= 20 and pct < 30:   return 3 elif pct >= 10 and pct < 20:   return 2 else:   return 1"},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"used lookup table convert raw indicator vector percentiles US States.","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"","code":"pctile_from_raw_lookup(   myvector,   varname.in.lookup.table,   lookup = usastats,   zone = \"USA\",   quiet = TRUE )"},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"myvector Numeric vector, required. Values look lookup table. varname..lookup.table Character element, required. Name column lookup table look find interval given element myvector values . *** vector provided, must length myvector, 1 value zone can provided. lookup Either lookup must provided, quoted, lookup table called usastats must already memory. lookup table data.frame PCTILE column, REGION column, column whose name value varname..lookup.table use state lookups set lookup=statestats zone Character element (vector long myvector), optional. specified, must appear column called REGION within lookup table, NA returned item looked warning given. example, \"NY\" New York State, \"USA\" national percentiles. quiet set FALSE see details certain scores NA values like 1 state","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"default, returns numeric vector length myvector.","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"recoded efficient - use data.table. data.frame lookup table must field called \"PCTILE\" quantiles/percentiles column(s) values fall percentiles. usastats statestats lookup tables. function uses lookup table finds number PCTILE column corresponds specified value (myvector) appears column called varname..lookup.table. function just looks specified value fits values lookup table returns approximate percentile found PCTILE column. value cutpoints listed percentiles 89 90, returns 89, example. value exactly equal cutpoint listed percentile 90, returns percentile 90. value exactly minimum lookup table multiple percentiles lookup listed tied threshold value defining percentile (.e., large percent places score minimum score), percentile gets reported 0, percent places tied minimum score. Note true whether tied value 0 tied minimum value 0. value less cutpoint listed percentile 0, minimum value dataset, still returns 0 percentile, warning value checked less minimum dataset. also handles odd cases, like large percent raw scores tied minimum value, case reports 0 percentile, large percent.","code":""},{"path":"https://usepa.github.io/EJAM/reference/pctile_from_raw_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find approx percentiles in lookup table that is in memory — pctile_from_raw_lookup","text":"","code":"if (FALSE) {  eg <- dput(round(as.vector(unlist(testoutput_ejamit_10pts_1miles$results_overall[ , ..names_d] )),3))  data.frame(value = eg, pctile = t(testoutput_ejamit_10pts_1miles$results_overall[ , ..names_d_pctile]))  data.frame(value = eg, pctile = lookup_pctile(eg, names_d))     # compare ejscreen API output percentiles to those from this function:   for (vname in c(names_d[c(1,3:6,8:10)] )) {      print(pctile_from_raw_lookup(testoutput_ejscreenapi_plus_100[,vname] / 100, vname,        lookup = usastats)        - testoutput_ejscreenapi_plus_100[,paste0(\"pctile.\",vname)] )   }   for (vname in c(names_e )) {      print(pctile_from_raw_lookup(testoutput_ejscreenapi_plus_100[,vname], vname,        lookup = usastats)          - testoutput_ejscreenapi_plus_100[,paste0(\"pctile.\",vname)] )   } }"},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":null,"dir":"Reference","previous_headings":"","what":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"plotblocksnearby - Map view Census blocks (centroids) near one sites Utility quickly view one facility points map blocks found nearby","code":""},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"","code":"plotblocksnearby(   sitepoints,   radius = 3,   sites2blocks,   siteidvarname = \"ejam_uniq_id\",   usemapfast = TRUE,   returnmap = FALSE,   overlay_blockgroups = FALSE,   maxradius = 31.07,   avoidorphans = FALSE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"sitepoints table points lat, lon decimal degrees (data.frame data.table), also just output getblocksnearby() already done. radius optional. miles (Max allowed 32 miles, just 50 kilometers since 31.06856 miles 50 * 1000 / meters_per_mile). sites2blocks optional. provided, used sites2blocks like testoutput_getblocksnearby_10pts_1miles neither sites2blocks sitepoints provided plot returns error. sites2blocks sitepoints provided, uses plot blocks sites (centers circles). sites2blocks provided, sitepoints alone provided, checks sitepoints actually sites2blocks, uses . sites2blocks provided, sitepoints alone provided, sitepoints really sitepoints, runs getblocksnearby() create sites2blocks. sites2blocks provided, sitepoints , bad approximation sitepoints draw circle site center circle. siteidvarname optional. specifies column name sites2blocks unique site id, values also row numbers corresponding sites sitepoints, site appearing sitepoints, sites2blocks appearing per block near site. usemapfast optional. simpler plot FALSE returnmap optional. set TRUE, returns leaflet map object instead tabular info.  needed pass results map_blockgroups_over_blocks() example. overlay_blockgroups optional. set TRUE, also plots overlay blockgroup boundaries. maxradius optional. see getblocksnearby() avoidorphans optional. see getblocksnearby() ... optional. passed mapfast() plot() depending usemapfast, like column_names = \"ej\" better map popups block points","code":""},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"invisibly returns sites2blocks like getblocksnearby() ","code":""},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"Uses getblocksnearby() lat,lon points provided sitepoints, skips looks like user passed output getblocksnearby(), displays map blocks near specified point.","code":""},{"path":"https://usepa.github.io/EJAM/reference/plotblocksnearby.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotblocksnearby - Map view of Census blocks (their centroids) near one or more sites\r\nUtility to quickly view one or more facility points on map with the blocks found nearby — plotblocksnearby","text":"","code":"#  see all Census Blocks within 1 mile of 1 site, if already had run getblocksnearby()   getblocks_output <- copy(testoutput_getblocksnearby_10pts_1miles) #> Error in copy(testoutput_getblocksnearby_10pts_1miles): could not find function \"copy\"   if (\"siteid\" %in% names(getblocks_output)) {   siteidvarname <- \"siteid\" # the old default   eg <- getblocks_output[siteid == 1,]   eg2 <- getblocks_output[siteid %in% c(4,10),]   } else {   siteidvarname <- \"ejam_uniq_id\"    eg <- getblocks_output[ejam_uniq_id == 1,]    eg2 <- getblocks_output[ejam_uniq_id %in% c(4,10),]   } #> Error in \"siteid\" %in% names(getblocks_output): object 'getblocks_output' not found    z <-  plotblocksnearby(sitepoints = testpoints_10,       sites2blocks = eg, radius = 1) #> Error in NROW(sites2blocks): object 'eg' not found    # see two sites if already had run getblocksnearby()    z2 <-  plotblocksnearby(sitepoints = testpoints_10[c(4,10),],       sites2blocks = eg2, radius = 1) #> Error in NROW(sites2blocks): object 'eg2' not found   if (FALSE) {   # See one randomly selected regulated facility from FRS and all Census Blocks within 2 miles:     plotblocksnearby(testpoints_n(1), 2)    # See two sites and all Census Blocks within 5 kilometers     plotblocksnearby(testpoints_2, radius = convert_units(5, from = \"km\", towhat = \"miles\"))   # See 100 sites and all blocks within 1 mile of each -    # Note you have to specify radius here or it uses default that may not match intent    # - and this is a bit slow   plotblocksnearby(testoutput_ejamit_100pts_1miles$results_bysite[, c(siteidvarname, \"lat\", \"lon\"), with=FALSE],      radius = 1)   }"},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"Barplot ratios demographic () scores averages (references)","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"","code":"plot_barplot_ratios(   ratio.to.us.d.overall,   names2plot_friendly = NULL,   mycolorsavailable = c(\"gray\", \"yellow\", \"orange\", \"red\") )"},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"ratio..us.d.overall named list ratios plot names2plot_friendly names use plot - length named list ratio..us.d.overall mycolorsavailable leave default","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"ggplot returned","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"GENERAL NOTES, EJAM DEVELOPMENT plots general, see: https://echarts4r.john-coene.com/articles/themes.html https://exts.ggplot2.tidyverse.org/gallery BARPLOTS, see/ merge/consolidate: output$view1_summary_plot <- renderPlot(v1_summary_plot()) v1_summary_plot <- reactive( ) EJAM server Short Report  bar type output$summ_display_bar <- renderPlot(  ) contains plot code reactive EJAM server tab showing barplots Detailed Results plot_barplot_ratios() drafted function EJAM BOXPLOTS, see: v1_summary_plot <- reactive( )     output$view1_summary_plot <- renderPlot(v1_summary_plot()) EJAM server SHORT report box type, EJAM server LONG report passed parameter boxplots_ratios()   EJAMejscreenapi (EJAM server Detailed Results interactive views) ejscreenapi_script() code also relevant? EJAMejscreenapi box/scatter examples ggplot, https://r-graph-gallery.com/89-box--scatter-plot--ggplot2.html boxplots base R, https://www.r-bloggers.com/2023/09/--reorder-boxplots--r--comprehensive-guide HISTOGRAMS, see: output$summ_display_hist <- renderPlot   EJAM server interactive views histograms code discussion  EJAMbatch.summarizer package","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot of ratios of demographic (or other) scores to averages (or other references) — plot_barplot_ratios","text":"","code":"plot_barplot_ratios(unlist(testoutput_ejamit_1000pts_1miles$results_overall[ , c(..names_d_ratio_to_avg , ..names_d_subgroups_ratio_to_avg) ]))"},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios_ez.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","title":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","text":"Barplot ratios demographic () scores averages - simpler syntax","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios_ez.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","text":"","code":"plot_barplot_ratios_ez(   out,   varnames = c(names_d_ratio_to_avg, names_d_subgroups_ratio_to_avg),   ... )"},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios_ez.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","text":"like ejamit() varnames vector indicator names ratios avg ... passed plot_barplot_ratios()","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios_ez.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","text":"ggplot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_barplot_ratios_ez.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot of ratios of demographic (or other) scores to averages - simpler syntax — plot_barplot_ratios_ez","text":"","code":"plot_barplot_ratios_ez(testoutput_ejamit_100pts_1miles)"},{"path":"https://usepa.github.io/EJAM/reference/plot_bycounty.html","id":null,"dir":"Reference","previous_headings":"","what":"plot comparison of counties in 1 state, for 1 indicator (variable) — plot_bycounty","title":"plot comparison of counties in 1 state, for 1 indicator (variable) — plot_bycounty","text":"plot comparison counties 1 state, 1 indicator (variable)","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_bycounty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot comparison of counties in 1 state, for 1 indicator (variable) — plot_bycounty","text":"","code":"plot_bycounty(   x,   myvars = x$variable[1],   myvarnames = NULL,   mystate = NULL,   labeltype = NULL,   varinfo = NULL,   yr = 2021 )"},{"path":"https://usepa.github.io/EJAM/reference/plot_bycounty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot comparison of counties in 1 state, for 1 indicator (variable) — plot_bycounty","text":"x table output acs_bycounty() .e., output get_acs() tidycensus pkg myvars optional .extracted x, one ACS5 variables like \"B03002_001\" myvarnames optional friendlier names myvars mystate name state labeltype scales package.  continuous scales: label_bytes(), label_number_auto(), label_number_si(), label_ordinal(), label_parse(), label_percent(), label_pvalue(), label_scientific() varinfo large table metadata load_variables function tidycensus pkg yr like 2021 2022 end 5 year ACS","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_bycounty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot comparison of counties in 1 state, for 1 indicator (variable) — plot_bycounty","text":"plot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_demogshare_by_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","title":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","text":"plot_demogshare_by_distance - work progress","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_demogshare_by_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","text":"","code":"plot_demogshare_by_distance(   results_bybg_people,   demogvarname = names_d[1],   myids = unique(results_bybg_people$ejam_uniq_id),   show.lowess = F,   show.lm = TRUE,   show.line = TRUE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/plot_demogshare_by_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","text":"results_bybg_people table ejamit()$results_results_bybg_people, like testoutput_ejamit_10pts_1miles$results_bybg_people demogvarname one column names results_bybg_people, one names_d like \"Demog.Index.Supp\" myids optional vector ejam_uniq_id values show.lowess whether show curve fitted via lines(lowess(x,y)) using stats::lowess() show.lm whether show straight line fitted via lm() show.line whether show straight line fitted via coef(line(x,y)) using stats::coef() stats::line() ... passed plot()","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_demogshare_by_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","text":"just used create plot side effect","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_demogshare_by_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_demogshare_by_distance - work in progress — plot_demogshare_by_distance","text":"also consider plotting something like boxplot(demogvar ~ round(distance, 1)) See notes plots plot_barplot_ratios()","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Avg distance of each demog group (of multiple groups) - Table or Plot — plot_distance_by_group","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — plot_distance_by_group","text":"Avg distance demog group (multiple groups) - Table Plot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — plot_distance_by_group","text":"","code":"plot_distance_by_group(   results_bybg_people,   demogvarname = NULL,   demoglabel = fixcolnames(demogvarname, \"r\", \"shortlabel\"),   graph = TRUE,   returnwhat = \"table\" )"},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Avg distance of each demog group (of multiple groups) - Table or Plot — plot_distance_by_group","text":"see plot_distance_mean_by_group()","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_pctd.html","id":null,"dir":"Reference","previous_headings":"","what":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","title":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","text":"plots cumulative share residents found within distance, single demographic group. function uses distance Census block site conjunction block group demographics, provide relatively detailed picture far away residents group live. contrast, function distance_cdf_by_group_plot() based ejamit()$results_bybg_people, provides block group resolution information distance.","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_pctd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","text":"","code":"plot_distance_by_pctd(   s2b = NULL,   sitenum = NULL,   myvars = c(names_d_count, names_d_subgroups_count)[1],   demoglabel = fixcolnames(myvars, \"r\", \"shortlabel\") )"},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_pctd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","text":"s2b output getblocksnearby(), data.table distance block centroid site. NULL (provided parameter function), function just show example using random point. sitenum one number unique ID (row number original list points) look s2b myvars colname population count variable blockgroupstats indicating plot, like \"hisp\" \"lowinc\" works one indicator time far. dpctvar colname usastats statestats percentage version myvars, like \"pcthisp\" \"pctlowinc\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_pctd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","text":"returns s2b columns , like cumpop, cumdpop, pctdwithin","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_by_pctd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What percentage of this demographic group's population lives less than X miles from a site? — plot_distance_by_pctd","text":"","code":"plot_distance_by_pctd() #> Analyzing 2 points, radius of 6.2 miles around each. #> Finding Census blocks with internal point within  6.2  miles of the site (point), for each of 2  sites (points)... #> Stats via getblocks_diagnostics(), but BEFORE ADJUSTING UP FOR VERY SHORT DISTANCES:  #> min distance before adjustment:  0.03885213  #> max distance before adjustment:  11.85171  #>  #>  #>    Summary stats on distances reported from any sites to any nearby blocks #>  #> Warning: no non-missing arguments to max; returning -Inf #> -Inf miles is max. distance to block internal point (distance_unadjusted)    #> 11.85171 miles is max. distance to average resident in block (distance reported)    #> Warning: no non-missing arguments to min; returning Inf #> Inf miles is shortest distance to block internal point (distance_unadjusted)    #> 0.03885213 miles is shortest distance to average resident in block (distance reported)    #>  #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to min; returning Inf #> 2 unique output sites #> 6,682 blocks are near the avg site or in avg buffer #>              (based on their block internal point, like a centroid) #> 13,364 blocks including doublecounting in overlaps,  #>              in final row count (block-to-site pairs table) #> 13,364 actual unique blocks total #> 13,364 blocks (and their residents) have exactly 1 site nearby  #> 0 blocks (and their residents) have exactly 2 sites nearby  #> 0 blocks (and their residents) have exactly 3 sites nearby  #> 1 is ratio of blocks including multicounting / actual count of unique blocks #> 0% of unique blocks could get counted more than once  #>              because those residents are near two or more sites  #>              (assuming they live at the block internal point #>  #>  #> Adjusting upwards the very short distances now... #>  Stats via getblocks_diagnostics(), AFTER ADJUSTING up FOR SHORT DISTANCES:  #> min distance AFTER adjustment:  0.1491939  #> max distance AFTER adjustment:  6.199996  #>  #>  #> Error in `[.data.frame`(usastats, usastats$PCTILE == 100, dpctvar): object 'dpctvar' not found"},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_cdf_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"alias for distance_by_group_plot — plot_distance_cdf_by_group","title":"alias for distance_by_group_plot — plot_distance_cdf_by_group","text":"SLOW / needs optimized. CDF Line Plots cumulative share demographic group, within distance","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_cdf_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alias for distance_by_group_plot — plot_distance_cdf_by_group","text":"","code":"plot_distance_cdf_by_group(   results_bybg_people = NULL,   radius_miles =     round(max(results_bybg_people$distance_min_avgperson[!is.infinite(results_bybg_people$distance_min_avgperson)],     na.rm = T), 1),   subgroups_type = NULL,   demogvarname = NULL,   demoglabel = NULL,   colorlist = colorspace::diverging_hcl(length(demogvarname)),   coloroverall = \"black\",   returnwhat = \"table\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_cdf_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"alias for distance_by_group_plot — plot_distance_cdf_by_group","text":"results_bybg_people data.table doaggregate()$results_bybg_people radius_miles miles radius max distance analyzed subgroups_type optional, can set \"nh\" \"alone\". Specifies types race ethnicity subgroups use demogvarname demogvarname specified parameter. neither specified tries use default_subgroups_type variable set global.R, since check reactive variable input$subgroups_type outside context web app. demogvarname optional way specify names columns use results_bybg_people, e.g., c(\"pctlowinc\", \"pctmin\"),  namez$d, vector subgroups namez$d_subgroups_nh includes \"pctnhba\" etc. namez$d_subgroups_alone includes \"pctba\" etc., demogvarname specified parameter, info also specified subgroups_type parameter . neither specified, function try use default (may reflect changes made development EJAM default_subgroups_type flux) demoglabel friendly text names labelling graphic, like \"Low income residents\" colorlist colors like \"red\" etc. demographic groups interest coloroverall color like \"gray\" everyone whole returnwhat returnwhat \"table\", invisibly returns full table sorted distances blockgroups, cumulative count demog groups block group's distance. returnwhat \"plotfilename\" returns full path including filename .png tempdir returnwhat \"plot\" returns plot object needed table_xls_format()","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_cdf_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"alias for distance_by_group_plot — plot_distance_cdf_by_group","text":"see distance_by_group_plot()","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_mean_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","title":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","text":"Shows distance sites, residents demographic group (vs everyone else). plot_distance_mean_by_group() plot_distance_by_group() synonymous.","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_mean_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","text":"","code":"plot_distance_mean_by_group(   results_bybg_people,   demogvarname = NULL,   demoglabel = fixcolnames(demogvarname, \"r\", \"shortlabel\"),   graph = TRUE,   returnwhat = \"table\" )"},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_mean_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","text":"results_bybg_people data.table doaggregate()$results_bybg_people demogvarname vector column names like \"pctlowinc\" etc. demoglabel vector labels like \"Low Income Residents\" etc. returnwhat returnwhat \"table\", invisibly returns data.frame group, ratio, avg_distance_for_group, avg_distance_for_nongroup. returnwhat \"plotfilename\" returns full path including filename .png tempdir returnwhat \"plot\" returns plot object needed table_xls_format() ?","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_mean_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","text":"see parameter returnwhat","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_distance_mean_by_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barplot of Average Proximity, by Group — plot_distance_mean_by_group","text":"Note ratio shown ratio distance among others distance given group, values 1 mean given demographic group lives closer facilities. value 0.85 mean group 85% far site everyone else. Note miles assuming input miles, distance resident actually average distance residents within Census block (block group), site close block internal point (like centroid) relative size block, distance average resident block estimated 90 percent effective radius, radius block area square meters miles circular shape. approach used EJScreen estimate average proximity block resident cases block extremely close site site may actually inside block, exactly top internal point block, case zero appropriate estimate distance, hence adjustment made EJAM getblocksnearby()","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_distance_by_dcount.html","id":null,"dir":"Reference","previous_headings":"","what":"lorenz plot bybg_people (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOUNT OF SITES (or PEOPLE?) BY BIN — plot_lorenz_distance_by_dcount","title":"lorenz plot bybg_people (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOUNT OF SITES (or PEOPLE?) BY BIN — plot_lorenz_distance_by_dcount","text":"lorenz plot bybg_people (cumulative share x vs cum share y) - DRAFT/EXPERIMENTAL COUNT SITES (PEOPLE?) BIN","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_distance_by_dcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lorenz plot bybg_people (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOUNT OF SITES (or PEOPLE?) BY BIN — plot_lorenz_distance_by_dcount","text":"","code":"plot_lorenz_distance_by_dcount(bybg_people, varname)"},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_distance_by_dcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lorenz plot bybg_people (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOUNT OF SITES (or PEOPLE?) BY BIN — plot_lorenz_distance_by_dcount","text":"bybg_people ejamit()$results_bybg_people varname ************ tbd","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_distance_by_dcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lorenz plot bybg_people (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOUNT OF SITES (or PEOPLE?) BY BIN — plot_lorenz_distance_by_dcount","text":"ggplot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_popcount_by_site.html","id":null,"dir":"Reference","previous_headings":"","what":"lorenz plot bysite (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOMPARES TWO subsets OF SITES (or people??) — plot_lorenz_popcount_by_site","title":"lorenz plot bysite (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOMPARES TWO subsets OF SITES (or people??) — plot_lorenz_popcount_by_site","text":"lorenz plot bysite (cumulative share x vs cum share y) - DRAFT/EXPERIMENTAL COMPARES TWO subsets SITES (people??)","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_popcount_by_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lorenz plot bysite (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOMPARES TWO subsets OF SITES (or people??) — plot_lorenz_popcount_by_site","text":"","code":"plot_lorenz_popcount_by_site(bysite, radius)"},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_popcount_by_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lorenz plot bysite (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOMPARES TWO subsets OF SITES (or people??) — plot_lorenz_popcount_by_site","text":"bysite ejamit()$results_bysite radius miles ************ tbd","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_lorenz_popcount_by_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lorenz plot bysite (cumulative share of x vs cum share of y) - DRAFT/EXPERIMENTAL\r\nCOMPARES TWO subsets OF SITES (or people??) — plot_lorenz_popcount_by_site","text":"ggplot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios.html","id":null,"dir":"Reference","previous_headings":"","what":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios","text":"Make ridgeline plot ratios demographic score average","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios","text":"","code":"plot_ridgeline_ratios(ratio.to.us.d.bysite, names2plot_friendly = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios","text":"names2plot_friendly names use plot - length named list ratio..us.d.overall ratio..us.d.overall named list ratios plot (data.frame)","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios","text":"","code":"out <- testoutput_ejamit_1000pts_1miles  ratio.to.us.d.bysite <- out$results_bysite[ ,  c(    ..names_d_ratio_to_avg, ..names_d_subgroups_ratio_to_avg    )]  # plot_ridgeline_ratios(ratio.to.us.d.bysite)  # cap the ratio, for better plot  x <- as.matrix(ratio.to.us.d.bysite)  x[x > 5] <- 5  plot_ridgeline_ratios(data.table::data.table(x)) #> Warning: The dot-dot notation (`..x..`) was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(x)` instead. #> ℹ The deprecated feature was likely used in the EJAM package. #>   Please report the issue to the authors. #> Picking joint bandwidth of 0.141"},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios_ez.html","id":null,"dir":"Reference","previous_headings":"","what":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios_ez","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios_ez","text":"Make ridgeline plot ratios demographic score average","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios_ez.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios_ez","text":"","code":"plot_ridgeline_ratios_ez(   out,   varnames = c(names_d_ratio_to_avg, names_d_subgroups_ratio_to_avg),   maxratio = 5 )"},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios_ez.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios_ez","text":"like ejamit() varnames vector colnames $results_bysite, ratio variables","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_ridgeline_ratios_ez.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make ridgeline plot of ratios of demographic score to its average — plot_ridgeline_ratios_ez","text":"","code":"out <- testoutput_ejamit_1000pts_1miles  plot_ridgeline_ratios_ez(out) #> Picking joint bandwidth of 0.141"},{"path":"https://usepa.github.io/EJAM/reference/plot_vs_us.html","id":null,"dir":"Reference","previous_headings":"","what":"draft code to plot distribution of a variable among residents near set of sites vs nationwide\r\nNot yet population weighted — plot_vs_us","title":"draft code to plot distribution of a variable among residents near set of sites vs nationwide\r\nNot yet population weighted — plot_vs_us","text":"draft code plot distribution variable among residents near set sites vs nationwide yet population weighted","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_vs_us.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draft code to plot distribution of a variable among residents near set of sites vs nationwide\r\nNot yet population weighted — plot_vs_us","text":"","code":"plot_vs_us(   bysite = ejamit()$results_bysite,   varname = \"Demog.Index\",   refdt = NULL,   type = \"box\",   colorfills = c(\"lightblue\", \"orange\"),   ... )"},{"path":"https://usepa.github.io/EJAM/reference/plot_vs_us.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draft code to plot distribution of a variable among residents near set of sites vs nationwide\r\nNot yet population weighted — plot_vs_us","text":"bysite table results ejamit()$results_bysite, like testoutput_ejamit_1000pts_1miles$results_bysite varname name column bysite, like  \"Demog.Index\" type \"box\", \"plotly\", \"ggplot\" colorfills two colors boxplot","code":""},{"path":"https://usepa.github.io/EJAM/reference/plot_vs_us.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"draft code to plot distribution of a variable among residents near set of sites vs nationwide\r\nNot yet population weighted — plot_vs_us","text":"plots","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_n.html","id":null,"dir":"Reference","previous_headings":"","what":"top N sites account for what percent of residents? — popshare_at_top_n","title":"top N sites account for what percent of residents? — popshare_at_top_n","text":"fraction total population accounted top N places?","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"top N sites account for what percent of residents? — popshare_at_top_n","text":"","code":"popshare_at_top_n(pop, n = 10, astext = FALSE, dig = 0)"},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"top N sites account for what percent of residents? — popshare_at_top_n","text":"pop vector population totals across places, like $results_bysite$pop output ejamit() n number places consider astext TRUE, return text description results dig rounding digits text output","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"top N sites account for what percent of residents? — popshare_at_top_n","text":"fraction 1","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"top N sites account for what percent of residents? — popshare_at_top_n","text":"","code":"x <- testdata_ejamit_output_100pts_1miles$results_bysite #> Error in eval(expr, envir, enclos): object 'testdata_ejamit_output_100pts_1miles' not found  popshare_p_lives_at_what_pct(x$pop, p = 0.50, astext=TRUE) #> Error in popshare_p_lives_at_what_pct(x$pop, p = 0.5, astext = TRUE): object 'x' not found  popshare_p_lives_at_what_n(  x$pop, p = c(0.50, 0.67, 0.80, 0.95)) #> Error in popshare_p_lives_at_what_n(x$pop, p = c(0.5, 0.67, 0.8, 0.95)): object 'x' not found  popshare_at_top_x_pct(       x$pop, x = c(0.25, 0.50, .90)) #> Error in popshare_at_top_x_pct(x$pop, x = c(0.25, 0.5, 0.9)): object 'x' not found  popshare_at_top_n(           x$pop, n = c(1, 5, 10)) #> Error in popshare_at_top_n(x$pop, n = c(1, 5, 10)): object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_x_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","title":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","text":"fraction total population accounted top X percent places?","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_x_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","text":"","code":"popshare_at_top_x_pct(pop, x = 0.2, astext = FALSE, dig = 0)"},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_x_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","text":"pop vector population totals across places, like $results_bysite$pop output ejamit() x fraction 1, share places (vector values) astext TRUE, return text description results dig rounding digits text output","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_x_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","text":"fraction 1 (vector results) text","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_at_top_x_pct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"top X percent of sites account for what percent of residents? — popshare_at_top_x_pct","text":"","code":"x <- testdata_ejamit_output_100pts_1miles$results_bysite #> Error in eval(expr, envir, enclos): object 'testdata_ejamit_output_100pts_1miles' not found  popshare_p_lives_at_what_pct(x$pop, p = 0.50, astext=TRUE) #> Error in popshare_p_lives_at_what_pct(x$pop, p = 0.5, astext = TRUE): object 'x' not found  popshare_p_lives_at_what_n(  x$pop, p = c(0.50, 0.67, 0.80, 0.95)) #> Error in popshare_p_lives_at_what_n(x$pop, p = c(0.5, 0.67, 0.8, 0.95)): object 'x' not found  popshare_at_top_x_pct(       x$pop, x = c(0.25, 0.50, .90)) #> Error in popshare_at_top_x_pct(x$pop, x = c(0.25, 0.5, 0.9)): object 'x' not found  popshare_at_top_n(           x$pop, n = c(1, 5, 10)) #> Error in popshare_at_top_n(x$pop, n = c(1, 5, 10)): object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_n.html","id":null,"dir":"Reference","previous_headings":"","what":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","title":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","text":"many sites account P percent residents?","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","text":"","code":"popshare_p_lives_at_what_n(pop, p, astext = FALSE, dig = 0)"},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","text":"pop vector population totals across places, like $results_bysite$pop output ejamit() p share population (0-1, fraction), vector one astext TRUE, return text description results dig rounding digits text output","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","text":"vector numbers sites, text ","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"how many sites account for P percent of residents? — popshare_p_lives_at_what_n","text":"","code":"x <- testdata_ejamit_output_100pts_1miles$results_bysite #> Error in eval(expr, envir, enclos): object 'testdata_ejamit_output_100pts_1miles' not found  popshare_p_lives_at_what_pct(x$pop, p = 0.50, astext=TRUE) #> Error in popshare_p_lives_at_what_pct(x$pop, p = 0.5, astext = TRUE): object 'x' not found  popshare_p_lives_at_what_n(  x$pop, p = c(0.50, 0.67, 0.80, 0.95)) #> Error in popshare_p_lives_at_what_n(x$pop, p = c(0.5, 0.67, 0.8, 0.95)): object 'x' not found  popshare_at_top_x_pct(       x$pop, x = c(0.25, 0.50, .90)) #> Error in popshare_at_top_x_pct(x$pop, x = c(0.25, 0.5, 0.9)): object 'x' not found  popshare_at_top_n(           x$pop, n = c(1, 5, 10)) #> Error in popshare_at_top_n(x$pop, n = c(1, 5, 10)): object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","title":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","text":"percent sites account P percent residents?","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","text":"","code":"popshare_p_lives_at_what_pct(pop, p, astext = FALSE, dig = 0)"},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","text":"pop vector population totals across places, like $results_bysite$pop output ejamit() p share population (0-1, fraction), vector one astext TRUE, return text description results dig rounding digits text output","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","text":"vector fractions 0-1 sites, text ","code":""},{"path":"https://usepa.github.io/EJAM/reference/popshare_p_lives_at_what_pct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"what percent of sites account for P percent of residents? — popshare_p_lives_at_what_pct","text":"","code":"x <- testdata_ejamit_output_100pts_1miles$results_bysite #> Error in eval(expr, envir, enclos): object 'testdata_ejamit_output_100pts_1miles' not found  popshare_p_lives_at_what_pct(x$pop, p = 0.50, astext=TRUE) #> Error in popshare_p_lives_at_what_pct(x$pop, p = 0.5, astext = TRUE): object 'x' not found  popshare_p_lives_at_what_n(  x$pop, p = c(0.50, 0.67, 0.80, 0.95)) #> Error in popshare_p_lives_at_what_n(x$pop, p = c(0.5, 0.67, 0.8, 0.95)): object 'x' not found  popshare_at_top_x_pct(       x$pop, x = c(0.25, 0.50, .90)) #> Error in popshare_at_top_x_pct(x$pop, x = c(0.25, 0.5, 0.9)): object 'x' not found  popshare_at_top_n(           x$pop, n = c(1, 5, 10)) #> Error in popshare_at_top_n(x$pop, n = c(1, 5, 10)): object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"Creates popup vector leaflet::addCircles leaflet::addPopups can use. Works similarly popup_from_df, now extends data.table","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"","code":"popup_from_any(   x,   column_names = names(x),   labels = column_names,   n = \"all\",   testing = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"x, data table data frame column_names default , vector column names x use. column_names requested found names(x), warning given NA values returned names x. names(x) requested column_names, left . labels default column_names - vector used label elements popup. Must length column_names n Show first n columns mypoints, popup. \"\" means . testing can set TRUE testing function","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"vector strings, one per row map point, line break separating column elements","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"popup made one row data.frame. popup one row text per column data.frame","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_any.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map popups - Simple map popup from a data.table or data.frame, one point per row — popup_from_any","text":"","code":"dat <- data.table(    RegistryId = c(\"110071102551\", \"110015787683\"),    FacilityName = c(\"USDOI FWS AK MARITIME NWR etc\", \"ADAK POWER PLANT\"),    LocationAddress = c(\"65 MI W. OF ADAK NAVAL FACILITY\", \"100 HILLSIDE BLVD\"),    CityName = c(\"ADAK\", \"ADAK\"),    CountyName = c(\"ALEUTIAN ISLANDS\", \"ALEUTIANS WEST\"),    StateAbbr = c(\"AK\", \"AK\"),    ZipCode = c(\"99546\", \"99546\"),    FIPSCode = c(\"02010\", \"02016\"),    lat = c(51.671389,51.8703), lon = c(-178.051111, -176.659),    SupplementalLocation = c(NA_character_,NA_character_)) #> Error in data.table(RegistryId = c(\"110071102551\", \"110015787683\"), FacilityName = c(\"USDOI FWS AK MARITIME NWR etc\",     \"ADAK POWER PLANT\"), LocationAddress = c(\"65 MI W. OF ADAK NAVAL FACILITY\",     \"100 HILLSIDE BLVD\"), CityName = c(\"ADAK\", \"ADAK\"), CountyName = c(\"ALEUTIAN ISLANDS\",     \"ALEUTIANS WEST\"), StateAbbr = c(\"AK\", \"AK\"), ZipCode = c(\"99546\",     \"99546\"), FIPSCode = c(\"02010\", \"02016\"), lat = c(51.671389,     51.8703), lon = c(-178.051111, -176.659), SupplementalLocation = c(NA_character_,     NA_character_)): could not find function \"data.table\"    ## add popups only  leaflet::leaflet(dat) |> leaflet::addTiles() |> leaflet::addPopups(popup = popup_from_any(dat)) #> Error in structure(list(options = options), leafletData = data): object 'dat' not found    ## add circles with clickable popups  leaflet::leaflet(dat) |> leaflet::addTiles() |> leaflet::addCircles(popup = popup_from_any(dat)) #> Error in structure(list(options = options), leafletData = data): object 'dat' not found    ## convert to data frame, works the same way   dat_df <- as.data.frame(dat_df) #> Error in as.data.frame(dat_df): object 'dat_df' not found  leaflet::leaflet(dat) |> leaflet::addTiles() |> leaflet::addCircles(popup = popup_from_any(dat)) #> Error in structure(list(options = options), leafletData = data): object 'dat' not found"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"Creates popup leaflet::addPopups can use.","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"","code":"popup_from_df(x, column_names = names(x), labels = column_names, n = \"all\")"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"x data.frame info shown map popups column_names default , vector column names x use labels default colnames(x) - vector used label elements popup. Must length column_names n Show first n columns mypoints, popup. \"\" means .","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"vector strings, one per row map point, line break separating column elements","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"popup made one row data.frame. popup one row text per column data.frame","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map popups - Simple map popup from a data.frame, one point per row — popup_from_df","text":"","code":"df <- structure(list(    RegistryId = c(\"110071102551\", \"110015787683\"),    FacilityName = c(\"USDOI FWS AK MARITIME NWR etc\", \"ADAK POWER PLANT\"),    LocationAddress=c(\"65 MI W. OF ADAK NAVAL FACILITY\",\"100 HILLSIDE BLVD\"),    CityName = c(\"ADAK\", \"ADAK\"),    CountyName = c(\"ALEUTIAN ISLANDS\", \"ALEUTIANS WEST\"),    StateAbbr = c(\"AK\", \"AK\"),    ZipCode = c(\"99546\", \"99546\"),    FIPSCode = c(\"02010\", \"02016\"),    lat = c(51.671389,51.8703), lon = c(-178.051111, -176.659),    SupplementalLocation = c(NA_character_,NA_character_)),    row.names = 1:2, class = \"data.frame\")  leaflet::leaflet(df) |> leaflet::addTiles() |>     leaflet::addPopups(popup = popup_from_df(df)) #> Assuming \"lon\" and \"lat\" are longitude and latitude, respectively  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addPopups\",\"args\":[[51.671389,51.8703],[-178.051111,-176.659],[\"RegistryId: 110071102551<br>FacilityName: USDOI FWS AK MARITIME NWR etc<br>LocationAddress: 65 MI W. OF ADAK NAVAL FACILITY<br>CityName: ADAK<br>CountyName: ALEUTIAN ISLANDS<br>StateAbbr: AK<br>ZipCode: 99546<br>FIPSCode: 02010<br>lat: 51.671389<br>lon: -178.051111<br>SupplementalLocation: NA\",\"RegistryId: 110015787683<br>FacilityName: ADAK POWER PLANT<br>LocationAddress: 100 HILLSIDE BLVD<br>CityName: ADAK<br>CountyName: ALEUTIANS WEST<br>StateAbbr: AK<br>ZipCode: 99546<br>FIPSCode: 02016<br>lat: 51.8703<br>lon: -176.659<br>SupplementalLocation: NA\"],null,null,{\"maxWidth\":300,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"className\":\"\"}]}],\"limits\":{\"lat\":[51.671389,51.8703],\"lng\":[-178.051111,-176.659]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"creates HTML text appears map popups.","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"","code":"popup_from_ejscreen(   out,   linkcolname = \"EJScreen Report\",   linkcolname2 = \"EJScreen Map\",   linkcolname3 = \"EJScreenACS\",   verbose = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"raw data data.frame form, results EJ buffer analysis linkcolname Name one column table links URL linkcolname2 Another like linkcolname linkcolname3 another verbose TRUE FALSE, can see details reported function used.","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"HTML ready used map popups","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"Popup shows window click site map, viewing results EJ analysis site. CURRENTLY HARD CODED USE EJScreen VARIABLE NAMES. provides raw scores (EJ indexes) US State percentiles available: site id info fields found latitude, longitude, size area around site Demographic Indicators like population count, Demographic Indicator, etc. Environmental Indicators EJ Indexes web link(s) map report","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_ejscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map popups - Create the popup text for maps of EJ results — popup_from_ejscreen","text":"","code":"if (FALSE) {   out <- testoutput_ejscreenapi_plus_50   x <- popup_from_ejscreen(out)   popup_print(x)   mapfastej(out) }"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_uploadedpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Map popups - make simple popups for map to show info about uploaded points — popup_from_uploadedpoints","title":"Map popups - make simple popups for map to show info about uploaded points — popup_from_uploadedpoints","text":"Map popups - make simple popups map show info uploaded points","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_uploadedpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map popups - make simple popups for map to show info about uploaded points — popup_from_uploadedpoints","text":"","code":"popup_from_uploadedpoints(mypoints, n = \"all\")"},{"path":"https://usepa.github.io/EJAM/reference/popup_from_uploadedpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map popups - make simple popups for map to show info about uploaded points — popup_from_uploadedpoints","text":"mypoints data.frame (tibble?) lat lon columns preferably n Show first n columns mypoints, popup. \"\" means .","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_from_uploadedpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map popups - make simple popups for map to show info about uploaded points — popup_from_uploadedpoints","text":"popups vector used leaflet maps","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/popup_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to view popup info in an interactive session - easier format to view — popup_print","title":"Helper function to view popup info in an interactive session - easier format to view — popup_print","text":"Helper function view popup info interactive session - easier format view","code":""},{"path":"https://usepa.github.io/EJAM/reference/popup_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to view popup info in an interactive session - easier format to view — popup_print","text":"","code":"popup_print(x, linkregex = \"<a href.*>(.*)<.*\", linksimple = \"\\\\1\")"},{"path":"https://usepa.github.io/EJAM/reference/popup_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to view popup info in an interactive session - easier format to view — popup_print","text":"x output popup_from_ejscreen() linkregex see source linksimple see source","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/proximity.score.in.miles.html","id":null,"dir":"Reference","previous_headings":"","what":"proximity.score.in.miles - convert EJScreen proximity scores to miles per site instead of sites per kilometer\r\nShows US percentiles if no arguments used — proximity.score.in.miles","title":"proximity.score.in.miles - convert EJScreen proximity scores to miles per site instead of sites per kilometer\r\nShows US percentiles if no arguments used — proximity.score.in.miles","text":"proximity.score..miles - convert EJScreen proximity scores miles per site instead sites per kilometer Shows US percentiles arguments used","code":""},{"path":"https://usepa.github.io/EJAM/reference/proximity.score.in.miles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"proximity.score.in.miles - convert EJScreen proximity scores to miles per site instead of sites per kilometer\r\nShows US percentiles if no arguments used — proximity.score.in.miles","text":"","code":"proximity.score.in.miles(scoresdf = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/proximity.score.in.miles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"proximity.score.in.miles - convert EJScreen proximity scores to miles per site instead of sites per kilometer\r\nShows US percentiles if no arguments used — proximity.score.in.miles","text":"scoresdf data.frame simple proximity scores like tsdf, rmp, npl traffic.score npdes one since weighted just count per km","code":""},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"Indicator proximity blockgroups set facilities sites. also see getfrsnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"","code":"proxistat2(pts, countradius = 8.04672, maxradius = 621.3712, quadtree = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"pts data.table lat lon countradius distance within nearby sites counted create proximity score. miles, default 5km (8.04672 miles) EJScreen zone proximity scores based counts. maxradius max distance miles search nearest single facility, none found within countradius. EJScreen seems use 1,000 km max search, since lowest scores proximity scores RMP, TSDF, NPL around 0.001, meaning approx. 1/1000 km km_per_mile = 1.609344 1000 km 1000 / 1.609344 = 621.3712 miles quadtree must called localtree, index block locations, built use EJAM package. see quaddata","code":""},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"data.table proximityscore, bgfips, lat, lon, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"Proximity score sum (1/d) d distance given site km, summed sites within 5km, EJScreen. getblocksnearbyviaQuadTree.R() maybe doaggregate()? bit code function .","code":""},{"path":"https://usepa.github.io/EJAM/reference/proxistat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a proximity score for every blockgroup - DRAFT WORK IN PROGRESS — proxistat2","text":"","code":"# pts <- testpoints_100  # x <- proxistat2(pts = pts[1:1000,], quadtree = localtree)   #  # summary(x$proximityscore)  # # analyze.stuff   pctiles(x$proximityscore)  # plot(x = x$lon, y = x$lat)  # tops = x$proximityscore > 500 & !is.infinite(x$proximityscore) & !is.na(x$proximityscore)  # points(x = x$lon[tops], y = x$lat[tops], col=\"red\")"},{"path":"https://usepa.github.io/EJAM/reference/quaddata.html","id":null,"dir":"Reference","previous_headings":"","what":"quaddata (DATA) data.table used to create index of all US block point locations — quaddata","title":"quaddata (DATA) data.table used to create index of all US block point locations — quaddata","text":"quaddata (DATA) data.table used create index US block point locations","code":""},{"path":"https://usepa.github.io/EJAM/reference/quaddata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"quaddata (DATA) data.table used to create index of all US block point locations — quaddata","text":"8,174,955 rows non-populated blocks kept. 5,806,512 rows Census 2020 population (blockwt) > 0. largest file used package, 168 MB file, 2020 Census. - blockid - BLOCK_X, BLOCK_Y, BLOCK_Z  (lat, lon)","code":"localtree is the index made from quaddata    (QuadTree class, via SearchTrees pkg), not a data.table"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":null,"dir":"Reference","previous_headings":"","what":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"radius_inferred - utility estimate original radius requested getblocksnearby() outputs getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"","code":"radius_inferred(   s2b = NULL,   decimalsreported = 2,   decimalsforinferring = 3,   pctile_of_sites = 0.9,   nth_furthest_block = 2 )"},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"s2b data.table ejam_uniq_id, distance, etc. output getblocksnearby() decimalsreported parameter fine tune estimates - generally changed decimalsforinferring parameter fine tune estimates - generally changed pctile_of_sites parameter fine tune estimates - generally changed nth_furthest_block parameter fine tune estimates - generally changed","code":""},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"single number 1.5 3 estimate miles distance originally requested getblocksnearby()","code":""},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"cases someone using EJAM functions like getblocksnearby() might later separate step use results getblocksnearby() summarize indicator values using function like doaggregate(), actual radius originally requested known. function tries approximate radius must requested analysis, looking sites2blocks information distances nearby blocks near analyzed sites. simple using max distance sites, sites getblocksnearby() reports one two distances larger radius requested, even avoidorphans FALSE. must reported distance adjusted small relative whole block, better estimate distance average resident block rather reporting distance point block internal point (centroid essentially). documented EJScreen information creating proximity scores, facility exactly top block internal point distance zero point actual distance average resident block, hence adjustment. blocks low density areas huge relatively small circular buffer (small radius) require adjustments often. block 3 miles radius someone wants radius 1 mile getblocksnearby() ejamit() analysis overall, site inside block might reported distance 2.7 miles average resident block estimated 2.7 miles away site block. Almost 2% US blocks affected issue selected radius 1 mile, 1 1,000 radius 3 miles. function based largely practical algorithm accurate within 0.01 miles vast majority time radius 1 3 miles.","code":""},{"path":"https://usepa.github.io/EJAM/reference/radius_inferred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"radius_inferred - utility to estimate original radius requested in getblocksnearby()\r\nif we only have the outputs of getblocksnearby() — radius_inferred","text":"","code":"radius_inferred() #> [1] 1   # radius_inferred(getblocksnearby(testpoints_n(100), radius = 3.25))"},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":null,"dir":"Reference","previous_headings":"","what":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"Get lat lon, Registry ID, given NAICS industry code(s) Find EPA Facility Registry Service (FRS) sites exact NAICS code (subcategories)","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"","code":"regid_from_naics(naics, id_only = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"naics vector naics codes, data.table column named code, output naics_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"see  latlon_from_naics()","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"NOTE: many FRS sites lack NAICS code! Also, function find sites identified FRS data child NAICS (subcategory exact query)! Relies  frs_by_naics (data.table) See info NAICS industry codes https://www.naics.com/search","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_naics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find EPA-regulated facilities in FRS by NAICS code (industrial category) — regid_from_naics","text":"","code":"regid_from_naics(321114) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 18.41565  -66.20266 110000307837 321114 #>   2: 42.69898  -73.82309 110000324505 321114 #>   3: 41.71228  -73.93705 110000324809 321114 #>   4: 40.08626  -76.18172 110000333826 321114 #>   5: 40.18434  -74.79960 110000336253 321114 #>  ---                                         #> 493: 35.59275  -84.46818 110071307905 321114 #> 494: 35.42391  -87.28222 110071334308 321114 #> 495: 37.50455 -122.21792 110071380069 321114 #> 496: 39.79828 -104.99275 110071414306 321114 #> 497: 35.89974  -88.75981 110071434078 321114   latlon_from_naics(321114) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 18.41565  -66.20266 110000307837 321114 #>   2: 42.69898  -73.82309 110000324505 321114 #>   3: 41.71228  -73.93705 110000324809 321114 #>   4: 40.08626  -76.18172 110000333826 321114 #>   5: 40.18434  -74.79960 110000336253 321114 #>  ---                                         #> 493: 35.59275  -84.46818 110071307905 321114 #> 494: 35.42391  -87.28222 110071334308 321114 #> 495: 37.50455 -122.21792 110071380069 321114 #> 496: 39.79828 -104.99275 110071414306 321114 #> 497: 35.89974  -88.75981 110071434078 321114   latlon_from_naics(EJAM::naics_from_any(\"cheese\")[,code] ) #> Key: <NAICS, REGISTRY_ID> #>           lat        lon  REGISTRY_ID  NAICS #>         <num>      <num>       <char>  <num> #>   1: 44.18750  -75.95694 110000326102 311513 #>   2: 42.87593  -78.86949 110000326825 311513 #>   3: 42.83404  -78.82388 110000327183 311513 #>   4: 41.47924  -81.07851 110000385798 311513 #>   5: 43.59796  -85.14557 110000410207 311513 #>  ---                                         #> 397: 44.91011  -72.79787 110071292784 311513 #> 398: 42.84509  -90.69292 110071433364 311513 #> 399: 42.84416  -73.98835 110071433604 311513 #> 400: 32.87831 -111.78364 110071434204 311513 #> 401: 44.75453  -90.29649 110071498797 311513   head(latlon_from_naics(c(3366, 33661, 336611), id_only=TRUE)) #> [1] \"110000897290\" \"110000332621\" \"110000360564\" \"110000369869\" \"110000377333\" #> [6] \"110000448962\"   # mapfast(frs_from_naics(336611)) # simple map"},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":null,"dir":"Reference","previous_headings":"","what":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"Get lat lon, Registry ID, given SIC industry code(s) Find EPA Facility Registry Service (FRS) sites exact SIC code (subcategories)","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"","code":"regid_from_sic(sic, id_only = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"sic vector SIC codes, data.table column named code, output sic_from_any()","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"data.table (just data.frame) columns called lat, lon, REGISTRY_ID, SIC (see id_only parameter)","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"NOTE: many FRS sites lack SIC code! Also, function find sites identified FRS data child SIC (subcategory exact query)! Relies  frs_by_sic (data.table) See info SIC industry codes https://www.naics.com/search","code":""},{"path":"https://usepa.github.io/EJAM/reference/regid_from_sic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find EPA-regulated facilities in FRS by SIC code (industrial category) — regid_from_sic","text":"","code":"regid_from_sic('7300') #>          lat        lon  REGISTRY_ID  SIC #>  1: 34.22987 -118.55510 110002900736 7300 #>  2: 41.08589  -74.33128 110004267800 7300 #>  3: 42.54940 -114.47859 110010752550 7300 #>  4: 34.01392 -118.19359 110011611648 7300 #>  5: 38.68731  -90.39718 110024449658 7300 #>  6: 40.73294  -74.06308 110030543437 7300 #>  7: 41.04292  -74.07526 110031793806 7300 #>  8: 40.40642  -74.66741 110032477861 7300 #>  9: 39.83567  -75.21408 110040259485 7300 #> 10: 34.06951 -118.34760 110065446244 7300 #> 11: 34.08792 -118.34194 110065723667 7300 #> 12: 34.27237 -118.42343 110065865282 7300 #> 13: 34.25945 -118.43181 110066299856 7300 #> 14: 34.10202 -118.32319 110066397241 7300 #> 15: 33.79480 -118.24245 110066691048 7300 #> 16: 33.99711 -118.30928 110066717627 7300   latlon_from_sic('7300') #>          lat        lon  REGISTRY_ID  SIC #>  1: 34.22987 -118.55510 110002900736 7300 #>  2: 41.08589  -74.33128 110004267800 7300 #>  3: 42.54940 -114.47859 110010752550 7300 #>  4: 34.01392 -118.19359 110011611648 7300 #>  5: 38.68731  -90.39718 110024449658 7300 #>  6: 40.73294  -74.06308 110030543437 7300 #>  7: 41.04292  -74.07526 110031793806 7300 #>  8: 40.40642  -74.66741 110032477861 7300 #>  9: 39.83567  -75.21408 110040259485 7300 #> 10: 34.06951 -118.34760 110065446244 7300 #> 11: 34.08792 -118.34194 110065723667 7300 #> 12: 34.27237 -118.42343 110065865282 7300 #> 13: 34.25945 -118.43181 110066299856 7300 #> 14: 34.10202 -118.32319 110066397241 7300 #> 15: 33.79480 -118.24245 110066691048 7300 #> 16: 33.99711 -118.30928 110066717627 7300   latlon_from_sic(sic_from_any(\"cheese\")[,code] ) #>           lat        lon  REGISTRY_ID  SIC #>   1: 44.18750  -75.95694 110000326102 2022 #>   2: 42.87593  -78.86949 110000326825 2022 #>   3: 42.83404  -78.82388 110000327183 2022 #>   4: 41.47924  -81.07851 110000385798 2022 #>   5: 43.59796  -85.14557 110000410207 2022 #>  ---                                       #> 363: 42.66670  -90.12916 110070384941 2022 #> 364: 38.23239 -122.59286 110070686024 2022 #> 365: 34.24911 -119.22682 110070816358 2022 #> 366: 43.01911  -84.54965 110070870126 2022 #> 367: 44.75453  -90.29649 110071498797 2022   head(latlon_from_sic(c('6150', '6300', '5995'), id_only=TRUE)) #> [1] \"110000346545\" \"110000524200\" \"110000528616\" \"110001362427\" \"110002218546\" #> [6] \"110007563252\"   # mapfast(frs_from_sic('6150')) # simple map"},{"path":"https://usepa.github.io/EJAM/reference/regionstats.html","id":null,"dir":"Reference","previous_headings":"","what":"regionstats (DATA) (obsolete) data.table of 100 percentiles and means for each EPA Region. — regionstats","title":"regionstats (DATA) (obsolete) data.table of 100 percentiles and means for each EPA Region. — regionstats","text":"data.table 100 percentiles means EPA Region (> 1,000 rows) block groups zone (e.g., block groups blockgroupstats) set indicators percent low income. column one indicator (specifies percentile). similar lookup tables gdb FTP site EJScreen.","code":""},{"path":"https://usepa.github.io/EJAM/reference/rmost.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to rm(list=ls()) but not remove key datasets EJAM uses — rmost","title":"utility to rm(list=ls()) but not remove key datasets EJAM uses — rmost","text":"utility rm(list=ls()) remove key datasets EJAM uses","code":""},{"path":"https://usepa.github.io/EJAM/reference/rmost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to rm(list=ls()) but not remove key datasets EJAM uses — rmost","text":"","code":"rmost(   notremove = c(\"rmost\", \"localtree\", \"blockgroupstats\", \"usastats\", \"statestats\",     \"bgid2fips\", \"blockid2fips\", \"blockpoints\", \"blockwts\", \"quaddata\", \"bgej\") )"},{"path":"https://usepa.github.io/EJAM/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the Shiny Application in RStudio — run_app","title":"Launch the Shiny Application in RStudio — run_app","text":"launch Shiny web app RStudio","code":""},{"path":"https://usepa.github.io/EJAM/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the Shiny Application in RStudio — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = \"server\",   uiPattern = \"/\",   ... )"},{"path":"https://usepa.github.io/EJAM/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch the Shiny Application in RStudio — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. Maybe something like sitepoints=\"latlondata.xlsx\" sitepoints=testpoints_100 See ?golem::get_golem_options details.","code":""},{"path":"https://usepa.github.io/EJAM/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch the Shiny Application in RStudio — run_app","text":"object represents app. Printing object passing runApp() run app.","code":""},{"path":"https://usepa.github.io/EJAM/reference/run_app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Launch the Shiny Application in RStudio — run_app","text":"app_run_EJAM()                 like run_app() EJAM package","code":""},{"path":"https://usepa.github.io/EJAM/reference/setdiff2.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - see what is only in x or y but not both - just like setdiff except for y,x and also x,y — setdiff2","title":"UTILITY - see what is only in x or y but not both - just like setdiff except for y,x and also x,y — setdiff2","text":"setdiff2 aka unshared just shows elements one one sets x y","code":""},{"path":"https://usepa.github.io/EJAM/reference/setdiff2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - see what is only in x or y but not both - just like setdiff except for y,x and also x,y — setdiff2","text":"","code":"setdiff2(x, y)"},{"path":"https://usepa.github.io/EJAM/reference/setdiff_yx.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - see what is in y not x — setdiff_yx","title":"UTILITY - see what is in y not x — setdiff_yx","text":"utility just like setdiff except y,x instead x,y","code":""},{"path":"https://usepa.github.io/EJAM/reference/setdiff_yx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - see what is in y not x — setdiff_yx","text":"","code":"setdiff_yx(x, y)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile2blockpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all Census blocks in a polygon, using internal point of block — shapefile2blockpoints","title":"Find all Census blocks in a polygon, using internal point of block — shapefile2blockpoints","text":"Find Census blocks polygon, using internal point block","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile2blockpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all Census blocks in a polygon, using internal point of block — shapefile2blockpoints","text":"","code":"shapefile2blockpoints(...)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile2blockpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all Census blocks in a polygon, using internal point of block — shapefile2blockpoints","text":"get_blockpoints_in_shape()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile2latlon.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert shapefile (class sf) of points to data.table of lat, lon columns — shapefile2latlon","title":"Convert shapefile (class sf) of points to data.table of lat, lon columns — shapefile2latlon","text":"Makes lat lon columns, sfc_POINT class geometry field, via sf::st_coordinates()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile2latlon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert shapefile (class sf) of points to data.table of lat, lon columns — shapefile2latlon","text":"","code":"shapefile2latlon(shp, include_only_latlon = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile2latlon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert shapefile (class sf) of points to data.table of lat, lon columns — shapefile2latlon","text":"shp shapefile class sf, shapefile_from_any() sf::st_read(), geometry column points class sfc_POINT include_only_latlon set FALSE function return lat lon columns plus columns shp. TRUE, just returns lat lon columns.","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile2latlon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert shapefile (class sf) of points to data.table of lat, lon columns — shapefile2latlon","text":"data.table columns named lat lon, optionally shp well, can used input ejamit(), mapfast(), etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop invalid rows and warn if all invalid and add unique ID — shapefile_clean","title":"Drop invalid rows and warn if all invalid and add unique ID — shapefile_clean","text":"Drop invalid rows warn invalid add unique ID","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop invalid rows and warn if all invalid and add unique ID — shapefile_clean","text":"","code":"shapefile_clean(shp, crs = 4269)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop invalid rows and warn if all invalid and add unique ID — shapefile_clean","text":"shp shapefile object using sf::st_read() crs used shp <- sf::st_transform(shp, crs = crs), default crs = 4269 Geodetic CRS NAD83","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop invalid rows and warn if all invalid and add unique ID — shapefile_clean","text":"like input shp, applying crs dropping valid, plus column ejam_uniq_id 1:NROW()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_from_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of valid filenames comprising shapefile including paths — shapefile_filepaths_from_folder","title":"Get list of valid filenames comprising shapefile including paths — shapefile_filepaths_from_folder","text":"Get list valid filenames comprising shapefile including paths","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_from_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of valid filenames comprising shapefile including paths — shapefile_filepaths_from_folder","text":"","code":"shapefile_filepaths_from_folder(folder = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_from_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of valid filenames comprising shapefile including paths — shapefile_filepaths_from_folder","text":"folder path folder contains files (.shp, .shx, .dbf, .prj)","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_from_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of valid filenames comprising shapefile including paths — shapefile_filepaths_from_folder","text":"string vector filenames including full paths","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm files have all the extensions .shp, .shx, .dbf, and .prj — shapefile_filepaths_valid","title":"Confirm files have all the extensions .shp, .shx, .dbf, and .prj — shapefile_filepaths_valid","text":"Confirm files extensions .shp, .shx, .dbf, .prj","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm files have all the extensions .shp, .shx, .dbf, and .prj — shapefile_filepaths_valid","text":"","code":"shapefile_filepaths_valid(filepaths)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm files have all the extensions .shp, .shx, .dbf, and .prj — shapefile_filepaths_valid","text":"filepaths vector full paths filenames (types .shp, .shx, .dbf, .prj) strings","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_filepaths_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm files have all the extensions .shp, .shx, .dbf, and .prj — shapefile_filepaths_valid","text":"logical, indicating 4 extensions found among filepaths","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Read shapefile from any file or folder (trying to infer the format) — shapefile_from_any","title":"Read shapefile from any file or folder (trying to infer the format) — shapefile_from_any","text":"Read shapefile file folder (trying infer format)","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read shapefile from any file or folder (trying to infer the format) — shapefile_from_any","text":"","code":"shapefile_from_any(path = NULL, cleanit = TRUE, crs = 4269, layer = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read shapefile from any file or folder (trying to infer the format) — shapefile_from_any","text":"path path file(s) /.gdb, .zip, .shp etc., folder .zip folder one shapefile , read function, must unzipped handled separately. folder, tries read shapefile_from_folder() Folder must contain one files extensions .shp, .shx, .dbf, .prj .zip containing folder, unzips, tries read shapefile_from_folder() shapefile_from_gdbzip() ? .zip containing .gdb, reads shapefile_from_gdbzip() .gdb, reads shapefile_from_gdb() .shp, reads shapefile_from_filepaths() vector .shp, .shx, .dbf, .prj file names (may include paths), reads shapefile_from_filepaths() cleanit set FALSE want skip validation dropping invalid rows crs passed shapefile_from_filepaths() etc. default crs = 4269 Geodetic CRS NAD83 layer optional layer name","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read shapefile from any file or folder (trying to infer the format) — shapefile_from_any","text":"shapefile object using sf::st_read()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_filepaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Read shapefile from disk based on the filenames given — shapefile_from_filepaths","title":"Read shapefile from disk based on the filenames given — shapefile_from_filepaths","text":"Read shapefile disk based filenames given","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_filepaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read shapefile from disk based on the filenames given — shapefile_from_filepaths","text":"","code":"shapefile_from_filepaths(   filepaths = NULL,   cleanit = TRUE,   crs = 4269,   layer = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_filepaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read shapefile from disk based on the filenames given — shapefile_from_filepaths","text":"filepaths vector full paths filenames (types .shp, .shx, .dbf, .prj) strings cleanit set FALSE want skip validation dropping invalid rows crs cleanit = TRUE, crs passed shapefile_clean() default crs = 4269 Geodetic CRS NAD83 Also can check via x <- sf::st_crs(sf::st_read()); x$input layer optional name layer read","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_filepaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read shapefile from disk based on the filenames given — shapefile_from_filepaths","text":"shapefile object using sf::st_read()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Read shapefile from a folder — shapefile_from_folder","title":"Read shapefile from a folder — shapefile_from_folder","text":"Read shapefile folder","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read shapefile from a folder — shapefile_from_folder","text":"","code":"shapefile_from_folder(folder = NULL, cleanit = TRUE, crs = 4269)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read shapefile from a folder — shapefile_from_folder","text":"folder path folder contains files (.shp, .shx, .dbf, .prj) cleanit set FALSE want skip validation dropping invalid rows crs passed shapefile_from_filepaths() default crs = 4269 Geodetic CRS NAD83","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read shapefile from a folder — shapefile_from_folder","text":"shapefile object using sf::read_sf()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read shapefile from a folder — shapefile_from_folder","text":"","code":"if (FALSE) {   testfolder <- system.file(\"testdata/shapes/Portland_neighborhoods\", package = \"EJAM\")   testshape <- shapefile_from_folder(testfolder)    testpaths <- shapefile_filepaths_from_folder(testfolder)   testshape <- shapefile_from_filepaths(testpaths)    ## if interactive(), R user can point to right folder or select the right set of files:   # testshape <- shapefile_from_filepaths()   # testshape <- shapefile_from_folder()    x <- get_blockpoints_in_shape(testshape)   leaflet(x$polys) %>% addTiles() %>% addPolygons(color = \"blue\")   DT::datatable(out$results_bysite)    }"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdb.html","id":null,"dir":"Reference","previous_headings":"","what":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","title":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","text":"read .gdb geodatabase file via sf::st_read()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","text":"","code":"shapefile_from_gdb(fname, layer = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","text":"fname path filename .gdb file layer optional name layer, see sf::st_read()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","text":"like output sf::st_read() ejam_uniq_id column 1:NROW()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read .gdb geodatabase file via sf::st_read() — shapefile_from_gdb","text":"","code":"# npl <- sf::st_read(\"~/../Desktop/NPL/NPL_Boundaries.gdb\")   # npl <- shapefile_from_gdb(\"~/../Desktop/NPL/NPL_Boundaries.gdb\",   #   layer = \"SITE_BOUNDARIES_SF\")   # npl <- shapefile_from_gdbzip(\"~/../Desktop/NPL/NPL_Boundaries.zip\")   # mapview::mapview(npl[x$STATE_CODE == \"CA\", ])"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdbzip.html","id":null,"dir":"Reference","previous_headings":"","what":"read .zip that contains geodatabase file via unzip and st_read — shapefile_from_gdbzip","title":"read .zip that contains geodatabase file via unzip and st_read — shapefile_from_gdbzip","text":"read .zip contains geodatabase file via unzip st_read","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdbzip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read .zip that contains geodatabase file via unzip and st_read — shapefile_from_gdbzip","text":"","code":"shapefile_from_gdbzip(fname, layer = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdbzip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read .zip that contains geodatabase file via unzip and st_read — shapefile_from_gdbzip","text":"fname path .zip file contains .gdb file layer optional name layer, see sf::st_read()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_gdbzip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read .zip that contains geodatabase file via unzip and st_read — shapefile_from_gdbzip","text":"see shapefile_from_gdb()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_sitepoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert table of lat,lon points/sites into sf:: shapefile — shapefile_from_sitepoints","title":"Convert table of lat,lon points/sites into sf:: shapefile — shapefile_from_sitepoints","text":"Creates simple feature (sf) dataframe points","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_sitepoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert table of lat,lon points/sites into sf:: shapefile — shapefile_from_sitepoints","text":"","code":"shapefile_from_sitepoints(sitepoints, crs = 4269)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_sitepoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert table of lat,lon points/sites into sf:: shapefile — shapefile_from_sitepoints","text":"sitepoints data.table data.frame columns called lat,lon crs used st_as_sf() default crs = 4269 Geodetic CRS NAD83","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_sitepoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert table of lat,lon points/sites into sf:: shapefile — shapefile_from_sitepoints","text":"shapefile via sf::st_as_sf()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"read zipped .zip that may contain a geodatabase file or .shp file etc. — shapefile_from_zip","title":"read zipped .zip that may contain a geodatabase file or .shp file etc. — shapefile_from_zip","text":"read zipped .zip may contain geodatabase file .shp file etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read zipped .zip that may contain a geodatabase file or .shp file etc. — shapefile_from_zip","text":"","code":"shapefile_from_zip(path, cleanit = TRUE, crs = 4269, layer = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read zipped .zip that may contain a geodatabase file or .shp file etc. — shapefile_from_zip","text":"path path filename .zip file cleanit optional, whether use shapefile_clean() crs passed shapefile_from_filepaths() etc. default crs = 4269 Geodetic CRS NAD83 layer optional layer name","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapefile_from_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read zipped .zip that may contain a geodatabase file or .shp file etc. — shapefile_from_zip","text":"like output sf::st_read()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_blockgroups_from_bgfips.html","id":null,"dir":"Reference","previous_headings":"","what":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","title":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","text":"Get boundaries blockgroups, via API, map ","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_blockgroups_from_bgfips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","text":"","code":"shapes_blockgroups_from_bgfips(   bgfips = \"010890029222\",   outFields = \"\",   myservice =     c(\"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Boundaries_2022/FeatureServer/5/query\",     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Block_Groups/FeatureServer/0/query\",     \"https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/EJScreen_2_21_US_Percentiles_Block_Groups/FeatureServer/0/query\")[1] )"},{"path":"https://usepa.github.io/EJAM/reference/shapes_blockgroups_from_bgfips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","text":"bgfips one block group FIPS codes 12-character strings vector outFields can \"*\" , can just variables like SQMI, POPULATION_2020, etc., none myservice URL feature service get shapes . \"https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/ EJScreen_2_21_US_Percentiles_Block_Groups/FeatureServer/0/query\" example provides EJScreen indicator values, NPL_CNT, TSDF_CNT, EXCEED_COUNT_90, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_blockgroups_from_bgfips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","text":"spatial object via sf::st_read() # sf-data.frame, sf-tibble like sf::read_sf()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_blockgroups_from_bgfips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get boundaries of blockgroups, via API, to map them — shapes_blockgroups_from_bgfips","text":"useful mostly small numbers blockgroups. EJScreen map services provide ways map blockgroups see EJScreen data.","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_counties_from_countyfips.html","id":null,"dir":"Reference","previous_headings":"","what":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","title":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","text":"Get boundaries US Counties via API, map ","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_counties_from_countyfips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","text":"","code":"shapes_counties_from_countyfips(   countyfips = \"10001\",   outFields = \"\",   myservice =     c(\"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Boundaries_2022/FeatureServer/2/query\",     \"https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_and_States_with_PR/FeatureServer/0/query\",     \"https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/EJScreen_2_22_US_Percentiles_Tracts/FeatureServer/query\")[1] )"},{"path":"https://usepa.github.io/EJAM/reference/shapes_counties_from_countyfips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","text":"countyfips FIPS codes 5-character strings (numbers) vector fips_counties_from_state_abbrev(\"DE\") outFields can \"*\" , can just variables like SQMI, POPULATION_2020, etc., none myservice URL feature service get shapes . default tested","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_counties_from_countyfips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","text":"spatial object via sf::st_read()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shapes_counties_from_countyfips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get boundaries of US Counties via API, to map them — shapes_counties_from_countyfips","text":"Used sf::read_sf(), alias sf::st_read() modified default arguments. read_sf quiet default/ print info data source, read_sf returns sf-tibble rather sf-data.frame","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","title":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","text":"shape_buffered_from_shapefile - add buffer around shape","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","text":"","code":"shape_buffered_from_shapefile(shapefile, radius.miles, crs = 4269, ...)"},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","text":"shapefile spatial object like areas high risk areas facilities analyzed radius.miles width buffer add shapefile (case dist units object, convertible arc_degree x geographic coordinates, st_crs(x)$units otherwise) crs used st_transform()  default crs = 4269 Geodetic CRS NAD83 ... passed st_buffer()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","text":"format sf::st_buffer() returns","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shape_buffered_from_shapefile - add buffer around shape — shape_buffered_from_shapefile","text":"Just wrapper sf::st_buffer()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile_points.html","id":null,"dir":"Reference","previous_headings":"","what":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","title":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","text":"shape_buffered_from_shapefile_points - add buffer around shape (points, )","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","text":"","code":"shape_buffered_from_shapefile_points(   shapefile_points,   radius.miles,   crs = 4269,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","text":"shapefile_points spatial object like areas high risk areas facilities analyzed radius.miles width buffer add shapefile_points (case dist units object, convertible arc_degree x geographic coordinates, st_crs(x)$units otherwise) crs used st_transform()  default crs = 4269 Geodetic CRS NAD83 ... passed st_buffer()","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","text":"format sf::st_buffer() returns","code":""},{"path":"https://usepa.github.io/EJAM/reference/shape_buffered_from_shapefile_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shape_buffered_from_shapefile_points - add buffer around shape (points, here) — shape_buffered_from_shapefile_points","text":"Just wrapper sf::st_buffer()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/SIC.html","id":null,"dir":"Reference","previous_headings":"","what":"SIC (DATA) named list of all SIC code numbers and category name for each — SIC","title":"SIC (DATA) named list of all SIC code numbers and category name for each — SIC","text":"SIC (DATA) named list SIC code numbers category name ","code":""},{"path":"https://usepa.github.io/EJAM/reference/SIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SIC (DATA) named list of all SIC code numbers and category name for each — SIC","text":"see https://siccode.com","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sictable.html","id":null,"dir":"Reference","previous_headings":"","what":"sictable (DATA) data.table of SIC code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3, and 4-digit SIC that this code falls under, where relevant for given length — sictable","title":"sictable (DATA) data.table of SIC code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3, and 4-digit SIC that this code falls under, where relevant for given length — sictable","text":"similar data file EJAM::SIC useful format newer functions work .","code":""},{"path":"https://usepa.github.io/EJAM/reference/sictable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sictable (DATA) data.table of SIC code(s) and industry names for each EPA-regulated site in Facility Registry Service\r\nAlso has the 2,3, and 4-digit SIC that this code falls under, where relevant for given length — sictable","text":"see https://siccode.com","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"See the names of SIC industrial categories and their codes — sic_categories","title":"See the names of SIC industrial categories and their codes — sic_categories","text":"Easy way view, RStudio console, SIC categories. SIC 4-digit codes, like 7218 - Industrial launderers","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See the names of SIC industrial categories and their codes — sic_categories","text":"","code":"sic_categories()"},{"path":"https://usepa.github.io/EJAM/reference/sic_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"See the names of SIC industrial categories and their codes — sic_categories","text":"matrix 1 column, rownames like \"7353 - Heavy construction equipment rental (411 sites)\" values like \"7353\"","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_from_any.html","id":null,"dir":"Reference","previous_headings":"","what":"General way to search for industry names and NAICS codes — sic_from_any","title":"General way to search for industry names and NAICS codes — sic_from_any","text":"Find industry names codes searching queried code(s) text","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General way to search for industry names and NAICS codes — sic_from_any","text":"","code":"sic_from_any(   query,   children = FALSE,   ignore.case = TRUE,   fixed = FALSE,   website_scrape = FALSE,   website_url = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/sic_from_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General way to search for industry names and NAICS codes — sic_from_any","text":"query query string(s) /number(s), vector NAICS codes industry names regular expression partial words children logical, TRUE, also return subcategories - NAICS starts digits ignore.case see grepl() fixed exact match? see grepl() website_scrape whether scrape info NAICS website return table codes names match (web query uses synonyms gets hits) website_url whether return URL webpage info NAICS (web query uses synonyms gets hits)","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General way to search for industry names and NAICS codes — sic_from_any","text":"subset sictable data.table (just codes column)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_from_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for industry names by SIC code(s), 4 digits each — sic_from_code","title":"Search for industry names by SIC code(s), 4 digits each — sic_from_code","text":"Search industry names SIC code(s), 4 digits ","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for industry names by SIC code(s), 4 digits each — sic_from_code","text":"","code":"sic_from_code(mycodes, children = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/sic_from_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for industry names by SIC code(s), 4 digits each — sic_from_code","text":"mycodes vector character SIC codes. see https://siccode.com children logical, TRUE, also return subcategories - SIC starts digits","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for industry names by SIC code(s), 4 digits each — sic_from_code","text":"subset sictable data.table (just codes column)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_from_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for industry names and SIC codes by query string — sic_from_name","title":"Search for industry names and SIC codes by query string — sic_from_name","text":"query parts words, etc. industry name.","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for industry names and SIC codes by query string — sic_from_name","text":"","code":"sic_from_name(mynames, children = FALSE, ignore.case = TRUE, fixed = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/sic_from_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for industry names and SIC codes by query string — sic_from_name","text":"mynames query string, vector SIC industry names regular expression partial words. See https://siccode.com children logical, TRUE, also return subcategories - SIC starts digits ignore.case see grepl() fixed exact match? see grepl()","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_from_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for industry names and SIC codes by query string — sic_from_name","text":"subset sictable data.table (just codes column)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_from_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for industry names and SIC codes by query string — sic_from_name","text":"","code":"data.table::fintersect(sic_from_any( \"glass\"), sic_from_any(\"paint\")) #>      code     n2     n3     n4                               name #>    <char> <char> <char> <char>                             <char> #> 1:   5230     52    523   5230 Paint, glass, and wallpaper stores #>                                     num_name #>                                       <char> #> 1: 5230 - Paint, glass, and wallpaper stores"},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"Given 3-digit SIC code, example, get SIC start digits.","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"","code":"sic_subcodes_from_code(mycodes)"},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"mycodes SIC codes vector, 2 4 digits . See https://siccode.com","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"subset sictable data.table (just codes column)","code":""},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"similar idea naics2children() robust See sic_from_any() uses ","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sic_subcodes_from_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find subcategories of the given overall SIC industry code(s) — sic_subcodes_from_code","text":"","code":"# codes starting with '07'   sic_subcodes_from_code('07') #>      code     n2     n3     n4                                 name #>    <char> <char> <char> <char>                               <char> #> 1:   0700     07    070   0700                Agricultural services #> 2:   0710     07    071   0710            Soil preparation services #> 3:   0720     07    072   0720                        Crop services #> 4:   0740     07    074   0740                  Veterinary services #> 5:   0750     07    075   0750   Animal services, except veterinary #> 6:   0760     07    076   0760   Farm labor and management services #> 7:   0761     07    076   0761               Farm labor contractors #> 8:   0762     07    076   0762             Farm management services #> 9:   0780     07    078   0780 Landscape and horticultural services #>                                       num_name #>                                         <char> #> 1:                0700 - Agricultural services #> 2:            0710 - Soil preparation services #> 3:                        0720 - Crop services #> 4:                  0740 - Veterinary services #> 5:   0750 - Animal services, except veterinary #> 6:   0760 - Farm labor and management services #> 7:               0761 - Farm labor contractors #> 8:             0762 - Farm management services #> 9: 0780 - Landscape and horticultural services   # codes starting with '078'   sic_subcodes_from_code('078') #>      code     n2     n3     n4                                 name #>    <char> <char> <char> <char>                               <char> #> 1:   0780     07    078   0780 Landscape and horticultural services #>                                       num_name #>                                         <char> #> 1: 0780 - Landscape and horticultural services"},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example1000pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example1000pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example1000pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example1000pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example1000pts_1miles","text":"output getblocksnearby(testpoints_1000, radius = 1)  testoutput_getblocksnearby_1000pts_1miles","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example100pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example100pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example100pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example100pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example100pts_1miles","text":"output getblocksnearby(testpoints_100, radius = 1)  testoutput_getblocksnearby_100pts_1miles","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example10pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example10pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example10pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/sites2blocks_example10pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — sites2blocks_example10pts_1miles","text":"output getblocksnearby(testpoints_10, radius = 1)  testoutput_getblocksnearby_10pts_1miles","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/speedtable_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility used by speedtest() and speedtable_summarize() — speedtable_expand","title":"Utility used by speedtest() and speedtable_summarize() — speedtable_expand","text":"Utility used speedtest() speedtable_summarize()","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtable_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility used by speedtest() and speedtable_summarize() — speedtable_expand","text":"","code":"speedtable_expand(speedtable)"},{"path":"https://usepa.github.io/EJAM/reference/speedtable_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility used by speedtest() and speedtable_summarize() — speedtable_expand","text":"speedtable must columns called  points, miles, perhr","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtable_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"utility used by speedtest() — speedtable_summarize","title":"utility used by speedtest() — speedtable_summarize","text":"utility used speedtest()","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtable_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility used by speedtest() — speedtable_summarize","text":"","code":"speedtable_summarize(speedtable)"},{"path":"https://usepa.github.io/EJAM/reference/speedtable_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility used by speedtest() — speedtable_summarize","text":"speedtable speedtest(), columns named points perhr","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"Run EJAM analysis several radii numbers sitepoints, recording long step takes","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"","code":"speedtest(   n = 10,   sitepoints = NULL,   weighting = \"frs\",   radii = c(1, 3.106856, 5, 10, 31.06856)[1:3],   avoidorphans = FALSE,   test_ejamit = FALSE,   test_getblocksnearby = TRUE,   test_doaggregate = TRUE,   test_batch.summarize = FALSE,   logging = FALSE,   logfolder = getwd(),   logfilename = \"log_n_datetime.txt\",   honk_when_ready = TRUE,   saveoutput = FALSE,   plot = TRUE,   getblocks_diagnostics_shown = FALSE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"n optional, vector 1 counts many random points test, set 0 interactively pick file points RStudio (n ignored sitepoints provided) sitepoints optional,  (use want random points) data.frame points path/file points, columns lat lon decimal degrees weighting optional, using random points, weight , facilities, people, blockgroups. see testpoints_n() radii optional, one radius values miles use creating circular buffers findings residents nearby sitepoints. default list includes one 5km (approx 3.1 miles) avoidorphans see getblocksnearby() ejamit() regarding param test_ejamit whether test ejamit() instead subcomponents like getblocksnearby(), doaggregate(), etc test_getblocksnearby whether include function timing - used always done test_doaggregate whether include function timing test_batch.summarize whether include function timing logging logical optional, whether save log file timings steps. NOTE slows though. logfolder optional, name folder log file logfilename optional, name log file go folder honk_when_ready optional, self-explanatory saveoutput slows set TRUE save run .rda file plot whether create plot results getblocks_diagnostics_shown set TRUE see details block counts etc. ... passed plotting function","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"EJAM results similar web app ejamit() also creates plot","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"essentially test script times step EJAM large dataset pick sample size (n) (enter sitepoints, set n=0 interactively pick file points RStudio) pick n random points pick different radii circular buffering analyze indicators circular buffers overall (find blocks nearby calc indicators) get stats summarize indicators compare times steps radii approaches tools","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/speedtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run EJAM analysis for several radii and numbers of sitepoints, recording how long each step takes — speedtest","text":"","code":"if (FALSE) {    speedseen_few <- speedtest(c(50,500), radii=c(1, 3.106856), logging=FALSE, honk=FALSE)      speedseen_nearer_to1k <- speedtest(n = c(1e2,1e3,1e4 ), radii=c(1, 3.106856,5 ),     logging=TRUE, honk=FALSE)   save( speedseen_nearer_to1k, file = \"~/../Downloads/speedseen_nearer_to1k.rda\")   rstudioapi::savePlotAsImage(        \"~/../Downloads/speedseen_nearer_to1k.png\")      speedseen_all <- speedtest(     n = c(1e2,1e3,1e4),      radii=c(1, 3.106856, 5, 10, 31.06856),      logging=TRUE, honk=TRUE   )  }"},{"path":"https://usepa.github.io/EJAM/reference/speedtest_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to plot output of speedtest(), rate of points analyzed per hour — speedtest_plot","title":"utility to plot output of speedtest(), rate of points analyzed per hour — speedtest_plot","text":"utility plot output speedtest(), rate points analyzed per hour","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtest_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to plot output of speedtest(), rate of points analyzed per hour — speedtest_plot","text":"","code":"speedtest_plot(x, ltype = \"b\", plotfile = NULL, secondsperthousand = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/speedtest_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to plot output of speedtest(), rate of points analyzed per hour — speedtest_plot","text":"x table speedtest() ltype optional type line plot plotfile optional path filename .png image file save","code":""},{"path":"https://usepa.github.io/EJAM/reference/speedtest_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to plot output of speedtest(), rate of points analyzed per hour — speedtest_plot","text":"side effect plot. returns x seconds column added ","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/stateinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"stateinfo (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo","title":"stateinfo (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo","text":"52 rows variables: ST 2-letter abbreviation, statename State name, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/stateinfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stateinfo (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo","text":"Created EJAM datacreate_stateinfo.R script Also see https://www.census.gov/programs-surveys/decennial-census/decade/2020/planning-management/release/2020-island-areas-data-products.html column names: \"ST\"  \"statename\"  \"ftpname\"   \"FIPS.ST\"   \"REGION\" datasets lack PR. (72) Many datasets lack :  , GU, MP, VI (codes \"60\" \"66\" \"69\" \"78\") Almost datasets lack UM. (74)","code":"72 PR                 Puerto Rico            66 GU                        Guam             69 MP    Northern Mariana Islands              78 VI         U.S. Virgin Islands             74 UM U.S. Minor Outlying Islands"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/stateinfo2.html","id":null,"dir":"Reference","previous_headings":"","what":"stateinfo2 (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo2","title":"stateinfo2 (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo2","text":"52 rows several variables: ST 2-letter abbreviation, statename State name, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/stateinfo2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stateinfo2 (DATA) data.frame of state abbreviations and state names (50+DC+PR; not AS, GU, MP, VI, UM) — stateinfo2","text":"Created EJAM datacreate_stateinfo2.R script Also see https://www.census.gov/programs-surveys/decennial-census/decade/2020/planning-management/release/2020-island-areas-data-products.html column names: c(\"statename\", \"FIPS.ST\", \"ST\", \"ftpname\", \"REGION\", \".usa.plus.pr\", \".usa\", \".state\", \".contiguous.us\", \".island.areas\", \"area.sqmi\", \"area.sqkm\", \"landarea.sqmi\", \"landarea.sqkm\", \"waterarea.sqmi\", \"waterarea.sqkm\", \"inland.sqmi\", \"inland.sqkm\", \"coastal.sqmi\", coastal.sqkm\", \"greatlakes.sqmi\", \"greatlakes.sqkm\", \"territorial.sqmi\", \"territorial.sqkm\", \"lat\", \"lon\") datasets lack PR. (72) Many datasets lack :  , GU, MP, VI (codes \"60\" \"66\" \"69\" \"78\") Almost datasets lack UM. (74)","code":"72 PR                 Puerto Rico            66 GU                        Guam             69 MP    Northern Mariana Islands              78 VI         U.S. Virgin Islands             74 UM U.S. Minor Outlying Islands"},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/statestats.html","id":null,"dir":"Reference","previous_headings":"","what":"statestats (DATA) data.frame of 100 percentiles and means for each US State and PR and DC. — statestats","title":"statestats (DATA) data.frame of 100 percentiles and means for each US State and PR and DC. — statestats","text":"data.frame 100 percentiles means US State PR DC (approx 5,300 rows) block groups zone (e.g., block groups blockgroupstats) set indicators percent low income. column one indicator (specifies percentile). similar lookup tables gdb FTP site EJScreen, except also data demographic race/ethnicity subgroups. details table made, see /EJAM/data-raw/usastats_subgroups.R","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_means.html","id":null,"dir":"Reference","previous_headings":"","what":"statestats_means - convenient way to see STATE MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — statestats_means","title":"statestats_means - convenient way to see STATE MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — statestats_means","text":"statestats_means - convenient way see STATE MEANS ENVIRONMENTAL DEMOGRAPHIC indicators","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statestats_means - convenient way to see STATE MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — statestats_means","text":"","code":"statestats_means(   ST = unique(EJAM::statestats$REGION),   varnames = c(EJAM::names_e, EJAM::names_d, EJAM::names_d_subgroups_nh),   PCTILES = \"mean\",   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/statestats_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statestats_means - convenient way to see STATE MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — statestats_means","text":"ST vector state abbreviations, USA varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_query.html","id":null,"dir":"Reference","previous_headings":"","what":"statestats_query - convenient way to see mean, pctiles of Env or Demog indicators from lookup table — statestats_query","title":"statestats_query - convenient way to see mean, pctiles of Env or Demog indicators from lookup table — statestats_query","text":"statestats_query - convenient way see mean, pctiles Env Demog indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statestats_query - convenient way to see mean, pctiles of Env or Demog indicators from lookup table — statestats_query","text":"","code":"statestats_query(   ST = sort(unique(EJAM::statestats$REGION)),   varnames = c(EJAM::names_e, EJAM::names_d),   PCTILES = NULL,   dig = 3 )"},{"path":"https://usepa.github.io/EJAM/reference/statestats_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statestats_query - convenient way to see mean, pctiles of Env or Demog indicators from lookup table — statestats_query","text":"ST vector state abbreviations, USA varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"statestats_query - convenient way to see mean, pctiles of Env or Demog indicators from lookup table — statestats_query","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/statestats_queryd.html","id":null,"dir":"Reference","previous_headings":"","what":"statestats_queryd - convenient way to see mean, pctiles of DEMOG indicators from lookup table — statestats_queryd","title":"statestats_queryd - convenient way to see mean, pctiles of DEMOG indicators from lookup table — statestats_queryd","text":"statestats_queryd - convenient way see mean, pctiles DEMOG indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_queryd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statestats_queryd - convenient way to see mean, pctiles of DEMOG indicators from lookup table — statestats_queryd","text":"","code":"statestats_queryd(   ST = sort(unique(EJAM::statestats$REGION)),   varnames = c(EJAM::names_d, EJAM::names_d_subgroups_nh),   PCTILES = NULL,   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/statestats_queryd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statestats_queryd - convenient way to see mean, pctiles of DEMOG indicators from lookup table — statestats_queryd","text":"ST vector state abbreviations, USA varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_queryd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"statestats_queryd - convenient way to see mean, pctiles of DEMOG indicators from lookup table — statestats_queryd","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/statestats_querye.html","id":null,"dir":"Reference","previous_headings":"","what":"statestats_querye - convenient way to see mean, pctiles of ENVIRONMENTAL indicators from lookup table — statestats_querye","title":"statestats_querye - convenient way to see mean, pctiles of ENVIRONMENTAL indicators from lookup table — statestats_querye","text":"statestats_querye - convenient way see mean, pctiles ENVIRONMENTAL indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_querye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"statestats_querye - convenient way to see mean, pctiles of ENVIRONMENTAL indicators from lookup table — statestats_querye","text":"","code":"statestats_querye(   ST = sort(unique(EJAM::statestats$REGION)),   varnames = EJAM::names_e,   PCTILES = NULL,   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/statestats_querye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"statestats_querye - convenient way to see mean, pctiles of ENVIRONMENTAL indicators from lookup table — statestats_querye","text":"dig many digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/statestats_querye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"statestats_querye - convenient way to see mean, pctiles of ENVIRONMENTAL indicators from lookup table — statestats_querye","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"FIPS - Analyze US States sites, get EJ indicators summary","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"","code":"states_as_sites(fips)"},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"fips State FIPS vector, like c(\"01\", \"02\") fips_state_from_state_abbrev(c(\"DE\", \"RI\"))","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"provides table similar output getblocksnearby(), data.table one row per blockgroup states, pairs states fips - bgid, ejam_uniq_id (1 N) assigned state missing blockid distance ready doaggregate().","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"function provides one row per blockgroup. getblocksnearby_from_fips() provides one row per block. See \"Value\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_as_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIPS - Analyze US States as if they were sites, to get EJ indicators summary — states_as_sites","text":"","code":"s2b <- states_as_sites(fips_state_from_state_abbrev(c(\"DE\", \"RI\")))"},{"path":"https://usepa.github.io/EJAM/reference/states_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"states_infer - Get table of info on States (from latlon or FIPS) — states_infer","title":"states_infer - Get table of info on States (from latlon or FIPS) — states_infer","text":"Get cleaned table US State etc. ejam_uniq_id, lat/lon, FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"states_infer - Get table of info on States (from latlon or FIPS) — states_infer","text":"","code":"states_infer(x)"},{"path":"https://usepa.github.io/EJAM/reference/states_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"states_infer - Get table of info on States (from latlon or FIPS) — states_infer","text":"x data.frame data.table either ST column lat lon columns, FIPS, optionally column like  id n","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"states_infer - Get table of info on States (from latlon or FIPS) — states_infer","text":"data.frame unique id, ST, etc.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/states_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"states_shapefile (DATA) US States boundaries 2020 shapefile from TIGER — states_shapefile","title":"states_shapefile (DATA) US States boundaries 2020 shapefile from TIGER — states_shapefile","text":"used figure state contains point (facility/site).","code":""},{"path":"https://usepa.github.io/EJAM/reference/states_shapefile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"states_shapefile (DATA) US States boundaries 2020 shapefile from TIGER — states_shapefile","text":"used state_from_latlon() find state associated point user wants analyze. needed report indicators form State-specific percentiles (e.g., score 80th percentile within Texas). created package via script EJAM/data-raw/datacreate_states_shapefile.R downloads data Census Bureau.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/state_from_blockid.html","id":null,"dir":"Reference","previous_headings":"","what":"given vector of blockids, get state abbreviation of each — state_from_blockid","title":"given vector of blockids, get state abbreviation of each — state_from_blockid","text":"given vector blockids, get state abbreviation ","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blockid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"given vector of blockids, get state abbreviation of each — state_from_blockid","text":"","code":"state_from_blockid(blockid)"},{"path":"https://usepa.github.io/EJAM/reference/state_from_blockid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"given vector of blockids, get state abbreviation of each — state_from_blockid","text":"blockid vector blockid values EJAM table called blockpoints","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blockid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"given vector of blockids, get state abbreviation of each — state_from_blockid","text":"vector ST info like AK, CA, DE, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blockid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"given vector of blockids, get state abbreviation of each — state_from_blockid","text":"","code":"EJAM:::state_from_blockid(c(8174952, blockpoints$blockid[5:6])) #> [1] \"PR\" \"AL\" \"AL\""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blocktable.html","id":null,"dir":"Reference","previous_headings":"","what":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","title":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","text":"given data.table blockid column, get state abbreviation - used?","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blocktable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","text":"","code":"state_from_blocktable(dt_with_blockid)"},{"path":"https://usepa.github.io/EJAM/reference/state_from_blocktable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","text":"dt_with_blockid","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blocktable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","text":"vector ST info like AK, CA, DE, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_blocktable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"state_from_blocktable was used only in some special cases of using testpoints_n() — state_from_blocktable","text":"","code":"EJAM:::state_from_blocktable(blockpoints[45:49,]) #> [1] \"AL\" \"AL\" \"AL\" \"AL\" \"AL\""},{"path":"https://usepa.github.io/EJAM/reference/state_from_fips.html","id":null,"dir":"Reference","previous_headings":"","what":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","title":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","text":"Get State abbreviations blockgroups within input FIPS","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_fips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","text":"","code":"state_from_fips(fips, uniqueonly = FALSE)"},{"path":"https://usepa.github.io/EJAM/reference/state_from_fips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","text":"fips Census FIPS codes vector, numeric char, 2-digit, 5-digit, etc. OK uniqueonly set TRUE, returns unique results. parameter mostly remind user default uniques .","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_fips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","text":"vector 2-character state abbreviations like CA,CA,CA,MD,MD,TX","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_fips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get FIPS of ALL BLOCKGROUPS in the States or Counties — state_from_fips","text":"Returns vector 2-letter State abbreviations one per blockgroup matches input FIPS, necessarily vector long input vector FIPS codes!, just short list unique states!","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_latlon.html","id":null,"dir":"Reference","previous_headings":"","what":"Find what state is where each point is located — state_from_latlon","title":"Find what state is where each point is located — state_from_latlon","text":"Takes 3 seconds find state 1k points, faster alternative useful","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_latlon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find what state is where each point is located — state_from_latlon","text":"","code":"state_from_latlon(lat, lon, states_shapefile = EJAM::states_shapefile)"},{"path":"https://usepa.github.io/EJAM/reference/state_from_latlon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find what state is where each point is located — state_from_latlon","text":"lat latitudes vector lon longitudes vector shapefile shapefile US States, package already","code":""},{"path":"https://usepa.github.io/EJAM/reference/state_from_latlon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find what state is where each point is located — state_from_latlon","text":"Returns data.frame: ST, statename, FIPS.ST, REGION, n many rows elements lat lon","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/state_from_latlon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find what state is where each point is located — state_from_latlon","text":"","code":"myprogram <- \"CAMDBS\" # 739 sites  pts <- frs_from_program(myprogram)[ , .(lat, lon, REGISTRY_ID,  PRIMARY_NAME)]  # add a column with State abbreviation  pts[, ST := state_from_latlon(lat=lat, lon = lon)$ST] #> Key: <REGISTRY_ID> #>           lat       lon  REGISTRY_ID #>         <num>     <num>       <char> #>   1: 17.94930 -66.23170 110000307800 #>   2: 42.15698 -72.52237 110000308444 #>   3: 42.45488 -73.21734 110000308480 #>   4: 43.16180 -78.75460 110000326530 #>   5: 41.49085 -78.67752 110000330400 #>  ---                                 #> 710: 29.70204 -95.07088 110070100752 #> 711: 40.95444 -72.88500 110070696981 #> 712: 41.03170 -81.87140 110070828207 #> 713: 40.75195 -82.79389 110070828208 #> 714: 38.37147 -87.74668 110070834810 #>                                         PRIMARY_NAME     ST #>                                               <char> <char> #>   1:                                   PREPA AGUIRRE     PR #>   2:                 MASSPOWER COGENERATION FACILITY     MA #>   3:                PITTSFIELD GENERATING COMPANY LP     MA #>   4:                  LOCKPORT COGENERATION FACILITY     NY #>   5:                       DOMTAR - JOHNSONBURG MILL     PA #>  ---                                                        #> 710:               EXELON LAPORTE GENERATING STATION     TX #> 711:                             SHOREHAM ENERGY LLC     NY #> 712:                               OMEGA JV2 SEVILLE     OH #> 713:                   OMEGA JV2-GALION (0317030059)     OH #> 714: GIBSON GENERATING STATION TYPE I SOUTH LANDFILL     IN  #map these points  mapfast(pts[ST == 'TX',], radius = 1) # 1 miles radius circles  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[28.704455,29.726111,32.438056,29.62354,31.98681,29.816121,29.37925,31.756509,26.235937,26.341806,33.635188,29.951649,26.34021,29.831218,33.068167,30.023611,29.254944,30.619651,31.939826,29.771548,30.208333,30.146622,32.0176,32.43109,30.2588,29.69917,31.8389,33.17157,29.981116,29.594471,32.371377,33.0583,30.05523,31.89002,29.62548,29.07233,33.130146,27.92237,33.101,33.6314,30.7209,32.964259,32.75644,31.860972,32.27238,31.1818,31.815832,30.02455,29.634556,32.836667,35.706667,28.981692,29.2878,30.42,30.3039,30.065833,35.299422,33.866995,29.37914,29.70204],[-98.47721799999999,-95.176389,-94.69,-95.04461999999999,-106.43421,-95.126395,-94.94221,-106.37403,-98.39217499999999,-98.183556,-95.584625,-93.887272,-98.18812,-95.126738,-96.453861,-93.87611099999999,-98.381306,-96.081834,-94.98993900000001,-94.902863,-97.605,-97.54944399999999,-94.6194,-97.05109,-93.7353,-95.04719,-102.3259,-96.12633,-93.952389,-97.970502,-94.451228,-97.91030000000001,-93.75776999999999,-96.111531,-98.14534999999999,-95.74455,-98.595294,-97.28956599999999,-97.95740000000001,-95.5898,-96.4579,-102.740199,-96.490538,-97.358889,-101.4222,-96.48739999999999,-102.395915,-96.99326000000001,-95.06874999999999,-96.545828,-101.359167,-95.376501,-96.06829999999999,-95.01139999999999,-94.2527,-94.071388,-101.749725,-101.866362,-94.93071999999999,-95.07088],1609.344,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"lat: 28.704455<br>lon: -98.477218<br>REGISTRY_ID: 110000464426<br>PRIMARY_NAME: SAN MIGUEL ELECTRIC PLANT<br>ST: TX\",\"lat: 29.726111<br>lon: -95.176389<br>REGISTRY_ID: 110000505481<br>PRIMARY_NAME: PASADENA COGENERATION<br>ST: TX\",\"lat: 32.438056<br>lon: -94.69<br>REGISTRY_ID: 110000743704<br>PRIMARY_NAME: EASTMAN CHEMICAL COMPANY, TEXAS OPERATIONS<br>ST: TX\",\"lat: 29.62354<br>lon: -95.04462<br>REGISTRY_ID: 110001867846<br>PRIMARY_NAME: BAYOU COGENERATION PLANT<br>ST: TX\",\"lat: 31.98681<br>lon: -106.43421<br>REGISTRY_ID: 110002135582<br>PRIMARY_NAME: NEWMAN<br>ST: TX\",\"lat: 29.816121<br>lon: -95.126395<br>REGISTRY_ID: 110002400731<br>PRIMARY_NAME: ODYSSEY ENERGY ALTURA COGEN<br>ST: TX\",\"lat: 29.37925<br>lon: -94.94221<br>REGISTRY_ID: 110005109710<br>PRIMARY_NAME: TEXAS CITY COGENERATION<br>ST: TX\",\"lat: 31.756509<br>lon: -106.37403<br>REGISTRY_ID: 110005162457<br>PRIMARY_NAME: COPPER STATION<br>ST: TX\",\"lat: 26.235937<br>lon: -98.392175<br>REGISTRY_ID: 110005185628<br>PRIMARY_NAME: FRONTERA GENERATION FACILITY<br>ST: TX\",\"lat: 26.341806<br>lon: -98.183556<br>REGISTRY_ID: 110005187760<br>PRIMARY_NAME: CALPINE HIDALGO ENERGY CENTER<br>ST: TX\",\"lat: 33.635188<br>lon: -95.584625<br>REGISTRY_ID: 110005975098<br>PRIMARY_NAME: LAMAR POWER (PARIS)<br>ST: TX\",\"lat: 29.951649<br>lon: -93.887272<br>REGISTRY_ID: 110006134691<br>PRIMARY_NAME: BASF TOTALENERGIES PETROCHEMICALS LLC<br>ST: TX\",\"lat: 26.34021<br>lon: -98.18812<br>REGISTRY_ID: 110006360446<br>PRIMARY_NAME: MAGIC VALLEY GENERATING ST<br>ST: TX\",\"lat: 29.831218<br>lon: -95.126738<br>REGISTRY_ID: 110006531397<br>PRIMARY_NAME: GIM CHANNELVIEW COGENERATION, LLC<br>ST: TX\",\"lat: 33.068167<br>lon: -96.453861<br>REGISTRY_ID: 110007175387<br>PRIMARY_NAME: RAY OLINGER<br>ST: TX\",\"lat: 30.023611<br>lon: -93.876111<br>REGISTRY_ID: 110007178874<br>PRIMARY_NAME: ENTERGY GSI SABINE PLANT<br>ST: TX\",\"lat: 29.254944<br>lon: -98.381306<br>REGISTRY_ID: 110008060873<br>PRIMARY_NAME: V H BRAUNIG<br>ST: TX\",\"lat: 30.619651<br>lon: -96.081834<br>REGISTRY_ID: 110008138078<br>PRIMARY_NAME: GIBBONS CREEK STEAM STATION<br>ST: TX\",\"lat: 31.939826<br>lon: -94.989939<br>REGISTRY_ID: 110008147665<br>PRIMARY_NAME: STRYKER CREEK STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 29.771548<br>lon: -94.902863<br>REGISTRY_ID: 110008972549<br>PRIMARY_NAME: BAYTOWN ENERGY CENTER<br>ST: TX\",\"lat: 30.208333<br>lon: -97.605<br>REGISTRY_ID: 110008975804<br>PRIMARY_NAME: SAND HILL ENERGY CENTER<br>ST: TX\",\"lat: 30.146622<br>lon: -97.549444<br>REGISTRY_ID: 110010131419<br>PRIMARY_NAME: BASTROP ENERGY CENTER<br>ST: TX\",\"lat: 32.0176<br>lon: -94.6194<br>REGISTRY_ID: 110010661667<br>PRIMARY_NAME: TENASKA GATEWAY GENERATING STATION<br>ST: TX\",\"lat: 32.43109<br>lon: -97.05109<br>REGISTRY_ID: 110012164380<br>PRIMARY_NAME: MIDLOTHIAN ENERGY FACILITY<br>ST: TX\",\"lat: 30.2588<br>lon: -93.7353<br>REGISTRY_ID: 110012181673<br>PRIMARY_NAME: COTTONWOOD ENERGY PROJECT<br>ST: TX\",\"lat: 29.69917<br>lon: -95.04719<br>REGISTRY_ID: 110012511120<br>PRIMARY_NAME: SAN JACINTO STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 31.8389<br>lon: -102.3259<br>REGISTRY_ID: 110013396379<br>PRIMARY_NAME: ODESSA-ECTOR GENERATING STATION<br>ST: TX\",\"lat: 33.17157<br>lon: -96.12633<br>REGISTRY_ID: 110014389606<br>PRIMARY_NAME: GREENVILLE STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 29.981116<br>lon: -93.952389<br>REGISTRY_ID: 110014407846<br>PRIMARY_NAME: PORT NECHES PLANT<br>ST: TX\",\"lat: 29.594471<br>lon: -97.970502<br>REGISTRY_ID: 110014433700<br>PRIMARY_NAME: RIO NOGALES POWER PROJECT, LP<br>ST: TX\",\"lat: 32.371377<br>lon: -94.451228<br>REGISTRY_ID: 110014433728<br>PRIMARY_NAME: HARRISON COUNTY POWER PROJECT<br>ST: TX\",\"lat: 33.0583<br>lon: -97.9103<br>REGISTRY_ID: 110015743383<br>PRIMARY_NAME: WISE COUNTY POWER COMPANY, LP<br>ST: TX\",\"lat: 30.05523<br>lon: -93.75777<br>REGISTRY_ID: 110021082576<br>PRIMARY_NAME: SRO COGEN LIMITED PARTNERSHIP<br>ST: TX\",\"lat: 31.89002<br>lon: -96.111531<br>REGISTRY_ID: 110021138348<br>PRIMARY_NAME: FREESTONE POWER GENERATION<br>ST: TX\",\"lat: 29.62548<br>lon: -98.14535<br>REGISTRY_ID: 110021360329<br>PRIMARY_NAME: GUADALUPE GENERATING STATION<br>ST: TX\",\"lat: 29.07233<br>lon: -95.74455<br>REGISTRY_ID: 110024547310<br>PRIMARY_NAME: SWEENY COGENERATION FACILITY<br>ST: TX\",\"lat: 33.130146<br>lon: -98.595294<br>REGISTRY_ID: 110025239837<br>PRIMARY_NAME: GRAHAM STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 27.92237<br>lon: -97.289566<br>REGISTRY_ID: 110028042197<br>PRIMARY_NAME: GREGORY POWER FACILITY<br>ST: TX\",\"lat: 33.101<br>lon: -97.9574<br>REGISTRY_ID: 110028042311<br>PRIMARY_NAME: JACK COUNTY GENERATING FACILITY<br>ST: TX\",\"lat: 33.6314<br>lon: -95.5898<br>REGISTRY_ID: 110028042516<br>PRIMARY_NAME: PARIS ENERGY CENTER<br>ST: TX\",\"lat: 30.7209<br>lon: -96.4579<br>REGISTRY_ID: 110028051177<br>PRIMARY_NAME: BRYAN<br>ST: TX\",\"lat: 32.964259<br>lon: -102.740199<br>REGISTRY_ID: 110031504959<br>PRIMARY_NAME: MUSTANG STATION<br>ST: TX\",\"lat: 32.75644<br>lon: -96.490538<br>REGISTRY_ID: 110031507028<br>PRIMARY_NAME: FORNEY POWER PLANT<br>ST: TX\",\"lat: 31.860972<br>lon: -97.358889<br>REGISTRY_ID: 110033248563<br>PRIMARY_NAME: CALPINE BOSQUE ENERGY CENTER<br>ST: TX\",\"lat: 32.27238<br>lon: -101.4222<br>REGISTRY_ID: 110034338820<br>PRIMARY_NAME: CHARLES R WING COGENERATION PLANT<br>ST: TX\",\"lat: 31.1818<br>lon: -96.4874<br>REGISTRY_ID: 110034504757<br>PRIMARY_NAME: OAK GROVE STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 31.815832<br>lon: -102.395915<br>REGISTRY_ID: 110034594419<br>PRIMARY_NAME: QUAIL RUN ENERGY CENTER<br>ST: TX\",\"lat: 30.02455<br>lon: -96.99326<br>REGISTRY_ID: 110035090843<br>PRIMARY_NAME: WINCHESTER POWER PARK<br>ST: TX\",\"lat: 29.634556<br>lon: -95.06875<br>REGISTRY_ID: 110035420746<br>PRIMARY_NAME: CALPINE CLEAR LAKE COGENERATION<br>ST: TX\",\"lat: 32.836667<br>lon: -96.545828<br>REGISTRY_ID: 110035782891<br>PRIMARY_NAME: LAKE HUBBARD STEAM ELECTRIC STATION<br>ST: TX\",\"lat: 35.706667<br>lon: -101.359167<br>REGISTRY_ID: 110037267980<br>PRIMARY_NAME: BLACKHAWK POWER PLANT<br>ST: TX\",\"lat: 28.981692<br>lon: -95.376501<br>REGISTRY_ID: 110040565297<br>PRIMARY_NAME: FREEPORT ENERGY CENTER<br>ST: TX\",\"lat: 29.2878<br>lon: -96.0683<br>REGISTRY_ID: 110040568793<br>PRIMARY_NAME: COLORADO BEND ENERGY CENTER<br>ST: TX\",\"lat: 30.42<br>lon: -95.0114<br>REGISTRY_ID: 110040575099<br>PRIMARY_NAME: SAN JACINTO COUNTY PEAKING FACILITY<br>ST: TX\",\"lat: 30.3039<br>lon: -94.2527<br>REGISTRY_ID: 110040575106<br>PRIMARY_NAME: HARDIN COUNTY PEAKING FACILITY<br>ST: TX\",\"lat: 30.065833<br>lon: -94.071388<br>REGISTRY_ID: 110041990913<br>PRIMARY_NAME: EXXONMOBIL BEAUMONT REFINERY (BMRF)<br>ST: TX\",\"lat: 35.299422<br>lon: -101.749725<br>REGISTRY_ID: 110042010999<br>PRIMARY_NAME: SOUTHWESTERN PUBLIC SERVICE CO<br>ST: TX\",\"lat: 33.866995<br>lon: -101.866362<br>REGISTRY_ID: 110057108927<br>PRIMARY_NAME: ANTELOPE STATION<br>ST: TX\",\"lat: 29.37914<br>lon: -94.93072<br>REGISTRY_ID: 110063678060<br>PRIMARY_NAME: SOUTH HOUSTON GREEN POWER SITE<br>ST: TX\",\"lat: 29.70204<br>lon: -95.07088<br>REGISTRY_ID: 110070100752<br>PRIMARY_NAME: EXELON LAPORTE GENERATING STATION<br>ST: TX\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[26.235937,35.706667],\"lng\":[-106.43421,-93.7353]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://usepa.github.io/EJAM/reference/structure.of.output.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","title":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","text":"Utility print summary info output ejamit() doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/structure.of.output.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","text":"","code":"structure.of.output.list(x, maxshown = 10)"},{"path":"https://usepa.github.io/EJAM/reference/structure.of.output.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","text":"x output ejamit() doaggregate(), list objects holding results analysis maxshown shows first 10 elements list default","code":""},{"path":"https://usepa.github.io/EJAM/reference/structure.of.output.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","text":"data.frame summarizing names list, whether element data.table, data.frame, vector, rows/cols/length info","code":""},{"path":"https://usepa.github.io/EJAM/reference/structure.of.output.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility to print summary info about the output of ejamit() or doaggregate() — structure.of.output.list","text":"","code":"structure.of.output.list(testpoints_10) #> Error in structure.of.output.list(testpoints_10): could not find function \"structure.of.output.list\"   structure.of.output.list(testoutput_getblocksnearby_10pts_1miles) #> Error in structure.of.output.list(testoutput_getblocksnearby_10pts_1miles): could not find function \"structure.of.output.list\"   structure.of.output.list(testoutput_doaggregate_10pts_1miles) #> Error in structure.of.output.list(testoutput_doaggregate_10pts_1miles): could not find function \"structure.of.output.list\"   structure.of.output.list(testoutput_ejamit_10pts_1miles) #> Error in structure.of.output.list(testoutput_ejamit_10pts_1miles): could not find function \"structure.of.output.list\"   structure.of.output.list(testoutput_ejscreenapi_plus_5) #> Error in structure.of.output.list(testoutput_ejscreenapi_plus_5): could not find function \"structure.of.output.list\"   structure.of.output.list(testoutput_ejscreenit_5) #> Error in structure.of.output.list(testoutput_ejscreenit_5): could not find function \"structure.of.output.list\""},{"path":"https://usepa.github.io/EJAM/reference/ST_by_site_from_sites2blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","title":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","text":"Find 2-character State abbreviation site. need know state site , able report state percentiles, original list ejam_uniq_id lat/lon State info. can infer State site located , based state nearest block (parent blockgroup).","code":""},{"path":"https://usepa.github.io/EJAM/reference/ST_by_site_from_sites2blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","text":"","code":"ST_by_site_from_sites2blocks(sites2blocks)"},{"path":"https://usepa.github.io/EJAM/reference/ST_by_site_from_sites2blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","text":"sites2blocks data.table data.frame, like testoutput_getblocksnearby_10pts_1miles, getblocksnearby() columns ejam_uniq_id blockid distance","code":""},{"path":"https://usepa.github.io/EJAM/reference/ST_by_site_from_sites2blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","text":"data.table columns  ejam_uniq_id, ST","code":""},{"path":"https://usepa.github.io/EJAM/reference/ST_by_site_from_sites2blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get State that each site is in, from a table of ejam_uniq_id, blockid, distance — ST_by_site_from_sites2blocks","text":"","code":"if (FALSE) {   fname = './inst/testdata/testpoints_207_sites_with_signif_violations_NAICS_326_ECHO.csv'   x = ST_by_site_from_sites2blocks(     getblocksnearby( latlon_from_anything(fname), quadtree = localtree))   y = read_csv_or_xl(fname)   x$ST == y$FacState   }   ST_by_site_from_sites2blocks(testoutput_getblocksnearby_10pts_1miles)  #>    ejam_uniq_id     ST #>           <int> <char> #> 1:            1     NJ #> 2:            2     CO #> 3:            3     NC #> 4:            4     ND #> 5:            5     MN #> 6:            7     TX #> 7:            8     OH #> 8:            9     FL #> 9:           10     AZ"},{"path":"https://usepa.github.io/EJAM/reference/table4gt_from_scorevectors.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT EXPERIMENTAL - attempt to make table more flexible / any indicators — table4gt_from_scorevectors","title":"DRAFT EXPERIMENTAL - attempt to make table more flexible / any indicators — table4gt_from_scorevectors","text":"Based just indicator names value , tries fill rest summary table's data. formats data.frame ready next step","code":""},{"path":"https://usepa.github.io/EJAM/reference/table4gt_from_scorevectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT EXPERIMENTAL - attempt to make table more flexible / any indicators — table4gt_from_scorevectors","text":"","code":"table4gt_from_scorevectors(   varnames_r = names_e,   varnames_shown = fixcolnames(varnames_r, \"r\", \"long\"),   value = as.vector(usastats_means(varnames_r)),   state_avg = NULL,   state_pctile = NULL,   usa_avg = NULL,   usa_pctile = NULL,   state_ratio = NULL,   usa_ratio = NULL,   ST = \"NY\" )"},{"path":"https://usepa.github.io/EJAM/reference/table4gt_from_scorevectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT EXPERIMENTAL - attempt to make table more flexible / any indicators — table4gt_from_scorevectors","text":"varnames_r vector variable names like names_d varnames_shown vector like names_d_friendly value indicator values place overall state_avg indicator values average State state_pctile indicator values State percentiles usa_avg indicator values US average usa_pctile indicator values US percentiles state_ratio indicator values ratio State average usa_ratio indicator values ratio US average","code":""},{"path":"https://usepa.github.io/EJAM/reference/table4gt_from_scorevectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DRAFT EXPERIMENTAL - attempt to make table more flexible / any indicators — table4gt_from_scorevectors","text":"data.frame ready table_gt_format_step2 ???","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/tablefixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of counts of integer values zero through maxbin — tablefixed","title":"Table of counts of integer values zero through maxbin — tablefixed","text":"Like tabulate table, sort , includes zero unlike tabulate, lets ensure results include every integer 0 maxbin, can, example, easily combine tables counts include integers.","code":""},{"path":"https://usepa.github.io/EJAM/reference/tablefixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of counts of integer values zero through maxbin — tablefixed","text":"","code":"tablefixed(x, maxbin = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/tablefixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of counts of integer values zero through maxbin — tablefixed","text":"x vector integers, like counts, can include 0 maxbin highest integer among x, number bins","code":""},{"path":"https://usepa.github.io/EJAM/reference/tablefixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of counts of integer values zero through maxbin — tablefixed","text":"summary table","code":""},{"path":"https://usepa.github.io/EJAM/reference/tablefixed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of counts of integer values zero through maxbin — tablefixed","text":"likely efficient way existing package, useful fast enough. using dataset like EJScreen 13 indicators interest, counting many 13 various cutpoints, may zero rows exactly 8 cutoff, example. function makes easier combine tables summary 0-13 table table() return integers came given case (one cutoff).","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step1.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and reshape 1 row of ejamit results to prep for formatting as gt table/report — table_gt_format_step1","title":"Validate and reshape 1 row of ejamit results to prep for formatting as gt table/report — table_gt_format_step1","text":"Reshapes columns 1 row data.table tall multirow data.frame.","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and reshape 1 row of ejamit results to prep for formatting as gt table/report — table_gt_format_step1","text":"","code":"table_gt_format_step1(ejamit_results_1row = NULL, type = \"demog\")"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and reshape 1 row of ejamit results to prep for formatting as gt table/report — table_gt_format_step1","text":"ejamit_results_1row data.table (data.frame) like testoutput_ejamit_100pts_1miles$results_overall something like ejamit(testpoints_100, radius = 1)$results_overall type demog envt specify type table","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step2.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a table of demog or envt scores, percentiles, etc. to look similar to EJScreen report tables — table_gt_format_step2","title":"Format a table of demog or envt scores, percentiles, etc. to look similar to EJScreen report tables — table_gt_format_step2","text":"Format table demog envt scores, percentiles, etc. look similar EJScreen report tables","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a table of demog or envt scores, percentiles, etc. to look similar to EJScreen report tables — table_gt_format_step2","text":"","code":"table_gt_format_step2(   df,   type = c(\"demog\", \"envt\")[1],   my_cell_color = \"#dce6f0\",   my_border_color = \"#aaaaaa\",   digits_default = 2 )"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a table of demog or envt scores, percentiles, etc. to look similar to EJScreen report tables — table_gt_format_step2","text":"df data frame table_gt_format_step1 just specific format key EJAM results. columns (still works first two omitted user-provided indicators used - just names indicator 1, indicator 2, etc.): varnames_r, varnames_shown, value, state_avg, state_pctile, usa_avg, usa_pctile one row per indicator, varnames_shown longer indicator names use report. sort order df ignored!  Instead, variables shown order shown EJScreen reports, recorded map_headernames checked via varinfo(varnames_r, \"reportsort\"), etc. Uses gt R package formatting. type string - must demog envt my_cell_color color table cell fill backgrounds,  can given string ('blue') hex code ('#0070c0') my_border_color color table borders boundaries, can given string ('blue') hex code ('#0070c0') digits_default number digits round specified given indicator (rounding info drawn map_headernames$decimals)","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_format_step2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a table of demog or envt scores, percentiles, etc. to look similar to EJScreen report tables — table_gt_format_step2","text":"gt-style table formatting closely match EJScreen standard report formatting","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"Uses list results ejamit()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"","code":"table_gt_from_ejamit(ejamitoutput = NULL, type = c(\"demog\", \"envt\")[1])"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"ejamitoutput list EJAM results formatted testoutput_ejamit_100pts_1miles, output ejamit() type Must \"demog\" \"envt\" -- Creates one time","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"Provides table gt format R package called gt","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"See R package called gt. Also see code creates html tables html template code creates formatted spreadsheets like table_xls_format()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt-format table of results from EJAM — table_gt_from_ejamit","text":"","code":"table_gt_from_ejamit(testoutput_ejamit_100pts_1miles) #> <div id=\"vijbfglzvn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#vijbfglzvn table { #>   font-family: Arial; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #vijbfglzvn thead, #vijbfglzvn tbody, #vijbfglzvn tfoot, #vijbfglzvn tr, #vijbfglzvn td, #vijbfglzvn th { #>   border-style: none; #> } #>  #> #vijbfglzvn p { #>   margin: 0; #>   padding: 0; #> } #>  #> #vijbfglzvn .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 13.33px; #>   font-weight: normal; #>   font-style: solid; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 3px; #>   border-top-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 3px; #>   border-right-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 3px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 3px; #>   border-left-color: #AAAAAA; #> } #>  #> #vijbfglzvn .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #vijbfglzvn .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #vijbfglzvn .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #vijbfglzvn .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #vijbfglzvn .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #vijbfglzvn .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #vijbfglzvn .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #vijbfglzvn .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #vijbfglzvn .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #vijbfglzvn .gt_group_heading { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 0px; #>   padding-right: 0px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #vijbfglzvn .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   vertical-align: middle; #> } #>  #> #vijbfglzvn .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #vijbfglzvn .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #vijbfglzvn .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 10px; #>   padding-right: 10px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #vijbfglzvn .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 10px; #>   padding-right: 10px; #> } #>  #> #vijbfglzvn .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 0px; #>   padding-right: 0px; #>   vertical-align: top; #> } #>  #> #vijbfglzvn .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #vijbfglzvn .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #vijbfglzvn .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vijbfglzvn .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #vijbfglzvn .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vijbfglzvn .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: solid; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_striped { #>   background-color: #DCE6F0; #> } #>  #> #vijbfglzvn .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #> } #>  #> #vijbfglzvn .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 20px; #>   padding-bottom: 20px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vijbfglzvn .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #vijbfglzvn .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #vijbfglzvn .gt_left { #>   text-align: left; #> } #>  #> #vijbfglzvn .gt_center { #>   text-align: center; #> } #>  #> #vijbfglzvn .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #vijbfglzvn .gt_font_normal { #>   font-weight: normal; #> } #>  #> #vijbfglzvn .gt_font_bold { #>   font-weight: bold; #> } #>  #> #vijbfglzvn .gt_font_italic { #>   font-style: italic; #> } #>  #> #vijbfglzvn .gt_super { #>   font-size: 65%; #> } #>  #> #vijbfglzvn .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #vijbfglzvn .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #vijbfglzvn .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #vijbfglzvn .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #vijbfglzvn .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #vijbfglzvn .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #vijbfglzvn .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Socioeconomic Indicators&lt;/strong&gt;\"><strong>Socioeconomic Indicators<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Value&lt;/strong&gt;\"><strong>Value<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Average<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Percentile<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Average<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Percentile<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; State Avg.&lt;/strong&gt;\"><strong>Ratio to<br> State Avg.<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; USA Avg.&lt;/strong&gt;\"><strong>Ratio to<br> USA Avg.<\/strong><\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">44%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">35%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">64<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">35%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">68<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.2<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.3<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Supplemental Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">16%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">61<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">64<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% People of Color<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">55%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">43%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">64<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">39%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">69<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.4<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% Low Income<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">33%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">28%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">61<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">31%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">59<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.2<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% Unemployed<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">61<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">66<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% in limited English-speaking Households<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">8%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">68<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">82<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.3<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% with Less Than High School Education<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">13%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">12%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">59<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">12%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">67<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% under Age 5<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">57<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">59<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.1<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">1.0<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% over Age 64<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">14%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">44<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">44<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.8<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.8<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Low life expectancy<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">18%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">18%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">45<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">20%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">35<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">1.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.9<\/td><\/tr> #>   <\/tbody> #>    #>   <tfoot class=\"gt_footnotes\"> #>     <tr> #>       <td class=\"gt_footnote\" colspan=\"8\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span> Avg. in state means the average indicator value, among all the residents at these sites, using the statewide value in each resident's state. Percentile in state means the same, but using the site-specific value (expressed as a percentile) where each resident lives.<\/td> #>     <\/tr> #>   <\/tfoot> #> <\/table> #> <\/div>"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_1site.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a formatted table of results for 1 site from EJAM — table_gt_from_ejamit_1site","title":"Create a formatted table of results for 1 site from EJAM — table_gt_from_ejamit_1site","text":"Uses 1 row results_bysite part ejamit() output","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_1site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a formatted table of results for 1 site from EJAM — table_gt_from_ejamit_1site","text":"","code":"table_gt_from_ejamit_1site(...)"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_1site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a formatted table of results for 1 site from EJAM — table_gt_from_ejamit_1site","text":"... passed table_gt_from_ejamit_overall()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_1site.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a formatted table of results for 1 site from EJAM — table_gt_from_ejamit_1site","text":"","code":"table_gt_from_ejamit_1site(testoutput_ejamit_100pts_1miles$results_bysite[ 1, ]) #> <div id=\"mmyucmrwtk\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#mmyucmrwtk table { #>   font-family: Arial; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #mmyucmrwtk thead, #mmyucmrwtk tbody, #mmyucmrwtk tfoot, #mmyucmrwtk tr, #mmyucmrwtk td, #mmyucmrwtk th { #>   border-style: none; #> } #>  #> #mmyucmrwtk p { #>   margin: 0; #>   padding: 0; #> } #>  #> #mmyucmrwtk .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 13.33px; #>   font-weight: normal; #>   font-style: solid; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 3px; #>   border-top-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 3px; #>   border-right-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 3px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 3px; #>   border-left-color: #AAAAAA; #> } #>  #> #mmyucmrwtk .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #mmyucmrwtk .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #mmyucmrwtk .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #mmyucmrwtk .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #mmyucmrwtk .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #mmyucmrwtk .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #mmyucmrwtk .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #mmyucmrwtk .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #mmyucmrwtk .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #mmyucmrwtk .gt_group_heading { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 0px; #>   padding-right: 0px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #mmyucmrwtk .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #DCE6F0; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #AAAAAA; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #>   vertical-align: middle; #> } #>  #> #mmyucmrwtk .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #mmyucmrwtk .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #mmyucmrwtk .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 10px; #>   padding-right: 10px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #AAAAAA; #>   border-left-style: solid; #>   border-left-width: 1px; #>   border-left-color: #AAAAAA; #>   border-right-style: solid; #>   border-right-width: 1px; #>   border-right-color: #AAAAAA; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #mmyucmrwtk .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 10px; #>   padding-right: 10px; #> } #>  #> #mmyucmrwtk .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 0px; #>   padding-right: 0px; #>   vertical-align: top; #> } #>  #> #mmyucmrwtk .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #mmyucmrwtk .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #mmyucmrwtk .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mmyucmrwtk .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #mmyucmrwtk .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mmyucmrwtk .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: solid; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_striped { #>   background-color: #DCE6F0; #> } #>  #> #mmyucmrwtk .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #AAAAAA; #> } #>  #> #mmyucmrwtk .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 20px; #>   padding-bottom: 20px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mmyucmrwtk .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: solid; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #mmyucmrwtk .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #mmyucmrwtk .gt_left { #>   text-align: left; #> } #>  #> #mmyucmrwtk .gt_center { #>   text-align: center; #> } #>  #> #mmyucmrwtk .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #mmyucmrwtk .gt_font_normal { #>   font-weight: normal; #> } #>  #> #mmyucmrwtk .gt_font_bold { #>   font-weight: bold; #> } #>  #> #mmyucmrwtk .gt_font_italic { #>   font-style: italic; #> } #>  #> #mmyucmrwtk .gt_super { #>   font-size: 65%; #> } #>  #> #mmyucmrwtk .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #mmyucmrwtk .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #mmyucmrwtk .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #mmyucmrwtk .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #mmyucmrwtk .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #mmyucmrwtk .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #mmyucmrwtk .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Socioeconomic Indicators&lt;/strong&gt;\"><strong>Socioeconomic Indicators<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Value&lt;/strong&gt;\"><strong>Value<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Average<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in State&lt;/strong&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>Percentile<br> in State<\/strong><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Average&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Average<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Percentile&lt;br&gt; in USA&lt;/strong&gt;\"><strong>Percentile<br> in USA<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; State Avg.&lt;/strong&gt;\"><strong>Ratio to<br> State Avg.<\/strong><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; vertical-align: middle;\" scope=\"col\" id=\"&lt;strong&gt;Ratio to&lt;br&gt; USA Avg.&lt;/strong&gt;\"><strong>Ratio to<br> USA Avg.<\/strong><\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">22%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">33%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">40<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">35%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">36<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.7<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Supplemental Demographic Index<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">9%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">12%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">43<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">14%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">28<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.7<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% People of Color<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">27%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">45%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">37<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">39%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">46<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.6<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.7<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% Low Income<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">17%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">22%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">54<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">31%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">32<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.8<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% Unemployed<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">61<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">65<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">1.0<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">1.1<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% in limited English-speaking Households<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">1%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">7%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">42<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">59<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.2<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.2<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% with Less Than High School Education<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">5%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">10%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">45<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">12%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">37<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.5<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.5<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">% under Age 5<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">3%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">5%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">37<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">6%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">35<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.6<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left\">% over Age 64<\/td> #> <td headers=\"value\" class=\"gt_row gt_right\">10%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center\">27<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right\">17%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center\">26<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right\">0.6<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right\">0.6<\/td><\/tr> #>     <tr><td headers=\"varnames_shown\" class=\"gt_row gt_left gt_striped\">Low life expectancy<\/td> #> <td headers=\"value\" class=\"gt_row gt_right gt_striped\">15%<\/td> #> <td headers=\"state_avg\" class=\"gt_row gt_right gt_striped\">18%<\/td> #> <td headers=\"state_pctile\" class=\"gt_row gt_center gt_striped\">18<\/td> #> <td headers=\"usa_avg\" class=\"gt_row gt_right gt_striped\">20%<\/td> #> <td headers=\"usa_pctile\" class=\"gt_row gt_center gt_striped\">11<\/td> #> <td headers=\"state_ratio\" class=\"gt_row gt_right gt_striped\">0.8<\/td> #> <td headers=\"usa_ratio\" class=\"gt_row gt_right gt_striped\">0.8<\/td><\/tr> #>   <\/tbody> #>    #>   <tfoot class=\"gt_footnotes\"> #>     <tr> #>       <td class=\"gt_footnote\" colspan=\"8\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1<\/sup><\/span> Avg. in state means the average indicator value, among all the residents at these sites, using the statewide value in each resident's state. Percentile in state means the same, but using the site-specific value (expressed as a percentile) where each resident lives.<\/td> #>     <\/tr> #>   <\/tfoot> #> <\/table> #> <\/div>"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","title":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","text":"Uses results_overall element ejamit() output","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","text":"","code":"table_gt_from_ejamit_overall(   ejamit_results_1row = NULL,   type = c(\"demog\", \"envt\")[1] )"},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","text":"ejamit_results_1row 1-row data.table like testoutput_ejamit_100pts_1miles$results_overall, come ejamit(testpoints_10)$results_overall type Must \"demog\" \"envt\" -- Creates one time","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","text":"Provides table gt format R package called gt","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_gt_from_ejamit_overall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a formatted table of results from EJAM overall summary stats — table_gt_from_ejamit_overall","text":"","code":"x <- table_gt_from_ejamit_overall(testoutput_ejamit_100pts_1miles$results_overall)"},{"path":"https://usepa.github.io/EJAM/reference/table_order_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","title":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","text":"Get order variable names sort , seen EJScreen Community Report","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_order_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","text":"","code":"table_order_variables(   varnames,   s1 = \"ejscreensort\",   s2 = \"sortvarlistEJSCREENREPORT\",   s3 = \"sort_within_varlistEJSCREENREPORT\" )"},{"path":"https://usepa.github.io/EJAM/reference/table_order_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","text":"varnames vector indicator variables names blockgroupstats, bgej, etc., \"pm\", \"pctlowinc\", \"pctile.EJ.DISPARITY.traffic.score.eo\" etc. others found names_all_r, specific subsets like c(names_d, names_d_subgroups, names_e) c(names_ej_pctile, names_ej_state_pctile, names_ej_supp_pctile, names_ej_supp_state_pctile) s1 name column map_headernames get sort info s2 optional like s1 secondary s1 s3 optional tertiary","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_order_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","text":"vector order(), used sorting data.frame example","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_order_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get order of variable names to sort by, as seen in EJScreen Community Report — table_order_variables","text":"","code":"cbind(table_order_variables(c(names_d, names_d_subgroups, names_e))) #>       [,1] #>  [1,]    1 #>  [2,]    2 #>  [3,]   10 #>  [4,]    3 #>  [5,]    5 #>  [6,]    4 #>  [7,]    6 #>  [8,]    8 #>  [9,]    9 #> [10,]    7 #> [11,]   18 #> [12,]   12 #> [13,]   13 #> [14,]   11 #> [15,]   14 #> [16,]   15 #> [17,]   16 #> [18,]   17 #> [19,]   19 #> [20,]   20 #> [21,]   23 #> [22,]   21 #> [23,]   22 #> [24,]   31 #> [25,]   25 #> [26,]   24 #> [27,]   26 #> [28,]   27 #> [29,]   28 #> [30,]   30 #> [31,]   29      out <- testoutput_ejamit_10pts_1miles   vars <- out$formatted[ , 'indicator']   vars <- fixcolnames(vars, 'long', 'r')   out$formatted[table_order_variables(vars), ] #>                  value #> 72                   0 #> 73                   0 #> 81                   0 #> 74                   0 #> 76                   0 #> 75                   0 #> 77                   0 #> 79                   0 #> 80                   0 #> 78                   0 #> 10                 1.2 #> 11                 1.2 #> 19                   1 #> 12                 1.3 #> 14                   1 #> 13                 1.4 #> 15                 1.3 #> 17                 1.2 #> 18                 0.6 #> 16                 1.1 #> 41                 1.3 #> 42                 1.3 #> 50                 1.3 #> 43                 1.3 #> 45                 1.1 #> 44                 1.9 #> 46                 1.5 #> 48                 1.1 #> 49                 0.6 #> 47                 1.1 #> 90                  64 #> 91                  72 #> 99                  59 #> 92                  69 #> 94                  63 #> 93                  80 #> 95                  71 #> 97                  64 #> 98                  30 #> 96                  70 #> 134                 69 #> 135                 71 #> 143                 67 #> 136                 66 #> 138                 65 #> 137                 81 #> 139                 74 #> 141                 63 #> 142                 28 #> 140                 67 #> 108                  0 #> 109                  0 #> 117                  0 #> 110                  0 #> 112                  0 #> 111                  0 #> 113                  0 #> 115                  0 #> 116                  0 #> 114                  0 #> 152                  0 #> 153                  0 #> 161                  0 #> 154                  0 #> 156                  0 #> 155                  0 #> 157                  0 #> 159                  0 #> 160                  0 #> 158                  0 #> 285              24807 #> 279              21641 #> 281               1738 #> 280               1477 #> 282               5487 #> 283               3902 #> 284               6580 #> 89                   1 #> 83                   0 #> 84                   0 #> 82                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 27                   1 #> 21                 0.7 #> 22                 0.6 #> 20                 1.4 #> 23                 1.4 #> 24                   0 #> 25                 0.3 #> 26                 0.9 #> 58                 0.9 #> 52                 0.8 #> 53                 1.3 #> 51                 1.8 #> 54                 0.8 #> 55                   0 #> 56                 0.3 #> 57                   1 #> 107                 40 #> 101                 68 #> 102                 68 #> 100                 76 #> 103                 90 #> 104                  0 #> 105                 87 #> 106                 64 #> 151                 32 #> 145                 62 #> 146                 73 #> 144                 76 #> 147                 52 #> 148                  0 #> 149                 25 #> 150                 59 #> 125                  1 #> 119                  0 #> 120                  0 #> 118                  0 #> 121                  0 #> 122                  0 #> 123                  0 #> 124                  0 #> 133                  1 #> 127                  0 #> 128                  0 #> 126                  0 #> 129                  0 #> 130                  0 #> 131                  0 #> 132                  0 #> 293              35933 #> 287               5218 #> 288               1803 #> 286              15471 #> 289                537 #> 290                  1 #> 291                 55 #> 292               1723 #> 5                60740 #> 296              21660 #> 294              54648 #> 295              36889 #> 297              30403 #> 298              10184 #> 299              24671 #> 300              56838 #> 301              11331 #> 302                707 #> 303               1153 #> 304               1367 #> 305               1121 #> 306                179 #> 307                165 #> 308                 12 #> 309              13015 #> 310              47725 #> 311              30954 #> 312              29786 #> 313              11127 #> 314              21660 #> 315              58670 #> 319                  0 #> 331               4126 #> 162               8.03 #> 163               60.6 #> 166               0.36 #> 164                 27 #> 165               0.29 #> 174               6493 #> 168                179 #> 167               41.3 #> 169               0.39 #> 170                0.6 #> 171                1.4 #> 173                5.5 #> 172                  0 #> 28                   1 #> 29                   1 #> 32                 1.4 #> 30                 1.1 #> 31                 0.9 #> 40                 1.4 #> 34                 0.8 #> 33                 1.4 #> 35                 2.9 #> 36                 1.4 #> 37                 0.7 #> 39                 1.4 #> 38                   0 #> 59                   1 #> 60                   1 #> 63                 1.5 #> 61                 1.2 #> 62                 1.1 #> 71                 1.1 #> 65                 1.4 #> 64                 1.4 #> 66                 4.3 #> 67                 1.2 #> 68                 1.6 #> 70                 1.4 #> 69                   0 #> 175                 45 #> 176                 46 #> 179                 79 #> 177                  5 #> 178                  4 #> 187                 89 #> 181                 72 #> 180                 67 #> 182                 93 #> 183                 79 #> 184                 66 #> 186                 79 #> 185                 70 #> 201                 67 #> 202                 53 #> 205                 78 #> 203                 21 #> 204                 37 #> 213                 78 #> 207                 75 #> 206                 65 #> 208                 74 #> 209                 69 #> 210                 72 #> 212                 76 #> 211                 55 #> 188               8.08 #> 189               61.6 #> 192               0.26 #> 190                 25 #> 191               0.31 #> 200               4612 #> 194                212 #> 193               30.3 #> 195               0.13 #> 196               0.43 #> 197                1.9 #> 199                3.9 #> 198                 22 #> 214               7.89 #> 215               60.6 #> 218               0.25 #> 216                 22 #> 217               0.26 #> 226               5917 #> 220                126 #> 219               29.1 #> 221               0.09 #> 222               0.48 #> 223                0.8 #> 225                3.9 #> 224                 25 #> 332             21.749 #> 333              18.28 #> 336             31.306 #> 334             16.944 #> 335             14.322 #> 344             30.878 #> 338              25.68 #> 337             21.888 #> 339             31.366 #> 340             30.822 #> 341             24.123 #> 343             28.501 #> 342             22.239 #> 358             27.806 #> 359             19.867 #> 362             32.732 #> 360             21.399 #> 361             17.843 #> 370             31.691 #> 364             27.033 #> 363             23.756 #> 365             33.055 #> 366             30.084 #> 367             29.713 #> 369             26.861 #> 368             21.378 #> 345             10.022 #> 346               8.39 #> 349             13.462 #> 347              6.944 #> 348              5.949 #> 357             13.612 #> 351             11.215 #> 350             10.484 #> 352               13.5 #> 353             13.284 #> 354              10.79 #> 356             12.078 #> 355             10.218 #> 371             12.478 #> 372              9.358 #> 375             14.214 #> 373              9.181 #> 374              8.069 #> 383             13.853 #> 377              11.99 #> 376             11.008 #> 378             14.316 #> 379             12.752 #> 380             13.015 #> 382             11.524 #> 381              9.696 #> 227                 69 #> 228                 63 #> 231                 77 #> 229                 71 #> 230                 64 #> 239                 81 #> 233                 70 #> 232                 70 #> 234                 79 #> 235                 77 #> 236                 69 #> 238                 75 #> 237                 70 #> 253                 72 #> 254                 64 #> 257                 77 #> 255                 81 #> 256                 75 #> 265                 75 #> 259                 74 #> 258                 67 #> 260                 72 #> 261                 74 #> 262                 72 #> 264                 73 #> 263                 66 #> 240                 74 #> 241                 69 #> 244                 84 #> 242                 73 #> 243                 66 #> 252                 85 #> 246                 76 #> 245                 74 #> 247                 85 #> 248                 82 #> 249                 76 #> 251                 78 #> 250                 75 #> 266                 73 #> 267                 65 #> 270                 80 #> 268                 81 #> 269                 77 #> 278                 78 #> 272                 77 #> 271                 67 #> 273                 74 #> 274                 75 #> 275                 74 #> 277                 74 #> 276                 66 #> 317                 76 #> 6                 <NA> #> 7                 <NA> #> 8                 <NA> #> 9                 <NA> #> 328                 75 #> 329               1152 #> 330                  1 #> 318              27397 #> 320                  1 #> 321                  0 #> 322                  0 #> 323                  0 #> 324                  0 #> 325                  1 #> 326                  1 #> 327                  0 #> 389                  0 #> 390                  1 #> 1                 <NA> #> 2                 <NA> #> 3                 <NA> #> 4                 <NA> #> 316             6852.1 #> 384              0.018 #> 385  0.751551987007954 #> 386                  1 #> 387                  9 #> 388                  1 #> 391 0.0124440738023481 #> 392  0.199349734246098 #> 393  0.020282098514558 #> 394 0.0240542028878415 #>                                                                                          indicator #> 72                                                                               Demographic Index #> 73                                                                  Supplemental Demographic Index #> 81                                                                               % People of Color #> 74                                                                                    % Low Income #> 76                                                                                    % Unemployed #> 75                                                        % in limited English-speaking Households #> 77                                                          % with Less Than High School Education #> 79                                                                                   % under Age 5 #> 80                                                                                   % over Age 64 #> 78                                                                             Low life expectancy #> 10                                                                     Ratio to US avg Demog Index #> 11                                                               Ratio to US avg Suppl Demog Index #> 19                                                               Ratio to US avg % People of Color #> 12                                                                      Ratio to US avg % Low-inc. #> 14                                                                    Ratio to US avg % Unemployed #> 13                                                               Ratio to US avg % Limited English #> 15                                                                 Ratio to US avg % < High School #> 17                                                                       Ratio to US avg % < age 5 #> 18                                                                      Ratio to US avg % > age 64 #> 16                                                             Ratio to US avg Low life expectancy #> 41                                                                   Ratio to State avg Demog.Ind. #> 42                                                            Ratio to State avg Suppl Demog Index #> 50                                                            Ratio to State avg % People of Color #> 43                                                                   Ratio to State avg % Low-inc. #> 45                                                                 Ratio to State avg % Unemployed #> 44                                                            Ratio to State avg % Limited English #> 46                                                              Ratio to State avg % < High School #> 48                                                                    Ratio to State avg % < age 5 #> 49                                                                   Ratio to State avg % > age 64 #> 47                                                          Ratio to State avg Low life expectancy #> 90                                                             US percentile for Demographic Index #> 91                                                US percentile for Supplemental Demographic Index #> 99                                                             US percentile for % People of Color #> 92                                                                  US percentile for % Low Income #> 94                                                                  US percentile for % Unemployed #> 93                                      US percentile for % in limited English-speaking Households #> 95                                        US percentile for % with Less Than High School Education #> 97                                                                 US percentile for % under Age 5 #> 98                                                                 US percentile for % over Age 64 #> 96                                                           US percentile for Low life expectancy #> 134                                                         State percentile for Demographic Index #> 135                                            State percentile for Supplemental Demographic Index #> 143                                                         State percentile for % People of Color #> 136                                                              State percentile for % Low Income #> 138                                                              State percentile for % Unemployed #> 137                                  State percentile for % in limited English-speaking Households #> 139                                    State percentile for % with Less Than High School Education #> 141                                                             State percentile for % under Age 5 #> 142                                                             State percentile for % over Age 64 #> 140                                                       State percentile for Low life expectancy #> 108                                                                US Average of Demographic Index #> 109                                                   US Average of Supplemental Demographic Index #> 117                                                               US average for % People of Color #> 110                                                                    US average for % Low Income #> 112                                                                    US average for % Unemployed #> 111                                        US average for % in limited English-speaking Households #> 113                                          US average for % with Less Than High School Education #> 115                                                                   US average for % under Age 5 #> 116                                                                   US average for % over Age 64 #> 114                                                             US average for Low life expectancy #> 152                                                             State Average of Demographic Index #> 153                                                State Average of Supplemental Demographic Index #> 161                                                            State average for % People of Color #> 154                                                                 State average for % Low Income #> 156                                                                 State average for % Unemployed #> 155                                     State average for % in limited English-speaking Households #> 157                                       State average for % with Less Than High School Education #> 159                                                                State average for % under Age 5 #> 160                                                                State average for % over Age 64 #> 158                                                          State average for Low life expectancy #> 285                                                                 People of Color resident count #> 279                                                                      Low income resident count #> 281                                                                      Unemployed resident count #> 280                                                            Limited English-speaking Households #> 282                                                 Less Than High School Education resident count #> 283                                                                     Under Age 5 resident count #> 284                                                                     Over Age 64 resident count #> 89                                                             % White (non-Hispanic, single race) #> 83                                         % Black or African American (non-Hispanic, single race) #> 84                                                             % Asian (non-Hispanic, single race) #> 82                                                                            % Hispanic or Latino #> 85                                 % American Indian and Alaska Native (non-Hispanic, single race) #> 86                        % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 87                                                        % Other race (non-Hispanic, single race) #> 88                                                              % Two or more races (non-Hispanic) #> 27                                           Ratio to US avg % White nonHispanic single race (NHA) #> 21                                                                   Ratio to US avg % Black (NHA) #> 22                                                                   Ratio to US avg % Asian (NHA) #> 20                                                                      Ratio to US avg % Hispanic #> 23                                           Ratio to US avg % American Indian Alaska Native (NHA) #> 24                                        Ratio to US avg % Native Hawaiian Pacific Islander (NHA) #> 25                                                       Ratio to US avg % Other single race (NHA) #> 26                                                         Ratio to US avg % Two or more race (NH) #> 58                                              Ratio to State avg % White nonHispanic single race #> 52                                        Ratio to State avg % American Indian Alaska Native (NHA) #> 53                                                                Ratio to State avg % Black (NHA) #> 51                                                                   Ratio to State avg % Hispanic #> 54                                                                Ratio to State avg % Asian (NHA) #> 55                                                    Ratio to State avg % Other single race (NHA) #> 56                                                      Ratio to State avg % Two or more race (NH) #> 57                                     Ratio to State avg % Native Hawaiian Pacific Islander (NHA) #> 107                                          US percentile for % White (non-Hispanic, single race) #> 101                      US percentile for % Black or African American (non-Hispanic, single race) #> 102                                          US percentile for % Asian (non-Hispanic, single race) #> 100                                                         US percentile for % Hispanic or Latino #> 103              US percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 104     US percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 105                                     US percentile for % Other race (non-Hispanic, single race) #> 106                                           US percentile for % Two or more races (non-Hispanic) #> 151                                       State percentile for % White (non-Hispanic, single race) #> 145                   State percentile for % Black or African American (non-Hispanic, single race) #> 146                                       State percentile for % Asian (non-Hispanic, single race) #> 144                                                      State percentile for % Hispanic or Latino #> 147           State percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 148  State percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 149                                  State percentile for % Other race (non-Hispanic, single race) #> 150                                        State percentile for % Two or more races (non-Hispanic) #> 125                                                     US avg % White (non-Hispanic, single race) #> 119                                 US avg % Black or African American (non-Hispanic, single race) #> 120                                                     US avg % Asian (non-Hispanic, single race) #> 118                                                                    US avg % Hispanic or Latino #> 121                         US avg % American Indian and Alaska Native (non-Hispanic, single race) #> 122                US avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 123                                                US avg % Other race (non-Hispanic, single race) #> 124                                                      US avg % Two or more races (non-Hispanic) #> 133                                                  State avg % White (non-Hispanic, single race) #> 127                              State avg % Black or African American (non-Hispanic, single race) #> 128                                                  State avg % Asian (non-Hispanic, single race) #> 126                                                                 State avg % Hispanic or Latino #> 129                      State avg % American Indian and Alaska Native (non-Hispanic, single race) #> 130             State avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 131                                             State avg % Other race (non-Hispanic, single race) #> 132                                                   State avg % Two or more races (non-Hispanic) #> 293                                                     Count of White (non-Hispanic, single race) #> 287                                 Count of Black or African American (non-Hispanic, single race) #> 288                                                     Count of Asian (non-Hispanic, single race) #> 286                                                                    Count of Hispanic or Latino #> 289                         Count of American Indian and Alaska Native (non-Hispanic, single race) #> 290                Count of Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 291                                                Count of Other race (non-Hispanic, single race) #> 292                                                      Count of Two or more races (non-Hispanic) #> 5                                                                                 Total Population #> 296                                                                            Count of Households #> 294                                      Count of Population for whom Poverty Status is Determined #> 295                                                                  Count of Population Age 25 up #> 297                                           Universe for percent unemployed (denominator, count) #> 298                                                          Count of Housing Units Built Pre 1960 #> 299                                   Built housing units count (denominator for percent pre 1960) #> 300                    Number of Persons for whom Language Ability is Determined--age 5 and above. #> 301                                                                          Speak Spanish at Home #> 302                                                           Persons who Speak English Not at All #> 303                                                              Speak Other Indo-European at Home #> 304                                                    Speak Asian-Pacific Island language at Home #> 305                                                   Speak Spanish (in limited English household) #> 306                                       Speak Other Indo-European (in limited English household) #> 307                                      Speak Asian-Pacific Island (in limited English household) #> 308                                                     Speak Other (in limited English household) #> 309                                                                        Population Under Age 18 #> 310                                                                         Population Over Age 17 #> 311                                                                                Male Population #> 312                                                                              Female Population #> 313                                                                   Owner Occupied Housing Units #> 314                                                                         Occupied Housing Units #> 315                                                       Civilian noninstitutionalized population #> 319                                                            Pct. Households below Poverty Level #> 331                                                                 Households below Poverty Level #> 162                                                           Particulate Matter (PM 2.5 in ug/m3) #> 163                                                                                    Ozone (ppb) #> 166                                                   Air Toxics Diesel Particulate Matter (ug/m3) #> 164                                                      Air Toxics Cancer Risk (risk per million) #> 165                                                            Air Toxics Respiratory Hazard Index #> 174                                                                          Toxic Releases to Air #> 168                            Traffic Proximity and Volume (daily traffic count/distance to road) #> 167                                                     Lead Paint Indicator (% pre-1960s housing) #> 169                                                   Superfund Proximity (site count/km distance) #> 170                                                     RMP Proximity (facility count/km distance) #> 171                           Indicator for Hazardous Waste Proximity (facility count/km distance) #> 173                                                      Underground Storage Tanks (UST) indicator #> 172                      Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 28                                                                           Ratio to US avg PM2.5 #> 29                                                                           Ratio to US avg Ozone #> 32                                                                       Ratio to US avg Diesel PM #> 30                                                                     Ratio to US avg Cancer risk #> 31                                                                     Ratio to US avg Respiratory #> 40                                                           Ratio to US avg Toxic Releases to Air #> 34                                                                         Ratio to US avg Traffic #> 33                                                                Ratio to US avg % built pre-1960 #> 35                                                                             Ratio to US avg NPL #> 36                                                                             Ratio to US avg RMP #> 37                                                                            Ratio to US avg TSDF #> 39                                                                             Ratio to US avg UST #> 38                                                                           Ratio to US avg NPDES #> 59                                                                        Ratio to State avg PM2.5 #> 60                                                                        Ratio to State avg Ozone #> 63                                                                    Ratio to State avg Diesel PM #> 61                                                                  Ratio to State avg Cancer risk #> 62                                                                  Ratio to State avg Respiratory #> 71                                                        Ratio to State avg Toxic Releases to Air #> 65                                                                      Ratio to State avg Traffic #> 64                                                             Ratio to State avg % built pre-1960 #> 66                                                                          Ratio to State avg NPL #> 67                                                                          Ratio to State avg RMP #> 68                                                                         Ratio to State avg TSDF #> 70                                                                          Ratio to State avg UST #> 69                                                                        Ratio to State avg NPDES #> 175                                         US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 176                                                                  US percentile for Ozone (ppb) #> 179                                 US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 177                                    US percentile for Air Toxics Cancer Risk (risk per million) #> 178                                          US percentile for Air Toxics Respiratory Hazard Index #> 187                                                        US percentile for Toxic Releases to Air #> 181          US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 180                                   US percentile for Lead Paint Indicator (% pre-1960s housing) #> 182                                 US percentile for Superfund Proximity (site count/km distance) #> 183                                   US percentile for RMP Proximity (facility count/km distance) #> 184                       US percentile for Hazardous Waste Proximity (facility count/km distance) #> 186                                    US percentile for Underground Storage Tanks (UST) indicator #> 185    US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 201                                      State percentile for Particulate Matter (PM 2.5 in ug/m3) #> 202                                                               State percentile for Ozone (ppb) #> 205                              State percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 203                                 State percentile for Air Toxics Cancer Risk (risk per million) #> 204                                       State percentile for Air Toxics Respiratory Hazard Index #> 213                                                     State percentile for Toxic Releases to Air #> 207       State percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 206                                State percentile for Lead Paint Indicator (% pre-1960s housing) #> 208                              State percentile for Superfund Proximity (site count/km distance) #> 209                                State percentile for RMP Proximity (facility count/km distance) #> 210                    State percentile for Hazardous Waste Proximity (facility count/km distance) #> 212                                 State percentile for Underground Storage Tanks (UST) indicator #> 211 State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 188                                            US average for Particulate Matter (PM 2.5 in ug/m3) #> 189                                                                     US average for Ozone (ppb) #> 192                                    US average for Air Toxics Diesel Particulate Matter (ug/m3) #> 190                                       US average for Air Toxics Cancer Risk (risk per million) #> 191                                             US average for Air Toxics Respiratory Hazard Index #> 200                                                                   US avg Toxic Releases to Air #> 194             US average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 193                                      US average for Lead Paint Indicator (% pre-1960s housing) #> 195                                    US average for Superfund Proximity (site count/km distance) #> 196                                      US average for RMP Proximity (facility count/km distance) #> 197                          US average for Hazardous Waste Proximity (facility count/km distance) #> 199                                       US average for Underground Storage Tanks (UST) indicator #> 198       US average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 214                                         State average for Particulate Matter (PM 2.5 in ug/m3) #> 215                                                                  State average for Ozone (ppb) #> 218                                 State average for Air Toxics Diesel Particulate Matter (ug/m3) #> 216                                    State average for Air Toxics Cancer Risk (risk per million) #> 217                                          State average for Air Toxics Respiratory Hazard Index #> 226                                                                State avg Toxic Releases to Air #> 220          State average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 219                                   State average for Lead Paint Indicator (% pre-1960s housing) #> 221                                 State average for Superfund Proximity (site count/km distance) #> 222                                   State average for RMP Proximity (facility count/km distance) #> 223                       State average for Hazardous Waste Proximity (facility count/km distance) #> 225                                    State average for Underground Storage Tanks (UST) indicator #> 224    State average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 332                                                                Particulate Matter 2.5 EJ Index #> 333                                                                                 Ozone EJ Index #> 336                                                             Diesel particulate matter EJ Index #> 334                                                                Air toxics cancer risk EJ Index #> 335                                                             Air toxics respiratory HI EJ Index #> 344                                                                 Toxic Releases to Air EJ Index #> 338                                                              US raw Traffic proximity EJ Index #> 337                                                                            Lead paint EJ Index #> 339                                                            US raw Superfund Proximity EJ Index #> 340                                                                RMP Facility Proximity EJ Index #> 341                                                             Hazardous waste proximity EJ Index #> 343                                                      US raw Underground storage tanks EJ Index #> 342                                                           US raw Wastewater discharge EJ Index #> 358                                                      State raw Particulate Matter 2.5 EJ Index #> 359                                                                       State raw Ozone EJ Index #> 362                                                       State Diesel particulate matter EJ Index #> 360                                                          State Air toxics cancer risk EJ Index #> 361                                                       State Air toxics respiratory HI EJ Index #> 370                                                           State Toxic Releases to Air EJ Index #> 364                                                           State raw Traffic proximity EJ Index #> 363                                                                      State Lead paint EJ Index #> 365                                                         State raw Superfund Proximity EJ Index #> 366                                                      State raw RMP Facility Proximity EJ Index #> 367                                                       State Hazardous waste proximity EJ Index #> 369                                                   State raw Underground storage tanks EJ Index #> 368                                                        State raw Wastewater discharge EJ Index #> 345                                                      Particulate Matter 2.5 Supplemental Index #> 346                                                                       Ozone Supplemental Index #> 349                                                   Diesel Particulate Matter Supplemental Index #> 347                                                      Air Toxics Cancer Risk Supplemental Index #> 348                                                   Air Toxics Respiratory HI Supplemental Index #> 357                                                           EJ Supp: Toxic Releases to Air (raw) #> 351                                                           Traffic Proximity Supplemental Index #> 350                                                                  Lead Paint Supplemental Index #> 352                                                         Superfund Proximity Supplemental Index #> 353                                                      RMP Facility Proximity Supplemental Index #> 354                                                   Hazardous Waste Proximity Supplemental Index #> 356                                                   Underground Storage Tanks Supplemental Index #> 355                                                        Wastewater Discharge Supplemental Index #> 371                                            State raw Particulate Matter 2.5 Supplemental Index #> 372                                                             State raw Ozone Supplemental Index #> 375                                             State Diesel particulate matter Supplemental Index #> 373                                                State Air toxics cancer risk Supplemental Index #> 374                                             State Air toxics respiratory HI Supplemental Index #> 383                                                 State Toxic Releases to Air Supplemental Index #> 377                                                 State raw Traffic proximity Supplemental Index #> 376                                                            State Lead paint Supplemental Index #> 378                                               State raw Superfund Proximity Supplemental Index #> 379                                            State raw RMP Facility Proximity Supplemental Index #> 380                                             State Hazardous waste proximity Supplemental Index #> 382                                         State raw Underground storage tanks Supplemental Index #> 381                                              State raw Wastewater discharge Supplemental Index #> 227                                     US percentile for EJ Index for Particulate Matter (PM 2.5) #> 228                                                           US percentile for EJ Index for Ozone #> 231                            US percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 229                                          US percentile for EJ Index for Air Toxics Cancer Risk #> 230                             US percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 239                                           US percentile for EJ Index for Toxic Releases to Air #> 233                                    US percentile for EJ Index for Traffic Proximity and Volume #> 232                                            US percentile for EJ Index for Lead Paint Indicator #> 234                                             US percentile for EJ Index for Superfund Proximity #> 235                                                   US percentile for EJ Index for RMP Proximity #> 236                                       US percentile for EJ Index for Hazardous Waste Proximity #> 238                       US percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 237                                  US percentile for EJ Index for Wastewater Discharge Indicator #> 253                                  State percentile for EJ Index for Particulate Matter (PM 2.5) #> 254                                                        State percentile for EJ Index for Ozone #> 257                         State percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 255                                       State percentile for EJ Index for Air Toxics Cancer Risk #> 256                          State percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 265                                        State percentile for EJ Index for Toxic Releases to Air #> 259                                 State percentile for EJ Index for Traffic Proximity and Volume #> 258                                         State percentile for EJ Index for Lead Paint Indicator #> 260                                          State percentile for EJ Index for Superfund Proximity #> 261                                                State percentile for EJ Index for RMP Proximity #> 262                                    State percentile for EJ Index for Hazardous Waste Proximity #> 264                    State percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 263                               State percentile for EJ Index for Wastewater Discharge Indicator #> 240                        US percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 241                                              US percentile for EJ Supplemental Index for Ozone #> 244               US percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 242                             US percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 243                US percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 252                                     US Percentile for Toxic Releases to Air Supplemental Index #> 246                       US percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 245                               US percentile for EJ Supplemental Index for Lead Paint Indicator #> 247                                US percentile for EJ Supplemental Index for Superfund Proximity #> 248                                      US percentile for EJ Supplemental Index for RMP Proximity #> 249                          US percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 251          US percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 250                     US percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 266                     State percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 267                                           State percentile for EJ Supplemental Index for Ozone #> 270            State percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 268                          State percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 269             State percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 278                                  State Percentile for Toxic Releases to Air Supplemental Index #> 272                    State percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 271                            State percentile for EJ Supplemental Index for Lead Paint Indicator #> 273                             State percentile for EJ Supplemental Index for Superfund Proximity #> 274                                   State percentile for EJ Supplemental Index for RMP Proximity #> 275                       State percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 277       State percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 276                  State percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 317                                                                       Life Expectancy in Years #> 6                                                                                        Longitude #> 7                                                                                         Latitude #> 8                                                                               State Abbreviation #> 9                                                                                       State Name #> 328                                                                     Census blockgroups (count) #> 329                                                                          Census blocks (count) #> 330                                                                        Buffer distance (miles) #> 318                                                                              Per Capita Income #> 320                                  Percent Speaking Spanish (as % of limited English households) #> 321            Percent Speaking Other Indo-European languages (as % of limited English households) #> 322           Percent Speaking Asian-Pacific Island languages (as % of limited English households) #> 323                          Percent Speaking Other languages (as % of limited English households) #> 324                                                       Percent Break Down by Age below 18 Years #> 325                                                       Percent Break Down by Age above 17 Years #> 326                                                                                  Percent Males #> 327                                                                                Percent Females #> 389                                                           Percent population with Disabilities #> 390                                                                      Owner Occupied households #> 1                                                                                  EJScreen Report #> 2                                                                                     EJScreen Map #> 3                                                                                      ECHO report #> 4                                                                                     ejam_uniq_id #> 316                                                                                     DISABILITY #> 384                                                                       Distance to Closest Site #> 385                                                        Distance to Closest Site for Avg Person #> 386                                                                   Number of Sites Nearby (max) #> 387                                                          Number of Sites Nearby (total unique) #> 388                                                                   Number of Sites Nearby (avg) #> 391                                                                                    pct_lan_eng #> 392                                                                                pct_lan_spanish #> 393                                                                                     pct_lan_ie #> 394                                                                                    pct_lan_api"},{"path":"https://usepa.github.io/EJAM/reference/table_ratios_from_ejamit.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — table_ratios_from_ejamit","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — table_ratios_from_ejamit","text":"Quick view summary stats type stat, lacks rounding specific type, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_ratios_from_ejamit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — table_ratios_from_ejamit","text":"","code":"table_ratios_from_ejamit(ejamitout, decimals = 1)"},{"path":"https://usepa.github.io/EJAM/reference/table_ratios_from_ejamit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — table_ratios_from_ejamit","text":"ejamitout list ejamit() includes results_overall decimals optional number decimal places round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_ratios_from_ejamit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick view of summary stats by type of stat, but lacks rounding specific to each type, etc. — table_ratios_from_ejamit","text":"prints console returns simple data.frame","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_round.html","id":null,"dir":"Reference","previous_headings":"","what":"Round numbers in a table, each column to appropriate number of decimal places — table_round","title":"Round numbers in a table, each column to appropriate number of decimal places — table_round","text":"Round numbers table, column appropriate number decimal places","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round numbers in a table, each column to appropriate number of decimal places — table_round","text":"","code":"table_round(x, var = names(x), varnametype = \"rname\", ...)"},{"path":"https://usepa.github.io/EJAM/reference/table_round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round numbers in a table, each column to appropriate number of decimal places — table_round","text":"x data.frame, data.table, vector least numerical columns, like results ejamit()$results_bysite var optional, assumed names(x) default, specifies colnames table names vector elements, within x varnametype optional, name column map_headernames looked var ... passed var_is_numeric_ish()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round numbers in a table, each column to appropriate number of decimal places — table_round","text":"Returns original x appropriate cells rounded .","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_round.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round numbers in a table, each column to appropriate number of decimal places — table_round","text":"","code":"table_round(c(12.123456, 9, NA ), 'pm') #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #> [1] 12.12  9.00    NA   x <- testoutput_ejamit_10pts_1miles$results_bysite[    1:2, c('lat','lon', 'pop', names_these, names_ratio_to_avg_these, names_e_pctile),     with = FALSE  ]   table_rounding_info(names(x)) #>  [1] NA NA  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  2  1  0  2 #> [26]  2  1  0  2  2  1  0  1  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 #> [51]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0  0 #> [76]  0  0  0   table_round(x) #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #>        lat       lon  pop Demog.Index Demog.Index.Supp pctlowinc pctlingiso #> 1 36.77649 -114.0379  747           0                0         0          0 #> 2 39.78107 -104.9129 1941           1                0         0          0 #>   pctunemployed pctlths lowlifex pctunder5 pctover64 pctmin pcthisp pctnhba #> 1             0       0        0         0         0      0       0       0 #> 2             0       0        0         0         0      1       0       0 #>   pctnhaa pctnhaiana pctnhnhpia pctnhotheralone pctnhmulti pctnhwa   pm   o3 #> 1       0          0          0               0          0       1 6.65 61.6 #> 2       0          0          0               0          0       0 8.61 65.9 #>   cancer resp  dpm pctpre1960 traffic.score proximity.npl proximity.rmp #> 1     20 0.20 0.15        0.1            38          0.05          0.03 #> 2     36 0.39 0.53        0.6           157          0.30          4.32 #>   proximity.tsdf proximity.npdes ust rsei ratio.to.avg.Demog.Index #> 1            0.3               0 2.0    0                      0.7 #> 2            2.9               0 3.6 2503                      1.5 #>   ratio.to.avg.Demog.Index.Supp ratio.to.avg.pctlowinc ratio.to.avg.pctlingiso #> 1                           1.1                    1.4                     0.0 #> 2                           1.3                    1.3                     1.3 #>   ratio.to.avg.pctunemployed ratio.to.avg.pctlths ratio.to.avg.lowlifex #> 1                        1.9                  0.3                     1 #> 2                        1.8                  1.4                     1 #>   ratio.to.avg.pctunder5 ratio.to.avg.pctover64 ratio.to.avg.pctmin #> 1                    0.0                    1.0                 0.1 #> 2                    1.2                    0.7                 1.6 #>   ratio.to.avg.pcthisp ratio.to.avg.pctnhba ratio.to.avg.pctnhaa #> 1                  0.1                  0.1                  0.0 #> 2                  1.7                  2.1                  0.4 #>   ratio.to.avg.pctnhaiana ratio.to.avg.pctnhnhpia ratio.to.avg.pctnhotheralone #> 1                       0                     0.7                          0.0 #> 2                       0                     0.0                          1.6 #>   ratio.to.avg.pctnhmulti ratio.to.avg.pctnhwa ratio.to.avg.pm ratio.to.avg.o3 #> 1                     0.0                  1.6             0.8             1.0 #> 2                     1.4                  0.6             1.1             1.1 #>   ratio.to.avg.cancer ratio.to.avg.resp ratio.to.avg.dpm #> 1                 0.8               0.7              0.6 #> 2                 1.4               1.3              2.0 #>   ratio.to.avg.pctpre1960 ratio.to.avg.traffic.score ratio.to.avg.proximity.npl #> 1                     0.4                        0.2                        0.3 #> 2                     1.9                        0.7                        2.2 #>   ratio.to.avg.proximity.rmp ratio.to.avg.proximity.tsdf #> 1                        0.1                         0.1 #> 2                       10.1                         1.5 #>   ratio.to.avg.proximity.npdes ratio.to.avg.ust ratio.to.avg.rsei pctile.pm #> 1                            0              0.5               0.0        14 #> 2                            0              0.9               0.5        62 #>   pctile.o3 pctile.cancer pctile.resp pctile.dpm pctile.pctpre1960 #> 1        54             5           4         31                38 #> 2        80            52          31         92                78 #>   pctile.traffic.score pctile.proximity.npl pctile.proximity.rmp #> 1                   34                   41                    4 #> 2                   68                   91                   99 #>   pctile.proximity.tsdf pctile.proximity.npdes pctile.ust pctile.rsei #> 1                    40                     57         59           3 #> 2                    80                     52         70          76"},{"path":"https://usepa.github.io/EJAM/reference/table_rounding_info.html","id":null,"dir":"Reference","previous_headings":"","what":"How many decimal places to round to for given variable(s) — table_rounding_info","title":"How many decimal places to round to for given variable(s) — table_rounding_info","text":"many decimal places round given variable(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_rounding_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How many decimal places to round to for given variable(s) — table_rounding_info","text":"","code":"table_rounding_info(var, varnametype = \"rname\")"},{"path":"https://usepa.github.io/EJAM/reference/table_rounding_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How many decimal places to round to for given variable(s) — table_rounding_info","text":"var vector variable names c(\"pctlowinc\", \"cancer\") c(names_d, names_d_subgroups) varnametype column map_headernames use looking var, like \"rname\" \"api\" \"long\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_rounding_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How many decimal places to round to for given variable(s) — table_rounding_info","text":"named vector size var, var names.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_rounding_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How many decimal places to round to for given variable(s) — table_rounding_info","text":"","code":"table_rounding_info(\"pm\") #> [1] 2   table_round(8.252345, \"pm\") #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #> [1] 8.25   table_round(8, \"pm\") #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #> [1] 8      cbind(table_rounding_info(names_all_r), fixcolnames(names_all_r, \"r\", \"long\")) #>        [,1] #>   [1,] \"0\"  #>   [2,] \"0\"  #>   [3,] \"0\"  #>   [4,] \"0\"  #>   [5,] \"0\"  #>   [6,] \"0\"  #>   [7,] \"0\"  #>   [8,] \"0\"  #>   [9,] \"0\"  #>  [10,] \"0\"  #>  [11,] \"0\"  #>  [12,] \"0\"  #>  [13,] \"0\"  #>  [14,] \"0\"  #>  [15,] \"0\"  #>  [16,] \"0\"  #>  [17,] \"0\"  #>  [18,] \"0\"  #>  [19,] \"0\"  #>  [20,] \"0\"  #>  [21,] \"0\"  #>  [22,] \"0\"  #>  [23,] \"0\"  #>  [24,] \"0\"  #>  [25,] \"0\"  #>  [26,] \"0\"  #>  [27,] \"0\"  #>  [28,] \"0\"  #>  [29,] \"0\"  #>  [30,] \"0\"  #>  [31,] \"0\"  #>  [32,] \"0\"  #>  [33,] \"0\"  #>  [34,] \"0\"  #>  [35,] \"0\"  #>  [36,] \"0\"  #>  [37,] \"0\"  #>  [38,] \"0\"  #>  [39,] \"0\"  #>  [40,] \"0\"  #>  [41,] \"0\"  #>  [42,] \"0\"  #>  [43,] \"0\"  #>  [44,] \"0\"  #>  [45,] \"0\"  #>  [46,] \"0\"  #>  [47,] \"0\"  #>  [48,] \"0\"  #>  [49,] \"0\"  #>  [50,] \"0\"  #>  [51,] \"0\"  #>  [52,] \"0\"  #>  [53,] \"0\"  #>  [54,] \"0\"  #>  [55,] \"0\"  #>  [56,] \"0\"  #>  [57,] \"0\"  #>  [58,] \"0\"  #>  [59,] \"0\"  #>  [60,] \"0\"  #>  [61,] \"0\"  #>  [62,] \"0\"  #>  [63,] \"0\"  #>  [64,] \"0\"  #>  [65,] \"0\"  #>  [66,] \"1\"  #>  [67,] \"1\"  #>  [68,] \"1\"  #>  [69,] \"1\"  #>  [70,] \"1\"  #>  [71,] \"1\"  #>  [72,] \"1\"  #>  [73,] \"1\"  #>  [74,] \"1\"  #>  [75,] \"1\"  #>  [76,] \"1\"  #>  [77,] \"1\"  #>  [78,] \"1\"  #>  [79,] \"1\"  #>  [80,] \"1\"  #>  [81,] \"1\"  #>  [82,] \"1\"  #>  [83,] \"1\"  #>  [84,] \"1\"  #>  [85,] \"1\"  #>  [86,] \"0\"  #>  [87,] \"0\"  #>  [88,] \"0\"  #>  [89,] \"0\"  #>  [90,] \"0\"  #>  [91,] \"0\"  #>  [92,] \"0\"  #>  [93,] \"0\"  #>  [94,] \"0\"  #>  [95,] \"0\"  #>  [96,] \"0\"  #>  [97,] \"0\"  #>  [98,] \"0\"  #>  [99,] \"0\"  #> [100,] \"0\"  #> [101,] \"0\"  #> [102,] \"0\"  #> [103,] \"0\"  #> [104,] \"0\"  #> [105,] \"0\"  #> [106,] \"0\"  #> [107,] \"0\"  #> [108,] \"0\"  #> [109,] \"0\"  #> [110,] \"0\"  #> [111,] \"0\"  #> [112,] \"0\"  #> [113,] \"0\"  #> [114,] \"0\"  #> [115,] \"0\"  #> [116,] \"0\"  #> [117,] \"0\"  #> [118,] \"0\"  #> [119,] \"0\"  #> [120,] \"0\"  #> [121,] \"0\"  #> [122,] \"0\"  #> [123,] \"0\"  #> [124,] \"0\"  #> [125,] \"0\"  #> [126,] \"1\"  #> [127,] \"1\"  #> [128,] \"1\"  #> [129,] \"1\"  #> [130,] \"1\"  #> [131,] \"1\"  #> [132,] \"1\"  #> [133,] \"1\"  #> [134,] \"1\"  #> [135,] \"1\"  #> [136,] \"1\"  #> [137,] \"1\"  #> [138,] \"1\"  #> [139,] \"1\"  #> [140,] \"1\"  #> [141,] \"1\"  #> [142,] \"0\"  #> [143,] \"0\"  #> [144,] \"0\"  #> [145,] \"0\"  #> [146,] \"0\"  #> [147,] \"0\"  #> [148,] \"0\"  #> [149,] \"0\"  #> [150,] \"2\"  #> [151,] \"1\"  #> [152,] \"0\"  #> [153,] \"2\"  #> [154,] \"2\"  #> [155,] \"1\"  #> [156,] \"0\"  #> [157,] \"2\"  #> [158,] \"2\"  #> [159,] \"1\"  #> [160,] \"0\"  #> [161,] \"1\"  #> [162,] \"0\"  #> [163,] \"2\"  #> [164,] \"1\"  #> [165,] \"0\"  #> [166,] \"2\"  #> [167,] \"2\"  #> [168,] \"1\"  #> [169,] \"0\"  #> [170,] \"2\"  #> [171,] \"2\"  #> [172,] \"1\"  #> [173,] \"0\"  #> [174,] \"1\"  #> [175,] \"0\"  #> [176,] \"2\"  #> [177,] \"1\"  #> [178,] \"0\"  #> [179,] \"2\"  #> [180,] \"2\"  #> [181,] \"1\"  #> [182,] \"0\"  #> [183,] \"2\"  #> [184,] \"2\"  #> [185,] \"1\"  #> [186,] \"0\"  #> [187,] \"1\"  #> [188,] \"0\"  #> [189,] \"0\"  #> [190,] \"0\"  #> [191,] \"0\"  #> [192,] \"0\"  #> [193,] \"0\"  #> [194,] \"0\"  #> [195,] \"0\"  #> [196,] \"0\"  #> [197,] \"0\"  #> [198,] \"0\"  #> [199,] \"0\"  #> [200,] \"0\"  #> [201,] \"0\"  #> [202,] \"0\"  #> [203,] \"0\"  #> [204,] \"0\"  #> [205,] \"0\"  #> [206,] \"0\"  #> [207,] \"0\"  #> [208,] \"0\"  #> [209,] \"0\"  #> [210,] \"0\"  #> [211,] \"0\"  #> [212,] \"0\"  #> [213,] \"0\"  #> [214,] \"0\"  #> [215,] \"1\"  #> [216,] \"1\"  #> [217,] \"1\"  #> [218,] \"1\"  #> [219,] \"1\"  #> [220,] \"1\"  #> [221,] \"1\"  #> [222,] \"1\"  #> [223,] \"1\"  #> [224,] \"1\"  #> [225,] \"1\"  #> [226,] \"1\"  #> [227,] \"1\"  #> [228,] \"1\"  #> [229,] \"1\"  #> [230,] \"1\"  #> [231,] \"1\"  #> [232,] \"1\"  #> [233,] \"1\"  #> [234,] \"1\"  #> [235,] \"1\"  #> [236,] \"1\"  #> [237,] \"1\"  #> [238,] \"1\"  #> [239,] \"1\"  #> [240,] \"1\"  #> [241,] \"3\"  #> [242,] \"3\"  #> [243,] \"3\"  #> [244,] \"3\"  #> [245,] \"3\"  #> [246,] \"3\"  #> [247,] \"3\"  #> [248,] \"3\"  #> [249,] \"3\"  #> [250,] \"3\"  #> [251,] \"3\"  #> [252,] \"3\"  #> [253,] \"3\"  #> [254,] \"3\"  #> [255,] \"3\"  #> [256,] \"3\"  #> [257,] \"3\"  #> [258,] \"3\"  #> [259,] \"3\"  #> [260,] \"3\"  #> [261,] \"3\"  #> [262,] \"3\"  #> [263,] \"3\"  #> [264,] \"3\"  #> [265,] \"3\"  #> [266,] \"3\"  #> [267,] \"3\"  #> [268,] \"3\"  #> [269,] \"3\"  #> [270,] \"3\"  #> [271,] \"3\"  #> [272,] \"3\"  #> [273,] \"3\"  #> [274,] \"3\"  #> [275,] \"3\"  #> [276,] \"3\"  #> [277,] \"3\"  #> [278,] \"3\"  #> [279,] \"3\"  #> [280,] \"3\"  #> [281,] \"3\"  #> [282,] \"3\"  #> [283,] \"3\"  #> [284,] \"3\"  #> [285,] \"3\"  #> [286,] \"3\"  #> [287,] \"3\"  #> [288,] \"3\"  #> [289,] \"3\"  #> [290,] \"3\"  #> [291,] \"3\"  #> [292,] \"3\"  #> [293,] \"0\"  #> [294,] \"0\"  #> [295,] \"0\"  #> [296,] \"0\"  #> [297,] \"0\"  #> [298,] \"0\"  #> [299,] \"0\"  #> [300,] \"0\"  #> [301,] \"0\"  #> [302,] \"0\"  #> [303,] \"0\"  #> [304,] \"0\"  #> [305,] \"0\"  #> [306,] \"0\"  #> [307,] \"0\"  #> [308,] \"0\"  #> [309,] \"0\"  #> [310,] \"0\"  #> [311,] \"0\"  #> [312,] \"0\"  #> [313,] \"0\"  #> [314,] \"0\"  #> [315,] \"0\"  #> [316,] \"0\"  #> [317,] \"0\"  #> [318,] \"0\"  #> [319,] \"0\"  #> [320,] \"0\"  #> [321,] \"0\"  #> [322,] \"0\"  #> [323,] \"0\"  #> [324,] \"0\"  #> [325,] \"0\"  #> [326,] \"0\"  #> [327,] \"0\"  #> [328,] \"0\"  #> [329,] \"0\"  #> [330,] \"0\"  #> [331,] \"0\"  #> [332,] \"0\"  #> [333,] \"0\"  #> [334,] \"0\"  #> [335,] \"0\"  #> [336,] \"0\"  #> [337,] \"0\"  #> [338,] \"0\"  #> [339,] \"0\"  #> [340,] \"0\"  #> [341,] \"0\"  #> [342,] \"0\"  #> [343,] \"0\"  #> [344,] \"0\"  #>        [,2]                                                                                             #>   [1,] \"Total Population\"                                                                               #>   [2,] \"Non-POC resident count\"                                                                         #>   [3,] \"Count of Population for whom Poverty Status is Determined\"                                      #>   [4,] \"Count of Population Age 25 up\"                                                                  #>   [5,] \"Count of Households\"                                                                            #>   [6,] \"Universe for percent unemployed (denominator, count)\"                                           #>   [7,] \"Count of Housing Units Built Pre 1960\"                                                          #>   [8,] \"Built housing units count (denominator for percent pre 1960)\"                                   #>   [9,] \"Low income resident count\"                                                                      #>  [10,] \"Limited English-speaking Households\"                                                            #>  [11,] \"Unemployed resident count\"                                                                      #>  [12,] \"Less Than High School Education resident count\"                                                 #>  [13,] \"Under Age 5 resident count\"                                                                     #>  [14,] \"Over Age 64 resident count\"                                                                     #>  [15,] \"People of Color resident count\"                                                                 #>  [16,] \"Demographic Index\"                                                                              #>  [17,] \"Supplemental Demographic Index\"                                                                 #>  [18,] \"% Low Income\"                                                                                   #>  [19,] \"% in limited English-speaking Households\"                                                       #>  [20,] \"% Unemployed\"                                                                                   #>  [21,] \"% with Less Than High School Education\"                                                         #>  [22,] \"Low life expectancy\"                                                                            #>  [23,] \"% under Age 5\"                                                                                  #>  [24,] \"% over Age 64\"                                                                                  #>  [25,] \"% People of Color\"                                                                              #>  [26,] \"US Average of Demographic Index\"                                                                #>  [27,] \"US Average of Supplemental Demographic Index\"                                                   #>  [28,] \"US average for % Low Income\"                                                                    #>  [29,] \"US average for % in limited English-speaking Households\"                                        #>  [30,] \"US average for % Unemployed\"                                                                    #>  [31,] \"US average for % with Less Than High School Education\"                                          #>  [32,] \"US average for Low life expectancy\"                                                             #>  [33,] \"US average for % under Age 5\"                                                                   #>  [34,] \"US average for % over Age 64\"                                                                   #>  [35,] \"US average for % People of Color\"                                                               #>  [36,] \"State Average of Demographic Index\"                                                             #>  [37,] \"State Average of Supplemental Demographic Index\"                                                #>  [38,] \"State average for % Low Income\"                                                                 #>  [39,] \"State average for % in limited English-speaking Households\"                                     #>  [40,] \"State average for % Unemployed\"                                                                 #>  [41,] \"State average for % with Less Than High School Education\"                                       #>  [42,] \"State average for Low life expectancy\"                                                          #>  [43,] \"State average for % under Age 5\"                                                                #>  [44,] \"State average for % over Age 64\"                                                                #>  [45,] \"State average for % People of Color\"                                                            #>  [46,] \"US percentile for Demographic Index\"                                                            #>  [47,] \"US percentile for Supplemental Demographic Index\"                                               #>  [48,] \"US percentile for % Low Income\"                                                                 #>  [49,] \"US percentile for % in limited English-speaking Households\"                                     #>  [50,] \"US percentile for % Unemployed\"                                                                 #>  [51,] \"US percentile for % with Less Than High School Education\"                                       #>  [52,] \"US percentile for Low life expectancy\"                                                          #>  [53,] \"US percentile for % under Age 5\"                                                                #>  [54,] \"US percentile for % over Age 64\"                                                                #>  [55,] \"US percentile for % People of Color\"                                                            #>  [56,] \"State percentile for Demographic Index\"                                                         #>  [57,] \"State percentile for Supplemental Demographic Index\"                                            #>  [58,] \"State percentile for % Low Income\"                                                              #>  [59,] \"State percentile for % in limited English-speaking Households\"                                  #>  [60,] \"State percentile for % Unemployed\"                                                              #>  [61,] \"State percentile for % with Less Than High School Education\"                                    #>  [62,] \"State percentile for Low life expectancy\"                                                       #>  [63,] \"State percentile for % under Age 5\"                                                             #>  [64,] \"State percentile for % over Age 64\"                                                             #>  [65,] \"State percentile for % People of Color\"                                                         #>  [66,] \"Ratio to US avg Demog Index\"                                                                    #>  [67,] \"Ratio to US avg Suppl Demog Index\"                                                              #>  [68,] \"Ratio to US avg % Low-inc.\"                                                                     #>  [69,] \"Ratio to US avg % Limited English\"                                                              #>  [70,] \"Ratio to US avg % Unemployed\"                                                                   #>  [71,] \"Ratio to US avg % < High School\"                                                                #>  [72,] \"Ratio to US avg Low life expectancy\"                                                            #>  [73,] \"Ratio to US avg % < age 5\"                                                                      #>  [74,] \"Ratio to US avg % > age 64\"                                                                     #>  [75,] \"Ratio to US avg % People of Color\"                                                              #>  [76,] \"Ratio to State avg Demog.Ind.\"                                                                  #>  [77,] \"Ratio to State avg Suppl Demog Index\"                                                           #>  [78,] \"Ratio to State avg % Low-inc.\"                                                                  #>  [79,] \"Ratio to State avg % Limited English\"                                                           #>  [80,] \"Ratio to State avg % Unemployed\"                                                                #>  [81,] \"Ratio to State avg % < High School\"                                                             #>  [82,] \"Ratio to State avg Low life expectancy\"                                                         #>  [83,] \"Ratio to State avg % < age 5\"                                                                   #>  [84,] \"Ratio to State avg % > age 64\"                                                                  #>  [85,] \"Ratio to State avg % People of Color\"                                                           #>  [86,] \"% Hispanic or Latino\"                                                                           #>  [87,] \"% Black or African American (non-Hispanic, single race)\"                                        #>  [88,] \"% Asian (non-Hispanic, single race)\"                                                            #>  [89,] \"% American Indian and Alaska Native (non-Hispanic, single race)\"                                #>  [90,] \"% Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"                       #>  [91,] \"% Other race (non-Hispanic, single race)\"                                                       #>  [92,] \"% Two or more races (non-Hispanic)\"                                                             #>  [93,] \"% White (non-Hispanic, single race)\"                                                            #>  [94,] \"US avg % Hispanic or Latino\"                                                                    #>  [95,] \"US avg % Black or African American (non-Hispanic, single race)\"                                 #>  [96,] \"US avg % Asian (non-Hispanic, single race)\"                                                     #>  [97,] \"US avg % American Indian and Alaska Native (non-Hispanic, single race)\"                         #>  [98,] \"US avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"                #>  [99,] \"US avg % Other race (non-Hispanic, single race)\"                                                #> [100,] \"US avg % Two or more races (non-Hispanic)\"                                                      #> [101,] \"US avg % White (non-Hispanic, single race)\"                                                     #> [102,] \"State avg % Hispanic or Latino\"                                                                 #> [103,] \"State avg % Black or African American (non-Hispanic, single race)\"                              #> [104,] \"State avg % Asian (non-Hispanic, single race)\"                                                  #> [105,] \"State avg % American Indian and Alaska Native (non-Hispanic, single race)\"                      #> [106,] \"State avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"             #> [107,] \"State avg % Other race (non-Hispanic, single race)\"                                             #> [108,] \"State avg % Two or more races (non-Hispanic)\"                                                   #> [109,] \"State avg % White (non-Hispanic, single race)\"                                                  #> [110,] \"US percentile for % Hispanic or Latino\"                                                         #> [111,] \"US percentile for % Black or African American (non-Hispanic, single race)\"                      #> [112,] \"US percentile for % Asian (non-Hispanic, single race)\"                                          #> [113,] \"US percentile for % American Indian and Alaska Native (non-Hispanic, single race)\"              #> [114,] \"US percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"     #> [115,] \"US percentile for % Other race (non-Hispanic, single race)\"                                     #> [116,] \"US percentile for % Two or more races (non-Hispanic)\"                                           #> [117,] \"US percentile for % White (non-Hispanic, single race)\"                                          #> [118,] \"State percentile for % Hispanic or Latino\"                                                      #> [119,] \"State percentile for % Black or African American (non-Hispanic, single race)\"                   #> [120,] \"State percentile for % Asian (non-Hispanic, single race)\"                                       #> [121,] \"State percentile for % American Indian and Alaska Native (non-Hispanic, single race)\"           #> [122,] \"State percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"  #> [123,] \"State percentile for % Other race (non-Hispanic, single race)\"                                  #> [124,] \"State percentile for % Two or more races (non-Hispanic)\"                                        #> [125,] \"State percentile for % White (non-Hispanic, single race)\"                                       #> [126,] \"Ratio to US avg % Hispanic\"                                                                     #> [127,] \"Ratio to US avg % Black (NHA)\"                                                                  #> [128,] \"Ratio to US avg % Asian (NHA)\"                                                                  #> [129,] \"Ratio to US avg % American Indian Alaska Native (NHA)\"                                          #> [130,] \"Ratio to US avg % Native Hawaiian Pacific Islander (NHA)\"                                       #> [131,] \"Ratio to US avg % Other single race (NHA)\"                                                      #> [132,] \"Ratio to US avg % Two or more race (NH)\"                                                        #> [133,] \"Ratio to US avg % White nonHispanic single race (NHA)\"                                          #> [134,] \"Ratio to State avg % Hispanic\"                                                                  #> [135,] \"Ratio to State avg % American Indian Alaska Native (NHA)\"                                       #> [136,] \"Ratio to State avg % Black (NHA)\"                                                               #> [137,] \"Ratio to State avg % Asian (NHA)\"                                                               #> [138,] \"Ratio to State avg % Other single race (NHA)\"                                                   #> [139,] \"Ratio to State avg % Two or more race (NH)\"                                                     #> [140,] \"Ratio to State avg % Native Hawaiian Pacific Islander (NHA)\"                                    #> [141,] \"Ratio to State avg % White nonHispanic single race\"                                             #> [142,] \"Count of Hispanic or Latino\"                                                                    #> [143,] \"Count of Black or African American (non-Hispanic, single race)\"                                 #> [144,] \"Count of Asian (non-Hispanic, single race)\"                                                     #> [145,] \"Count of American Indian and Alaska Native (non-Hispanic, single race)\"                         #> [146,] \"Count of Native Hawaiian and Other Pacific Islander (non-Hispanic, single race)\"                #> [147,] \"Count of Other race (non-Hispanic, single race)\"                                                #> [148,] \"Count of Two or more races (non-Hispanic)\"                                                      #> [149,] \"Count of White (non-Hispanic, single race)\"                                                     #> [150,] \"Particulate Matter (PM 2.5 in ug/m3)\"                                                           #> [151,] \"Ozone (ppb)\"                                                                                    #> [152,] \"Air Toxics Cancer Risk (risk per million)\"                                                      #> [153,] \"Air Toxics Respiratory Hazard Index\"                                                            #> [154,] \"Air Toxics Diesel Particulate Matter (ug/m3)\"                                                   #> [155,] \"Lead Paint Indicator (% pre-1960s housing)\"                                                     #> [156,] \"Traffic Proximity and Volume (daily traffic count/distance to road)\"                            #> [157,] \"Superfund Proximity (site count/km distance)\"                                                   #> [158,] \"RMP Proximity (facility count/km distance)\"                                                     #> [159,] \"Indicator for Hazardous Waste Proximity (facility count/km distance)\"                           #> [160,] \"Wastewater Discharge Indicator (toxicity-weighted concentration/distance)\"                      #> [161,] \"Underground Storage Tanks (UST) indicator\"                                                      #> [162,] \"Toxic Releases to Air\"                                                                          #> [163,] \"US average for Particulate Matter (PM 2.5 in ug/m3)\"                                            #> [164,] \"US average for Ozone (ppb)\"                                                                     #> [165,] \"US average for Air Toxics Cancer Risk (risk per million)\"                                       #> [166,] \"US average for Air Toxics Respiratory Hazard Index\"                                             #> [167,] \"US average for Air Toxics Diesel Particulate Matter (ug/m3)\"                                    #> [168,] \"US average for Lead Paint Indicator (% pre-1960s housing)\"                                      #> [169,] \"US average for Traffic Proximity and Volume (daily traffic count/distance to road)\"             #> [170,] \"US average for Superfund Proximity (site count/km distance)\"                                    #> [171,] \"US average for RMP Proximity (facility count/km distance)\"                                      #> [172,] \"US average for Hazardous Waste Proximity (facility count/km distance)\"                          #> [173,] \"US average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance)\"       #> [174,] \"US average for Underground Storage Tanks (UST) indicator\"                                       #> [175,] \"US avg Toxic Releases to Air\"                                                                   #> [176,] \"State average for Particulate Matter (PM 2.5 in ug/m3)\"                                         #> [177,] \"State average for Ozone (ppb)\"                                                                  #> [178,] \"State average for Air Toxics Cancer Risk (risk per million)\"                                    #> [179,] \"State average for Air Toxics Respiratory Hazard Index\"                                          #> [180,] \"State average for Air Toxics Diesel Particulate Matter (ug/m3)\"                                 #> [181,] \"State average for Lead Paint Indicator (% pre-1960s housing)\"                                   #> [182,] \"State average for Traffic Proximity and Volume (daily traffic count/distance to road)\"          #> [183,] \"State average for Superfund Proximity (site count/km distance)\"                                 #> [184,] \"State average for RMP Proximity (facility count/km distance)\"                                   #> [185,] \"State average for Hazardous Waste Proximity (facility count/km distance)\"                       #> [186,] \"State average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance)\"    #> [187,] \"State average for Underground Storage Tanks (UST) indicator\"                                    #> [188,] \"State avg Toxic Releases to Air\"                                                                #> [189,] \"US percentile for Particulate Matter (PM 2.5 in ug/m3)\"                                         #> [190,] \"US percentile for Ozone (ppb)\"                                                                  #> [191,] \"US percentile for Air Toxics Cancer Risk (risk per million)\"                                    #> [192,] \"US percentile for Air Toxics Respiratory Hazard Index\"                                          #> [193,] \"US percentile for Air Toxics Diesel Particulate Matter (ug/m3)\"                                 #> [194,] \"US percentile for Lead Paint Indicator (% pre-1960s housing)\"                                   #> [195,] \"US percentile for Traffic Proximity and Volume (daily traffic count/distance to road)\"          #> [196,] \"US percentile for Superfund Proximity (site count/km distance)\"                                 #> [197,] \"US percentile for RMP Proximity (facility count/km distance)\"                                   #> [198,] \"US percentile for Hazardous Waste Proximity (facility count/km distance)\"                       #> [199,] \"US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance)\"    #> [200,] \"US percentile for Underground Storage Tanks (UST) indicator\"                                    #> [201,] \"US percentile for Toxic Releases to Air\"                                                        #> [202,] \"State percentile for Particulate Matter (PM 2.5 in ug/m3)\"                                      #> [203,] \"State percentile for Ozone (ppb)\"                                                               #> [204,] \"State percentile for Air Toxics Cancer Risk (risk per million)\"                                 #> [205,] \"State percentile for Air Toxics Respiratory Hazard Index\"                                       #> [206,] \"State percentile for Air Toxics Diesel Particulate Matter (ug/m3)\"                              #> [207,] \"State percentile for Lead Paint Indicator (% pre-1960s housing)\"                                #> [208,] \"State percentile for Traffic Proximity and Volume (daily traffic count/distance to road)\"       #> [209,] \"State percentile for Superfund Proximity (site count/km distance)\"                              #> [210,] \"State percentile for RMP Proximity (facility count/km distance)\"                                #> [211,] \"State percentile for Hazardous Waste Proximity (facility count/km distance)\"                    #> [212,] \"State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance)\" #> [213,] \"State percentile for Underground Storage Tanks (UST) indicator\"                                 #> [214,] \"State percentile for Toxic Releases to Air\"                                                     #> [215,] \"Ratio to US avg PM2.5\"                                                                          #> [216,] \"Ratio to US avg Ozone\"                                                                          #> [217,] \"Ratio to US avg Cancer risk\"                                                                    #> [218,] \"Ratio to US avg Respiratory\"                                                                    #> [219,] \"Ratio to US avg Diesel PM\"                                                                      #> [220,] \"Ratio to US avg % built pre-1960\"                                                               #> [221,] \"Ratio to US avg Traffic\"                                                                        #> [222,] \"Ratio to US avg NPL\"                                                                            #> [223,] \"Ratio to US avg RMP\"                                                                            #> [224,] \"Ratio to US avg TSDF\"                                                                           #> [225,] \"Ratio to US avg NPDES\"                                                                          #> [226,] \"Ratio to US avg UST\"                                                                            #> [227,] \"Ratio to US avg Toxic Releases to Air\"                                                          #> [228,] \"Ratio to State avg PM2.5\"                                                                       #> [229,] \"Ratio to State avg Ozone\"                                                                       #> [230,] \"Ratio to State avg Cancer risk\"                                                                 #> [231,] \"Ratio to State avg Respiratory\"                                                                 #> [232,] \"Ratio to State avg Diesel PM\"                                                                   #> [233,] \"Ratio to State avg % built pre-1960\"                                                            #> [234,] \"Ratio to State avg Traffic\"                                                                     #> [235,] \"Ratio to State avg NPL\"                                                                         #> [236,] \"Ratio to State avg RMP\"                                                                         #> [237,] \"Ratio to State avg TSDF\"                                                                        #> [238,] \"Ratio to State avg NPDES\"                                                                       #> [239,] \"Ratio to State avg UST\"                                                                         #> [240,] \"Ratio to State avg Toxic Releases to Air\"                                                       #> [241,] \"Particulate Matter 2.5 EJ Index\"                                                                #> [242,] \"Ozone EJ Index\"                                                                                 #> [243,] \"Air toxics cancer risk EJ Index\"                                                                #> [244,] \"Air toxics respiratory HI EJ Index\"                                                             #> [245,] \"Diesel particulate matter EJ Index\"                                                             #> [246,] \"Lead paint EJ Index\"                                                                            #> [247,] \"US raw Traffic proximity EJ Index\"                                                              #> [248,] \"US raw Superfund Proximity EJ Index\"                                                            #> [249,] \"RMP Facility Proximity EJ Index\"                                                                #> [250,] \"Hazardous waste proximity EJ Index\"                                                             #> [251,] \"US raw Wastewater discharge EJ Index\"                                                           #> [252,] \"US raw Underground storage tanks EJ Index\"                                                      #> [253,] \"Toxic Releases to Air EJ Index\"                                                                 #> [254,] \"State raw Particulate Matter 2.5 EJ Index\"                                                      #> [255,] \"State raw Ozone EJ Index\"                                                                       #> [256,] \"State Air toxics cancer risk EJ Index\"                                                          #> [257,] \"State Air toxics respiratory HI EJ Index\"                                                       #> [258,] \"State Diesel particulate matter EJ Index\"                                                       #> [259,] \"State Lead paint EJ Index\"                                                                      #> [260,] \"State raw Traffic proximity EJ Index\"                                                           #> [261,] \"State raw Superfund Proximity EJ Index\"                                                         #> [262,] \"State raw RMP Facility Proximity EJ Index\"                                                      #> [263,] \"State Hazardous waste proximity EJ Index\"                                                       #> [264,] \"State raw Wastewater discharge EJ Index\"                                                        #> [265,] \"State raw Underground storage tanks EJ Index\"                                                   #> [266,] \"State Toxic Releases to Air EJ Index\"                                                           #> [267,] \"Particulate Matter 2.5 Supplemental Index\"                                                      #> [268,] \"Ozone Supplemental Index\"                                                                       #> [269,] \"Air Toxics Cancer Risk Supplemental Index\"                                                      #> [270,] \"Air Toxics Respiratory HI Supplemental Index\"                                                   #> [271,] \"Diesel Particulate Matter Supplemental Index\"                                                   #> [272,] \"Lead Paint Supplemental Index\"                                                                  #> [273,] \"Traffic Proximity Supplemental Index\"                                                           #> [274,] \"Superfund Proximity Supplemental Index\"                                                         #> [275,] \"RMP Facility Proximity Supplemental Index\"                                                      #> [276,] \"Hazardous Waste Proximity Supplemental Index\"                                                   #> [277,] \"Wastewater Discharge Supplemental Index\"                                                        #> [278,] \"Underground Storage Tanks Supplemental Index\"                                                   #> [279,] \"EJ Supp: Toxic Releases to Air (raw)\"                                                           #> [280,] \"State raw Particulate Matter 2.5 Supplemental Index\"                                            #> [281,] \"State raw Ozone Supplemental Index\"                                                             #> [282,] \"State Air toxics cancer risk Supplemental Index\"                                                #> [283,] \"State Air toxics respiratory HI Supplemental Index\"                                             #> [284,] \"State Diesel particulate matter Supplemental Index\"                                             #> [285,] \"State Lead paint Supplemental Index\"                                                            #> [286,] \"State raw Traffic proximity Supplemental Index\"                                                 #> [287,] \"State raw Superfund Proximity Supplemental Index\"                                               #> [288,] \"State raw RMP Facility Proximity Supplemental Index\"                                            #> [289,] \"State Hazardous waste proximity Supplemental Index\"                                             #> [290,] \"State raw Wastewater discharge Supplemental Index\"                                              #> [291,] \"State raw Underground storage tanks Supplemental Index\"                                         #> [292,] \"State Toxic Releases to Air Supplemental Index\"                                                 #> [293,] \"US percentile for EJ Index for Particulate Matter (PM 2.5)\"                                     #> [294,] \"US percentile for EJ Index for Ozone\"                                                           #> [295,] \"US percentile for EJ Index for Air Toxics Cancer Risk\"                                          #> [296,] \"US percentile for EJ Index for Air Toxics Respiratory Hazard Index\"                             #> [297,] \"US percentile for EJ Index for Air Toxics Diesel Particulate Matter\"                            #> [298,] \"US percentile for EJ Index for Lead Paint Indicator\"                                            #> [299,] \"US percentile for EJ Index for Traffic Proximity and Volume\"                                    #> [300,] \"US percentile for EJ Index for Superfund Proximity\"                                             #> [301,] \"US percentile for EJ Index for RMP Proximity\"                                                   #> [302,] \"US percentile for EJ Index for Hazardous Waste Proximity\"                                       #> [303,] \"US percentile for EJ Index for Wastewater Discharge Indicator\"                                  #> [304,] \"US percentile for EJ Index for Underground Storage Tanks (UST) indicator\"                       #> [305,] \"US percentile for EJ Index for Toxic Releases to Air\"                                           #> [306,] \"State percentile for EJ Index for Particulate Matter (PM 2.5)\"                                  #> [307,] \"State percentile for EJ Index for Ozone\"                                                        #> [308,] \"State percentile for EJ Index for Air Toxics Cancer Risk\"                                       #> [309,] \"State percentile for EJ Index for Air Toxics Respiratory Hazard Index\"                          #> [310,] \"State percentile for EJ Index for Air Toxics Diesel Particulate Matter\"                         #> [311,] \"State percentile for EJ Index for Lead Paint Indicator\"                                         #> [312,] \"State percentile for EJ Index for Traffic Proximity and Volume\"                                 #> [313,] \"State percentile for EJ Index for Superfund Proximity\"                                          #> [314,] \"State percentile for EJ Index for RMP Proximity\"                                                #> [315,] \"State percentile for EJ Index for Hazardous Waste Proximity\"                                    #> [316,] \"State percentile for EJ Index for Wastewater Discharge Indicator\"                               #> [317,] \"State percentile for EJ Index for Underground Storage Tanks (UST) indicator\"                    #> [318,] \"State percentile for EJ Index for Toxic Releases to Air\"                                        #> [319,] \"US percentile for EJ Supplemental Index for Particulate Matter (PM 2.5)\"                        #> [320,] \"US percentile for EJ Supplemental Index for Ozone\"                                              #> [321,] \"US percentile for EJ Supplemental Index for Air Toxics Cancer Risk\"                             #> [322,] \"US percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index\"                #> [323,] \"US percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter\"               #> [324,] \"US percentile for EJ Supplemental Index for Lead Paint Indicator\"                               #> [325,] \"US percentile for EJ Supplemental Index for Traffic Proximity and Volume\"                       #> [326,] \"US percentile for EJ Supplemental Index for Superfund Proximity\"                                #> [327,] \"US percentile for EJ Supplemental Index for RMP Proximity\"                                      #> [328,] \"US percentile for EJ Supplemental Index for Hazardous Waste Proximity\"                          #> [329,] \"US percentile for EJ Supplemental Index for Wastewater Discharge Indicator\"                     #> [330,] \"US percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator\"          #> [331,] \"US Percentile for Toxic Releases to Air Supplemental Index\"                                     #> [332,] \"State percentile for EJ Supplemental Index for Particulate Matter (PM 2.5)\"                     #> [333,] \"State percentile for EJ Supplemental Index for Ozone\"                                           #> [334,] \"State percentile for EJ Supplemental Index for Air Toxics Cancer Risk\"                          #> [335,] \"State percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index\"             #> [336,] \"State percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter\"            #> [337,] \"State percentile for EJ Supplemental Index for Lead Paint Indicator\"                            #> [338,] \"State percentile for EJ Supplemental Index for Traffic Proximity and Volume\"                    #> [339,] \"State percentile for EJ Supplemental Index for Superfund Proximity\"                             #> [340,] \"State percentile for EJ Supplemental Index for RMP Proximity\"                                   #> [341,] \"State percentile for EJ Supplemental Index for Hazardous Waste Proximity\"                       #> [342,] \"State percentile for EJ Supplemental Index for Wastewater Discharge Indicator\"                  #> [343,] \"State percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator\"       #> [344,] \"State Percentile for Toxic Releases to Air Supplemental Index\""},{"path":"https://usepa.github.io/EJAM/reference/table_tall_from_overall.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","title":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","text":"Take quick look results RStudio console","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_tall_from_overall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","text":"","code":"table_tall_from_overall(results_overall, longnames)"},{"path":"https://usepa.github.io/EJAM/reference/table_tall_from_overall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","text":"results_overall data.table 1 row, output ejamit() doaggregate() longnames vector names variables results_overall, output ejamit() doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_tall_from_overall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","text":"data.table one row per indicator","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_tall_from_overall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the results_overall part of the output of ejamit() or doaggregate() — table_tall_from_overall","text":"","code":"table_tall_from_overall(testoutput_ejamit_10pts_1miles$results_overall) #> Warning: Percentages stored as 0 to 1 rather than 0 to 100 will not be shown correctly unless adjusted,  #>           because rounding info says 0 digits when the intent is to show 0 digits after the 0-100 percent number. #>                  value #> 1                 <NA> #> 2                 <NA> #> 3                 <NA> #> 4                 <NA> #> 5                60740 #> 6                 <NA> #> 7                 <NA> #> 8                 <NA> #> 9                 <NA> #> 10                 1.2 #> 11                 1.2 #> 12                 1.3 #> 13                 1.4 #> 14                   1 #> 15                 1.3 #> 16                 1.1 #> 17                 1.2 #> 18                 0.6 #> 19                   1 #> 20                 1.4 #> 21                 0.7 #> 22                 0.6 #> 23                 1.4 #> 24                   0 #> 25                 0.3 #> 26                 0.9 #> 27                   1 #> 28                   1 #> 29                   1 #> 30                 1.1 #> 31                 0.9 #> 32                 1.4 #> 33                 1.4 #> 34                 0.8 #> 35                 2.9 #> 36                 1.4 #> 37                 0.7 #> 38                   0 #> 39                 1.4 #> 40                 1.4 #> 41                 1.3 #> 42                 1.3 #> 43                 1.3 #> 44                 1.9 #> 45                 1.1 #> 46                 1.5 #> 47                 1.1 #> 48                 1.1 #> 49                 0.6 #> 50                 1.3 #> 51                 1.8 #> 52                 0.8 #> 53                 1.3 #> 54                 0.8 #> 55                   0 #> 56                 0.3 #> 57                   1 #> 58                 0.9 #> 59                   1 #> 60                   1 #> 61                 1.2 #> 62                 1.1 #> 63                 1.5 #> 64                 1.4 #> 65                 1.4 #> 66                 4.3 #> 67                 1.2 #> 68                 1.6 #> 69                   0 #> 70                 1.4 #> 71                 1.1 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   1 #> 90                  64 #> 91                  72 #> 92                  69 #> 93                  80 #> 94                  63 #> 95                  71 #> 96                  70 #> 97                  64 #> 98                  30 #> 99                  59 #> 100                 76 #> 101                 68 #> 102                 68 #> 103                 90 #> 104                  0 #> 105                 87 #> 106                 64 #> 107                 40 #> 108                  0 #> 109                  0 #> 110                  0 #> 111                  0 #> 112                  0 #> 113                  0 #> 114                  0 #> 115                  0 #> 116                  0 #> 117                  0 #> 118                  0 #> 119                  0 #> 120                  0 #> 121                  0 #> 122                  0 #> 123                  0 #> 124                  0 #> 125                  1 #> 126                  0 #> 127                  0 #> 128                  0 #> 129                  0 #> 130                  0 #> 131                  0 #> 132                  0 #> 133                  1 #> 134                 69 #> 135                 71 #> 136                 66 #> 137                 81 #> 138                 65 #> 139                 74 #> 140                 67 #> 141                 63 #> 142                 28 #> 143                 67 #> 144                 76 #> 145                 62 #> 146                 73 #> 147                 52 #> 148                  0 #> 149                 25 #> 150                 59 #> 151                 32 #> 152                  0 #> 153                  0 #> 154                  0 #> 155                  0 #> 156                  0 #> 157                  0 #> 158                  0 #> 159                  0 #> 160                  0 #> 161                  0 #> 162               8.03 #> 163               60.6 #> 164                 27 #> 165               0.29 #> 166               0.36 #> 167               41.3 #> 168                179 #> 169               0.39 #> 170                0.6 #> 171                1.4 #> 172                  0 #> 173                5.5 #> 174               6493 #> 175                 45 #> 176                 46 #> 177                  5 #> 178                  4 #> 179                 79 #> 180                 67 #> 181                 72 #> 182                 93 #> 183                 79 #> 184                 66 #> 185                 70 #> 186                 79 #> 187                 89 #> 188               8.08 #> 189               61.6 #> 190                 25 #> 191               0.31 #> 192               0.26 #> 193               30.3 #> 194                212 #> 195               0.13 #> 196               0.43 #> 197                1.9 #> 198                 22 #> 199                3.9 #> 200               4612 #> 201                 67 #> 202                 53 #> 203                 21 #> 204                 37 #> 205                 78 #> 206                 65 #> 207                 75 #> 208                 74 #> 209                 69 #> 210                 72 #> 211                 55 #> 212                 76 #> 213                 78 #> 214               7.89 #> 215               60.6 #> 216                 22 #> 217               0.26 #> 218               0.25 #> 219               29.1 #> 220                126 #> 221               0.09 #> 222               0.48 #> 223                0.8 #> 224                 25 #> 225                3.9 #> 226               5917 #> 227                 69 #> 228                 63 #> 229                 71 #> 230                 64 #> 231                 77 #> 232                 70 #> 233                 70 #> 234                 79 #> 235                 77 #> 236                 69 #> 237                 70 #> 238                 75 #> 239                 81 #> 240                 74 #> 241                 69 #> 242                 73 #> 243                 66 #> 244                 84 #> 245                 74 #> 246                 76 #> 247                 85 #> 248                 82 #> 249                 76 #> 250                 75 #> 251                 78 #> 252                 85 #> 253                 72 #> 254                 64 #> 255                 81 #> 256                 75 #> 257                 77 #> 258                 67 #> 259                 74 #> 260                 72 #> 261                 74 #> 262                 72 #> 263                 66 #> 264                 73 #> 265                 75 #> 266                 73 #> 267                 65 #> 268                 81 #> 269                 77 #> 270                 80 #> 271                 67 #> 272                 77 #> 273                 74 #> 274                 75 #> 275                 74 #> 276                 66 #> 277                 74 #> 278                 78 #> 279              21641 #> 280               1477 #> 281               1738 #> 282               5487 #> 283               3902 #> 284               6580 #> 285              24807 #> 286              15471 #> 287               5218 #> 288               1803 #> 289                537 #> 290                  1 #> 291                 55 #> 292               1723 #> 293              35933 #> 294              54648 #> 295              36889 #> 296              21660 #> 297              30403 #> 298              10184 #> 299              24671 #> 300              56838 #> 301              11331 #> 302                707 #> 303               1153 #> 304               1367 #> 305               1121 #> 306                179 #> 307                165 #> 308                 12 #> 309              13015 #> 310              47725 #> 311              30954 #> 312              29786 #> 313              11127 #> 314              21660 #> 315              58670 #> 316             6852.1 #> 317                 76 #> 318              27397 #> 319                  0 #> 320                  1 #> 321                  0 #> 322                  0 #> 323                  0 #> 324                  0 #> 325                  1 #> 326                  1 #> 327                  0 #> 328                 75 #> 329               1152 #> 330                  1 #> 331               4126 #> 332             21.749 #> 333              18.28 #> 334             16.944 #> 335             14.322 #> 336             31.306 #> 337             21.888 #> 338              25.68 #> 339             31.366 #> 340             30.822 #> 341             24.123 #> 342             22.239 #> 343             28.501 #> 344             30.878 #> 345             10.022 #> 346               8.39 #> 347              6.944 #> 348              5.949 #> 349             13.462 #> 350             10.484 #> 351             11.215 #> 352               13.5 #> 353             13.284 #> 354              10.79 #> 355             10.218 #> 356             12.078 #> 357             13.612 #> 358             27.806 #> 359             19.867 #> 360             21.399 #> 361             17.843 #> 362             32.732 #> 363             23.756 #> 364             27.033 #> 365             33.055 #> 366             30.084 #> 367             29.713 #> 368             21.378 #> 369             26.861 #> 370             31.691 #> 371             12.478 #> 372              9.358 #> 373              9.181 #> 374              8.069 #> 375             14.214 #> 376             11.008 #> 377              11.99 #> 378             14.316 #> 379             12.752 #> 380             13.015 #> 381              9.696 #> 382             11.524 #> 383             13.853 #> 384              0.018 #> 385  0.751551987007954 #> 386                  1 #> 387                  9 #> 388                  1 #> 389                  0 #> 390                  1 #> 391 0.0124440738023481 #> 392  0.199349734246098 #> 393  0.020282098514558 #> 394 0.0240542028878415 #>                                                                                          indicator #> 1                                                                                  EJScreen Report #> 2                                                                                     EJScreen Map #> 3                                                                                      ECHO report #> 4                                                                                     ejam_uniq_id #> 5                                                                                 Total Population #> 6                                                                                        Longitude #> 7                                                                                         Latitude #> 8                                                                               State Abbreviation #> 9                                                                                       State Name #> 10                                                                     Ratio to US avg Demog Index #> 11                                                               Ratio to US avg Suppl Demog Index #> 12                                                                      Ratio to US avg % Low-inc. #> 13                                                               Ratio to US avg % Limited English #> 14                                                                    Ratio to US avg % Unemployed #> 15                                                                 Ratio to US avg % < High School #> 16                                                             Ratio to US avg Low life expectancy #> 17                                                                       Ratio to US avg % < age 5 #> 18                                                                      Ratio to US avg % > age 64 #> 19                                                               Ratio to US avg % People of Color #> 20                                                                      Ratio to US avg % Hispanic #> 21                                                                   Ratio to US avg % Black (NHA) #> 22                                                                   Ratio to US avg % Asian (NHA) #> 23                                           Ratio to US avg % American Indian Alaska Native (NHA) #> 24                                        Ratio to US avg % Native Hawaiian Pacific Islander (NHA) #> 25                                                       Ratio to US avg % Other single race (NHA) #> 26                                                         Ratio to US avg % Two or more race (NH) #> 27                                           Ratio to US avg % White nonHispanic single race (NHA) #> 28                                                                           Ratio to US avg PM2.5 #> 29                                                                           Ratio to US avg Ozone #> 30                                                                     Ratio to US avg Cancer risk #> 31                                                                     Ratio to US avg Respiratory #> 32                                                                       Ratio to US avg Diesel PM #> 33                                                                Ratio to US avg % built pre-1960 #> 34                                                                         Ratio to US avg Traffic #> 35                                                                             Ratio to US avg NPL #> 36                                                                             Ratio to US avg RMP #> 37                                                                            Ratio to US avg TSDF #> 38                                                                           Ratio to US avg NPDES #> 39                                                                             Ratio to US avg UST #> 40                                                           Ratio to US avg Toxic Releases to Air #> 41                                                                   Ratio to State avg Demog.Ind. #> 42                                                            Ratio to State avg Suppl Demog Index #> 43                                                                   Ratio to State avg % Low-inc. #> 44                                                            Ratio to State avg % Limited English #> 45                                                                 Ratio to State avg % Unemployed #> 46                                                              Ratio to State avg % < High School #> 47                                                          Ratio to State avg Low life expectancy #> 48                                                                    Ratio to State avg % < age 5 #> 49                                                                   Ratio to State avg % > age 64 #> 50                                                            Ratio to State avg % People of Color #> 51                                                                   Ratio to State avg % Hispanic #> 52                                        Ratio to State avg % American Indian Alaska Native (NHA) #> 53                                                                Ratio to State avg % Black (NHA) #> 54                                                                Ratio to State avg % Asian (NHA) #> 55                                                    Ratio to State avg % Other single race (NHA) #> 56                                                      Ratio to State avg % Two or more race (NH) #> 57                                     Ratio to State avg % Native Hawaiian Pacific Islander (NHA) #> 58                                              Ratio to State avg % White nonHispanic single race #> 59                                                                        Ratio to State avg PM2.5 #> 60                                                                        Ratio to State avg Ozone #> 61                                                                  Ratio to State avg Cancer risk #> 62                                                                  Ratio to State avg Respiratory #> 63                                                                    Ratio to State avg Diesel PM #> 64                                                             Ratio to State avg % built pre-1960 #> 65                                                                      Ratio to State avg Traffic #> 66                                                                          Ratio to State avg NPL #> 67                                                                          Ratio to State avg RMP #> 68                                                                         Ratio to State avg TSDF #> 69                                                                        Ratio to State avg NPDES #> 70                                                                          Ratio to State avg UST #> 71                                                        Ratio to State avg Toxic Releases to Air #> 72                                                                               Demographic Index #> 73                                                                  Supplemental Demographic Index #> 74                                                                                    % Low Income #> 75                                                        % in limited English-speaking Households #> 76                                                                                    % Unemployed #> 77                                                          % with Less Than High School Education #> 78                                                                             Low life expectancy #> 79                                                                                   % under Age 5 #> 80                                                                                   % over Age 64 #> 81                                                                               % People of Color #> 82                                                                            % Hispanic or Latino #> 83                                         % Black or African American (non-Hispanic, single race) #> 84                                                             % Asian (non-Hispanic, single race) #> 85                                 % American Indian and Alaska Native (non-Hispanic, single race) #> 86                        % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 87                                                        % Other race (non-Hispanic, single race) #> 88                                                              % Two or more races (non-Hispanic) #> 89                                                             % White (non-Hispanic, single race) #> 90                                                             US percentile for Demographic Index #> 91                                                US percentile for Supplemental Demographic Index #> 92                                                                  US percentile for % Low Income #> 93                                      US percentile for % in limited English-speaking Households #> 94                                                                  US percentile for % Unemployed #> 95                                        US percentile for % with Less Than High School Education #> 96                                                           US percentile for Low life expectancy #> 97                                                                 US percentile for % under Age 5 #> 98                                                                 US percentile for % over Age 64 #> 99                                                             US percentile for % People of Color #> 100                                                         US percentile for % Hispanic or Latino #> 101                      US percentile for % Black or African American (non-Hispanic, single race) #> 102                                          US percentile for % Asian (non-Hispanic, single race) #> 103              US percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 104     US percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 105                                     US percentile for % Other race (non-Hispanic, single race) #> 106                                           US percentile for % Two or more races (non-Hispanic) #> 107                                          US percentile for % White (non-Hispanic, single race) #> 108                                                                US Average of Demographic Index #> 109                                                   US Average of Supplemental Demographic Index #> 110                                                                    US average for % Low Income #> 111                                        US average for % in limited English-speaking Households #> 112                                                                    US average for % Unemployed #> 113                                          US average for % with Less Than High School Education #> 114                                                             US average for Low life expectancy #> 115                                                                   US average for % under Age 5 #> 116                                                                   US average for % over Age 64 #> 117                                                               US average for % People of Color #> 118                                                                    US avg % Hispanic or Latino #> 119                                 US avg % Black or African American (non-Hispanic, single race) #> 120                                                     US avg % Asian (non-Hispanic, single race) #> 121                         US avg % American Indian and Alaska Native (non-Hispanic, single race) #> 122                US avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 123                                                US avg % Other race (non-Hispanic, single race) #> 124                                                      US avg % Two or more races (non-Hispanic) #> 125                                                     US avg % White (non-Hispanic, single race) #> 126                                                                 State avg % Hispanic or Latino #> 127                              State avg % Black or African American (non-Hispanic, single race) #> 128                                                  State avg % Asian (non-Hispanic, single race) #> 129                      State avg % American Indian and Alaska Native (non-Hispanic, single race) #> 130             State avg % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 131                                             State avg % Other race (non-Hispanic, single race) #> 132                                                   State avg % Two or more races (non-Hispanic) #> 133                                                  State avg % White (non-Hispanic, single race) #> 134                                                         State percentile for Demographic Index #> 135                                            State percentile for Supplemental Demographic Index #> 136                                                              State percentile for % Low Income #> 137                                  State percentile for % in limited English-speaking Households #> 138                                                              State percentile for % Unemployed #> 139                                    State percentile for % with Less Than High School Education #> 140                                                       State percentile for Low life expectancy #> 141                                                             State percentile for % under Age 5 #> 142                                                             State percentile for % over Age 64 #> 143                                                         State percentile for % People of Color #> 144                                                      State percentile for % Hispanic or Latino #> 145                   State percentile for % Black or African American (non-Hispanic, single race) #> 146                                       State percentile for % Asian (non-Hispanic, single race) #> 147           State percentile for % American Indian and Alaska Native (non-Hispanic, single race) #> 148  State percentile for % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 149                                  State percentile for % Other race (non-Hispanic, single race) #> 150                                        State percentile for % Two or more races (non-Hispanic) #> 151                                       State percentile for % White (non-Hispanic, single race) #> 152                                                             State Average of Demographic Index #> 153                                                State Average of Supplemental Demographic Index #> 154                                                                 State average for % Low Income #> 155                                     State average for % in limited English-speaking Households #> 156                                                                 State average for % Unemployed #> 157                                       State average for % with Less Than High School Education #> 158                                                          State average for Low life expectancy #> 159                                                                State average for % under Age 5 #> 160                                                                State average for % over Age 64 #> 161                                                            State average for % People of Color #> 162                                                           Particulate Matter (PM 2.5 in ug/m3) #> 163                                                                                    Ozone (ppb) #> 164                                                      Air Toxics Cancer Risk (risk per million) #> 165                                                            Air Toxics Respiratory Hazard Index #> 166                                                   Air Toxics Diesel Particulate Matter (ug/m3) #> 167                                                     Lead Paint Indicator (% pre-1960s housing) #> 168                            Traffic Proximity and Volume (daily traffic count/distance to road) #> 169                                                   Superfund Proximity (site count/km distance) #> 170                                                     RMP Proximity (facility count/km distance) #> 171                           Indicator for Hazardous Waste Proximity (facility count/km distance) #> 172                      Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 173                                                      Underground Storage Tanks (UST) indicator #> 174                                                                          Toxic Releases to Air #> 175                                         US percentile for Particulate Matter (PM 2.5 in ug/m3) #> 176                                                                  US percentile for Ozone (ppb) #> 177                                    US percentile for Air Toxics Cancer Risk (risk per million) #> 178                                          US percentile for Air Toxics Respiratory Hazard Index #> 179                                 US percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 180                                   US percentile for Lead Paint Indicator (% pre-1960s housing) #> 181          US percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 182                                 US percentile for Superfund Proximity (site count/km distance) #> 183                                   US percentile for RMP Proximity (facility count/km distance) #> 184                       US percentile for Hazardous Waste Proximity (facility count/km distance) #> 185    US percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 186                                    US percentile for Underground Storage Tanks (UST) indicator #> 187                                                        US percentile for Toxic Releases to Air #> 188                                            US average for Particulate Matter (PM 2.5 in ug/m3) #> 189                                                                     US average for Ozone (ppb) #> 190                                       US average for Air Toxics Cancer Risk (risk per million) #> 191                                             US average for Air Toxics Respiratory Hazard Index #> 192                                    US average for Air Toxics Diesel Particulate Matter (ug/m3) #> 193                                      US average for Lead Paint Indicator (% pre-1960s housing) #> 194             US average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 195                                    US average for Superfund Proximity (site count/km distance) #> 196                                      US average for RMP Proximity (facility count/km distance) #> 197                          US average for Hazardous Waste Proximity (facility count/km distance) #> 198       US average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 199                                       US average for Underground Storage Tanks (UST) indicator #> 200                                                                   US avg Toxic Releases to Air #> 201                                      State percentile for Particulate Matter (PM 2.5 in ug/m3) #> 202                                                               State percentile for Ozone (ppb) #> 203                                 State percentile for Air Toxics Cancer Risk (risk per million) #> 204                                       State percentile for Air Toxics Respiratory Hazard Index #> 205                              State percentile for Air Toxics Diesel Particulate Matter (ug/m3) #> 206                                State percentile for Lead Paint Indicator (% pre-1960s housing) #> 207       State percentile for Traffic Proximity and Volume (daily traffic count/distance to road) #> 208                              State percentile for Superfund Proximity (site count/km distance) #> 209                                State percentile for RMP Proximity (facility count/km distance) #> 210                    State percentile for Hazardous Waste Proximity (facility count/km distance) #> 211 State percentile for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 212                                 State percentile for Underground Storage Tanks (UST) indicator #> 213                                                     State percentile for Toxic Releases to Air #> 214                                         State average for Particulate Matter (PM 2.5 in ug/m3) #> 215                                                                  State average for Ozone (ppb) #> 216                                    State average for Air Toxics Cancer Risk (risk per million) #> 217                                          State average for Air Toxics Respiratory Hazard Index #> 218                                 State average for Air Toxics Diesel Particulate Matter (ug/m3) #> 219                                   State average for Lead Paint Indicator (% pre-1960s housing) #> 220          State average for Traffic Proximity and Volume (daily traffic count/distance to road) #> 221                                 State average for Superfund Proximity (site count/km distance) #> 222                                   State average for RMP Proximity (facility count/km distance) #> 223                       State average for Hazardous Waste Proximity (facility count/km distance) #> 224    State average for Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> 225                                    State average for Underground Storage Tanks (UST) indicator #> 226                                                                State avg Toxic Releases to Air #> 227                                     US percentile for EJ Index for Particulate Matter (PM 2.5) #> 228                                                           US percentile for EJ Index for Ozone #> 229                                          US percentile for EJ Index for Air Toxics Cancer Risk #> 230                             US percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 231                            US percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 232                                            US percentile for EJ Index for Lead Paint Indicator #> 233                                    US percentile for EJ Index for Traffic Proximity and Volume #> 234                                             US percentile for EJ Index for Superfund Proximity #> 235                                                   US percentile for EJ Index for RMP Proximity #> 236                                       US percentile for EJ Index for Hazardous Waste Proximity #> 237                                  US percentile for EJ Index for Wastewater Discharge Indicator #> 238                       US percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 239                                           US percentile for EJ Index for Toxic Releases to Air #> 240                        US percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 241                                              US percentile for EJ Supplemental Index for Ozone #> 242                             US percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 243                US percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 244               US percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 245                               US percentile for EJ Supplemental Index for Lead Paint Indicator #> 246                       US percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 247                                US percentile for EJ Supplemental Index for Superfund Proximity #> 248                                      US percentile for EJ Supplemental Index for RMP Proximity #> 249                          US percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 250                     US percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 251          US percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 252                                     US Percentile for Toxic Releases to Air Supplemental Index #> 253                                  State percentile for EJ Index for Particulate Matter (PM 2.5) #> 254                                                        State percentile for EJ Index for Ozone #> 255                                       State percentile for EJ Index for Air Toxics Cancer Risk #> 256                          State percentile for EJ Index for Air Toxics Respiratory Hazard Index #> 257                         State percentile for EJ Index for Air Toxics Diesel Particulate Matter #> 258                                         State percentile for EJ Index for Lead Paint Indicator #> 259                                 State percentile for EJ Index for Traffic Proximity and Volume #> 260                                          State percentile for EJ Index for Superfund Proximity #> 261                                                State percentile for EJ Index for RMP Proximity #> 262                                    State percentile for EJ Index for Hazardous Waste Proximity #> 263                               State percentile for EJ Index for Wastewater Discharge Indicator #> 264                    State percentile for EJ Index for Underground Storage Tanks (UST) indicator #> 265                                        State percentile for EJ Index for Toxic Releases to Air #> 266                     State percentile for EJ Supplemental Index for Particulate Matter (PM 2.5) #> 267                                           State percentile for EJ Supplemental Index for Ozone #> 268                          State percentile for EJ Supplemental Index for Air Toxics Cancer Risk #> 269             State percentile for EJ Supplemental Index for Air Toxics Respiratory Hazard Index #> 270            State percentile for EJ Supplemental Index for Air Toxics Diesel Particulate Matter #> 271                            State percentile for EJ Supplemental Index for Lead Paint Indicator #> 272                    State percentile for EJ Supplemental Index for Traffic Proximity and Volume #> 273                             State percentile for EJ Supplemental Index for Superfund Proximity #> 274                                   State percentile for EJ Supplemental Index for RMP Proximity #> 275                       State percentile for EJ Supplemental Index for Hazardous Waste Proximity #> 276                  State percentile for EJ Supplemental Index for Wastewater Discharge Indicator #> 277       State percentile for EJ Supplemental Index for Underground Storage Tanks (UST) indicator #> 278                                  State Percentile for Toxic Releases to Air Supplemental Index #> 279                                                                      Low income resident count #> 280                                                            Limited English-speaking Households #> 281                                                                      Unemployed resident count #> 282                                                 Less Than High School Education resident count #> 283                                                                     Under Age 5 resident count #> 284                                                                     Over Age 64 resident count #> 285                                                                 People of Color resident count #> 286                                                                    Count of Hispanic or Latino #> 287                                 Count of Black or African American (non-Hispanic, single race) #> 288                                                     Count of Asian (non-Hispanic, single race) #> 289                         Count of American Indian and Alaska Native (non-Hispanic, single race) #> 290                Count of Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> 291                                                Count of Other race (non-Hispanic, single race) #> 292                                                      Count of Two or more races (non-Hispanic) #> 293                                                     Count of White (non-Hispanic, single race) #> 294                                      Count of Population for whom Poverty Status is Determined #> 295                                                                  Count of Population Age 25 up #> 296                                                                            Count of Households #> 297                                           Universe for percent unemployed (denominator, count) #> 298                                                          Count of Housing Units Built Pre 1960 #> 299                                   Built housing units count (denominator for percent pre 1960) #> 300                    Number of Persons for whom Language Ability is Determined--age 5 and above. #> 301                                                                          Speak Spanish at Home #> 302                                                           Persons who Speak English Not at All #> 303                                                              Speak Other Indo-European at Home #> 304                                                    Speak Asian-Pacific Island language at Home #> 305                                                   Speak Spanish (in limited English household) #> 306                                       Speak Other Indo-European (in limited English household) #> 307                                      Speak Asian-Pacific Island (in limited English household) #> 308                                                     Speak Other (in limited English household) #> 309                                                                        Population Under Age 18 #> 310                                                                         Population Over Age 17 #> 311                                                                                Male Population #> 312                                                                              Female Population #> 313                                                                   Owner Occupied Housing Units #> 314                                                                         Occupied Housing Units #> 315                                                       Civilian noninstitutionalized population #> 316                                                                                     DISABILITY #> 317                                                                       Life Expectancy in Years #> 318                                                                              Per Capita Income #> 319                                                            Pct. Households below Poverty Level #> 320                                  Percent Speaking Spanish (as % of limited English households) #> 321            Percent Speaking Other Indo-European languages (as % of limited English households) #> 322           Percent Speaking Asian-Pacific Island languages (as % of limited English households) #> 323                          Percent Speaking Other languages (as % of limited English households) #> 324                                                       Percent Break Down by Age below 18 Years #> 325                                                       Percent Break Down by Age above 17 Years #> 326                                                                                  Percent Males #> 327                                                                                Percent Females #> 328                                                                     Census blockgroups (count) #> 329                                                                          Census blocks (count) #> 330                                                                        Buffer distance (miles) #> 331                                                                 Households below Poverty Level #> 332                                                                Particulate Matter 2.5 EJ Index #> 333                                                                                 Ozone EJ Index #> 334                                                                Air toxics cancer risk EJ Index #> 335                                                             Air toxics respiratory HI EJ Index #> 336                                                             Diesel particulate matter EJ Index #> 337                                                                            Lead paint EJ Index #> 338                                                              US raw Traffic proximity EJ Index #> 339                                                            US raw Superfund Proximity EJ Index #> 340                                                                RMP Facility Proximity EJ Index #> 341                                                             Hazardous waste proximity EJ Index #> 342                                                           US raw Wastewater discharge EJ Index #> 343                                                      US raw Underground storage tanks EJ Index #> 344                                                                 Toxic Releases to Air EJ Index #> 345                                                      Particulate Matter 2.5 Supplemental Index #> 346                                                                       Ozone Supplemental Index #> 347                                                      Air Toxics Cancer Risk Supplemental Index #> 348                                                   Air Toxics Respiratory HI Supplemental Index #> 349                                                   Diesel Particulate Matter Supplemental Index #> 350                                                                  Lead Paint Supplemental Index #> 351                                                           Traffic Proximity Supplemental Index #> 352                                                         Superfund Proximity Supplemental Index #> 353                                                      RMP Facility Proximity Supplemental Index #> 354                                                   Hazardous Waste Proximity Supplemental Index #> 355                                                        Wastewater Discharge Supplemental Index #> 356                                                   Underground Storage Tanks Supplemental Index #> 357                                                           EJ Supp: Toxic Releases to Air (raw) #> 358                                                      State raw Particulate Matter 2.5 EJ Index #> 359                                                                       State raw Ozone EJ Index #> 360                                                          State Air toxics cancer risk EJ Index #> 361                                                       State Air toxics respiratory HI EJ Index #> 362                                                       State Diesel particulate matter EJ Index #> 363                                                                      State Lead paint EJ Index #> 364                                                           State raw Traffic proximity EJ Index #> 365                                                         State raw Superfund Proximity EJ Index #> 366                                                      State raw RMP Facility Proximity EJ Index #> 367                                                       State Hazardous waste proximity EJ Index #> 368                                                        State raw Wastewater discharge EJ Index #> 369                                                   State raw Underground storage tanks EJ Index #> 370                                                           State Toxic Releases to Air EJ Index #> 371                                            State raw Particulate Matter 2.5 Supplemental Index #> 372                                                             State raw Ozone Supplemental Index #> 373                                                State Air toxics cancer risk Supplemental Index #> 374                                             State Air toxics respiratory HI Supplemental Index #> 375                                             State Diesel particulate matter Supplemental Index #> 376                                                            State Lead paint Supplemental Index #> 377                                                 State raw Traffic proximity Supplemental Index #> 378                                               State raw Superfund Proximity Supplemental Index #> 379                                            State raw RMP Facility Proximity Supplemental Index #> 380                                             State Hazardous waste proximity Supplemental Index #> 381                                              State raw Wastewater discharge Supplemental Index #> 382                                         State raw Underground storage tanks Supplemental Index #> 383                                                 State Toxic Releases to Air Supplemental Index #> 384                                                                                   distance_min #> 385                                                                         distance_min_avgperson #> 386                                                                                  sitecount_max #> 387                                                                               sitecount_unique #> 388                                                                                  sitecount_avg #> 389                                                           Percent population with Disabilities #> 390                                                                      Owner Occupied households #> 391                                                                                    pct_lan_eng #> 392                                                                                pct_lan_spanish #> 393                                                                                     pct_lan_ie #> 394                                                                                    pct_lan_api  table_tall_from_overall(x$results_bysite[1, ]) #> Error in oldnames %in% namesnow: object 'x' not found"},{"path":"https://usepa.github.io/EJAM/reference/table_validated_ejamit_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","title":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","text":"first step formatting results nice tables","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_validated_ejamit_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","text":"","code":"table_validated_ejamit_row(ejamit_results_1row = NULL)"},{"path":"https://usepa.github.io/EJAM/reference/table_validated_ejamit_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","text":"ejamit_results_1row 1-row data.table like testoutput_ejamit_100pts_1miles$results_overall, come ejamit(testpoints_10)$results_overall single row testoutput_ejamit_100pts_1miles$results_bysite","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_validated_ejamit_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","text":"Returns input 1-row data.table, indicators etc. columns. 1 row table, colnames expected, returns correct structure filled NA values.","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_validated_ejamit_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans/validates EJAM results for 1 place or overall — table_validated_ejamit_row","text":"","code":"x <- table_validated_ejamit_row(testoutput_ejamit_100pts_1miles$results_bysite[ 1, ])   x <- table_validated_ejamit_row(testoutput_ejamit_100pts_1miles$results_overall)"},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"Used table_xls_from_ejam()","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"","code":"table_xls_format(   overall,   eachsite,   longnames = NULL,   formatted = NULL,   bybg = NULL,   plot_distance_by_group = FALSE,   summary_plot = NULL,   plotlatest = FALSE,   plotfilename = NULL,   mapadd = FALSE,   report_map = NULL,   ok2plot = TRUE,   analysis_title = \"EJAM analysis\",   buffer_desc = \"Selected Locations\",   radius_or_buffer_in_miles = NULL,   radius_or_buffer_description =     \"Miles radius of circular buffer (or distance used if buffering around polygons)\",   notes = NULL,   heatmap_colnames = NULL,   heatmap_cuts = c(80, 90, 95),   heatmap_colors = c(\"yellow\", \"orange\", \"red\"),   heatmap2_colnames = NULL,   heatmap2_cuts = c(1.009, 2, 3),   heatmap2_colors = c(\"yellow\", \"orange\", \"red\"),   hyperlink_colnames = c(\"EJScreen Report\", \"EJScreen Map\", \"ECHO report\"),   graycolnames = NULL,   narrowcolnames = NULL,   graycolor = \"gray\",   narrow6 = 6,   testing = FALSE,   updateProgress = NULL,   launchexcel = FALSE,   saveas = NULL,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"overall table save one tab, ejamit()$overall, EJAM analysis indicators overall (one row), entire output ejamit() passed overall, function figures eachsite, etc. eachsite table save one tab, ejamit()$overall, EJAM analysis site site (one row per site) longnames vector indicator names display Excel table formatted optional table save one tab, ejamit()$overall, EJAM analysis overall different format bybg Optional large table details block group needed analyze distances group. plot_distance_by_group logical, whether try add plot mean distance group. requires bybg provided parameter input function. summary_plot optional plot object passed EJAM shiny app save 'Plot' sheet Excel table plotlatest optional logical. TRUE, recently displayed plot (prior function called) inserted tab called plot2 plotfilename full path including name .png file insert mapadd logical optional - try include map points report_map leaflet map object passed Shiny app display 'Map' sheet ok2plot can set FALSE prevent plots attempted, debugging analysis_title optional title passed Shiny app 'Notes' sheet buffer_desc optional description buffer used analysis, passed 'Notes' sheet radius_or_buffer_description optional text saying distance radius polygon buffer, passed 'Notes' sheet notes Text additional notes put notes tab, optional vector character elements pasted one line . heatmap_colnames optional vector colnames apply heatmap colors heatmap_cuts vector values separate heatmap colors, 0-100 heatmap_colors vector color names heatmap bins, length heatmap_cuts, first color >= 1st cutpoint, <2d, second color >=2d cutpoint <3d, etc. hyperlink_colnames names treat URLs hyperlinks graycolnames columns deemphasize narrowcolnames column numbers make narrow graycolor color used deemphasize columns narrow6 narrow testing optional testing updateProgress optional Shiny progress bar update formatting launchexcel Set TRUE function launch Excel immediately, showing final workbook created . saveas NULL, valid path filename.xlsx provided, workbook saved locally path name. Warning: overwrite existing file. ... params passed along openxlsx::writeData() radius_miles provided, miles buffer distance (polygon point circular buffers)","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"workbook, ready saved spreadsheet format, tabs like \"Overall\" \"Site\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"Already took put code table_xls_format() table_xls_format_api()","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/table_xls_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format EJAM tabular outputs for saving as Excel spreadsheet — table_xls_format","text":"","code":"if (FALSE) {   table_xls_format(     testoutput_ejamit_100pts_1miles$results_overall,      testoutput_ejamit_100pts_1miles$results_bysite,     saveas =  \"out1.xlsx\")  # can just pass the whole results of ejamit(), for convenience  wb <- table_xls_format(testoutput_ejamit_100pts_1miles)  openxlsx::saveWorkbook(wb, file = \"out2.xlsx\") }"},{"path":"https://usepa.github.io/EJAM/reference/table_xls_from_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the results of ejamit() for excel and optionally save .xlsx file — table_xls_from_ejam","title":"Format the results of ejamit() for excel and optionally save .xlsx file — table_xls_from_ejam","text":"Uses table_xls_format() format save results","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_xls_from_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the results of ejamit() for excel and optionally save .xlsx file — table_xls_from_ejam","text":"","code":"table_xls_from_ejam(   ejamitout,   fname = NULL,   save_now = TRUE,   overwrite = TRUE,   launchexcel = FALSE,   interactive_console = TRUE,   ok2plot = TRUE,   in.testing = FALSE,   in.analysis_title = \"EJAM analysis\",   react.v1_summary_plot = NULL,   radius_or_buffer_in_miles = NULL,   buffer_desc = \"Selected Locations\",   radius_or_buffer_description =     \"Miles radius of circular buffer (or distance used if buffering around polygons)\",   hyperlink_colnames = c(\"EJScreen Report\", \"EJScreen Map\", \"ECHO report\"),   ... )"},{"path":"https://usepa.github.io/EJAM/reference/table_xls_from_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the results of ejamit() for excel and optionally save .xlsx file — table_xls_from_ejam","text":"ejamitout output ejamit() fname optional name full path name file save locally, like \".xlsx\" save_now optional logical, whether save .xlsx file locally just return workbook object can later written .xlsx file using openxlsx::saveWorkbook() overwrite optional logical, passed openxlsx::saveWorkbook() launchexcel optional logical, passed table_xls_format(), whether launch browser see spreadsheet immediately interactive_console optional - set FALSE used code server. TRUE, prompts RStudio user interactively asking save downloaded file ok2plot optional logical, passed  table_xls_format(), whether safe try plot set FALSE debugging plot problems .testing optional logical .analysis_title optional title character string react.v1_summary_plot optional - plot object radius_or_buffer_in_miles optional radius miles radius_or_buffer_description optional text phrase describing places analyzed hyperlink_colnames optional names columns URLs ... optional additional parameters passed table_xls_format(), heatmap_colnames, heatmap_cuts, heatmap_colors, etc.","code":""},{"path":"https://usepa.github.io/EJAM/reference/table_xls_from_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the results of ejamit() for excel and optionally save .xlsx file — table_xls_from_ejam","text":"returns workbook object use openxlsx::saveWorkbook(wb_out, pathname) returns just full path/file name saved save_now = TRUE","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_1000pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of doaggregate() — testoutput_doaggregate_1000pts_1miles","title":"test output of doaggregate() — testoutput_doaggregate_1000pts_1miles","text":"test output doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_1000pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of doaggregate() — testoutput_doaggregate_1000pts_1miles","text":"output doaggregate(testoutput_getblocksnearby_1000pts_1miles, sites2states_or_latlon = testpoints_1000, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_100pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of doaggregate() — testoutput_doaggregate_100pts_1miles","title":"test output of doaggregate() — testoutput_doaggregate_100pts_1miles","text":"test output doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_100pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of doaggregate() — testoutput_doaggregate_100pts_1miles","text":"output doaggregate(testoutput_getblocksnearby_100pts_1miles, sites2states_or_latlon = testpoints_100, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_10pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of doaggregate() — testoutput_doaggregate_10pts_1miles","title":"test output of doaggregate() — testoutput_doaggregate_10pts_1miles","text":"test output doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_doaggregate_10pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of doaggregate() — testoutput_doaggregate_10pts_1miles","text":"output doaggregate(testoutput_getblocksnearby_10pts_1miles, sites2states_or_latlon = testpoints_10, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_1000pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of ejamit() — testoutput_ejamit_1000pts_1miles","title":"test output of ejamit() — testoutput_ejamit_1000pts_1miles","text":"test output ejamit()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_1000pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of ejamit() — testoutput_ejamit_1000pts_1miles","text":"output ejamit(testpoints_1000, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_100pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of ejamit() — testoutput_ejamit_100pts_1miles","title":"test output of ejamit() — testoutput_ejamit_100pts_1miles","text":"test output ejamit()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_100pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of ejamit() — testoutput_ejamit_100pts_1miles","text":"output ejamit(testpoints_100, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_10pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of ejamit() — testoutput_ejamit_10pts_1miles","title":"test output of ejamit() — testoutput_ejamit_10pts_1miles","text":"test output ejamit()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejamit_10pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of ejamit() — testoutput_ejamit_10pts_1miles","text":"output ejamit(testpoints_10, radius = 1, include_ejindexes = TRUE)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejscreenit_10pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of ejscreenit(), using the EJScreen API — testoutput_ejscreenit_10pts_1miles","title":"test output of ejscreenit(), using the EJScreen API — testoutput_ejscreenit_10pts_1miles","text":"test output ejscreenit(), using EJScreen API","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_ejscreenit_10pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of ejscreenit(), using the EJScreen API — testoutput_ejscreenit_10pts_1miles","text":"output EJAMejscreenapi::ejscreenit( testpoints_10, radius = 1, nosave = T, nosee = T, interactiveprompt = F, calculate_ratios = T ) testoutput_ejscreenit_10pts_1miles$table Also see testoutput_ejamit_10pts_1miles$results_bysite","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_1000pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_1000pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_1000pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_1000pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_1000pts_1miles","text":"output getblocksnearby(testpoints_1000, radius = 1)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_100pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_100pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_100pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_100pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_100pts_1miles","text":"output getblocksnearby(testpoints_100, radius = 1)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_10pts_1miles.html","id":null,"dir":"Reference","previous_headings":"","what":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_10pts_1miles","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_10pts_1miles","text":"test output getblocksnearby(), input doaggregate()","code":""},{"path":"https://usepa.github.io/EJAM/reference/testoutput_getblocksnearby_10pts_1miles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test output of getblocksnearby(), and is an input to doaggregate() — testoutput_getblocksnearby_10pts_1miles","text":"output getblocksnearby(testpoints_10, radius = 1)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/testpoints_10.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns sitenumber, lat, lon — testpoints_10","title":"test points data.frame with columns sitenumber, lat, lon — testpoints_10","text":"test points data.frame columns sitenumber, lat, lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_100.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns sitenumber, lat, lon — testpoints_100","title":"test points data.frame with columns sitenumber, lat, lon — testpoints_100","text":"test points data.frame columns sitenumber, lat, lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_1000.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns sitenumber, lat, lon — testpoints_1000","title":"test points data.frame with columns sitenumber, lat, lon — testpoints_1000","text":"test points data.frame columns sitenumber, lat, lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_10000.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns sitenumber, lat, lon — testpoints_10000","title":"test points data.frame with columns sitenumber, lat, lon — testpoints_10000","text":"test points data.frame columns sitenumber, lat, lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_100_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns sitenumber, lat, lon — testpoints_100_dt","title":"test points data.frame with columns sitenumber, lat, lon — testpoints_100_dt","text":"test points data.frame columns sitenumber, lat, lon","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_conus5.html","id":null,"dir":"Reference","previous_headings":"","what":"test points data.frame with columns lat, lon, sitenumber, sitename — testpoints_conus5","title":"test points data.frame with columns lat, lon, sitenumber, sitename — testpoints_conus5","text":"test points data.frame columns lat, lon, sitenumber, sitename","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","title":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","text":"Get data.table Random Points (lat lon) Testing/ Benchmarking/ Demos, weighted various ways. weighting can specified point reflects average EPA-regulated facility, blockgroup, block, place map, US resident.","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","text":"","code":"testpoints_n(   n = 10,   weighting = c(\"frs\", \"pop\", \"area\", \"bg\", \"block\"),   dt = TRUE,   ST_needed = NULL )"},{"path":"https://usepa.github.io/EJAM/reference/testpoints_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","text":"n Number points needed (sample size) weighting word indicating weight random points (synonyms allowed, addition shown ): Note default frs, may want use pop even though slower. pop people = Average Person: random person among US residents (block point residence per 2020 Census) frs facility = Average Facility: random EPA-regulated facility actives Facility Registry Service (FRS) bg = Average Blockgroup: random US Census block group (internal point like centroid) block = Average Block: random US Census block (internal point like centroid) area place = Average Place: random point map (internal point avg blockgroup weighted square meters size) dt logical, whether return data.table (DEFAULT) instead normal data.frame ST_needed optional, can character vector 2 letter State abbreviations pick States.","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","text":"data.frame data.table columns lat, lon decimal degrees, columns table used (based weighting)","code":""},{"path":"https://usepa.github.io/EJAM/reference/testpoints_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random points in USA - average resident, facility, BG, block, or square mile — testpoints_n","text":"","code":"mapfast(testpoints_n(300, ST_needed = c('LA','MS')) ) #> Warning: Some latitude / longitude were provided that are not found in any state  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircles\",\"args\":[[30.456621,32.748957,31.681587,29.97465,29.983758,29.90025,29.798368,30.01829,34.921222,30.20135,32.601111,31.894303,32.05026,32.67663,30.42715,32.50926,29.84822,30.4369,32.48434,30.373333,30.37851,31.927239,33.474167,30.000445,31.50113,31.568222,33.680556,32.358789,30.284638,31.9425,32.258333,32.34731,32.41703,30.0776,34.259103,31.048931,29.8,32.28301,32.30903,32.769167,30.31326,30.56766,29.92615,30.37551,30.23555,33.072778,31.60175,30.63855,30.563523,30.3804,30.28472,33.421389,30.01142,33.658125,29.677346,32.837778,29.96053,32.496246,34.223264,31.675633,33.11732,33.946667,30.49189,31.52631,31.903606,32.21894,33.73527,31.16076,33.465905,29.115556,31.933633,30.32913,30.237022,30.479471,31.914103,29.93888,30.48288,32.502802,31.738253,31.27807,30.38207,30.011617,29.46422,32.57374,29.93297,30.524744,34.694872,33.49002,32.09871,30.494897,32.383374,31.336995,31.186578,30.324897,30.588333,30.1294,32.25391,32.9876,32.30246,30.431277,30.469426,32.245825,32.52793,29.710659,32.390792,29.478262,34.99334,29.99401,30.00494,32.81,30.297453,32.24228,29.408314,32.756592,30.38628,29.881828,29.573549,34.852255,30.386708,30.416012,34.97124,32.17445,30.21538,32.453153,32.524792,31.20395,31.645567,32.484167,30.43406,30.37031,32.709372,32.83302,30.084244,30.407392,30.36711,29.63946,30.70072,32.5159,31.859921,30.26054,29.871621,32.29247,32.52898,30.34722,30.44761,30.237278,33.97318,30.40812,30.47663,30.196161,31.433431,32.883361,32.32891,34.24179,32.46053,32.283049,32.1241,32.375942,34.94853,34.988515,30.595118,30.302351,34.35083,34.269501,31.273528,30.31221,30.4638,32.473211,30.553835,34.234653,29.97498,29.650483,30.54096,30.313588,29.64802,30.647494,29.96366,29.122243,32.546334,32.655463,30.21961,34.487148,33.801672,32.51582,29.96762,30.066237,34.27397,30.261862,32.609722,30.8439,30.077005,30.527,30.4702,32.356242,30.56013,32.33288,32.255607,33.496,30.21105,34.87799,29.765,30.501675,30.436775,32.790688,29.850204,34.251978,34.542347,33.516463,31.346747,29.906408,29.60717,30.39764,29.979544,29.87491,31.77117,29.75957,31.908467,30.518167,30.32496,31.3576,32.457711,33.07488,32.532997,31.898137,30.1652,32.514742,30.20396,34.27225,32.303339,30.00716,30.16561,31.924956,30.31732,30.68,32.133867,34.90417,29.8649,29.556944,33.524949,31.70283,30.300605,30.40757,31.68554,32.798442,34.77427,32.312222,30.711742,30.40162,33.066361,32.42138,30.252099,34.81539,34.25542,33.079167,29.95691,30.18136,33.623142,30.482854,31.799744,30.37492,33.2303,30.44949,30.869603,30.133846,30.23897,29.54712,33.436545,30.31155,30.34005,32.35005,30.44872,34.089361,30.2691,30.091941,31.315331,29.94492,30.367025,32.568889,32.354028,31.102611,33.606,32.352646,31.314897,30.41308,31.34381,29.682194,30.429528,34.338111,29.856875,32.927638,29.988833,30.75239,29.77038,31.613661,34.98536,29.875864,32.733583,30.15341,30.5136,30.095833],[-89.052497,-90.01123,-92.138203,-92.13568100000001,-91.814109,-90.04325,-90.047183,-90.23939,-89.964417,-92.02964,-93.24083299999999,-89.002697,-90.14532,-93.86168000000001,-90.03497,-93.75075,-90.03086,-90.53811,-92.0851,-89.38555599999999,-89.0442,-89.8814,-88.78833299999999,-90.265963,-88.7037,-91.37313899999999,-88.758611,-90.82749699999999,-89.74534,-92.58583299999999,-90.423333,-90.86103,-90.3642,-92.66872600000001,-88.742328,-92.124317,-91.8,-90.12864999999999,-90.07342,-89.134444,-89.94258000000001,-90.15622,-90.13137999999999,-93.2052,-92.04347,-90.219469,-90.12912300000001,-89.2503,-90.37342,-91.0997,-89.75821000000001,-90.64449999999999,-90.01537,-88.270397,-91.22725199999999,-88.99555599999999,-90.19826,-92.132935,-88.685136,-89.10925,-89.05819,-90.767833,-90.5333,-89.27478000000001,-89.01436099999999,-90.15483,-90.70648,-90.79407,-88.812884,-89.07083299999999,-89.514467,-93.20021,-93.310723,-90.460826,-91.241815,-90.06849,-90.56122999999999,-92.020973,-90.01106900000001,-92.49849,-88.52816,-90.004558,-90.31056,-92.60760999999999,-91.82969,-90.43501999999999,-90.375731,-90.19745,-89.79228999999999,-92.427271,-88.66885600000001,-89.39257600000001,-93.291374,-89.25320000000001,-92.230555,-92.13509999999999,-90.24681,-93.15531,-90.32275,-91.115937,-91.137687,-90.131006,-92.5998,-91.08136399999999,-90.85706500000001,-90.329763,-89.59206,-91.83736,-90.26236,-91.186667,-91.24623,-90.923153,-90.700103,-89.16735,-89.08665000000001,-91.204081,-90.379526,-88.35297300000001,-89.06784,-91.08767,-90.04664,-90.583906,-93.32334,-88.80839400000001,-93.68343400000001,-90.43033,-89.581733,-89.870833,-88.87251000000001,-91.07326999999999,-88.798575,-91.87761,-91.93987199999999,-90.12916300000001,-89.09453000000001,-90.53874,-91.43971000000001,-90.35120000000001,-93.713656,-90.90419,-92.332598,-90.20097,-93.77251,-88.51331,-90.08201,-93.200806,-88.46242100000001,-91.02499,-91.11745999999999,-93.272639,-92.46545399999999,-90.42063899999999,-90.11636,-88.7166,-93.54752999999999,-93.283351,-92.0577,-93.9983,-89.8109,-90.020297,-90.398292,-89.836625,-89.02540999999999,-88.575025,-89.389056,-89.82187,-92.4894,-89.66954,-91.038725,-88.74981099999999,-90.16064,-90.693287,-91.02818000000001,-90.93198700000001,-90.73291999999999,-91.145844,-90.06018,-90.196405,-90.317629,-92.650516,-91.31677000000001,-89.00213100000001,-89.368467,-90.07616,-90.08146000000001,-91.028594,-88.41244,-90.928432,-90.05288899999999,-90.04430000000001,-90.564384,-91.16119999999999,-90.11385,-88.707483,-89.15982,-90.18698000000001,-93.29271300000001,-89.908917,-93.32552,-88.44038999999999,-92.84527799999999,-89.129182,-88.62052799999999,-93.05459,-91.066767,-88.719988,-88.909964,-88.386262,-89.262351,-90.05534900000001,-90.74074,-88.68977,-90.279528,-90.09941999999999,-89.17291400000001,-93.13243,-88.713233,-89.66716700000001,-90.98078,-91.3954,-89.274486,-89.85784,-93.762294,-93.11904800000001,-91.97065000000001,-90.783897,-93.33261,-88.81008300000001,-90.40848099999999,-90.23065,-92.00647600000001,-92.644071,-89.24342,-91.219167,-91.706036,-90.14514,-89.8301,-89.313333,-90.21284,-90.3964,-93.198733,-89.04934,-89.37597,-89.10721700000001,-89.44667200000001,-90.042778,-91.26994500000001,-91.0806,-89.579881,-90.13359,-92.650549,-89.973308,-88.74630000000001,-90.32250000000001,-90.19355,-92.11494999999999,-88.334661,-90.91887199999999,-88.688722,-89.09774,-91.04807,-89.095,-92.415098,-92.0932,-92.3874,-90.34050000000001,-88.914188,-93.20224,-91.260531,-89.648978,-89.09180000000001,-88.622056,-89.75196,-90.939058,-89.503089,-90.18685000000001,-89.13522500000001,-92.06611100000001,-89.630528,-89.281667,-90.690528,-90.156037,-89.259117,-88.5385,-92.36326,-90.77454899999999,-92.41202800000001,-89.51795300000001,-90.469528,-93.70128800000001,-91.86322199999999,-89.849828,-90.08247,-91.297336,-89.999,-90.441001,-89.532811,-91.96368,-90.11463999999999,-90.942778],4828.032,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},[\"lat: 30.456621<br>lon: -89.052497<br>REGISTRY_ID: 110044527651<br>PRIMARY_NAME: FEMA, WILLIS CHAPMAN SITE<br>NAICS: <br>SIC: 6515<br>PGM_SYS_ACRNMS: MS-ENSITE:23252<br>sitenumber: 1\",\"lat: 32.748957<br>lon: -90.01123<br>REGISTRY_ID: 110044493722<br>PRIMARY_NAME: CHARLES E. BELOTE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:51065<br>sitenumber: 2\",\"lat: 31.681587<br>lon: -92.138203<br>REGISTRY_ID: 110070594523<br>PRIMARY_NAME: TRACTOR SUPPLY CO #2283<br>NAICS: 444210<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101237<br>sitenumber: 3\",\"lat: 29.97465<br>lon: -92.135681<br>REGISTRY_ID: 110014446545<br>PRIMARY_NAME: CITY OF ABBEVILLE<br>NAICS: <br>SIC: 9999<br>PGM_SYS_ACRNMS: NPDES:LAR041027<br>sitenumber: 4\",\"lat: 29.983758<br>lon: -91.814109<br>REGISTRY_ID: 110070514936<br>PRIMARY_NAME: SALLY BEAUTY #2771<br>NAICS: 423850<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101725<br>sitenumber: 5\",\"lat: 29.90025<br>lon: -90.04325<br>REGISTRY_ID: 110011820609<br>PRIMARY_NAME: ELMWOOD ACADEMY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NCDB:C06#SD-LA-1116<br>sitenumber: 6\",\"lat: 29.798368<br>lon: -90.047183<br>REGISTRY_ID: 110046528101<br>PRIMARY_NAME: GULF INTRACOASTAL CONSTRUCTORS<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000073205<br>sitenumber: 7\",\"lat: 30.01829<br>lon: -90.23939<br>REGISTRY_ID: 110070125339<br>PRIMARY_NAME: AUTOZONE 3013<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000093021<br>sitenumber: 8\",\"lat: 34.921222<br>lon: -89.964417<br>REGISTRY_ID: 110038344547<br>PRIMARY_NAME: SAINT CLAIRE PARK<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:24187<br>sitenumber: 9\",\"lat: 30.20135<br>lon: -92.02964<br>REGISTRY_ID: 110003276366<br>PRIMARY_NAME: LAFAYETTE BONE & JOINT CLINIC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD064630452<br>sitenumber: 10\",\"lat: 32.601111<br>lon: -93.240833<br>REGISTRY_ID: 110011172514<br>PRIMARY_NAME: OAKETREE INVESTMENT LTD<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG540538<br>sitenumber: 11\",\"lat: 31.894303<br>lon: -89.002697<br>REGISTRY_ID: 110044626410<br>PRIMARY_NAME: PENGO OILFIELD SERVICES INCORPORATED<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33320<br>sitenumber: 12\",\"lat: 32.05026<br>lon: -90.14532<br>REGISTRY_ID: 110044494071<br>PRIMARY_NAME: JASON D. BRIDGES<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:51640<br>sitenumber: 13\",\"lat: 32.67663<br>lon: -93.86168<br>REGISTRY_ID: 110015763958<br>PRIMARY_NAME: RED RIVER SPECIALTIES, INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3400030117, ICIS:5414125, SSTS:073354LA001<br>sitenumber: 14\",\"lat: 30.42715<br>lon: -90.03497<br>REGISTRY_ID: 110030771680<br>PRIMARY_NAME: 1750 SOUTH LANE, LLC<br>NAICS: <br>SIC: 4226<br>PGM_SYS_ACRNMS: NPDES:LAG532270<br>sitenumber: 15\",\"lat: 32.50926<br>lon: -93.75075<br>REGISTRY_ID: 110070384594<br>PRIMARY_NAME: AJAX REALTY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:237945<br>sitenumber: 16\",\"lat: 29.84822<br>lon: -90.03086<br>REGISTRY_ID: 110070519068<br>PRIMARY_NAME: SUNRISE RECYCLING LLC - BELLE CHASSE SCRAP METAL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAR05Q045<br>sitenumber: 17\",\"lat: 30.4369<br>lon: -90.53811<br>REGISTRY_ID: 110070338075<br>PRIMARY_NAME: DONOVAN CONTROLS LLC<br>NAICS: 333132<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341251635<br>sitenumber: 18\",\"lat: 32.48434<br>lon: -92.0851<br>REGISTRY_ID: 110070384017<br>PRIMARY_NAME: THE HOT SPOT, LLC<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG535843<br>sitenumber: 19\",\"lat: 30.373333<br>lon: -89.385556<br>REGISTRY_ID: 110070066309<br>PRIMARY_NAME: DIAMONDHEAD WATER AND SEWER DISTRICT, WASTEWATER TREATMENT PLANT<br>NAICS: 237110<br>SIC: 1623<br>PGM_SYS_ACRNMS: NPDES:MSR106445<br>sitenumber: 20\",\"lat: 30.37851<br>lon: -89.0442<br>REGISTRY_ID: 110044684142<br>PRIMARY_NAME: COURTHOUSE ROAD SHELL<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25106<br>sitenumber: 21\",\"lat: 31.927239<br>lon: -89.8814<br>REGISTRY_ID: 110041563171<br>PRIMARY_NAME: MENDENHALL, CITY OF, MENDENHALL CLASS II RUBBISH SITE<br>NAICS: 562212<br>SIC: 4953<br>PGM_SYS_ACRNMS: EIS:7291711, MS-ENSITE:15369<br>sitenumber: 22\",\"lat: 33.474167<br>lon: -88.788333<br>REGISTRY_ID: 110071371464<br>PRIMARY_NAME: MISSISSIPPI STATE UNIVERSITY, HIGH PERFORMANCE COMPUTING DATA CENTER<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:MSR108850<br>sitenumber: 23\",\"lat: 30.000445<br>lon: -90.265963<br>REGISTRY_ID: 110003339762<br>PRIMARY_NAME: BUFORDS AUTO REPAIR & COLLISION<br>NAICS: 811121<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985220789<br>sitenumber: 24\",\"lat: 31.50113<br>lon: -88.7037<br>REGISTRY_ID: 110044734419<br>PRIMARY_NAME: LILLIE PITTMAN, POULTRY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:48678<br>sitenumber: 25\",\"lat: 31.568222<br>lon: -91.373139<br>REGISTRY_ID: 110044637943<br>PRIMARY_NAME: JR. FOOD MART NUMBER 376<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25753<br>sitenumber: 26\",\"lat: 33.680556<br>lon: -88.758611<br>REGISTRY_ID: 110044636793<br>PRIMARY_NAME: GOLDEN TRIANGLE REGIONAL SOLID WASTE MANAGEMENT AUTHORITY, CLAY COUNTY WASTE TIR<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:35090<br>sitenumber: 27\",\"lat: 32.358789<br>lon: -90.827497<br>REGISTRY_ID: 110044621219<br>PRIMARY_NAME: UNITED PARCEL SERVICE CENTER<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:24571<br>sitenumber: 28\",\"lat: 30.284638<br>lon: -89.74534<br>REGISTRY_ID: 110015977415<br>PRIMARY_NAME: DAIQUIRIS OF SLIDELL INC<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG531506<br>sitenumber: 29\",\"lat: 31.9425<br>lon: -92.585833<br>REGISTRY_ID: 110039176138<br>PRIMARY_NAME: PLEASANT HILL/CROSSROADS WATER SYSTEMS INC.<br>NAICS: <br>SIC: 4941<br>PGM_SYS_ACRNMS: NPDES:LAG380105<br>sitenumber: 30\",\"lat: 32.258333<br>lon: -90.423333<br>REGISTRY_ID: 110027151659<br>PRIMARY_NAME: HINDS WOOD PRESERVING CO.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: SEMS:MSD981467376<br>sitenumber: 31\",\"lat: 32.34731<br>lon: -90.86103<br>REGISTRY_ID: 110044661489<br>PRIMARY_NAME: BIG 10 TIRES OF VICKSBURG<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34196<br>sitenumber: 32\",\"lat: 32.41703<br>lon: -90.3642<br>REGISTRY_ID: 110070561184<br>PRIMARY_NAME: JAMES OREY CONSTRUCTION LLC, JIMMY SMITH MINE<br>NAICS: 212321<br>SIC: 1442<br>PGM_SYS_ACRNMS: NPDES:MSR322797<br>sitenumber: 33\",\"lat: 30.0776<br>lon: -92.668726<br>REGISTRY_ID: 110008377522<br>PRIMARY_NAME: ROLLOVER SITE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD000757732<br>sitenumber: 34\",\"lat: 34.259103<br>lon: -88.742328<br>REGISTRY_ID: 110002107611<br>PRIMARY_NAME: BARBER PURE MILK CO<br>NAICS: <br>SIC: 0241<br>PGM_SYS_ACRNMS: MS-ENSITE:2007, TRIS:38801BRBRP2502S<br>sitenumber: 35\",\"lat: 31.048931<br>lon: -92.124317<br>REGISTRY_ID: 110070125348<br>PRIMARY_NAME: DOLLAR GENERAL 9629<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000099309<br>sitenumber: 36\",\"lat: 29.8<br>lon: -91.8<br>REGISTRY_ID: 110001267272<br>PRIMARY_NAME: U S DEPARTMENT OF ENERGY WEEKS ISLAND SPR SITE<br>NAICS: 424710<br>SIC: 5171<br>PGM_SYS_ACRNMS: FFDOCKET:LA9890032585, LA-TEMPO:8013, RCRAINFO:LA9890032585, SEMS:LA0981914492, TRIS:70560SDPRTLAHWY<br>sitenumber: 37\",\"lat: 32.28301<br>lon: -90.12865<br>REGISTRY_ID: 110044408058<br>PRIMARY_NAME: MAINTENANCE SHOP<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:27845<br>sitenumber: 38\",\"lat: 32.30903<br>lon: -90.07342<br>REGISTRY_ID: 110044595961<br>PRIMARY_NAME: HEAD INC, BATCH PLANT NUMBER ONE<br>NAICS: 327320<br>SIC: 1629, 3273<br>PGM_SYS_ACRNMS: MS-ENSITE:23116<br>sitenumber: 39\",\"lat: 32.769167<br>lon: -89.134444<br>REGISTRY_ID: 110002216897<br>PRIMARY_NAME: TOLBERT CHEVROLET OLDS BUICK PONTIAC INC<br>NAICS: <br>SIC: 5511<br>PGM_SYS_ACRNMS: MS-ENSITE:10386, RCRAINFO:MSD981919988<br>sitenumber: 40\",\"lat: 30.31326<br>lon: -89.94258<br>REGISTRY_ID: 110012314263<br>PRIMARY_NAME: J&S CHEVRON, LLC<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG531082<br>sitenumber: 41\",\"lat: 30.56766<br>lon: -90.15622<br>REGISTRY_ID: 110046312085<br>PRIMARY_NAME: SCOTT A ST ROMAIN DDS<br>NAICS: <br>SIC: 8021<br>PGM_SYS_ACRNMS: NPDES:LAG534064<br>sitenumber: 42\",\"lat: 29.92615<br>lon: -90.13138<br>REGISTRY_ID: 110014370028<br>PRIMARY_NAME: MUNICIPAL YACHT HARBOR<br>NAICS: 561599<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000048322<br>sitenumber: 43\",\"lat: 30.37551<br>lon: -93.2052<br>REGISTRY_ID: 110044242922<br>PRIMARY_NAME: ROBERT HOWARD ENTERPRISES, LLC<br>NAICS: <br>SIC: 7033<br>PGM_SYS_ACRNMS: NPDES:LAG533775<br>sitenumber: 44\",\"lat: 30.23555<br>lon: -92.04347<br>REGISTRY_ID: 110070210307<br>PRIMARY_NAME: ABF FREIGHT TERMINAL 98<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3600856759<br>sitenumber: 45\",\"lat: 33.072778<br>lon: -90.219469<br>REGISTRY_ID: 110044536678<br>PRIMARY_NAME: HARRY SPENCER, SPENCER GRAVEL PIT<br>NAICS: <br>SIC: 1442<br>PGM_SYS_ACRNMS: MS-ENSITE:6266<br>sitenumber: 46\",\"lat: 31.60175<br>lon: -90.129123<br>REGISTRY_ID: 110008502931<br>PRIMARY_NAME: MSARNG ORGANIZATIONAL MAINTENANCE SHOP 10<br>NAICS: <br>SIC: 4173, 9711<br>PGM_SYS_ACRNMS: MS-ENSITE:12058, MS-ENSITE:7165, RCRAINFO:MSD982157539<br>sitenumber: 47\",\"lat: 30.63855<br>lon: -89.2503<br>REGISTRY_ID: 110011385072<br>PRIMARY_NAME: DONALD W PATTON, DAIRY<br>NAICS: 112120<br>SIC: 0241<br>PGM_SYS_ACRNMS: MS-ENSITE:16610<br>sitenumber: 48\",\"lat: 30.563523<br>lon: -90.37342<br>REGISTRY_ID: 110017360443<br>PRIMARY_NAME: CAMP LIVING WATERS<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG541175<br>sitenumber: 49\",\"lat: 30.3804<br>lon: -91.0997<br>REGISTRY_ID: 110070126382<br>PRIMARY_NAME: AUTOZONE 4279<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000095208<br>sitenumber: 50\",\"lat: 30.28472<br>lon: -89.75821<br>REGISTRY_ID: 110067270027<br>PRIMARY_NAME: WALGREEN DRUG STORE 15570<br>NAICS: 424210<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000088674<br>sitenumber: 51\",\"lat: 33.421389<br>lon: -90.6445<br>REGISTRY_ID: 110008515473<br>PRIMARY_NAME: INDIANOLA POTW<br>NAICS: 221320<br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:13194, NPDES:MS0024619, NPDES:MSL024619<br>sitenumber: 52\",\"lat: 30.01142<br>lon: -90.01537<br>REGISTRY_ID: 110003353371<br>PRIMARY_NAME: PICHONS AUTOMOTIVE<br>NAICS: 811118<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000012864<br>sitenumber: 53\",\"lat: 33.658125<br>lon: -88.270397<br>REGISTRY_ID: 110044657261<br>PRIMARY_NAME: MIDWAY GROCERY STORE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34711<br>sitenumber: 54\",\"lat: 29.677346<br>lon: -91.227252<br>REGISTRY_ID: 110003313735<br>PRIMARY_NAME: CENTRAL BOAT RENTALS<br>NAICS: 336611<br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU004221, RCRAINFO:LAD985171974<br>sitenumber: 55\",\"lat: 32.837778<br>lon: -88.995556<br>REGISTRY_ID: 110070622147<br>PRIMARY_NAME: TENNESSEE VALLEY AUTHORITY, SANDTOWN 161-KV TRANSMISSION LINE<br>NAICS: <br>SIC: 4911<br>PGM_SYS_ACRNMS: NPDES:MSR108031<br>sitenumber: 56\",\"lat: 29.96053<br>lon: -90.19826<br>REGISTRY_ID: 110045415092<br>PRIMARY_NAME: CENTRAL ADMIXTURE PHARMACY SERVICES INC<br>NAICS: 325412<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000075275<br>sitenumber: 57\",\"lat: 32.496246<br>lon: -92.132935<br>REGISTRY_ID: 110003277515<br>PRIMARY_NAME: CRODA INKS CORP W MONROE SITE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD069731412<br>sitenumber: 58\",\"lat: 34.223264<br>lon: -88.685136<br>REGISTRY_ID: 110044493991<br>PRIMARY_NAME: TUPELO SCRAP<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:29909<br>sitenumber: 59\",\"lat: 31.675633<br>lon: -89.10925<br>REGISTRY_ID: 110044526527<br>PRIMARY_NAME: CIRCLE 3 STORE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32551<br>sitenumber: 60\",\"lat: 33.11732<br>lon: -89.05819<br>REGISTRY_ID: 110070556172<br>PRIMARY_NAME: JAKE'S RECYCLING NO. 1<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:236361<br>sitenumber: 61\",\"lat: 33.946667<br>lon: -90.767833<br>REGISTRY_ID: 110044677702<br>PRIMARY_NAME: DOUBLE QUICK NUMBER 71<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25542<br>sitenumber: 62\",\"lat: 30.49189<br>lon: -90.5333<br>REGISTRY_ID: 110016679263<br>PRIMARY_NAME: OAKWOOD APARTMENTS<br>NAICS: <br>SIC: 9999<br>PGM_SYS_ACRNMS: NPDES:LAG541162<br>sitenumber: 63\",\"lat: 31.52631<br>lon: -89.27478<br>REGISTRY_ID: 110038359834<br>PRIMARY_NAME: J J PRYOR CONTRACTORS INC, HOT MIX ASPHALT<br>NAICS: <br>SIC: 2951<br>PGM_SYS_ACRNMS: MS-ENSITE:11696<br>sitenumber: 64\",\"lat: 31.903606<br>lon: -89.014361<br>REGISTRY_ID: 110044626474<br>PRIMARY_NAME: COUNTRY CASH<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33321<br>sitenumber: 65\",\"lat: 32.21894<br>lon: -90.15483<br>REGISTRY_ID: 110044387115<br>PRIMARY_NAME: RICHLAND SHELL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:49536<br>sitenumber: 66\",\"lat: 33.73527<br>lon: -90.70648<br>REGISTRY_ID: 110038356551<br>PRIMARY_NAME: BOLIVAR HOMES<br>NAICS: <br>SIC: 6552<br>PGM_SYS_ACRNMS: MS-ENSITE:35267<br>sitenumber: 67\",\"lat: 31.16076<br>lon: -90.79407<br>REGISTRY_ID: 110044619883<br>PRIMARY_NAME: LIBERTY, TOWN OF<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:36252<br>sitenumber: 68\",\"lat: 33.465905<br>lon: -88.812884<br>REGISTRY_ID: 110060409240<br>PRIMARY_NAME: RESEARCH PARK PHASE III/CEBSITE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:12215<br>sitenumber: 69\",\"lat: 29.115556<br>lon: -89.070833<br>REGISTRY_ID: 110030442849<br>PRIMARY_NAME: TEXAS PETROLEUM INVESTMENT COMPANY<br>NAICS: <br>SIC: 1311<br>PGM_SYS_ACRNMS: NPDES:LAG33A481<br>sitenumber: 70\",\"lat: 31.933633<br>lon: -89.514467<br>REGISTRY_ID: 110044442939<br>PRIMARY_NAME: TANNER CONSTRUCTION COMPANY INC, BLAIR PIT<br>NAICS: <br>SIC: 1442<br>PGM_SYS_ACRNMS: MS-ENSITE:1385<br>sitenumber: 71\",\"lat: 30.32913<br>lon: -93.20021<br>REGISTRY_ID: 110046311816<br>PRIMARY_NAME: CITY SAVINGS BANK - MOSS BLUFF<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU007061<br>sitenumber: 72\",\"lat: 30.237022<br>lon: -93.310723<br>REGISTRY_ID: 110003364029<br>PRIMARY_NAME: CLM EQUIPMENT CO INC.<br>NAICS: <br>SIC: 7359<br>PGM_SYS_ACRNMS: NPDES:LAG750426, RCRAINFO:LAR000033530<br>sitenumber: 73\",\"lat: 30.479471<br>lon: -90.460826<br>REGISTRY_ID: 110070515111<br>PRIMARY_NAME: ULTA BEAUTY #373<br>NAICS: 446120<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101363<br>sitenumber: 74\",\"lat: 31.914103<br>lon: -91.241815<br>REGISTRY_ID: 110011157372<br>PRIMARY_NAME: TOWN OF ST. JOSEPH WWTP<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LA0043621<br>sitenumber: 75\",\"lat: 29.93888<br>lon: -90.06849<br>REGISTRY_ID: 110003313584<br>PRIMARY_NAME: RC REBUILDERS<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985171669<br>sitenumber: 76\",\"lat: 30.48288<br>lon: -90.56123<br>REGISTRY_ID: 110003263977<br>PRIMARY_NAME: LARRYS OUTBOARD SVC INC<br>NAICS: 811118<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LA0000930297<br>sitenumber: 77\",\"lat: 32.502802<br>lon: -92.020973<br>REGISTRY_ID: 110070371223<br>PRIMARY_NAME: NORTHEAST LOUISIANA DELTA AFRICAN HERITAGE MUSEUM<br>NAICS: <br>SIC: 8412<br>PGM_SYS_ACRNMS: NPDES:LAG533814<br>sitenumber: 78\",\"lat: 31.738253<br>lon: -90.011069<br>REGISTRY_ID: 110044432129<br>PRIMARY_NAME: SOUTHERN NATURAL GAS COMPANY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:27978<br>sitenumber: 79\",\"lat: 31.27807<br>lon: -92.49849<br>REGISTRY_ID: 110011178956<br>PRIMARY_NAME: WESLEY GUERINGER A & B<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG530605<br>sitenumber: 80\",\"lat: 30.38207<br>lon: -88.52816<br>REGISTRY_ID: 110002219340<br>PRIMARY_NAME: BOBS GARAGE<br>NAICS: <br>SIC: 7538<br>PGM_SYS_ACRNMS: MS-ENSITE:6419, RCRAINFO:MSD985980861<br>sitenumber: 81\",\"lat: 30.011617<br>lon: -90.004558<br>REGISTRY_ID: 110009927758<br>PRIMARY_NAME: PERSONAL TOUCH CAR GROOMING<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU003546<br>sitenumber: 82\",\"lat: 29.46422<br>lon: -90.31056<br>REGISTRY_ID: 110003321343<br>PRIMARY_NAME: LORRIS G TOWING CORP<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985190750<br>sitenumber: 83\",\"lat: 32.57374<br>lon: -92.60761<br>REGISTRY_ID: 110070569149<br>PRIMARY_NAME: ALPHA PHOENIX LLC - TALL TIMBERS MHP<br>NAICS: <br>SIC: 6515<br>PGM_SYS_ACRNMS: NPDES:LAG542269<br>sitenumber: 84\",\"lat: 29.93297<br>lon: -91.82969<br>REGISTRY_ID: 110009020530<br>PRIMARY_NAME: PORT OF IBERIA WWTP<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LA0092550<br>sitenumber: 85\",\"lat: 30.524744<br>lon: -90.43502<br>REGISTRY_ID: 110068475386<br>PRIMARY_NAME: LAMP RECYCLER OF LA<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MN-TEMPO:33096<br>sitenumber: 86\",\"lat: 34.694872<br>lon: -90.375731<br>REGISTRY_ID: 110044544650<br>PRIMARY_NAME: MIKES SELF SERVE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32140<br>sitenumber: 87\",\"lat: 33.49002<br>lon: -90.19745<br>REGISTRY_ID: 110044712451<br>PRIMARY_NAME: MICHAEL A. HADDON<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:43745<br>sitenumber: 88\",\"lat: 32.09871<br>lon: -89.79229<br>REGISTRY_ID: 110001146554<br>PRIMARY_NAME: JOHNS GAS PROCESSING PLANT<br>NAICS: 325188<br>SIC: 2819, 2911<br>PGM_SYS_ACRNMS: MS-ENSITE:12598, TRIS:39151JHNSGPOBOX<br>sitenumber: 89\",\"lat: 30.494897<br>lon: -92.427271<br>REGISTRY_ID: 110070120837<br>PRIMARY_NAME: O'REILLY AUTO PARTS 623<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000095638<br>sitenumber: 90\",\"lat: 32.383374<br>lon: -88.668856<br>REGISTRY_ID: 110002206531<br>PRIMARY_NAME: CHURCHILL TRUCK LINES INC<br>NAICS: <br>SIC: 4213<br>PGM_SYS_ACRNMS: MS-ENSITE:7200, RCRAINFO:MSD985974690<br>sitenumber: 91\",\"lat: 31.336995<br>lon: -89.392576<br>REGISTRY_ID: 110045352569<br>PRIMARY_NAME: LAMAR COUNTY SCHOOL DISTRICT, NEW ELEMENTARY SCHOOL<br>NAICS: 236220<br>SIC: 1542<br>PGM_SYS_ACRNMS: MS-ENSITE:56467<br>sitenumber: 92\",\"lat: 31.186578<br>lon: -93.291374<br>REGISTRY_ID: 110003283027<br>PRIMARY_NAME: LEESVILLE TRUCK CNTR INC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD113098909<br>sitenumber: 93\",\"lat: 30.324897<br>lon: -89.2532<br>REGISTRY_ID: 110070274526<br>PRIMARY_NAME: CRYSTAL SEAS SEAFOOD, LLC<br>NAICS: 311712<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:337386411<br>sitenumber: 94\",\"lat: 30.588333<br>lon: -92.230555<br>REGISTRY_ID: 110058326404<br>PRIMARY_NAME: WHITAKER<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: EIS:16118811<br>sitenumber: 95\",\"lat: 30.1294<br>lon: -92.1351<br>REGISTRY_ID: 110041482696<br>PRIMARY_NAME: FREEBIRD FIELD<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: EIS:11587811<br>sitenumber: 96\",\"lat: 32.25391<br>lon: -90.24681<br>REGISTRY_ID: 110044561747<br>PRIMARY_NAME: MAJIK MARKET NUMBER 04426<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33222<br>sitenumber: 97\",\"lat: 32.9876<br>lon: -93.15531<br>REGISTRY_ID: 110013392667<br>PRIMARY_NAME: F M TAYLOR 13 #3 FACILITY<br>NAICS: 211111, 211120<br>SIC: 1311<br>PGM_SYS_ACRNMS: AIR:LA0000002202700194, AIRS/AFS:2202700194, LA-TEMPO:90928<br>sitenumber: 98\",\"lat: 32.30246<br>lon: -90.32275<br>REGISTRY_ID: 110044518082<br>PRIMARY_NAME: WORD AND WORSHIP CHURCH, WORD AND WORSHIP CHURCH MINE<br>NAICS: <br>SIC: 1442, 1542<br>PGM_SYS_ACRNMS: MS-ENSITE:55533, MS-ENSITE:56608<br>sitenumber: 99\",\"lat: 30.431277<br>lon: -91.115937<br>REGISTRY_ID: 110071394477<br>PRIMARY_NAME: ORION LABORATORIES<br>NAICS: 621511<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000102538<br>sitenumber: 100\",\"lat: 30.469426<br>lon: -91.137687<br>REGISTRY_ID: 110070311502<br>PRIMARY_NAME: DELTA MACHINE & IRONWORKS, LLC<br>NAICS: 332322<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:343419339<br>sitenumber: 101\",\"lat: 32.245825<br>lon: -90.131006<br>REGISTRY_ID: 110044437758<br>PRIMARY_NAME: SMITH MOBILE HOME PARK<br>NAICS: <br>SIC: 6515<br>PGM_SYS_ACRNMS: MS-ENSITE:13767<br>sitenumber: 102\",\"lat: 32.52793<br>lon: -92.5998<br>REGISTRY_ID: 110070335432<br>PRIMARY_NAME: XERIUM TECHNOLOGIES, INC.<br>NAICS: 333243<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:341497014<br>sitenumber: 103\",\"lat: 29.710659<br>lon: -91.081364<br>REGISTRY_ID: 110070132669<br>PRIMARY_NAME: DANOS LLC - AMELIA FABRICATION FACILITY<br>NAICS: 213112, 332312<br>SIC: 3441<br>PGM_SYS_ACRNMS: AIR:LA0000002200700066<br>sitenumber: 104\",\"lat: 32.390792<br>lon: -90.857065<br>REGISTRY_ID: 110044635696<br>PRIMARY_NAME: PITMAN GROCERY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:52634<br>sitenumber: 105\",\"lat: 29.478262<br>lon: -90.329763<br>REGISTRY_ID: 110055478772<br>PRIMARY_NAME: MELACO SISTERS HARDWARE & SUPPLIES<br>NAICS: <br>SIC: 9999<br>PGM_SYS_ACRNMS: NPDES:LAG534449<br>sitenumber: 106\",\"lat: 34.99334<br>lon: -89.59206<br>REGISTRY_ID: 110070594990<br>PRIMARY_NAME: CORELLE BRANDS LLC<br>NAICS: 326199<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:MSR000108548<br>sitenumber: 107\",\"lat: 29.99401<br>lon: -91.83736<br>REGISTRY_ID: 110003356537<br>PRIMARY_NAME: GILES AUTOMOTIVE SVC CTR<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000018176<br>sitenumber: 108\",\"lat: 30.00494<br>lon: -90.26236<br>REGISTRY_ID: 110003314921<br>PRIMARY_NAME: JOSEPH FERTITTA CONTRACTING<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985173574<br>sitenumber: 109\",\"lat: 32.81<br>lon: -91.186667<br>REGISTRY_ID: 110069424849<br>PRIMARY_NAME: TERRAL RIVERSERVICE INC.- LAKE PROVIDENCE FACILITY<br>NAICS: <br>SIC: 4499<br>PGM_SYS_ACRNMS: NPDES:LAG030069<br>sitenumber: 110\",\"lat: 30.297453<br>lon: -91.24623<br>REGISTRY_ID: 110009015145<br>PRIMARY_NAME: MAGNOLIA WATER UTILITY OPERATING CO., LLC - IBERVILLE TRACE<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG540073<br>sitenumber: 111\",\"lat: 32.24228<br>lon: -90.923153<br>REGISTRY_ID: 110009416444<br>PRIMARY_NAME: VICKSBURG ENG & MFG SOUTH<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:MSR000004739<br>sitenumber: 112\",\"lat: 29.408314<br>lon: -90.700103<br>REGISTRY_ID: 110011162598<br>PRIMARY_NAME: D'LUKE SEAFOOD, INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU000031<br>sitenumber: 113\",\"lat: 32.756592<br>lon: -89.16735<br>REGISTRY_ID: 110044405202<br>PRIMARY_NAME: THAGGARD GROCERY NUMBER 100563<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:29358<br>sitenumber: 114\",\"lat: 30.38628<br>lon: -89.08665<br>REGISTRY_ID: 110002222309<br>PRIMARY_NAME: PERFORMANCE CYCLE<br>NAICS: <br>SIC: 5571<br>PGM_SYS_ACRNMS: MS-ENSITE:4463, RCRAINFO:MSD985971290<br>sitenumber: 115\",\"lat: 29.881828<br>lon: -91.204081<br>REGISTRY_ID: 110070314448<br>PRIMARY_NAME: ARGOSY BOAT COMPANY, LLC<br>NAICS: 336612<br>SIC: 3732<br>PGM_SYS_ACRNMS: OSHA-OIS:314772005<br>sitenumber: 116\",\"lat: 29.573549<br>lon: -90.379526<br>REGISTRY_ID: 110014335433<br>PRIMARY_NAME: BAYOU CIVIC CLUB, INC.<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG531375<br>sitenumber: 117\",\"lat: 34.852255<br>lon: -88.352973<br>REGISTRY_ID: 110012305326<br>PRIMARY_NAME: CUTSHALL FUNERAL HOME<br>NAICS: <br>SIC: 7261<br>PGM_SYS_ACRNMS: MS-ENSITE:16970<br>sitenumber: 118\",\"lat: 30.386708<br>lon: -89.06784<br>REGISTRY_ID: 110002222407<br>PRIMARY_NAME: KILGORES PAINT AND BODY<br>NAICS: <br>SIC: 7532<br>PGM_SYS_ACRNMS: MS-ENSITE:4421, RCRAINFO:MSD981754245<br>sitenumber: 119\",\"lat: 30.416012<br>lon: -91.08767<br>REGISTRY_ID: 110003323252<br>PRIMARY_NAME: KEANS THE CLEANER INC STORE NO 08<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985194414<br>sitenumber: 120\",\"lat: 34.97124<br>lon: -90.04664<br>REGISTRY_ID: 110044544749<br>PRIMARY_NAME: TEXAS GAS TRANSMISSION LLC, WOODSHIRE PIPELINE REPLACEMENT PROJECT<br>NAICS: 486210<br>SIC: 4922<br>PGM_SYS_ACRNMS: MS-ENSITE:22849<br>sitenumber: 121\",\"lat: 32.17445<br>lon: -90.583906<br>REGISTRY_ID: 110010825143<br>PRIMARY_NAME: HINDS COUNTY HUMAN RESOURCE AGENCY<br>NAICS: 624410<br>SIC: 8351<br>PGM_SYS_ACRNMS: MS-ENSITE:14101, NPDES:MS0046051<br>sitenumber: 122\",\"lat: 30.21538<br>lon: -93.32334<br>REGISTRY_ID: 110001254561<br>PRIMARY_NAME: ENCLEAN INC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD982558223<br>sitenumber: 123\",\"lat: 32.453153<br>lon: -88.808394<br>REGISTRY_ID: 110044643963<br>PRIMARY_NAME: C A BROWN GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:24794<br>sitenumber: 124\",\"lat: 32.524792<br>lon: -93.683434<br>REGISTRY_ID: 110070256334<br>PRIMARY_NAME: LOTT OIL COMPANY INC.- BOSSIER CITY BULK PLANT<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAR05Q014<br>sitenumber: 125\",\"lat: 31.20395<br>lon: -90.43033<br>REGISTRY_ID: 110044716616<br>PRIMARY_NAME: DOUBLE D COMPOSTING<br>NAICS: <br>SIC: 4953<br>PGM_SYS_ACRNMS: MS-ENSITE:9787<br>sitenumber: 126\",\"lat: 31.645567<br>lon: -89.581733<br>REGISTRY_ID: 110044554130<br>PRIMARY_NAME: TANNER CONSTRUCTION COMPANY INC, MOONEY PIT<br>NAICS: <br>SIC: 1442<br>PGM_SYS_ACRNMS: MS-ENSITE:19622<br>sitenumber: 127\",\"lat: 32.484167<br>lon: -89.870833<br>REGISTRY_ID: 110044578828<br>PRIMARY_NAME: PISGAH HIGH SCHOOL<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:31874<br>sitenumber: 128\",\"lat: 30.43406<br>lon: -88.87251<br>REGISTRY_ID: 110044596577<br>PRIMARY_NAME: TRAVIS L PAIGE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:51283<br>sitenumber: 129\",\"lat: 30.37031<br>lon: -91.07327<br>REGISTRY_ID: 110003355271<br>PRIMARY_NAME: SIEGEN CLEANERS<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000015842<br>sitenumber: 130\",\"lat: 32.709372<br>lon: -88.798575<br>REGISTRY_ID: 110044501802<br>PRIMARY_NAME: FORMER RADAR SITE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:30497<br>sitenumber: 131\",\"lat: 32.83302<br>lon: -91.87761<br>REGISTRY_ID: 110067190266<br>PRIMARY_NAME: WEST HILL RANCH GROUP LLC - MEX 3410<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: NPDES:LAG535219<br>sitenumber: 132\",\"lat: 30.084244<br>lon: -91.939872<br>REGISTRY_ID: 110038332426<br>PRIMARY_NAME: BAKER HUGHES OILFIELD OPERATIO<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU006146<br>sitenumber: 133\",\"lat: 30.407392<br>lon: -90.129163<br>REGISTRY_ID: 110045513529<br>PRIMARY_NAME: MILDA WOODS CONDO ASSOCIATION<br>NAICS: <br>SIC: 6514<br>PGM_SYS_ACRNMS: NPDES:LAG533999<br>sitenumber: 134\",\"lat: 30.36711<br>lon: -89.09453<br>REGISTRY_ID: 110002221667<br>PRIMARY_NAME: ASTRO LINCOLN MERCURY<br>NAICS: <br>SIC: 5511<br>PGM_SYS_ACRNMS: MS-ENSITE:4901, RCRAINFO:MSD985968221<br>sitenumber: 135\",\"lat: 29.63946<br>lon: -90.53874<br>REGISTRY_ID: 110070125502<br>PRIMARY_NAME: DOLLAR GENERAL 9483<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000093195<br>sitenumber: 136\",\"lat: 30.70072<br>lon: -91.43971<br>REGISTRY_ID: 110069207511<br>PRIMARY_NAME: PROGRESSIVE TRACTOR & IMPLEMENT CO., LLC<br>NAICS: <br>SIC: 7699<br>PGM_SYS_ACRNMS: NPDES:LAG480999<br>sitenumber: 137\",\"lat: 32.5159<br>lon: -90.3512<br>REGISTRY_ID: 110041503432<br>PRIMARY_NAME: ROOT HOG<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: EIS:11134411<br>sitenumber: 138\",\"lat: 31.859921<br>lon: -93.713656<br>REGISTRY_ID: 110009929033<br>PRIMARY_NAME: RASCOE DAIRY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU003153<br>sitenumber: 139\",\"lat: 30.26054<br>lon: -90.90419<br>REGISTRY_ID: 110040012152<br>PRIMARY_NAME: COBB'S MHP, LLC.<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG541198<br>sitenumber: 140\",\"lat: 29.871621<br>lon: -92.332598<br>REGISTRY_ID: 110001322140<br>PRIMARY_NAME: BRIDGELINE HOLDINGS LP - COW ISLAND STATION<br>NAICS: 332999<br>SIC: 4922<br>PGM_SYS_ACRNMS: AIR:LA0000002211300044, AIRS/AFS:2211300044, LA-TEMPO:24331, RCRAINFO:LA0000107938<br>sitenumber: 141\",\"lat: 32.29247<br>lon: -90.20097<br>REGISTRY_ID: 110044585749<br>PRIMARY_NAME: JATRAN MAINTENANCE FACILILTY AND TERRY ROAD RECYCLING CENTER<br>NAICS: <br>SIC: 4111, 5093<br>PGM_SYS_ACRNMS: MS-ENSITE:3292<br>sitenumber: 142\",\"lat: 32.52898<br>lon: -93.77251<br>REGISTRY_ID: 110055633658<br>PRIMARY_NAME: PIPES AUTO & TRUCK INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAR05P661<br>sitenumber: 143\",\"lat: 30.34722<br>lon: -88.51331<br>REGISTRY_ID: 110064135056<br>PRIMARY_NAME: VT HALTER MARINE, PASCAGOULA OPERATIONS<br>NAICS: 333132, 336611<br>SIC: 1623, 3731<br>PGM_SYS_ACRNMS: AIR:MS0000002805900008, AIRS/AFS:2805900008, MS-ENSITE:6292, NPDES:MSR108165, TRIS:39581HLTRM5110W<br>sitenumber: 144\",\"lat: 30.44761<br>lon: -90.08201<br>REGISTRY_ID: 110071062756<br>PRIMARY_NAME: SALONCENTRIC - 1503<br>NAICS: 446120<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000102229<br>sitenumber: 145\",\"lat: 30.237278<br>lon: -93.200806<br>REGISTRY_ID: 110057003488<br>PRIMARY_NAME: BFH12-12 S FRY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:153173<br>sitenumber: 146\",\"lat: 33.97318<br>lon: -88.462421<br>REGISTRY_ID: 110044453702<br>PRIMARY_NAME: 1205 COLBURN STREET<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:38919<br>sitenumber: 147\",\"lat: 30.40812<br>lon: -91.02499<br>REGISTRY_ID: 110070631149<br>PRIMARY_NAME: OLOL PHYSICIANS GROUP WOODLAWN<br>NAICS: 622110<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101940<br>sitenumber: 148\",\"lat: 30.47663<br>lon: -91.11746<br>REGISTRY_ID: 110060455608<br>PRIMARY_NAME: LOT B, VICTORIA<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:27241<br>sitenumber: 149\",\"lat: 30.196161<br>lon: -93.272639<br>REGISTRY_ID: 110070594602<br>PRIMARY_NAME: LADOTD I-210 PRIEN LAKE BRIDGE<br>NAICS: 237310<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101846<br>sitenumber: 150\",\"lat: 31.433431<br>lon: -92.465454<br>REGISTRY_ID: 110020832651<br>PRIMARY_NAME: MARTIN ACRES SUBDIVISION<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG560178<br>sitenumber: 151\",\"lat: 32.883361<br>lon: -90.420639<br>REGISTRY_ID: 110044470952<br>PRIMARY_NAME: HASKELL COMPANY, THE, FEDERAL CORRECTIONAL INSTITUTION, MEDIUM SECURITY FACILITY<br>NAICS: <br>SIC: 9223<br>PGM_SYS_ACRNMS: MS-ENSITE:15850<br>sitenumber: 152\",\"lat: 32.32891<br>lon: -90.11636<br>REGISTRY_ID: 110044691394<br>PRIMARY_NAME: RED ARROW CAR WASH<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:26968<br>sitenumber: 153\",\"lat: 34.24179<br>lon: -88.7166<br>REGISTRY_ID: 110044409075<br>PRIMARY_NAME: ROBERT A. RAY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:40598<br>sitenumber: 154\",\"lat: 32.46053<br>lon: -93.54753<br>REGISTRY_ID: 110014334871<br>PRIMARY_NAME: BRAMMER ENGINEERING<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU003974<br>sitenumber: 155\",\"lat: 32.283049<br>lon: -93.283351<br>REGISTRY_ID: 110070101475<br>PRIMARY_NAME: BURNS FOREST 16 002 ALT<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3000020679<br>sitenumber: 156\",\"lat: 32.1241<br>lon: -92.0577<br>REGISTRY_ID: 110039691900<br>PRIMARY_NAME: E. COLUMBIA SD #1<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG570172<br>sitenumber: 157\",\"lat: 32.375942<br>lon: -93.9983<br>REGISTRY_ID: 110008386834<br>PRIMARY_NAME: B & J AUTOMOTIVE<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD981522428<br>sitenumber: 158\",\"lat: 34.94853<br>lon: -89.8109<br>REGISTRY_ID: 110044519937<br>PRIMARY_NAME: FORGING DIE INC<br>NAICS: <br>SIC: 3462, 3544<br>PGM_SYS_ACRNMS: MS-ENSITE:5660, OSHA-OIS:1681212<br>sitenumber: 159\",\"lat: 34.988515<br>lon: -90.020297<br>REGISTRY_ID: 110022885911<br>PRIMARY_NAME: SANDYS AUTO AND MACHINE<br>NAICS: 441310<br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:18858, RCRAINFO:MSR000101519<br>sitenumber: 160\",\"lat: 30.595118<br>lon: -90.398292<br>REGISTRY_ID: 110037491577<br>PRIMARY_NAME: LORANGER PIT<br>NAICS: <br>SIC: 1499<br>PGM_SYS_ACRNMS: NPDES:LAG490084<br>sitenumber: 161\",\"lat: 30.302351<br>lon: -89.836625<br>REGISTRY_ID: 110037491924<br>PRIMARY_NAME: CHILL RITE<br>NAICS: <br>SIC: 3556<br>PGM_SYS_ACRNMS: NPDES:LAG532842, NPDES:LAU005910<br>sitenumber: 162\",\"lat: 34.35083<br>lon: -89.02541<br>REGISTRY_ID: 110022889169<br>PRIMARY_NAME: COBB ENVIRONMENTAL AND TECHNICAL SERVICES INC, ECRU QUICK STOP<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:20338<br>sitenumber: 163\",\"lat: 34.269501<br>lon: -88.575025<br>REGISTRY_ID: 110008522198<br>PRIMARY_NAME: CHILDREN OF DESTINY<br>NAICS: <br>SIC: 8351<br>PGM_SYS_ACRNMS: MS-ENSITE:14561<br>sitenumber: 164\",\"lat: 31.273528<br>lon: -89.389056<br>REGISTRY_ID: 110022905855<br>PRIMARY_NAME: CARRIAGE UTILITIES LLC, CARRIAGE PARK SUBDIVISION<br>NAICS: <br>SIC: 6552<br>PGM_SYS_ACRNMS: MS-ENSITE:23140<br>sitenumber: 165\",\"lat: 30.31221<br>lon: -89.82187<br>REGISTRY_ID: 110037490854<br>PRIMARY_NAME: BLUE BELL CREAMERIES, L.P.<br>NAICS: <br>SIC: 2024<br>PGM_SYS_ACRNMS: NPDES:LAG532783, NPDES:LAU005897<br>sitenumber: 166\",\"lat: 30.4638<br>lon: -92.4894<br>REGISTRY_ID: 110009920372<br>PRIMARY_NAME: FLORIDA GAS TRANSMISSION CO C/S #7<br>NAICS: 486210<br>SIC: 4922<br>PGM_SYS_ACRNMS: E-GGRT:1002824, EIS:7364911, LA-TEMPO:3599, NPDES:LA0109134<br>sitenumber: 167\",\"lat: 32.473211<br>lon: -89.66954<br>REGISTRY_ID: 110044589683<br>PRIMARY_NAME: THAMES CONSTRUCTION CO<br>NAICS: <br>SIC: 3011<br>PGM_SYS_ACRNMS: MS-ENSITE:22584<br>sitenumber: 168\",\"lat: 30.553835<br>lon: -91.038725<br>REGISTRY_ID: 110016684916<br>PRIMARY_NAME: CENTRAL PROPERTY MANAGEMENT- CENTRAL CITY WEST SHOPPING CENTER<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG530121<br>sitenumber: 169\",\"lat: 34.234653<br>lon: -88.749811<br>REGISTRY_ID: 110044535642<br>PRIMARY_NAME: KENS NORTH AUBURN GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32082<br>sitenumber: 170\",\"lat: 29.97498<br>lon: -90.16064<br>REGISTRY_ID: 110003323671<br>PRIMARY_NAME: EXXON CO USA 50974<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985195007<br>sitenumber: 171\",\"lat: 29.650483<br>lon: -90.693287<br>REGISTRY_ID: 110006499164<br>PRIMARY_NAME: TITAN SPEC LTD<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000040717<br>sitenumber: 172\",\"lat: 30.54096<br>lon: -91.02818<br>REGISTRY_ID: 110012218019<br>PRIMARY_NAME: WALMART SUPERCENTER #3288<br>NAICS: 452311<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000048694<br>sitenumber: 173\",\"lat: 30.313588<br>lon: -90.931987<br>REGISTRY_ID: 110070926098<br>PRIMARY_NAME: ASCENSION PARISH SCHOOL BOARD - PRAIRIEVILLE HIGH & PRIMARY SCHOOLS<br>NAICS: <br>SIC: 8211<br>PGM_SYS_ACRNMS: NPDES:LAG570649<br>sitenumber: 174\",\"lat: 29.64802<br>lon: -90.73292<br>REGISTRY_ID: 110031469051<br>PRIMARY_NAME: ALLAN CO 88 #1 PRODUCTION FACILITY - NORTH HOUMA FIELD<br>NAICS: 211111<br>SIC: 1311<br>PGM_SYS_ACRNMS: AIR:LA0000002210900388, AIRS/AFS:2210900388<br>sitenumber: 175\",\"lat: 30.647494<br>lon: -91.145844<br>REGISTRY_ID: 110020742295<br>PRIMARY_NAME: DOLLAR GENERAL 3147<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000056895<br>sitenumber: 176\",\"lat: 29.96366<br>lon: -90.06018<br>REGISTRY_ID: 110020510838<br>PRIMARY_NAME: SEALE APT<br>NAICS: <br>SIC: 6513<br>PGM_SYS_ACRNMS: NCDB:C06#LB-02-JH53, NCDB:I06#2002060598002 1<br>sitenumber: 177\",\"lat: 29.122243<br>lon: -90.196405<br>REGISTRY_ID: 110017222469<br>PRIMARY_NAME: SEPCO-FOURCHON TERMINAL C-PORT II<br>NAICS: 211120<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000054197<br>sitenumber: 178\",\"lat: 32.546334<br>lon: -90.317629<br>REGISTRY_ID: 110017723613<br>PRIMARY_NAME: MADISON COUNTY SCHOOL DISTRICT<br>NAICS: 611110<br>SIC: <br>PGM_SYS_ACRNMS: ICIS:6386833<br>sitenumber: 179\",\"lat: 32.655463<br>lon: -92.650516<br>REGISTRY_ID: 110028274070<br>PRIMARY_NAME: FRANKS FAMILY 7 LLC - HILLY JUNCTION MHP<br>NAICS: <br>SIC: 6515<br>PGM_SYS_ACRNMS: NPDES:LAG541518<br>sitenumber: 180\",\"lat: 30.21961<br>lon: -91.31677<br>REGISTRY_ID: 110058900550<br>PRIMARY_NAME: JACK MILLERS LANDING LLC<br>NAICS: 447110<br>SIC: 5541<br>PGM_SYS_ACRNMS: AIR:LA0000002204700152, AIRS/AFS:2204700152<br>sitenumber: 181\",\"lat: 34.487148<br>lon: -89.002131<br>REGISTRY_ID: 110044522353<br>PRIMARY_NAME: BANKHEAD SERVICE STATION<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33028, MS-ENSITE:33046<br>sitenumber: 182\",\"lat: 33.801672<br>lon: -89.368467<br>REGISTRY_ID: 110044509859<br>PRIMARY_NAME: EASLEY FARMS<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:30584<br>sitenumber: 183\",\"lat: 32.51582<br>lon: -90.07616<br>REGISTRY_ID: 110044522987<br>PRIMARY_NAME: BRADSHAW CROSSING SUBDIVISION<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:17979<br>sitenumber: 184\",\"lat: 29.96762<br>lon: -90.08146<br>REGISTRY_ID: 110003261096<br>PRIMARY_NAME: RICHARDS DISPOSAL INC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LA0000453415<br>sitenumber: 185\",\"lat: 30.066237<br>lon: -91.028594<br>REGISTRY_ID: 110060271441<br>PRIMARY_NAME: BECK DIRT PIT<br>NAICS: <br>SIC: 1442<br>PGM_SYS_ACRNMS: NPDES:LAG490149<br>sitenumber: 186\",\"lat: 34.27397<br>lon: -88.41244<br>REGISTRY_ID: 110044655762<br>PRIMARY_NAME: FULTON BP AMOCO<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:24868<br>sitenumber: 187\",\"lat: 30.261862<br>lon: -90.928432<br>REGISTRY_ID: 110013669832<br>PRIMARY_NAME: WASTEWATER TREATMENT UTILITIES<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU003917<br>sitenumber: 188\",\"lat: 32.609722<br>lon: -90.052889<br>REGISTRY_ID: 110002107764<br>PRIMARY_NAME: PECO FOODS OF MISSISSIPPI INC .<br>NAICS: 311119, 311615<br>SIC: 2015, 2099<br>PGM_SYS_ACRNMS: EIS:7185011, MS-ENSITE:16443, NPDES:MSP092339, OSHA-OIS:339526097, OSHA-OIS:339571234, OSHA-OIS:340838655, OSHA-OIS:341088474, TRIS:39046MCCRT200FE<br>sitenumber: 189\",\"lat: 30.8439<br>lon: -90.0443<br>REGISTRY_ID: 110007044215<br>PRIMARY_NAME: CHOCTAW ROAD LANDFILL<br>NAICS: 562212, 562213<br>SIC: 4953<br>PGM_SYS_ACRNMS: AIR:LA0000002211700010, AIRS/AFS:2211700010, E-GGRT:1010378, EIS:5356911, LA-TEMPO:17132, NPDES:LA0068101<br>sitenumber: 190\",\"lat: 30.077005<br>lon: -90.564384<br>REGISTRY_ID: 110070120690<br>PRIMARY_NAME: DOLLAR GENERAL #6723<br>NAICS: 452990<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000099333<br>sitenumber: 191\",\"lat: 30.527<br>lon: -91.1612<br>REGISTRY_ID: 110003265494<br>PRIMARY_NAME: USARC MARVIN J ROBERTS<br>NAICS: 811198<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LA7210400001<br>sitenumber: 192\",\"lat: 30.4702<br>lon: -90.11385<br>REGISTRY_ID: 110003319007<br>PRIMARY_NAME: COVINGTON SURGERY CNTR<br>NAICS: 621498<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985187053<br>sitenumber: 193\",\"lat: 32.356242<br>lon: -88.707483<br>REGISTRY_ID: 110044580138<br>PRIMARY_NAME: BUCHANAN ELECTRIC<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32394<br>sitenumber: 194\",\"lat: 30.56013<br>lon: -89.15982<br>REGISTRY_ID: 110044410081<br>PRIMARY_NAME: ROBERT HUNDL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:41123<br>sitenumber: 195\",\"lat: 32.33288<br>lon: -90.18698<br>REGISTRY_ID: 110044470051<br>PRIMARY_NAME: SPRING AIR MATTRESS COMPANY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:30243<br>sitenumber: 196\",\"lat: 32.255607<br>lon: -93.292713<br>REGISTRY_ID: 110070101343<br>PRIMARY_NAME: KAUFFMAN SWD 001<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:3000011384<br>sitenumber: 197\",\"lat: 33.496<br>lon: -89.908917<br>REGISTRY_ID: 110044643543<br>PRIMARY_NAME: PETE MOORES STATION<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34645<br>sitenumber: 198\",\"lat: 30.21105<br>lon: -93.32552<br>REGISTRY_ID: 110013840754<br>PRIMARY_NAME: SHELL PIPELINE CO LP - SULPHUR STATION<br>NAICS: 486110<br>SIC: <br>PGM_SYS_ACRNMS: EIS:6397311<br>sitenumber: 199\",\"lat: 34.87799<br>lon: -88.44039<br>REGISTRY_ID: 110044399111<br>PRIMARY_NAME: PARADE BEAR MART<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:27161<br>sitenumber: 200\",\"lat: 29.765<br>lon: -92.845278<br>REGISTRY_ID: 110030445935<br>PRIMARY_NAME: HILCORP ENERGY CO.- GRAND CHENIERE FIELD FACILITY- GRAND CHENIERE FIELD<br>NAICS: <br>SIC: 1311<br>PGM_SYS_ACRNMS: NPDES:LAG33A008<br>sitenumber: 201\",\"lat: 30.501675<br>lon: -89.129182<br>REGISTRY_ID: 110007645691<br>PRIMARY_NAME: TUBBS MARINE REPAIR<br>NAICS: <br>SIC: 3732<br>PGM_SYS_ACRNMS: MS-ENSITE:3116, RCRAINFO:MS0000644138<br>sitenumber: 202\",\"lat: 30.436775<br>lon: -88.620528<br>REGISTRY_ID: 110008518247<br>PRIMARY_NAME: MDOT, INTERSTATE 10, REST AREA, JACKSON<br>NAICS: <br>SIC: 4789<br>PGM_SYS_ACRNMS: MS-ENSITE:13860<br>sitenumber: 203\",\"lat: 32.790688<br>lon: -93.05459<br>REGISTRY_ID: 110011407478<br>PRIMARY_NAME: CLAIRBORNE PARISH SCHOOL BOARD<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:38588, NCDB:D06#VI-310C-T, NCDB:I06#19870113R6003 1, NCDB:I06#19880728R6002 1<br>sitenumber: 204\",\"lat: 29.850204<br>lon: -91.066767<br>REGISTRY_ID: 110013404100<br>PRIMARY_NAME: CHAPPARAL ENERGY INC<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU003858<br>sitenumber: 205\",\"lat: 34.251978<br>lon: -88.719988<br>REGISTRY_ID: 110044545506<br>PRIMARY_NAME: PUMP  SAVE NUMBER 745<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32165<br>sitenumber: 206\",\"lat: 34.542347<br>lon: -88.909964<br>REGISTRY_ID: 110044522424<br>PRIMARY_NAME: OLE COUNTRY STORE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33029<br>sitenumber: 207\",\"lat: 33.516463<br>lon: -88.386262<br>REGISTRY_ID: 110044603907<br>PRIMARY_NAME: HOLLIS ROOFING<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33717<br>sitenumber: 208\",\"lat: 31.346747<br>lon: -89.262351<br>REGISTRY_ID: 110002325564<br>PRIMARY_NAME: INLAND PAPERBOARD AND PACKAGING INC<br>NAICS: <br>SIC: 2653<br>PGM_SYS_ACRNMS: MS-ENSITE:5642, NCDB:I04#200005034002  1<br>sitenumber: 209\",\"lat: 29.906408<br>lon: -90.055349<br>REGISTRY_ID: 110008391114<br>PRIMARY_NAME: EDS AUTO SVC<br>NAICS: 811111<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985201391<br>sitenumber: 210\",\"lat: 29.60717<br>lon: -90.74074<br>REGISTRY_ID: 110003310284<br>PRIMARY_NAME: BRUNETS AUTO & DIESEL SVC<br>NAICS: 811111<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD982550428<br>sitenumber: 211\",\"lat: 30.39764<br>lon: -88.68977<br>REGISTRY_ID: 110044405131<br>PRIMARY_NAME: OCEAN SPRINGS, CITY OF, UTILITY IMPROVEMENTS<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:38749<br>sitenumber: 212\",\"lat: 29.979544<br>lon: -90.279528<br>REGISTRY_ID: 110003301230<br>PRIMARY_NAME: US RENTALS<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD981612724<br>sitenumber: 213\",\"lat: 29.87491<br>lon: -90.09942<br>REGISTRY_ID: 110067269967<br>PRIMARY_NAME: SAVE-A-LOT #5726<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000088617<br>sitenumber: 214\",\"lat: 31.77117<br>lon: -89.172914<br>REGISTRY_ID: 110038354009<br>PRIMARY_NAME: CBR MACHINISTS INC<br>NAICS: 331221, 332710<br>SIC: 3312, 3599<br>PGM_SYS_ACRNMS: MS-ENSITE:6695, NPDES:MSR000053, OSHA-OIS:340239474<br>sitenumber: 215\",\"lat: 29.75957<br>lon: -93.13243<br>REGISTRY_ID: 110012312513<br>PRIMARY_NAME: CARTER-LANGHAM, INC.<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU009509<br>sitenumber: 216\",\"lat: 31.908467<br>lon: -88.713233<br>REGISTRY_ID: 110016788948<br>PRIMARY_NAME: DUNN ROADBUILDERS LLC, HAYES PIT<br>NAICS: <br>SIC: 1442<br>PGM_SYS_ACRNMS: MS-ENSITE:15949, MS-ENSITE:18468, NPDES:MSR320971<br>sitenumber: 217\",\"lat: 30.518167<br>lon: -89.667167<br>REGISTRY_ID: 110044636891<br>PRIMARY_NAME: PPM CONSULTANTS INC, KEITHS SUPERSTORE NUMBER 193<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25242<br>sitenumber: 218\",\"lat: 30.32496<br>lon: -90.98078<br>REGISTRY_ID: 110058890543<br>PRIMARY_NAME: CAPITOL CONCRETE PRODUCTS LLC<br>NAICS: 327124, 327331<br>SIC: 3272<br>PGM_SYS_ACRNMS: AIR:LA0000002200500103, AIRS/AFS:2200500103, OSHA-OIS:340711191, OSHA-OIS:340748631<br>sitenumber: 219\",\"lat: 31.3576<br>lon: -91.3954<br>REGISTRY_ID: 110060409204<br>PRIMARY_NAME: PLANTATION OAKS SANITARY LANDFILL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: LMOP:1966<br>sitenumber: 220\",\"lat: 32.457711<br>lon: -89.274486<br>REGISTRY_ID: 110044686364<br>PRIMARY_NAME: GLADYS VANCE GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:33818<br>sitenumber: 221\",\"lat: 33.07488<br>lon: -89.85784<br>REGISTRY_ID: 110011887958<br>PRIMARY_NAME: DURANT HOSPITAL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NCDB:I04#19981015MS002 1<br>sitenumber: 222\",\"lat: 32.532997<br>lon: -93.762294<br>REGISTRY_ID: 110003295960<br>PRIMARY_NAME: SEPCO INDUSTIRES<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD981587975<br>sitenumber: 223\",\"lat: 31.898137<br>lon: -93.119048<br>REGISTRY_ID: 110028233025<br>PRIMARY_NAME: NATCHITOCHES CITY OF WATER TREATMENT PLANT<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ICIS:1400007501, ICIS:200001947<br>sitenumber: 224\",\"lat: 30.1652<br>lon: -91.97065<br>REGISTRY_ID: 110003258180<br>PRIMARY_NAME: MOORES PUMP & SUPPLY MACHINE SHOP DIV<br>NAICS: 333911<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LA0000055764<br>sitenumber: 225\",\"lat: 32.514742<br>lon: -90.783897<br>REGISTRY_ID: 110044477697<br>PRIMARY_NAME: ANDERSON TULLY COMPANY, ANDERSON TULLY COMPANY REDWOOD CLASS II SITE<br>NAICS: <br>SIC: 4953<br>PGM_SYS_ACRNMS: MS-ENSITE:15387<br>sitenumber: 226\",\"lat: 30.20396<br>lon: -93.33261<br>REGISTRY_ID: 110070949546<br>PRIMARY_NAME: HAWKINS, INC. - SULPHUR<br>NAICS: 424690<br>SIC: <br>PGM_SYS_ACRNMS: SSTS:007870LA001, TRIS:7066WHWKNS331CA<br>sitenumber: 227\",\"lat: 34.27225<br>lon: -88.810083<br>REGISTRY_ID: 110044681920<br>PRIMARY_NAME: CHESTERVILLE TRADING POST<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25603<br>sitenumber: 228\",\"lat: 32.303339<br>lon: -90.408481<br>REGISTRY_ID: 110044687149<br>PRIMARY_NAME: HILLTOP GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34323<br>sitenumber: 229\",\"lat: 30.00716<br>lon: -90.23065<br>REGISTRY_ID: 110003281163<br>PRIMARY_NAME: LAPRAIRIES BODY SHOP INC<br>NAICS: 811121<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD094925674<br>sitenumber: 230\",\"lat: 30.16561<br>lon: -92.006476<br>REGISTRY_ID: 110031307823<br>PRIMARY_NAME: FLOW CONTROL EQUIPMENT LLC<br>NAICS: 334514<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000064220<br>sitenumber: 231\",\"lat: 31.924956<br>lon: -92.644071<br>REGISTRY_ID: 110008393014<br>PRIMARY_NAME: DR H PAUL LEBLANC<br>NAICS: 621112<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000005397<br>sitenumber: 232\",\"lat: 30.31732<br>lon: -89.24342<br>REGISTRY_ID: 110044581422<br>PRIMARY_NAME: BST PASS CHRISTIAN CO 77112<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32902<br>sitenumber: 233\",\"lat: 30.68<br>lon: -91.219167<br>REGISTRY_ID: 110058925999<br>PRIMARY_NAME: NATIONAL WATER INFRASTRUCTURE, LLC - BEAVER CREEK ON THE PLAINS 3RD FILING<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG542008<br>sitenumber: 234\",\"lat: 32.133867<br>lon: -91.706036<br>REGISTRY_ID: 110032821294<br>PRIMARY_NAME: FRANKLIN RESOURCES MGT<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU005465<br>sitenumber: 235\",\"lat: 34.90417<br>lon: -90.14514<br>REGISTRY_ID: 110044520453<br>PRIMARY_NAME: BIBB SWINDELL AND KOEHLER GIN<br>NAICS: <br>SIC: 0724<br>PGM_SYS_ACRNMS: MS-ENSITE:5681<br>sitenumber: 236\",\"lat: 29.8649<br>lon: -89.8301<br>REGISTRY_ID: 110041450159<br>PRIMARY_NAME: SOUTHERN NATURAL GAS CO<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: EIS:11684111<br>sitenumber: 237\",\"lat: 29.556944<br>lon: -89.313333<br>REGISTRY_ID: 110030448727<br>PRIMARY_NAME: LOBO OPERATING INC. - BRETON SOUND BLOCK 32<br>NAICS: <br>SIC: 1311<br>PGM_SYS_ACRNMS: NPDES:LAG33A119<br>sitenumber: 238\",\"lat: 33.524949<br>lon: -90.21284<br>REGISTRY_ID: 110002216842<br>PRIMARY_NAME: LAWRENCE PRINTING COMPANY INC<br>NAICS: 323115<br>SIC: 2752<br>PGM_SYS_ACRNMS: MS-ENSITE:10416, OSHA-OIS:339654022<br>sitenumber: 239\",\"lat: 31.70283<br>lon: -90.3964<br>REGISTRY_ID: 110038348650<br>PRIMARY_NAME: W W MILLING COMPANY<br>NAICS: <br>SIC: 2041<br>PGM_SYS_ACRNMS: MS-ENSITE:3589<br>sitenumber: 240\",\"lat: 30.300605<br>lon: -93.198733<br>REGISTRY_ID: 110063384822<br>PRIMARY_NAME: WALMART NEIGHBORHOOD MARKET #6590<br>NAICS: 452311<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000084731<br>sitenumber: 241\",\"lat: 30.40757<br>lon: -89.04934<br>REGISTRY_ID: 110002209734<br>PRIMARY_NAME: CLEANER IMAGE DRY CLEANING<br>NAICS: <br>SIC: 7216<br>PGM_SYS_ACRNMS: MS-ENSITE:4954<br>sitenumber: 242\",\"lat: 31.68554<br>lon: -89.37597<br>REGISTRY_ID: 110016756606<br>PRIMARY_NAME: RICK DUNKERTON, POULTRY<br>NAICS: 112320<br>SIC: 0251<br>PGM_SYS_ACRNMS: MS-ENSITE:18618<br>sitenumber: 243\",\"lat: 32.798442<br>lon: -89.107217<br>REGISTRY_ID: 110038338279<br>PRIMARY_NAME: SUDDEN SERVICE INC, PHILADELPHIA WAREHOUSE FACILITY<br>NAICS: <br>SIC: 3714<br>PGM_SYS_ACRNMS: MS-ENSITE:24172<br>sitenumber: 244\",\"lat: 34.77427<br>lon: -89.446672<br>REGISTRY_ID: 110044701392<br>PRIMARY_NAME: RUST COLLEGE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:28099<br>sitenumber: 245\",\"lat: 32.312222<br>lon: -90.042778<br>REGISTRY_ID: 110070104915<br>PRIMARY_NAME: LONGWOOD COURT<br>NAICS: 236115<br>SIC: 1521<br>PGM_SYS_ACRNMS: NPDES:MSR107413<br>sitenumber: 246\",\"lat: 30.711742<br>lon: -91.269945<br>REGISTRY_ID: 110070120763<br>PRIMARY_NAME: INSPECTORATE AMERICA<br>NAICS: 486910<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000099929<br>sitenumber: 247\",\"lat: 30.40162<br>lon: -91.0806<br>REGISTRY_ID: 110043545072<br>PRIMARY_NAME: CLEAR CUT GRAPHICS LLC<br>NAICS: 333292<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000073213<br>sitenumber: 248\",\"lat: 33.066361<br>lon: -89.579881<br>REGISTRY_ID: 110044661185<br>PRIMARY_NAME: ATTALA COUNTY CO OP<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25420<br>sitenumber: 249\",\"lat: 32.42138<br>lon: -90.13359<br>REGISTRY_ID: 110055652994<br>PRIMARY_NAME: RITE AID NUMBER 7210<br>NAICS: 446110<br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:63400<br>sitenumber: 250\",\"lat: 30.252099<br>lon: -92.650549<br>REGISTRY_ID: 110011176280<br>PRIMARY_NAME: ACADEMY TRAILER PARK<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG540033<br>sitenumber: 251\",\"lat: 34.81539<br>lon: -89.973308<br>REGISTRY_ID: 110044515922<br>PRIMARY_NAME: HERNANDO READINESS CENTER<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:54241<br>sitenumber: 252\",\"lat: 34.25542<br>lon: -88.7463<br>REGISTRY_ID: 110044545347<br>PRIMARY_NAME: SHELL GAS GARDEN<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32161<br>sitenumber: 253\",\"lat: 33.079167<br>lon: -90.3225<br>REGISTRY_ID: 110044469152<br>PRIMARY_NAME: BELLS GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:29676<br>sitenumber: 254\",\"lat: 29.95691<br>lon: -90.19355<br>REGISTRY_ID: 110001252000<br>PRIMARY_NAME: COMMUNITY COFFEE CO LLC - HARAHAN PLANT<br>NAICS: 311920<br>SIC: 2095<br>PGM_SYS_ACRNMS: AIR:LA0000002205100235, AIRS/AFS:2205100235, LA-TEMPO:32222, RCRAINFO:LAD008176125<br>sitenumber: 255\",\"lat: 30.18136<br>lon: -92.11495<br>REGISTRY_ID: 110033174044<br>PRIMARY_NAME: ACADIANA COATINGS & SUPPLY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAU005132<br>sitenumber: 256\",\"lat: 33.623142<br>lon: -88.334661<br>REGISTRY_ID: 110044614094<br>PRIMARY_NAME: MALONES GROCERY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:24456<br>sitenumber: 257\",\"lat: 30.482854<br>lon: -90.918872<br>REGISTRY_ID: 110070515068<br>PRIMARY_NAME: SAGE LTAC LLC<br>NAICS: 562211<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101277<br>sitenumber: 258\",\"lat: 31.799744<br>lon: -88.688722<br>REGISTRY_ID: 110044489960<br>PRIMARY_NAME: HIWANNEE STATION<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:29874<br>sitenumber: 259\",\"lat: 30.37492<br>lon: -89.09774<br>REGISTRY_ID: 110044590421<br>PRIMARY_NAME: MIRACLE DRY CLEANERS AND LAUNDRY<br>NAICS: <br>SIC: 7211, 7216<br>PGM_SYS_ACRNMS: MS-ENSITE:4552<br>sitenumber: 260\",\"lat: 33.2303<br>lon: -91.04807<br>REGISTRY_ID: 110044626795<br>PRIMARY_NAME: AVON GIN INC<br>NAICS: <br>SIC: 0724<br>PGM_SYS_ACRNMS: MS-ENSITE:7653<br>sitenumber: 261\",\"lat: 30.44949<br>lon: -89.095<br>REGISTRY_ID: 110044463835<br>PRIMARY_NAME: GHOLARS BODY AND PAINT SHOP<br>NAICS: <br>SIC: 7532<br>PGM_SYS_ACRNMS: MS-ENSITE:15697, RCRAINFO:MSR000100271<br>sitenumber: 262\",\"lat: 30.869603<br>lon: -92.415098<br>REGISTRY_ID: 110011168869<br>PRIMARY_NAME: VILLAGE OF TURKEY CREEK - MUNICIPAL TREATMENT PLANT<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG560140<br>sitenumber: 263\",\"lat: 30.133846<br>lon: -92.0932<br>REGISTRY_ID: 110009048743<br>PRIMARY_NAME: MAGNOLIA WATER UTILITY OPERATING CO., LLC- MONTICELLO<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LA0075094<br>sitenumber: 264\",\"lat: 30.23897<br>lon: -92.3874<br>REGISTRY_ID: 110003343089<br>PRIMARY_NAME: CROWLEY VETERINARY HOSPITAL<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985225523<br>sitenumber: 265\",\"lat: 29.54712<br>lon: -90.3405<br>REGISTRY_ID: 110032830701<br>PRIMARY_NAME: BAY CAR WASH<br>NAICS: <br>SIC: 7542<br>PGM_SYS_ACRNMS: NPDES:LAG750657, NPDES:LAU005317<br>sitenumber: 266\",\"lat: 33.436545<br>lon: -88.914188<br>REGISTRY_ID: 110044535376<br>PRIMARY_NAME: CYPRESS RIDGE SUBDIVISION<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:18527<br>sitenumber: 267\",\"lat: 30.31155<br>lon: -93.20224<br>REGISTRY_ID: 110067374772<br>PRIMARY_NAME: WILLIAMS CHAPEL CHRISTIAN METHODIST EPISCOPAL CHURCH<br>NAICS: <br>SIC: 8661<br>PGM_SYS_ACRNMS: NPDES:LAG535257<br>sitenumber: 268\",\"lat: 30.34005<br>lon: -91.260531<br>REGISTRY_ID: 110011612308<br>PRIMARY_NAME: OXYCHEM CORP<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NCDB:M06#1987082647504 1<br>sitenumber: 269\",\"lat: 32.35005<br>lon: -89.648978<br>REGISTRY_ID: 110044431004<br>PRIMARY_NAME: BST MORTON CO 74118<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:27953<br>sitenumber: 270\",\"lat: 30.44872<br>lon: -89.0918<br>REGISTRY_ID: 110044610445<br>PRIMARY_NAME: LONNIES SALVAGE<br>NAICS: <br>SIC: 5015<br>PGM_SYS_ACRNMS: MS-ENSITE:3393<br>sitenumber: 271\",\"lat: 34.089361<br>lon: -88.622056<br>REGISTRY_ID: 110044637051<br>PRIMARY_NAME: NETTLETON PURE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:25733<br>sitenumber: 272\",\"lat: 30.2691<br>lon: -89.75196<br>REGISTRY_ID: 110009575245<br>PRIMARY_NAME: DONS SLIDELL AUTO CENTER<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LA0000880302<br>sitenumber: 273\",\"lat: 30.091941<br>lon: -90.939058<br>REGISTRY_ID: 110070514910<br>PRIMARY_NAME: TRACTOR SUPPLY CO #2192<br>NAICS: 423820, 424910<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000101044<br>sitenumber: 274\",\"lat: 31.315331<br>lon: -89.503089<br>REGISTRY_ID: 110044511481<br>PRIMARY_NAME: JAMES L. CAREY<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:51705<br>sitenumber: 275\",\"lat: 29.94492<br>lon: -90.18685<br>REGISTRY_ID: 110003288549<br>PRIMARY_NAME: FUEL SOURCES INC<br>NAICS: 811113, 811118<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD981059256<br>sitenumber: 276\",\"lat: 30.367025<br>lon: -89.135225<br>REGISTRY_ID: 110044652060<br>PRIMARY_NAME: WILLIAM BELL APARTMENTS<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: MS-ENSITE:37092<br>sitenumber: 277\",\"lat: 32.568889<br>lon: -92.066111<br>REGISTRY_ID: 110010756752<br>PRIMARY_NAME: RANDALLS<br>NAICS: <br>SIC: 5411<br>PGM_SYS_ACRNMS: ICIS:16066<br>sitenumber: 278\",\"lat: 32.354028<br>lon: -89.630528<br>REGISTRY_ID: 110022886607<br>PRIMARY_NAME: MORTON POTW<br>NAICS: 221320<br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:13289, NPDES:MS0036234, NPDES:MSL036234<br>sitenumber: 279\",\"lat: 31.102611<br>lon: -89.281667<br>REGISTRY_ID: 110022887759<br>PRIMARY_NAME: BELL UTILITIES OF MISSISSIPPI INC, BLACK CREEK UTILITIES<br>NAICS: <br>SIC: 6552<br>PGM_SYS_ACRNMS: MS-ENSITE:14481<br>sitenumber: 280\",\"lat: 33.606<br>lon: -90.690528<br>REGISTRY_ID: 110044559876<br>PRIMARY_NAME: LONNIE BYRD STORE<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:32254<br>sitenumber: 281\",\"lat: 32.352646<br>lon: -90.156037<br>REGISTRY_ID: 110011929431<br>PRIMARY_NAME: ST. RICHARD'S CATHOLIC SCH (JACKSON DIO)<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NCDB:C04#TSCAIV-01-AS35<br>sitenumber: 282\",\"lat: 31.314897<br>lon: -89.259117<br>REGISTRY_ID: 110005974259<br>PRIMARY_NAME: HATTIESBURG SOUTH LAGOON<br>NAICS: 221320<br>SIC: 4952<br>PGM_SYS_ACRNMS: MS-ENSITE:13176, NPDES:MS0020303, NPDES:MSL020303<br>sitenumber: 283\",\"lat: 30.41308<br>lon: -88.5385<br>REGISTRY_ID: 110063009257<br>PRIMARY_NAME: CITY PARKING LOT<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: ACRES:177161<br>sitenumber: 284\",\"lat: 31.34381<br>lon: -92.36326<br>REGISTRY_ID: 110006027012<br>PRIMARY_NAME: AUTO TECH<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985215565<br>sitenumber: 285\",\"lat: 29.682194<br>lon: -90.774549<br>REGISTRY_ID: 110020158023<br>PRIMARY_NAME: MAGNOLIA WATER UTILITY OPERATING CO., LLC- SUBURBAN ESTATES<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG560240<br>sitenumber: 286\",\"lat: 30.429528<br>lon: -92.412028<br>REGISTRY_ID: 110012534766<br>PRIMARY_NAME: CLECO POWER LLC - ACADIA POWER STATION<br>NAICS: 221112<br>SIC: 4911<br>PGM_SYS_ACRNMS: AIR:LA0000002200100105, AIRS/AFS:2200100105, CAMDBS:55173, CEDRI:CEDRI10107819, E-GGRT:1001347, EGRID:55173, EIA-860:55173, EIS:6082711, EPS:EPS10035555, LA-TEMPO:83623, NPDES:LA0112836, NPDES:LAJ660039, RBLC:25072, RCRAINFO:LAR000062638, SFDW:LA2001064, SFDW:LA2001064 12055<br>sitenumber: 287\",\"lat: 34.338111<br>lon: -89.517953<br>REGISTRY_ID: 110044448737<br>PRIMARY_NAME: JOE BENNETT CONSTRUCTION COMPANY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:29534<br>sitenumber: 288\",\"lat: 29.856875<br>lon: -90.469528<br>REGISTRY_ID: 110030441751<br>PRIMARY_NAME: TEXAS PETROLEUM INVESTMENT COMPANY<br>NAICS: <br>SIC: 1311<br>PGM_SYS_ACRNMS: NPDES:LAG33A427<br>sitenumber: 289\",\"lat: 32.927638<br>lon: -93.701288<br>REGISTRY_ID: 110016752343<br>PRIMARY_NAME: PLAIN DEALING STORAGE YARD<br>NAICS: <br>SIC: <br>PGM_SYS_ACRNMS: NPDES:LAR05N456<br>sitenumber: 290\",\"lat: 29.988833<br>lon: -91.863222<br>REGISTRY_ID: 110059786441<br>PRIMARY_NAME: PREMIUM OILFIELD SERVICES<br>NAICS: <br>SIC: 1389<br>PGM_SYS_ACRNMS: NPDES:LAG480885<br>sitenumber: 291\",\"lat: 30.75239<br>lon: -89.849828<br>REGISTRY_ID: 110003344792<br>PRIMARY_NAME: COTTONS HOLSUM BREAD TRUCK SHOP<br>NAICS: 811111<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985227750<br>sitenumber: 292\",\"lat: 29.77038<br>lon: -90.08247<br>REGISTRY_ID: 110070288752<br>PRIMARY_NAME: CROWN POINT HOLDING, LLC<br>NAICS: 336611<br>SIC: <br>PGM_SYS_ACRNMS: OSHA-OIS:340408426<br>sitenumber: 293\",\"lat: 31.613661<br>lon: -91.297336<br>REGISTRY_ID: 110044588924<br>PRIMARY_NAME: NATCHEZ RCAG FACILITY<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:31918<br>sitenumber: 294\",\"lat: 34.98536<br>lon: -89.999<br>REGISTRY_ID: 110044641536<br>PRIMARY_NAME: AMERICAN ELECTRIC A DIV OF FL I<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34100<br>sitenumber: 295\",\"lat: 29.875864<br>lon: -90.441001<br>REGISTRY_ID: 110070862751<br>PRIMARY_NAME: PHILLIPS 66 PIPELINE PARADIS - MAINTENANCE OFFICE<br>NAICS: 493110<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAR000102117<br>sitenumber: 296\",\"lat: 32.733583<br>lon: -89.532811<br>REGISTRY_ID: 110044629836<br>PRIMARY_NAME: THIS  THAT<br>NAICS: <br>SIC: 5541<br>PGM_SYS_ACRNMS: MS-ENSITE:34573<br>sitenumber: 297\",\"lat: 30.15341<br>lon: -91.96368<br>REGISTRY_ID: 110042279076<br>PRIMARY_NAME: CETCO ENV OFFSHORE SVCS<br>NAICS: 213112<br>SIC: <br>PGM_SYS_ACRNMS: RCRAINFO:LAD985204262<br>sitenumber: 298\",\"lat: 30.5136<br>lon: -90.11464<br>REGISTRY_ID: 110038517557<br>PRIMARY_NAME: HARD HAT ROW<br>NAICS: <br>SIC: 7699<br>PGM_SYS_ACRNMS: NPDES:LAG533106<br>sitenumber: 299\",\"lat: 30.095833<br>lon: -90.942778<br>REGISTRY_ID: 110011169582<br>PRIMARY_NAME: AUCOIN'S SEWER UTIL-ST JUDE SU<br>NAICS: <br>SIC: 4952<br>PGM_SYS_ACRNMS: NPDES:LAG560032<br>sitenumber: 300\"],{\"maxHeight\":400,\"maxWidth\":850},null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addEasyprint\",\"args\":[{\"title\":\"Print map\",\"position\":\"topleft\",\"sizeModes\":[\"A4Portrait\",\"A4Landscape\",\"CurrentSize\"],\"exportOnly\":false,\"tileWait\":500,\"filename\":\"map\",\"hidden\":false,\"hideControlContainer\":true,\"spinnerBgColor\":\"#0DC5C1\",\"customSpinnerClass\":\"epLoader\"}]}],\"limits\":{\"lat\":[29.115556,34.99334],\"lng\":[-93.9983,-88.270397]}},\"evals\":[],\"jsHooks\":[]}if (FALSE) { n=2 for (d in c(TRUE,FALSE)) {   for (w in c('frs', 'pop', 'area', 'bg', 'block')) {     cat(\"n=\",n,\"  weighting=\",w, \"  dt=\",d,\"\\n\\n\")     print(x <- testpoints_n(n,w,d)); print(class(x))     cat('\\n')   } } }"},{"path":"https://usepa.github.io/EJAM/reference/test_regid.html","id":null,"dir":"Reference","previous_headings":"","what":"test_regid (DATA) test data, vector of EPA FRS Registry ID numbers — test_regid","title":"test_regid (DATA) test data, vector of EPA FRS Registry ID numbers — test_regid","text":"test_regid (DATA) test data, vector EPA FRS Registry ID numbers","code":""},{"path":"https://usepa.github.io/EJAM/reference/test_regid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"test_regid (DATA) test data, vector of EPA FRS Registry ID numbers — test_regid","text":"testing, e.g., frs_from_regid(test_regid) mapfast(  frs_from_regid(test_regid)  )","code":""},{"path":"https://usepa.github.io/EJAM/reference/trilaterate_sites2blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","title":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","text":"get data.table ejam_uniq_id, lat,lon site (eg save sitepoints info)","code":""},{"path":"https://usepa.github.io/EJAM/reference/trilaterate_sites2blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","text":"","code":"trilaterate_sites2blocks(s2b)"},{"path":"https://usepa.github.io/EJAM/reference/trilaterate_sites2blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","text":"s2b like testoutput_getblocksnearby_10pts_1miles","code":""},{"path":"https://usepa.github.io/EJAM/reference/trilaterate_sites2blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","text":"data.table one row per unique ejam_uniq_id input dt, plus lat,lon columns","code":""},{"path":"https://usepa.github.io/EJAM/reference/trilaterate_sites2blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DRAFT - Estimate lat,lon of each ejam_uniq_id, from outputs of getblocksnearby() — trilaterate_sites2blocks","text":"","code":"s2b = copy(testoutput_getblocksnearby_10pts_1miles) #> Error in copy(testoutput_getblocksnearby_10pts_1miles): could not find function \"copy\" s2b_located = latlon_join_on_blockid(s2b) # done by trilaterate also #> Error in latlon_join_on_blockid(s2b): could not find function \"latlon_join_on_blockid\" inferred_sites = trilaterate_sites2blocks(s2b) #> Error in trilaterate_sites2blocks(s2b): could not find function \"trilaterate_sites2blocks\" inferred_sites #> Error in eval(expr, envir, enclos): object 'inferred_sites' not found plotblocksnearby(s2b_located) #> Error in c(\"blockid\", \"distance\", siteidvarname) %in% names(sitepoints): object 's2b_located' not found"},{"path":"https://usepa.github.io/EJAM/reference/unshared.html","id":null,"dir":"Reference","previous_headings":"","what":"UTILITY - see what is only in x or y but not both — unshared","title":"UTILITY - see what is only in x or y but not both — unshared","text":"utility just like setdiff except y,x also x,y Just shows elements one one sets x y","code":""},{"path":"https://usepa.github.io/EJAM/reference/unshared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTILITY - see what is only in x or y but not both — unshared","text":"","code":"unshared(x, y)"},{"path":"https://usepa.github.io/EJAM/reference/urls_clusters_and_sort_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","title":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","text":"Add update, reorder, columns results","code":""},{"path":"https://usepa.github.io/EJAM/reference/urls_clusters_and_sort_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","text":"","code":"urls_clusters_and_sort_cols(results_table)"},{"path":"https://usepa.github.io/EJAM/reference/urls_clusters_and_sort_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","text":"results_table ejscreenapi() function example","code":""},{"path":"https://usepa.github.io/EJAM/reference/urls_clusters_and_sort_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","text":"input table extra columns","code":""},{"path":"https://usepa.github.io/EJAM/reference/urls_clusters_and_sort_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Links to ejscreenapi output, to launch EJScreen report for given point(s) — urls_clusters_and_sort_cols","text":"Creates weblinks maps, EJScreenMAP column, Adds weblinks pdf-like reports, new column Adds column flag sites close sites, Puts certain columns first.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_4table.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - Create URLs in columns, for EJAM — url_4table","title":"URL functions - Create URLs in columns, for EJAM — url_4table","text":"start use server ejamit(), already used table_xls_format()","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_4table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - Create URLs in columns, for EJAM — url_4table","text":"","code":"url_4table(lat, lon, radius, regid = NULL, as_html = TRUE)"},{"path":"https://usepa.github.io/EJAM/reference/url_4table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - Create URLs in columns, for EJAM — url_4table","text":"lat vector latitudes lon vector longitudes radius vector values radius miles regid optional vector FRS registry IDs available use create links detailed ECHO facility reports as_html logical, optional. passed url_ejscreen_report() url_ejscreenmap() EJAMejscreenapi package","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_4table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - Create URLs in columns, for EJAM — url_4table","text":"list data.frames append list data.frames created ejamit() doaggregate(), list(results_bysite = results_bysite, results_overall = results_overall, newcolnames=newcolnames)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_countyhealthrankings.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","title":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","text":"URL functions - Get URLs useful report(s) Counties countyhealthrankings.org","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_countyhealthrankings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","text":"","code":"url_countyhealthrankings(fips, year = 2023)"},{"path":"https://usepa.github.io/EJAM/reference/url_countyhealthrankings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","text":"fips vector fips codes counties, 5 characters , like \"10003\" year 2023","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_countyhealthrankings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","text":"vector URLs","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_countyhealthrankings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"URL functions - Get URLs of useful report(s) on Counties from countyhealthrankings.org — url_countyhealthrankings","text":"","code":"url_countyhealthrankings(fips_counties_from_state_abbrev(\"DE\")) #> [1] \"https://www.countyhealthrankings.org/explore-health-rankings/delaware/kent?year=2023\"       #> [2] \"https://www.countyhealthrankings.org/explore-health-rankings/delaware/new-castle?year=2023\" #> [3] \"https://www.countyhealthrankings.org/explore-health-rankings/delaware/sussex?year=2023\"      # browseURL(url_countyhealthrankings(fips_counties_from_state_abbrev(\"DE\"))[1])"},{"path":"https://usepa.github.io/EJAM/reference/url_echo_facility_webpage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of ECHO reports — url_echo_facility_webpage","title":"Get URLs of ECHO reports — url_echo_facility_webpage","text":"Get URL(s) EPA ECHO webpage facility information","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_echo_facility_webpage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of ECHO reports — url_echo_facility_webpage","text":"","code":"url_echo_facility_webpage(regid, as_html = FALSE, linktext)"},{"path":"https://usepa.github.io/EJAM/reference/url_echo_facility_webpage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of ECHO reports — url_echo_facility_webpage","text":"regid EPA FRS Registry ID as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_echo_facility_webpage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of ECHO reports — url_echo_facility_webpage","text":"URL(s)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_echo_facility_webpage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get URLs of ECHO reports — url_echo_facility_webpage","text":"","code":"if (FALSE) {  browseURL(url_echo_facility_webpage(110070874073))  }"},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreenmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URL(s) for EJScreen map centered at given point(s) — url_ejscreenmap","title":"Get URL(s) for EJScreen map centered at given point(s) — url_ejscreenmap","text":"Get URL(s) EJScreen map centered given point(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreenmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URL(s) for EJScreen map centered at given point(s) — url_ejscreenmap","text":"","code":"url_ejscreenmap(lon, lat, as_html = FALSE, linktext, wherestr = \"\")"},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreenmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URL(s) for EJScreen map centered at given point(s) — url_ejscreenmap","text":"lon one longitudes lat one latitudes as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE wherestr passed API URL wherestr= , lat/lon used. Can State abbrev like \"NY\" can options - sure part EJScreen URL-encoded map request documented.","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreenmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URL(s) for EJScreen map centered at given point(s) — url_ejscreenmap","text":"URL(s)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_acs_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","title":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","text":"Get URL(s) EJScreen ACS report residents near given point(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_acs_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","text":"","code":"url_ejscreen_acs_report(lon, lat, radius, as_html = FALSE, linktext)"},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_acs_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","text":"lon one longitudes lat one latitudes radius miles radius as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_acs_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","text":"URL(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_acs_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get URLs of EJScreen older ACS reports - will be phased out — url_ejscreen_acs_report","text":"USED APP NOW COMMUNITY REPORT EXISTS","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of EJScreen reports — url_ejscreen_report","title":"Get URLs of EJScreen reports — url_ejscreen_report","text":"Get URL(s) EJScreen standard report residents near given point(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of EJScreen reports — url_ejscreen_report","text":"","code":"url_ejscreen_report(   lon = \"\",   lat = \"\",   radius = \"\",   as_html = FALSE,   linktext,   mobile = FALSE,   areatype = \"\",   areaid = \"\",   namestr = \"\",   wkid = 4326,   unit = 9035,   f = \"report\" )"},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of EJScreen reports — url_ejscreen_report","text":"lon one longitudes lat one latitudes radius miles radius as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE mobile TRUE, provides URL mobile browser version, desktop version areatype passed areatype= API, inferred provided areaid provided areaid fips codes used,  passed areaid=  API, can FIPS blockgroups, tracts, counties. namestr character string text show report name place wkid default 4326 -WGS84 - World Geodetic System 1984, used GPS - see (https://epsg.io/4326) unit default 9035 means miles; kilometers use 9036 f can \"report\" \"pjson\" \"json\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of EJScreen reports — url_ejscreen_report","text":"URL(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_ejscreen_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get URLs of EJScreen reports — url_ejscreen_report","text":"Also see ejscreenRESTbroker() ejscreenapi1() (https://ejscreen.epa.gov/mapper/EJAPIinstructions.pdf) (https://ejscreen.epa.gov/mapper/ejscreenapi1.html)","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_envirofacts_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","title":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","text":"Get URL(s) query get data facilities Envirofacts, XML,JSON,CSV, EXCEL format","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_envirofacts_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","text":"","code":"url_envirofacts_data(regid, as_html = FALSE, linktext)"},{"path":"https://usepa.github.io/EJAM/reference/url_envirofacts_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","text":"as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE tablename tri_info","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_envirofacts_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","text":"URL(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_envirofacts_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get URLs of EnviroFacts API queries - DRAFT WORK IN PROGRESS — url_envirofacts_data","text":"Lets search specific regulatory program database filter State, location, etc. see https://www.epa.gov/enviro/web-services https://www.epa.gov/enviro/envirofacts-data-service-api (https://data.epa.gov/efservice/multisystem/minLatitude/35.465158/maxLatitude/52.912225/minLongitude/-104.387994/maxLongitude/-69.231744/count) ??? WORK PROGRESS .... need look documentation closely returns expected attempts WEBPAGE URL (returns webpage) e.g., https://enviro.epa.gov/enviro/efsystemquery.multisystem?fac_search=primary_name&fac_value=&fac_search_type=Beginning+&postal_code=&location_address=&add_search_type=Beginning+&city_name=&county_name=&state_code=&TribalLand=0&TribeType=selectTribeALL&selectTribe=noselect&tribedistance1=onLand&sic_type=Equal+&sic_code_to=&naics_type=Beginning+&naics_to=326&chem_name=&chem_search=Beginning+&cas_num=&page_no=1&output_sql_switch=FALSE&report=1&database_type=Multisystem https://enviro.epa.gov/enviro/efsystemquery.multisystem?state_code=DE&naics_type=Beginning+&naics_to=326&database_type=Multisystem API URL (returns data) https://data.epa.gov/efservice/multisystem/minLatitude/35.465158/maxLatitude/52.912225/minLongitude/-104.387994/maxLongitude/-69.231744/naics_type/Beginning+/naics_to/32611 https://data.epa.gov/efservice/multisystem/minLatitude/35.465158/maxLatitude/52.912225/minLongitude/-104.387994/maxLongitude/-69.231744/EXCEL","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_enviromapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of EnviroMapper reports — url_enviromapper","title":"Get URLs of EnviroMapper reports — url_enviromapper","text":"Get URL(s) EnviroMapper web-based tool, open map specified point location(s)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_enviromapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of EnviroMapper reports — url_enviromapper","text":"","code":"url_enviromapper(lon, lat, as_html = FALSE, linktext, zoom = 13)"},{"path":"https://usepa.github.io/EJAM/reference/url_enviromapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of EnviroMapper reports — url_enviromapper","text":"lon one longitude lat one latitude as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE zoom initial map zoom extent, smaller numbers zoomed closer","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_enviromapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of EnviroMapper reports — url_enviromapper","text":"URL one webpage (launches mapping tool)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_enviromapper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get URLs of EnviroMapper reports — url_enviromapper","text":"EnviroMapper lets view EPA-regulated facilities information map, given lat,lon","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_frs_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Get URLs of FRS reports — url_frs_report","title":"Get URLs of FRS reports — url_frs_report","text":"Get URL(s) reports facilities EPA FRS (facility registry service)","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_frs_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get URLs of FRS reports — url_frs_report","text":"","code":"url_frs_report(regid, as_html = FALSE, linktext)"},{"path":"https://usepa.github.io/EJAM/reference/url_frs_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get URLs of FRS reports — url_frs_report","text":"regid one EPA FRS Registry IDs. as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_frs_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get URLs of FRS reports — url_frs_report","text":"URL(s)","code":""},{"path":[]},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","title":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","text":"uses ACS2019 rest services ejscreen ejquery MapServer 7 Documentation format examples input parameters: https://geopub.epa.gov/arcgis/sdk/rest/index.html#/Query_Map_Service_Layer/02ss0000000r000000/","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","text":"","code":"url_getacs_epaquery(   objectIds = 1:3,   servicenumber = 7,   outFields = NULL,   returnGeometry = FALSE,   justurl = FALSE,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","text":"objectIds see API servicenumber see API outFields see API. eg \"STCNTRBG\",\"TOTALPOP\",\"PCT_HISP\", returnGeometry see API justurl TRUE, returns url instead default making API request ... passed url_getacs_epaquery_chunked()","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","text":"table","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"URL functions - url_getacs_epaquery - experimental/ work in progress: get ACS data via EPA API (for <200 places) — url_getacs_epaquery","text":"","code":"url_getacs_epaquery(justurl=TRUE) #> [1] \"this uses ACS2019 rest services ejscreen ejquery MapServer 7\" #> [1] \"https://geopub.epa.gov/arcgis/rest/services/ejscreen/ejquery/MapServer/7/query?objectIds=1,2,3&sqlFormat=none&text=&where=&havingClause=&outFields=OBJECTID,STCNTRBG,AREALAND,AREAWATER,TOTALPOP,LOWINC,POV_UNIVERSE_FRT,PCT_LOWINC,HH_BPOV,HSHOLDS,PCT_HH_BPOV,EDU_LTHS,EDU_UNIVERSE,PCT_EDU_LTHS,LINGISO,PCT_LINGISO,EMP_STAT_UNEMPLOYED,EMP_STAT_UNIVERSE,PCT_EMP_STAT_UNEMPLOYED,AGE_LT5,PCT_AGE_LT5,AGE_GT64,PCT_AGE_GT64,NUM_MINORITY,PCT_MINORITY,WHITE,PCT_WHITE,BLACK,PCT_BLACK,HISP,PCT_HISP,ASIAN,PCT_ASIAN,AMERIND,PCT_AMERIND,HAWPAC,PCT_HAWPAC,OTHER_RACE,PCT_OTHER_RACE,TWOMORE,PCT_TWOMORE,NHWHITE,PCT_NHWHITE,NHBLACK,PCT_NHBLACK,NHASIAN,PCT_NHASIAN,NHAMERIND,PCT_NHAMERIND,NHHAWPAC,PCT_NHHAWPAC,NHOTHER_RACE,PCT_NHOTHER_RACE,NHTWOMORE,PCT_NHTWOMORE,HOME_PRE60,HSUNITS,PCT_HOME_PRE60&orderByFields=&groupByFieldsForStatistics=&outStatistics=&f=pjson&returnGeometry=FALSE&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnDistinctValues=false&returnTrueCurves=false&returnZ=false&returnM=false&geometry=&geometryType=esriGeometryEnvelope&featureEncoding=esriDefault&spatialRel=esriSpatialRelIntersects&units=esriSRUnit_Foot&distance=&inSR=&outSR=&relationParam=&geometryPrecision=&gdbVersion=&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&maxAllowableOffset=&resultOffset=&resultRecordCount=&historicMoment=&time=&timeRelation=esriTimeRelationOverlaps\""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery_chunked.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","title":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","text":"URL functions - url_getacs_epaquery_chunked - experimental/ work progress: chunks, get ACS data via EPA API","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery_chunked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","text":"","code":"url_getacs_epaquery_chunked(   objectIds = 1:3,   servicenumber = 7,   outFields = NULL,   returnGeometry = FALSE,   justurl = FALSE,   chunksize = 200,   ... )"},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery_chunked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","text":"objectIds see API servicenumber see API outFields see API returnGeometry see API justurl see API chunksize eg 200 chunks 200 request ... passed url_getacs_epaquery()","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery_chunked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","text":"table","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_getacs_epaquery_chunked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"URL functions - url_getacs_epaquery_chunked - experimental/ work in progress: in chunks, get ACS data via EPA API — url_getacs_epaquery_chunked","text":"","code":"if (FALSE) {  # x <- list() # chunked chunks. best not to ask for all these:  # x[[1]] <- url_getacs_epaquery_chunked(   1:1000, chunksize = 100)  # x[[2]] <- url_getacs_epaquery_chunked(1001:5000, chunksize = 100)  # xall <- do.call(rbind, x)  }"},{"path":"https://usepa.github.io/EJAM/reference/url_get_eparest_chunked_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - url_get_eparest_chunked_by_id - experimental/ work in progress: in chunks, get ACS data or Block weights nearby via EPA API — url_get_eparest_chunked_by_id","title":"URL functions - url_get_eparest_chunked_by_id - experimental/ work in progress: in chunks, get ACS data or Block weights nearby via EPA API — url_get_eparest_chunked_by_id","text":"URL functions - url_get_eparest_chunked_by_id - experimental/ work progress: chunks, get ACS data Block weights nearby via EPA API","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_get_eparest_chunked_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - url_get_eparest_chunked_by_id - experimental/ work in progress: in chunks, get ACS data or Block weights nearby via EPA API — url_get_eparest_chunked_by_id","text":"","code":"url_get_eparest_chunked_by_id(objectIds, chunksize = 200, ...)"},{"path":"https://usepa.github.io/EJAM/reference/url_get_eparest_chunked_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - url_get_eparest_chunked_by_id - experimental/ work in progress: in chunks, get ACS data or Block weights nearby via EPA API — url_get_eparest_chunked_by_id","text":"objectIds see API chunksize see API ... passed url_getacs_epaquery()","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_get_eparest_chunked_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - url_get_eparest_chunked_by_id - experimental/ work in progress: in chunks, get ACS data or Block weights nearby via EPA API — url_get_eparest_chunked_by_id","text":"table","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_get_via_url.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - url_get_via_url - helper function work in progress: GET json via url of ejscreen ejquery map services — url_get_via_url","title":"URL functions - url_get_via_url - helper function work in progress: GET json via url of ejscreen ejquery map services — url_get_via_url","text":"URL functions - url_get_via_url - helper function work progress: GET json via url ejscreen ejquery map services","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_get_via_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - url_get_via_url - helper function work in progress: GET json via url of ejscreen ejquery map services — url_get_via_url","text":"","code":"url_get_via_url(url)"},{"path":"https://usepa.github.io/EJAM/reference/url_get_via_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - url_get_via_url - helper function work in progress: GET json via url of ejscreen ejquery map services — url_get_via_url","text":"url url EJScreen ejquery request","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_get_via_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - url_get_via_url - helper function work in progress: GET json via url of ejscreen ejquery map services — url_get_via_url","text":"json","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_linkify.html","id":null,"dir":"Reference","previous_headings":"","what":"utility to make html link from URL — url_linkify","title":"utility to make html link from URL — url_linkify","text":"Convert URL HTML link opens new tab","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_linkify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility to make html link from URL — url_linkify","text":"","code":"url_linkify(url, text)"},{"path":"https://usepa.github.io/EJAM/reference/url_linkify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility to make html link from URL — url_linkify","text":"url string URL text string label","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_linkify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility to make html link from URL — url_linkify","text":"url_linkify('epa.gov','EPA') returns \"<href=\\\"epa.gov\\\", target=\\\"_blank\\\">EPA<\/>\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_naics.com.html","id":null,"dir":"Reference","previous_headings":"","what":"URL functions - url_naics.com - Get URL for page with info about industry sectors by text query term — url_naics.com","title":"URL functions - url_naics.com - Get URL for page with info about industry sectors by text query term — url_naics.com","text":"See (https://naics.com) information NAICS codes","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_naics.com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"URL functions - url_naics.com - Get URL for page with info about industry sectors by text query term — url_naics.com","text":"","code":"url_naics.com(query, as_html = FALSE, linktext)"},{"path":"https://usepa.github.io/EJAM/reference/url_naics.com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"URL functions - url_naics.com - Get URL for page with info about industry sectors by text query term — url_naics.com","text":"query string query term like \"gasoline\" \"copper smelting\" as_html Whether return just urls html hyperlinks use DT::datatable() example linktext used text hyperlinks, supplied as_html=TRUE","code":""},{"path":"https://usepa.github.io/EJAM/reference/url_naics.com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"URL functions - url_naics.com - Get URL for page with info about industry sectors by text query term — url_naics.com","text":"URL string","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats.html","id":null,"dir":"Reference","previous_headings":"","what":"usastats (DATA) data.frame of 100 percentiles and means — usastats","title":"usastats (DATA) data.frame of 100 percentiles and means — usastats","text":"data.frame 100 percentiles means (100 rows) USA overall, across locations (e.g., block groups blockgroupstats) set indicators percent low income. column one indicator (specifies percentile). similar lookup tables gdb FTP site EJScreen, except also data demographic race/ethnicity subgroups. details table made, see /EJAM/data-raw/usastats_subgroups.R","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_means.html","id":null,"dir":"Reference","previous_headings":"","what":"usastats_means - convenient way to see US MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — usastats_means","title":"usastats_means - convenient way to see US MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — usastats_means","text":"usastats_means - convenient way see US MEANS ENVIRONMENTAL DEMOGRAPHIC indicators","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"usastats_means - convenient way to see US MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — usastats_means","text":"","code":"usastats_means(   varnames = c(EJAM::names_e, EJAM::names_d, EJAM::names_d_subgroups_nh),   PCTILES = NULL,   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/usastats_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"usastats_means - convenient way to see US MEANS of ENVIRONMENTAL and DEMOGRAPHIC indicators — usastats_means","text":"varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig many digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_query.html","id":null,"dir":"Reference","previous_headings":"","what":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","title":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","text":"usastats_query - convenient way see US mean, pctiles Envt Demog indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","text":"","code":"usastats_query(   varnames = c(EJAM::names_e, EJAM::names_d, EJAM::names_d_subgroups_nh),   PCTILES = NULL,   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/usastats_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","text":"varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig many digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","text":"long list variables: usastats_query(intersect(EJAM::names_all_r,  names(EJAM::usastats)))","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"usastats_query - convenient way to see US mean, pctiles of Envt and Demog indicators in lookup table — usastats_query","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/usastats_queryd.html","id":null,"dir":"Reference","previous_headings":"","what":"usastats_queryd - convenient way to see US mean, pctiles of DEMOGRAPHIC indicators in lookup table — usastats_queryd","title":"usastats_queryd - convenient way to see US mean, pctiles of DEMOGRAPHIC indicators in lookup table — usastats_queryd","text":"usastats_queryd - convenient way see US mean, pctiles DEMOGRAPHIC indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_queryd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"usastats_queryd - convenient way to see US mean, pctiles of DEMOGRAPHIC indicators in lookup table — usastats_queryd","text":"","code":"usastats_queryd(   varnames = c(EJAM::names_d, EJAM::names_d_subgroups_nh),   PCTILES = NULL,   dig = 4 )"},{"path":"https://usepa.github.io/EJAM/reference/usastats_queryd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"usastats_queryd - convenient way to see US mean, pctiles of DEMOGRAPHIC indicators in lookup table — usastats_queryd","text":"varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig many digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_queryd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"usastats_queryd - convenient way to see US mean, pctiles of DEMOGRAPHIC indicators in lookup table — usastats_queryd","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/usastats_querye.html","id":null,"dir":"Reference","previous_headings":"","what":"usastats_querye - convenient way to see US mean, pctiles of ENVIRONMENTAL indicators in lookup table — usastats_querye","title":"usastats_querye - convenient way to see US mean, pctiles of ENVIRONMENTAL indicators in lookup table — usastats_querye","text":"usastats_querye - convenient way see US mean, pctiles ENVIRONMENTAL indicators lookup table","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_querye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"usastats_querye - convenient way to see US mean, pctiles of ENVIRONMENTAL indicators in lookup table — usastats_querye","text":"","code":"usastats_querye(varnames = EJAM::names_e, PCTILES = NULL, dig = 4)"},{"path":"https://usepa.github.io/EJAM/reference/usastats_querye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"usastats_querye - convenient way to see US mean, pctiles of ENVIRONMENTAL indicators in lookup table — usastats_querye","text":"varnames names columns lookup table, like \"proximity.rmp\" PCTILES vector percentiles 0-100 /\"mean\" dig many digits round ","code":""},{"path":"https://usepa.github.io/EJAM/reference/usastats_querye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"usastats_querye - convenient way to see US mean, pctiles of ENVIRONMENTAL indicators in lookup table — usastats_querye","text":"","code":"if (FALSE) {  usastats_querye()  #  data.frame where names_e are the names(),  #  means plus other percentiles, and there are other cols REGION PCTILE  avg.in.us                # This is a data.frame, 1 row, where colnames are indicators avg.in.us[names_e]          # subset is a data.frame! unlist(avg.in.us[names_e])  # to make it a vector  usastats_means()        # This is a matrix, with 1 col, and indicator names are rownames usastats_means(names_e)     # subset is a matrix        and indicator names are rownames usastats_means()[names_e, ] # subset is a named vector  and indicator names are  names  usastats_means() statestats_query()  statestats_query()[,names_d] statestats_query(varnames = names_d)  statestats_query()[,names_e] statestats_query(varnames = names_e)  statestats_query(varnames = names_d_subgroups) head(statestats_query(varnames = longlist))  ## in USA overall, see mean and key percentiles # for all demog and envt indicators usastats_query() # or statestats_query('us')  # can say us or US or USA or usa etc. usastats_query(PCTILES = 'mean') usastats_means() # same but nicer looking format in console usastats_means(dig=4)  # long list of variables: x = intersect(EJAM::names_all_r,  names(EJAM::usastats)) usastats_means(x)  usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_d)] usastats[!(usastats$PCTILE < 50), c(\"PCTILE\", names_e)]  ## in 1 state, see mean and key percentiles for all demog and envt indicators statestats_query('MD')  ## in 1 state, see mean and key percentiles for just demog indicators statestats_queryd('MD')  ## 1 indicator in 1 state, see a few key percentiles and mean statestats_query('MD','proximity.tsdf')  ## mean of 1 indicator for each state statestats_query(varnames = 'proximity.tsdf')  ## using full blockgroup dataset, not lookup tables of percentiles,  blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),    .SDcols= c(names_d, names_e)]  ##   see all total counts (not just US means),  ##   demographics including subgroups,  ##   but not environmental indicators. t(round(ustotals2(bg = blockgroupstats),2))   #  ustotals2 is from EJAMbatch.summarizer package t(blockgroupstats[, lapply(.SD, function(x) mean(x, na.rm=T)),     .SDcols= c(names_e, names_d)])  }"},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"just way query map_headernames, info indicator variable used EJAM.","code":""},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"","code":"varinfo(   var = map_headernames$rname,   info = colnames(map_headernames),   varnametype = \"rname\" )"},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"var vector variable names c(\"pctlowinc\", \"cancer\") c(names_d, names_d_subgroups) (must found column map_headernames indicated varnametype parameter ). info types metadata/info needed, \"decimals\", \"long\", etc. among colnames map_headernames, alias like \"long\" allowed fixcolnames() varnametype optional. colname map_headernames use looking var, like \"rname\" \"api\" \"long\"","code":""},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"data.frame 1 rows, 1 columns, rowsnames var (indicators like \"pctmin\") colnames info (metadata   like \"decimals\") Cells table metadata type indicator var, many decimal places rounding displayed tables, etc. Results can character, numeric, etc. depending info requested","code":""},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"See map_headernames kind information available . variable appears twice+ var map_headernames, info returned 1st row ","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/varinfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"varinfo gets metadata for a variable, like its type, definition, decimalS rounding, etc. — varinfo","text":"","code":"varinfo(\"traffic.score\", \"decimals\") #>               decimals #> traffic.score        0 varinfo(names_d, \"long\") #>                                                      long #> Demog.Index                             Demographic Index #> Demog.Index.Supp           Supplemental Demographic Index #> pctlowinc                                    % Low Income #> pctlingiso       % in limited English-speaking Households #> pctunemployed                                % Unemployed #> pctlths            % with Less Than High School Education #> lowlifex                              Low life expectancy #> pctunder5                                   % under Age 5 #> pctover64                                   % over Age 64 #> pctmin                                  % People of Color myvars <- c(names_d, names_d_subgroups, names_e) myinfo <- \"percentage\" cbind(  is.a.percentage = varinfo(myvars, myinfo) ) #>                  percentage #> Demog.Index               1 #> Demog.Index.Supp          1 #> pctlowinc                 1 #> pctlingiso                1 #> pctunemployed             1 #> pctlths                   1 #> lowlifex                  1 #> pctunder5                 1 #> pctover64                 1 #> pctmin                    1 #> pcthisp                   1 #> pctnhba                   1 #> pctnhaa                   1 #> pctnhaiana                1 #> pctnhnhpia                1 #> pctnhotheralone           1 #> pctnhmulti                1 #> pctnhwa                   1 #> pm                          #> o3                          #> cancer                      #> resp                        #> dpm                         #> pctpre1960                1 #> traffic.score               #> proximity.npl               #> proximity.rmp               #> proximity.tsdf              #> proximity.npdes             #> ust                         #> rsei                        cbind(varinfo(names_all_r, \"pctile.\")) #>                                                pctile. #> pop                                                  0 #> nonmins                                              0 #> povknownratio                                        0 #> age25up                                              0 #> hhlds                                                0 #> unemployedbase                                       0 #> pre1960                                              0 #> builtunits                                           0 #> lowinc                                               0 #> lingiso                                              0 #> unemployed                                           0 #> lths                                                 0 #> under5                                               0 #> over64                                               0 #> mins                                                 0 #> Demog.Index                                          0 #> Demog.Index.Supp                                     0 #> pctlowinc                                            0 #> pctlingiso                                           0 #> pctunemployed                                        0 #> pctlths                                              0 #> lowlifex                                             0 #> pctunder5                                            0 #> pctover64                                            0 #> pctmin                                               0 #> avg.Demog.Index                                      0 #> avg.Demog.Index.Supp                                 0 #> avg.pctlowinc                                        0 #> avg.pctlingiso                                       0 #> avg.pctunemployed                                    0 #> avg.pctlths                                          0 #> avg.lowlifex                                         0 #> avg.pctunder5                                        0 #> avg.pctover64                                        0 #> avg.pctmin                                           0 #> state.avg.Demog.Index                                0 #> state.avg.Demog.Index.Supp                           0 #> state.avg.pctlowinc                                  0 #> state.avg.pctlingiso                                 0 #> state.avg.pctunemployed                              0 #> state.avg.pctlths                                    0 #> state.avg.lowlifex                                   0 #> state.avg.pctunder5                                  0 #> state.avg.pctover64                                  0 #> state.avg.pctmin                                     0 #> pctile.Demog.Index                                   1 #> pctile.Demog.Index.Supp                              1 #> pctile.pctlowinc                                     1 #> pctile.pctlingiso                                    1 #> pctile.pctunemployed                                 1 #> pctile.pctlths                                       1 #> pctile.lowlifex                                      1 #> pctile.pctunder5                                     1 #> pctile.pctover64                                     1 #> pctile.pctmin                                        1 #> state.pctile.Demog.Index                             1 #> state.pctile.Demog.Index.Supp                        1 #> state.pctile.pctlowinc                               1 #> state.pctile.pctlingiso                              1 #> state.pctile.pctunemployed                           1 #> state.pctile.pctlths                                 1 #> state.pctile.lowlifex                                1 #> state.pctile.pctunder5                               1 #> state.pctile.pctover64                               1 #> state.pctile.pctmin                                  1 #> ratio.to.avg.Demog.Index                             0 #> ratio.to.avg.Demog.Index.Supp                        0 #> ratio.to.avg.pctlowinc                               0 #> ratio.to.avg.pctlingiso                              0 #> ratio.to.avg.pctunemployed                           0 #> ratio.to.avg.pctlths                                 0 #> ratio.to.avg.lowlifex                                0 #> ratio.to.avg.pctunder5                               0 #> ratio.to.avg.pctover64                               0 #> ratio.to.avg.pctmin                                  0 #> ratio.to.state.avg.Demog.Index                       0 #> ratio.to.state.avg.Demog.Index.Supp                  0 #> ratio.to.state.avg.pctlowinc                         0 #> ratio.to.state.avg.pctlingiso                        0 #> ratio.to.state.avg.pctunemployed                     0 #> ratio.to.state.avg.pctlths                           0 #> ratio.to.state.avg.lowlifex                          0 #> ratio.to.state.avg.pctunder5                         0 #> ratio.to.state.avg.pctover64                         0 #> ratio.to.state.avg.pctmin                            0 #> pcthisp                                              0 #> pctnhba                                              0 #> pctnhaa                                              0 #> pctnhaiana                                           0 #> pctnhnhpia                                           0 #> pctnhotheralone                                      0 #> pctnhmulti                                           0 #> pctnhwa                                              0 #> avg.pcthisp                                          0 #> avg.pctnhba                                          0 #> avg.pctnhaa                                          0 #> avg.pctnhaiana                                       0 #> avg.pctnhnhpia                                       0 #> avg.pctnhotheralone                                  0 #> avg.pctnhmulti                                       0 #> avg.pctnhwa                                          0 #> state.avg.pcthisp                                    0 #> state.avg.pctnhba                                    0 #> state.avg.pctnhaa                                    0 #> state.avg.pctnhaiana                                 0 #> state.avg.pctnhnhpia                                 0 #> state.avg.pctnhotheralone                            0 #> state.avg.pctnhmulti                                 0 #> state.avg.pctnhwa                                    0 #> pctile.pcthisp                                       1 #> pctile.pctnhba                                       1 #> pctile.pctnhaa                                       1 #> pctile.pctnhaiana                                    1 #> pctile.pctnhnhpia                                    1 #> pctile.pctnhotheralone                               1 #> pctile.pctnhmulti                                    1 #> pctile.pctnhwa                                       1 #> state.pctile.pcthisp                                 1 #> state.pctile.pctnhba                                 1 #> state.pctile.pctnhaa                                 1 #> state.pctile.pctnhaiana                              1 #> state.pctile.pctnhnhpia                              1 #> state.pctile.pctnhotheralone                         1 #> state.pctile.pctnhmulti                              1 #> state.pctile.pctnhwa                                 1 #> ratio.to.avg.pcthisp                                 0 #> ratio.to.avg.pctnhba                                 0 #> ratio.to.avg.pctnhaa                                 0 #> ratio.to.avg.pctnhaiana                              0 #> ratio.to.avg.pctnhnhpia                              0 #> ratio.to.avg.pctnhotheralone                         0 #> ratio.to.avg.pctnhmulti                              0 #> ratio.to.avg.pctnhwa                                 0 #> ratio.to.state.avg.pcthisp                           0 #> ratio.to.state.avg.pctnhba                           0 #> ratio.to.state.avg.pctnhaa                           0 #> ratio.to.state.avg.pctnhaiana                        0 #> ratio.to.state.avg.pctnhnhpia                        0 #> ratio.to.state.avg.pctnhotheralone                   0 #> ratio.to.state.avg.pctnhmulti                        0 #> ratio.to.state.avg.pctnhwa                           0 #> hisp                                                 0 #> nhba                                                 0 #> nhaa                                                 0 #> nhaiana                                              0 #> nhnhpia                                              0 #> nhotheralone                                         0 #> nhmulti                                              0 #> nhwa                                                 0 #> pm                                                   0 #> o3                                                   0 #> cancer                                               0 #> resp                                                 0 #> dpm                                                  0 #> pctpre1960                                           0 #> traffic.score                                        0 #> proximity.npl                                        0 #> proximity.rmp                                        0 #> proximity.tsdf                                       0 #> proximity.npdes                                      0 #> ust                                                  0 #> rsei                                                 0 #> avg.pm                                               0 #> avg.o3                                               0 #> avg.cancer                                           0 #> avg.resp                                             0 #> avg.dpm                                              0 #> avg.pctpre1960                                       0 #> avg.traffic.score                                    0 #> avg.proximity.npl                                    0 #> avg.proximity.rmp                                    0 #> avg.proximity.tsdf                                   0 #> avg.proximity.npdes                                  0 #> avg.ust                                              0 #> avg.rsei                                             0 #> state.avg.pm                                         0 #> state.avg.o3                                         0 #> state.avg.cancer                                     0 #> state.avg.resp                                       0 #> state.avg.dpm                                        0 #> state.avg.pctpre1960                                 0 #> state.avg.traffic.score                              0 #> state.avg.proximity.npl                              0 #> state.avg.proximity.rmp                              0 #> state.avg.proximity.tsdf                             0 #> state.avg.proximity.npdes                            0 #> state.avg.ust                                        0 #> state.avg.rsei                                       0 #> pctile.pm                                            1 #> pctile.o3                                            1 #> pctile.cancer                                        1 #> pctile.resp                                          1 #> pctile.dpm                                           1 #> pctile.pctpre1960                                    1 #> pctile.traffic.score                                 1 #> pctile.proximity.npl                                 1 #> pctile.proximity.rmp                                 1 #> pctile.proximity.tsdf                                1 #> pctile.proximity.npdes                               1 #> pctile.ust                                           1 #> pctile.rsei                                          1 #> state.pctile.pm                                      1 #> state.pctile.o3                                      1 #> state.pctile.cancer                                  1 #> state.pctile.resp                                    1 #> state.pctile.dpm                                     1 #> state.pctile.pctpre1960                              1 #> state.pctile.traffic.score                           1 #> state.pctile.proximity.npl                           1 #> state.pctile.proximity.rmp                           1 #> state.pctile.proximity.tsdf                          1 #> state.pctile.proximity.npdes                         1 #> state.pctile.ust                                     1 #> state.pctile.rsei                                    1 #> ratio.to.avg.pm                                      0 #> ratio.to.avg.o3                                      0 #> ratio.to.avg.cancer                                  0 #> ratio.to.avg.resp                                    0 #> ratio.to.avg.dpm                                     0 #> ratio.to.avg.pctpre1960                              0 #> ratio.to.avg.traffic.score                           0 #> ratio.to.avg.proximity.npl                           0 #> ratio.to.avg.proximity.rmp                           0 #> ratio.to.avg.proximity.tsdf                          0 #> ratio.to.avg.proximity.npdes                         0 #> ratio.to.avg.ust                                     0 #> ratio.to.avg.rsei                                    0 #> ratio.to.state.avg.pm                                0 #> ratio.to.state.avg.o3                                0 #> ratio.to.state.avg.cancer                            0 #> ratio.to.state.avg.resp                              0 #> ratio.to.state.avg.dpm                               0 #> ratio.to.state.avg.pctpre1960                        0 #> ratio.to.state.avg.traffic.score                     0 #> ratio.to.state.avg.proximity.npl                     0 #> ratio.to.state.avg.proximity.rmp                     0 #> ratio.to.state.avg.proximity.tsdf                    0 #> ratio.to.state.avg.proximity.npdes                   0 #> ratio.to.state.avg.ust                               0 #> ratio.to.state.avg.rsei                              0 #> EJ.DISPARITY.pm.eo                                   0 #> EJ.DISPARITY.o3.eo                                   0 #> EJ.DISPARITY.cancer.eo                               0 #> EJ.DISPARITY.resp.eo                                 0 #> EJ.DISPARITY.dpm.eo                                  0 #> EJ.DISPARITY.pctpre1960.eo                           0 #> EJ.DISPARITY.traffic.score.eo                        0 #> EJ.DISPARITY.proximity.npl.eo                        0 #> EJ.DISPARITY.proximity.rmp.eo                        0 #> EJ.DISPARITY.proximity.tsdf.eo                       0 #> EJ.DISPARITY.proximity.npdes.eo                      0 #> EJ.DISPARITY.ust.eo                                  0 #> EJ.DISPARITY.rsei.eo                                 0 #> state.EJ.DISPARITY.pm.eo                             0 #> state.EJ.DISPARITY.o3.eo                             0 #> state.EJ.DISPARITY.cancer.eo                         0 #> state.EJ.DISPARITY.resp.eo                           0 #> state.EJ.DISPARITY.dpm.eo                            0 #> state.EJ.DISPARITY.pctpre1960.eo                     0 #> state.EJ.DISPARITY.traffic.score.eo                  0 #> state.EJ.DISPARITY.proximity.npl.eo                  0 #> state.EJ.DISPARITY.proximity.rmp.eo                  0 #> state.EJ.DISPARITY.proximity.tsdf.eo                 0 #> state.EJ.DISPARITY.proximity.npdes.eo                0 #> state.EJ.DISPARITY.ust.eo                            0 #> state.EJ.DISPARITY.rsei.eo                           0 #> EJ.DISPARITY.pm.supp                                 0 #> EJ.DISPARITY.o3.supp                                 0 #> EJ.DISPARITY.cancer.supp                             0 #> EJ.DISPARITY.resp.supp                               0 #> EJ.DISPARITY.dpm.supp                                0 #> EJ.DISPARITY.pctpre1960.supp                         0 #> EJ.DISPARITY.traffic.score.supp                      0 #> EJ.DISPARITY.proximity.npl.supp                      0 #> EJ.DISPARITY.proximity.rmp.supp                      0 #> EJ.DISPARITY.proximity.tsdf.supp                     0 #> EJ.DISPARITY.proximity.npdes.supp                    0 #> EJ.DISPARITY.ust.supp                                0 #> EJ.DISPARITY.rsei.supp                               0 #> state.EJ.DISPARITY.pm.supp                           0 #> state.EJ.DISPARITY.o3.supp                           0 #> state.EJ.DISPARITY.cancer.supp                       0 #> state.EJ.DISPARITY.resp.supp                         0 #> state.EJ.DISPARITY.dpm.supp                          0 #> state.EJ.DISPARITY.pctpre1960.supp                   0 #> state.EJ.DISPARITY.traffic.score.supp                0 #> state.EJ.DISPARITY.proximity.npl.supp                0 #> state.EJ.DISPARITY.proximity.rmp.supp                0 #> state.EJ.DISPARITY.proximity.tsdf.supp               0 #> state.EJ.DISPARITY.proximity.npdes.supp              0 #> state.EJ.DISPARITY.ust.supp                          0 #> state.EJ.DISPARITY.rsei.supp                         0 #> pctile.EJ.DISPARITY.pm.eo                            1 #> pctile.EJ.DISPARITY.o3.eo                            1 #> pctile.EJ.DISPARITY.cancer.eo                        1 #> pctile.EJ.DISPARITY.resp.eo                          1 #> pctile.EJ.DISPARITY.dpm.eo                           1 #> pctile.EJ.DISPARITY.pctpre1960.eo                    1 #> pctile.EJ.DISPARITY.traffic.score.eo                 1 #> pctile.EJ.DISPARITY.proximity.npl.eo                 1 #> pctile.EJ.DISPARITY.proximity.rmp.eo                 1 #> pctile.EJ.DISPARITY.proximity.tsdf.eo                1 #> pctile.EJ.DISPARITY.proximity.npdes.eo               1 #> pctile.EJ.DISPARITY.ust.eo                           1 #> pctile.EJ.DISPARITY.rsei.eo                          1 #> state.pctile.EJ.DISPARITY.pm.eo                      1 #> state.pctile.EJ.DISPARITY.o3.eo                      1 #> state.pctile.EJ.DISPARITY.cancer.eo                  1 #> state.pctile.EJ.DISPARITY.resp.eo                    1 #> state.pctile.EJ.DISPARITY.dpm.eo                     1 #> state.pctile.EJ.DISPARITY.pctpre1960.eo              1 #> state.pctile.EJ.DISPARITY.traffic.score.eo           1 #> state.pctile.EJ.DISPARITY.proximity.npl.eo           1 #> state.pctile.EJ.DISPARITY.proximity.rmp.eo           1 #> state.pctile.EJ.DISPARITY.proximity.tsdf.eo          1 #> state.pctile.EJ.DISPARITY.proximity.npdes.eo         1 #> state.pctile.EJ.DISPARITY.ust.eo                     1 #> state.pctile.EJ.DISPARITY.rsei.eo                    1 #> pctile.EJ.DISPARITY.pm.supp                          1 #> pctile.EJ.DISPARITY.o3.supp                          1 #> pctile.EJ.DISPARITY.cancer.supp                      1 #> pctile.EJ.DISPARITY.resp.supp                        1 #> pctile.EJ.DISPARITY.dpm.supp                         1 #> pctile.EJ.DISPARITY.pctpre1960.supp                  1 #> pctile.EJ.DISPARITY.traffic.score.supp               1 #> pctile.EJ.DISPARITY.proximity.npl.supp               1 #> pctile.EJ.DISPARITY.proximity.rmp.supp               1 #> pctile.EJ.DISPARITY.proximity.tsdf.supp              1 #> pctile.EJ.DISPARITY.proximity.npdes.supp             1 #> pctile.EJ.DISPARITY.ust.supp                         1 #> pctile.EJ.DISPARITY.rsei.supp                        1 #> state.pctile.EJ.DISPARITY.pm.supp                    1 #> state.pctile.EJ.DISPARITY.o3.supp                    1 #> state.pctile.EJ.DISPARITY.cancer.supp                1 #> state.pctile.EJ.DISPARITY.resp.supp                  1 #> state.pctile.EJ.DISPARITY.dpm.supp                   1 #> state.pctile.EJ.DISPARITY.pctpre1960.supp            1 #> state.pctile.EJ.DISPARITY.traffic.score.supp         1 #> state.pctile.EJ.DISPARITY.proximity.npl.supp         1 #> state.pctile.EJ.DISPARITY.proximity.rmp.supp         1 #> state.pctile.EJ.DISPARITY.proximity.tsdf.supp        1 #> state.pctile.EJ.DISPARITY.proximity.npdes.supp       1 #> state.pctile.EJ.DISPARITY.ust.supp                   1 #> state.pctile.EJ.DISPARITY.rsei.supp                  1 myinfo <- \"long\" cbind(varinfo(myvars, myinfo) ) #>                                                                                       long #> Demog.Index                                                              Demographic Index #> Demog.Index.Supp                                            Supplemental Demographic Index #> pctlowinc                                                                     % Low Income #> pctlingiso                                        % in limited English-speaking Households #> pctunemployed                                                                 % Unemployed #> pctlths                                             % with Less Than High School Education #> lowlifex                                                               Low life expectancy #> pctunder5                                                                    % under Age 5 #> pctover64                                                                    % over Age 64 #> pctmin                                                                   % People of Color #> pcthisp                                                               % Hispanic or Latino #> pctnhba                            % Black or African American (non-Hispanic, single race) #> pctnhaa                                                % Asian (non-Hispanic, single race) #> pctnhaiana                 % American Indian and Alaska Native (non-Hispanic, single race) #> pctnhnhpia        % Native Hawaiian and Other Pacific Islander (non-Hispanic, single race) #> pctnhotheralone                                   % Other race (non-Hispanic, single race) #> pctnhmulti                                              % Two or more races (non-Hispanic) #> pctnhwa                                                % White (non-Hispanic, single race) #> pm                                                    Particulate Matter (PM 2.5 in ug/m3) #> o3                                                                             Ozone (ppb) #> cancer                                           Air Toxics Cancer Risk (risk per million) #> resp                                                   Air Toxics Respiratory Hazard Index #> dpm                                           Air Toxics Diesel Particulate Matter (ug/m3) #> pctpre1960                                      Lead Paint Indicator (% pre-1960s housing) #> traffic.score          Traffic Proximity and Volume (daily traffic count/distance to road) #> proximity.npl                                 Superfund Proximity (site count/km distance) #> proximity.rmp                                   RMP Proximity (facility count/km distance) #> proximity.tsdf        Indicator for Hazardous Waste Proximity (facility count/km distance) #> proximity.npdes  Wastewater Discharge Indicator (toxicity-weighted concentration/distance) #> ust                                              Underground Storage Tanks (UST) indicator #> rsei                                                                 Toxic Releases to Air table_rounding_info(names_e) #>  [1] 2 1 0 2 2 1 0 2 2 1 0 1 0  varinfo(  var = c(names_these, names_d_pctile),  info = c(  \"topic_root_term\", \"varcategory\", \"vartype\", \"percentage\", \"pctile.\", \"calculation_type\" )) #>                          topic_root_term   varcategory  vartype percentage #> Demog.Index                  Demog.Index   Demographic      raw          1 #> Demog.Index.Supp        Demog.Index.Supp   Demographic      raw          1 #> pctlowinc                      pctlowinc   Demographic      raw          1 #> pctlingiso                    pctlingiso   Demographic      raw          1 #> pctunemployed              pctunemployed   Demographic      raw          1 #> pctlths                          pctlths   Demographic      raw          1 #> lowlifex                        lowlifex   Demographic      raw          1 #> pctunder5                      pctunder5   Demographic      raw          1 #> pctover64                      pctover64   Demographic      raw          1 #> pctmin                            pctmin   Demographic      raw          1 #> pcthisp                          pcthisp   Demographic      raw          1 #> pctnhba                          pctnhba   Demographic      raw          1 #> pctnhaa                          pctnhaa   Demographic      raw          1 #> pctnhaiana                    pctnhaiana   Demographic      raw          1 #> pctnhnhpia                    pctnhnhpia   Demographic      raw          1 #> pctnhotheralone          pctnhotheralone   Demographic      raw          1 #> pctnhmulti                    pctnhmulti   Demographic      raw          1 #> pctnhwa                          pctnhwa   Demographic      raw          1 #> pm                                    pm Environmental      raw            #> o3                                    o3 Environmental      raw            #> cancer                            cancer Environmental      raw            #> resp                                resp Environmental      raw            #> dpm                                  dpm Environmental      raw            #> pctpre1960                    pctpre1960 Environmental      raw          1 #> traffic.score              traffic.score Environmental      raw            #> proximity.npl              proximity.npl Environmental      raw            #> proximity.rmp              proximity.rmp Environmental      raw            #> proximity.tsdf            proximity.tsdf Environmental      raw            #> proximity.npdes          proximity.npdes Environmental      raw            #> ust                                  ust Environmental      raw            #> rsei                                rsei Environmental      raw            #> pctile.Demog.Index           Demog.Index   Demographic uspctile            #> pctile.Demog.Index.Supp Demog.Index.Supp   Demographic uspctile            #> pctile.pctlowinc               pctlowinc   Demographic uspctile            #> pctile.pctlingiso             pctlingiso   Demographic uspctile            #> pctile.pctunemployed       pctunemployed   Demographic uspctile            #> pctile.pctlths                   pctlths   Demographic uspctile            #> pctile.lowlifex                 lowlifex   Demographic uspctile            #> pctile.pctunder5               pctunder5   Demographic uspctile            #> pctile.pctover64               pctover64   Demographic uspctile            #> pctile.pctmin                     pctmin   Demographic uspctile            #>                         pctile. calculation_type #> Demog.Index                   0  percent formula #> Demog.Index.Supp              0  percent formula #> pctlowinc                     0  percent formula #> pctlingiso                    0  percent formula #> pctunemployed                 0  percent formula #> pctlths                       0  percent formula #> lowlifex                      0      popwtd mean #> pctunder5                     0  percent formula #> pctover64                     0  percent formula #> pctmin                        0  percent formula #> pcthisp                       0  percent formula #> pctnhba                       0  percent formula #> pctnhaa                       0  percent formula #> pctnhaiana                    0  percent formula #> pctnhnhpia                    0  percent formula #> pctnhotheralone               0  percent formula #> pctnhmulti                    0  percent formula #> pctnhwa                       0  percent formula #> pm                            0      popwtd mean #> o3                            0      popwtd mean #> cancer                        0      popwtd mean #> resp                          0      popwtd mean #> dpm                           0      popwtd mean #> pctpre1960                    0  percent formula #> traffic.score                 0      popwtd mean #> proximity.npl                 0      popwtd mean #> proximity.rmp                 0      popwtd mean #> proximity.tsdf                0      popwtd mean #> proximity.npdes               0      popwtd mean #> ust                           0      popwtd mean #> rsei                          0      popwtd mean #> pctile.Demog.Index            1         lookedup #> pctile.Demog.Index.Supp       1         lookedup #> pctile.pctlowinc              1         lookedup #> pctile.pctlingiso             1         lookedup #> pctile.pctunemployed          1         lookedup #> pctile.pctlths                1         lookedup #> pctile.lowlifex               1         lookedup #> pctile.pctunder5              1         lookedup #> pctile.pctover64              1         lookedup #> pctile.pctmin                 1         lookedup  varinfo(names_all_r, c(\"varcategory\", \"varlist\", \"in_api\", \"in_bgcsv\")) #>                                                  varcategory #> pop                                              Demographic #> nonmins                                          Demographic #> povknownratio                                    Demographic #> age25up                                          Demographic #> hhlds                                            Demographic #> unemployedbase                                   Demographic #> pre1960                                          Demographic #> builtunits                                       Demographic #> lowinc                                           Demographic #> lingiso                                          Demographic #> unemployed                                       Demographic #> lths                                             Demographic #> under5                                           Demographic #> over64                                           Demographic #> mins                                             Demographic #> Demog.Index                                      Demographic #> Demog.Index.Supp                                 Demographic #> pctlowinc                                        Demographic #> pctlingiso                                       Demographic #> pctunemployed                                    Demographic #> pctlths                                          Demographic #> lowlifex                                         Demographic #> pctunder5                                        Demographic #> pctover64                                        Demographic #> pctmin                                           Demographic #> avg.Demog.Index                                  Demographic #> avg.Demog.Index.Supp                             Demographic #> avg.pctlowinc                                    Demographic #> avg.pctlingiso                                   Demographic #> avg.pctunemployed                                Demographic #> avg.pctlths                                      Demographic #> avg.lowlifex                                     Demographic #> avg.pctunder5                                    Demographic #> avg.pctover64                                    Demographic #> avg.pctmin                                       Demographic #> state.avg.Demog.Index                            Demographic #> state.avg.Demog.Index.Supp                       Demographic #> state.avg.pctlowinc                              Demographic #> state.avg.pctlingiso                             Demographic #> state.avg.pctunemployed                          Demographic #> state.avg.pctlths                                Demographic #> state.avg.lowlifex                               Demographic #> state.avg.pctunder5                              Demographic #> state.avg.pctover64                              Demographic #> state.avg.pctmin                                 Demographic #> pctile.Demog.Index                               Demographic #> pctile.Demog.Index.Supp                          Demographic #> pctile.pctlowinc                                 Demographic #> pctile.pctlingiso                                Demographic #> pctile.pctunemployed                             Demographic #> pctile.pctlths                                   Demographic #> pctile.lowlifex                                  Demographic #> pctile.pctunder5                                 Demographic #> pctile.pctover64                                 Demographic #> pctile.pctmin                                    Demographic #> state.pctile.Demog.Index                         Demographic #> state.pctile.Demog.Index.Supp                    Demographic #> state.pctile.pctlowinc                           Demographic #> state.pctile.pctlingiso                          Demographic #> state.pctile.pctunemployed                       Demographic #> state.pctile.pctlths                             Demographic #> state.pctile.lowlifex                            Demographic #> state.pctile.pctunder5                           Demographic #> state.pctile.pctover64                           Demographic #> state.pctile.pctmin                              Demographic #> ratio.to.avg.Demog.Index                         Demographic #> ratio.to.avg.Demog.Index.Supp                    Demographic #> ratio.to.avg.pctlowinc                           Demographic #> ratio.to.avg.pctlingiso                          Demographic #> ratio.to.avg.pctunemployed                       Demographic #> ratio.to.avg.pctlths                             Demographic #> ratio.to.avg.lowlifex                            Demographic #> ratio.to.avg.pctunder5                           Demographic #> ratio.to.avg.pctover64                           Demographic #> ratio.to.avg.pctmin                              Demographic #> ratio.to.state.avg.Demog.Index                   Demographic #> ratio.to.state.avg.Demog.Index.Supp              Demographic #> ratio.to.state.avg.pctlowinc                     Demographic #> ratio.to.state.avg.pctlingiso                    Demographic #> ratio.to.state.avg.pctunemployed                 Demographic #> ratio.to.state.avg.pctlths                       Demographic #> ratio.to.state.avg.lowlifex                      Demographic #> ratio.to.state.avg.pctunder5                     Demographic #> ratio.to.state.avg.pctover64                     Demographic #> ratio.to.state.avg.pctmin                        Demographic #> pcthisp                                          Demographic #> pctnhba                                          Demographic #> pctnhaa                                          Demographic #> pctnhaiana                                       Demographic #> pctnhnhpia                                       Demographic #> pctnhotheralone                                  Demographic #> pctnhmulti                                       Demographic #> pctnhwa                                          Demographic #> avg.pcthisp                                      Demographic #> avg.pctnhba                                      Demographic #> avg.pctnhaa                                      Demographic #> avg.pctnhaiana                                   Demographic #> avg.pctnhnhpia                                   Demographic #> avg.pctnhotheralone                              Demographic #> avg.pctnhmulti                                   Demographic #> avg.pctnhwa                                      Demographic #> state.avg.pcthisp                                Demographic #> state.avg.pctnhba                                Demographic #> state.avg.pctnhaa                                Demographic #> state.avg.pctnhaiana                             Demographic #> state.avg.pctnhnhpia                             Demographic #> state.avg.pctnhotheralone                        Demographic #> state.avg.pctnhmulti                             Demographic #> state.avg.pctnhwa                                Demographic #> pctile.pcthisp                                   Demographic #> pctile.pctnhba                                   Demographic #> pctile.pctnhaa                                   Demographic #> pctile.pctnhaiana                                Demographic #> pctile.pctnhnhpia                                Demographic #> pctile.pctnhotheralone                           Demographic #> pctile.pctnhmulti                                Demographic #> pctile.pctnhwa                                   Demographic #> state.pctile.pcthisp                             Demographic #> state.pctile.pctnhba                             Demographic #> state.pctile.pctnhaa                             Demographic #> state.pctile.pctnhaiana                          Demographic #> state.pctile.pctnhnhpia                          Demographic #> state.pctile.pctnhotheralone                     Demographic #> state.pctile.pctnhmulti                          Demographic #> state.pctile.pctnhwa                             Demographic #> ratio.to.avg.pcthisp                             Demographic #> ratio.to.avg.pctnhba                             Demographic #> ratio.to.avg.pctnhaa                             Demographic #> ratio.to.avg.pctnhaiana                          Demographic #> ratio.to.avg.pctnhnhpia                          Demographic #> ratio.to.avg.pctnhotheralone                     Demographic #> ratio.to.avg.pctnhmulti                          Demographic #> ratio.to.avg.pctnhwa                             Demographic #> ratio.to.state.avg.pcthisp                       Demographic #> ratio.to.state.avg.pctnhba                       Demographic #> ratio.to.state.avg.pctnhaa                       Demographic #> ratio.to.state.avg.pctnhaiana                    Demographic #> ratio.to.state.avg.pctnhnhpia                    Demographic #> ratio.to.state.avg.pctnhotheralone               Demographic #> ratio.to.state.avg.pctnhmulti                    Demographic #> ratio.to.state.avg.pctnhwa                       Demographic #> hisp                                             Demographic #> nhba                                             Demographic #> nhaa                                             Demographic #> nhaiana                                          Demographic #> nhnhpia                                          Demographic #> nhotheralone                                     Demographic #> nhmulti                                          Demographic #> nhwa                                             Demographic #> pm                                             Environmental #> o3                                             Environmental #> cancer                                         Environmental #> resp                                           Environmental #> dpm                                            Environmental #> pctpre1960                                     Environmental #> traffic.score                                  Environmental #> proximity.npl                                  Environmental #> proximity.rmp                                  Environmental #> proximity.tsdf                                 Environmental #> proximity.npdes                                Environmental #> ust                                            Environmental #> rsei                                           Environmental #> avg.pm                                         Environmental #> avg.o3                                         Environmental #> avg.cancer                                     Environmental #> avg.resp                                       Environmental #> avg.dpm                                        Environmental #> avg.pctpre1960                                 Environmental #> avg.traffic.score                              Environmental #> avg.proximity.npl                              Environmental #> avg.proximity.rmp                              Environmental #> avg.proximity.tsdf                             Environmental #> avg.proximity.npdes                            Environmental #> avg.ust                                        Environmental #> avg.rsei                                       Environmental #> state.avg.pm                                   Environmental #> state.avg.o3                                   Environmental #> state.avg.cancer                               Environmental #> state.avg.resp                                 Environmental #> state.avg.dpm                                  Environmental #> state.avg.pctpre1960                           Environmental #> state.avg.traffic.score                        Environmental #> state.avg.proximity.npl                        Environmental #> state.avg.proximity.rmp                        Environmental #> state.avg.proximity.tsdf                       Environmental #> state.avg.proximity.npdes                      Environmental #> state.avg.ust                                  Environmental #> state.avg.rsei                                 Environmental #> pctile.pm                                      Environmental #> pctile.o3                                      Environmental #> pctile.cancer                                  Environmental #> pctile.resp                                    Environmental #> pctile.dpm                                     Environmental #> pctile.pctpre1960                              Environmental #> pctile.traffic.score                           Environmental #> pctile.proximity.npl                           Environmental #> pctile.proximity.rmp                           Environmental #> pctile.proximity.tsdf                          Environmental #> pctile.proximity.npdes                         Environmental #> pctile.ust                                     Environmental #> pctile.rsei                                    Environmental #> state.pctile.pm                                Environmental #> state.pctile.o3                                Environmental #> state.pctile.cancer                            Environmental #> state.pctile.resp                              Environmental #> state.pctile.dpm                               Environmental #> state.pctile.pctpre1960                        Environmental #> state.pctile.traffic.score                     Environmental #> state.pctile.proximity.npl                     Environmental #> state.pctile.proximity.rmp                     Environmental #> state.pctile.proximity.tsdf                    Environmental #> state.pctile.proximity.npdes                   Environmental #> state.pctile.ust                               Environmental #> state.pctile.rsei                              Environmental #> ratio.to.avg.pm                                Environmental #> ratio.to.avg.o3                                Environmental #> ratio.to.avg.cancer                            Environmental #> ratio.to.avg.resp                              Environmental #> ratio.to.avg.dpm                               Environmental #> ratio.to.avg.pctpre1960                        Environmental #> ratio.to.avg.traffic.score                     Environmental #> ratio.to.avg.proximity.npl                     Environmental #> ratio.to.avg.proximity.rmp                     Environmental #> ratio.to.avg.proximity.tsdf                    Environmental #> ratio.to.avg.proximity.npdes                   Environmental #> ratio.to.avg.ust                               Environmental #> ratio.to.avg.rsei                              Environmental #> ratio.to.state.avg.pm                          Environmental #> ratio.to.state.avg.o3                          Environmental #> ratio.to.state.avg.cancer                      Environmental #> ratio.to.state.avg.resp                        Environmental #> ratio.to.state.avg.dpm                         Environmental #> ratio.to.state.avg.pctpre1960                  Environmental #> ratio.to.state.avg.traffic.score               Environmental #> ratio.to.state.avg.proximity.npl               Environmental #> ratio.to.state.avg.proximity.rmp               Environmental #> ratio.to.state.avg.proximity.tsdf              Environmental #> ratio.to.state.avg.proximity.npdes             Environmental #> ratio.to.state.avg.ust                         Environmental #> ratio.to.state.avg.rsei                        Environmental #> EJ.DISPARITY.pm.eo                                  EJ Index #> EJ.DISPARITY.o3.eo                                  EJ Index #> EJ.DISPARITY.cancer.eo                              EJ Index #> EJ.DISPARITY.resp.eo                                EJ Index #> EJ.DISPARITY.dpm.eo                                 EJ Index #> EJ.DISPARITY.pctpre1960.eo                          EJ Index #> EJ.DISPARITY.traffic.score.eo                       EJ Index #> EJ.DISPARITY.proximity.npl.eo                       EJ Index #> EJ.DISPARITY.proximity.rmp.eo                       EJ Index #> EJ.DISPARITY.proximity.tsdf.eo                      EJ Index #> EJ.DISPARITY.proximity.npdes.eo                     EJ Index #> EJ.DISPARITY.ust.eo                                 EJ Index #> EJ.DISPARITY.rsei.eo                                EJ Index #> state.EJ.DISPARITY.pm.eo                            EJ Index #> state.EJ.DISPARITY.o3.eo                            EJ Index #> state.EJ.DISPARITY.cancer.eo                        EJ Index #> state.EJ.DISPARITY.resp.eo                          EJ Index #> state.EJ.DISPARITY.dpm.eo                           EJ Index #> state.EJ.DISPARITY.pctpre1960.eo                    EJ Index #> state.EJ.DISPARITY.traffic.score.eo                 EJ Index #> state.EJ.DISPARITY.proximity.npl.eo                 EJ Index #> state.EJ.DISPARITY.proximity.rmp.eo                 EJ Index #> state.EJ.DISPARITY.proximity.tsdf.eo                EJ Index #> state.EJ.DISPARITY.proximity.npdes.eo               EJ Index #> state.EJ.DISPARITY.ust.eo                           EJ Index #> state.EJ.DISPARITY.rsei.eo                          EJ Index #> EJ.DISPARITY.pm.supp                                EJ Index #> EJ.DISPARITY.o3.supp                                EJ Index #> EJ.DISPARITY.cancer.supp                            EJ Index #> EJ.DISPARITY.resp.supp                              EJ Index #> EJ.DISPARITY.dpm.supp                               EJ Index #> EJ.DISPARITY.pctpre1960.supp                        EJ Index #> EJ.DISPARITY.traffic.score.supp                     EJ Index #> EJ.DISPARITY.proximity.npl.supp                     EJ Index #> EJ.DISPARITY.proximity.rmp.supp                     EJ Index #> EJ.DISPARITY.proximity.tsdf.supp                    EJ Index #> EJ.DISPARITY.proximity.npdes.supp                   EJ Index #> EJ.DISPARITY.ust.supp                               EJ Index #> EJ.DISPARITY.rsei.supp                              EJ Index #> state.EJ.DISPARITY.pm.supp                          EJ Index #> state.EJ.DISPARITY.o3.supp                          EJ Index #> state.EJ.DISPARITY.cancer.supp                      EJ Index #> state.EJ.DISPARITY.resp.supp                        EJ Index #> state.EJ.DISPARITY.dpm.supp                         EJ Index #> state.EJ.DISPARITY.pctpre1960.supp                  EJ Index #> state.EJ.DISPARITY.traffic.score.supp               EJ Index #> state.EJ.DISPARITY.proximity.npl.supp               EJ Index #> state.EJ.DISPARITY.proximity.rmp.supp               EJ Index #> state.EJ.DISPARITY.proximity.tsdf.supp              EJ Index #> state.EJ.DISPARITY.proximity.npdes.supp             EJ Index #> state.EJ.DISPARITY.ust.supp                         EJ Index #> state.EJ.DISPARITY.rsei.supp                        EJ Index #> pctile.EJ.DISPARITY.pm.eo                           EJ Index #> pctile.EJ.DISPARITY.o3.eo                           EJ Index #> pctile.EJ.DISPARITY.cancer.eo                       EJ Index #> pctile.EJ.DISPARITY.resp.eo                         EJ Index #> pctile.EJ.DISPARITY.dpm.eo                          EJ Index #> pctile.EJ.DISPARITY.pctpre1960.eo                   EJ Index #> pctile.EJ.DISPARITY.traffic.score.eo                EJ Index #> pctile.EJ.DISPARITY.proximity.npl.eo                EJ Index #> pctile.EJ.DISPARITY.proximity.rmp.eo                EJ Index #> pctile.EJ.DISPARITY.proximity.tsdf.eo               EJ Index #> pctile.EJ.DISPARITY.proximity.npdes.eo              EJ Index #> pctile.EJ.DISPARITY.ust.eo                          EJ Index #> pctile.EJ.DISPARITY.rsei.eo                         EJ Index #> state.pctile.EJ.DISPARITY.pm.eo                     EJ Index #> state.pctile.EJ.DISPARITY.o3.eo                     EJ Index #> state.pctile.EJ.DISPARITY.cancer.eo                 EJ Index #> state.pctile.EJ.DISPARITY.resp.eo                   EJ Index #> state.pctile.EJ.DISPARITY.dpm.eo                    EJ Index #> state.pctile.EJ.DISPARITY.pctpre1960.eo             EJ Index #> state.pctile.EJ.DISPARITY.traffic.score.eo          EJ Index #> state.pctile.EJ.DISPARITY.proximity.npl.eo          EJ Index #> state.pctile.EJ.DISPARITY.proximity.rmp.eo          EJ Index #> state.pctile.EJ.DISPARITY.proximity.tsdf.eo         EJ Index #> state.pctile.EJ.DISPARITY.proximity.npdes.eo        EJ Index #> state.pctile.EJ.DISPARITY.ust.eo                    EJ Index #> state.pctile.EJ.DISPARITY.rsei.eo                   EJ Index #> pctile.EJ.DISPARITY.pm.supp                         EJ Index #> pctile.EJ.DISPARITY.o3.supp                         EJ Index #> pctile.EJ.DISPARITY.cancer.supp                     EJ Index #> pctile.EJ.DISPARITY.resp.supp                       EJ Index #> pctile.EJ.DISPARITY.dpm.supp                        EJ Index #> pctile.EJ.DISPARITY.pctpre1960.supp                 EJ Index #> pctile.EJ.DISPARITY.traffic.score.supp              EJ Index #> pctile.EJ.DISPARITY.proximity.npl.supp              EJ Index #> pctile.EJ.DISPARITY.proximity.rmp.supp              EJ Index #> pctile.EJ.DISPARITY.proximity.tsdf.supp             EJ Index #> pctile.EJ.DISPARITY.proximity.npdes.supp            EJ Index #> pctile.EJ.DISPARITY.ust.supp                        EJ Index #> pctile.EJ.DISPARITY.rsei.supp                       EJ Index #> state.pctile.EJ.DISPARITY.pm.supp                   EJ Index #> state.pctile.EJ.DISPARITY.o3.supp                   EJ Index #> state.pctile.EJ.DISPARITY.cancer.supp               EJ Index #> state.pctile.EJ.DISPARITY.resp.supp                 EJ Index #> state.pctile.EJ.DISPARITY.dpm.supp                  EJ Index #> state.pctile.EJ.DISPARITY.pctpre1960.supp           EJ Index #> state.pctile.EJ.DISPARITY.traffic.score.supp        EJ Index #> state.pctile.EJ.DISPARITY.proximity.npl.supp        EJ Index #> state.pctile.EJ.DISPARITY.proximity.rmp.supp        EJ Index #> state.pctile.EJ.DISPARITY.proximity.tsdf.supp       EJ Index #> state.pctile.EJ.DISPARITY.proximity.npdes.supp      EJ Index #> state.pctile.EJ.DISPARITY.ust.supp                  EJ Index #> state.pctile.EJ.DISPARITY.rsei.supp                 EJ Index #>                                                                             varlist #> pop                                                             names_d_other_count #> nonmins                                                         names_d_other_count #> povknownratio                                                   names_d_other_count #> age25up                                                         names_d_other_count #> hhlds                                                           names_d_other_count #> unemployedbase                                                  names_d_other_count #> pre1960                                                         names_d_other_count #> builtunits                                                      names_d_other_count #> lowinc                                                                names_d_count #> lingiso                                                               names_d_count #> unemployed                                                            names_d_count #> lths                                                                  names_d_count #> under5                                                                names_d_count #> over64                                                                names_d_count #> mins                                                                  names_d_count #> Demog.Index                                                                 names_d #> Demog.Index.Supp                                                            names_d #> pctlowinc                                                                   names_d #> pctlingiso                                                                  names_d #> pctunemployed                                                               names_d #> pctlths                                                                     names_d #> lowlifex                                                                    names_d #> pctunder5                                                                   names_d #> pctover64                                                                   names_d #> pctmin                                                                      names_d #> avg.Demog.Index                                                         names_d_avg #> avg.Demog.Index.Supp                                                    names_d_avg #> avg.pctlowinc                                                           names_d_avg #> avg.pctlingiso                                                          names_d_avg #> avg.pctunemployed                                                       names_d_avg #> avg.pctlths                                                             names_d_avg #> avg.lowlifex                                                            names_d_avg #> avg.pctunder5                                                           names_d_avg #> avg.pctover64                                                           names_d_avg #> avg.pctmin                                                              names_d_avg #> state.avg.Demog.Index                                             names_d_state_avg #> state.avg.Demog.Index.Supp                                        names_d_state_avg #> state.avg.pctlowinc                                               names_d_state_avg #> state.avg.pctlingiso                                              names_d_state_avg #> state.avg.pctunemployed                                           names_d_state_avg #> state.avg.pctlths                                                 names_d_state_avg #> state.avg.lowlifex                                                names_d_state_avg #> state.avg.pctunder5                                               names_d_state_avg #> state.avg.pctover64                                               names_d_state_avg #> state.avg.pctmin                                                  names_d_state_avg #> pctile.Demog.Index                                                   names_d_pctile #> pctile.Demog.Index.Supp                                              names_d_pctile #> pctile.pctlowinc                                                     names_d_pctile #> pctile.pctlingiso                                                    names_d_pctile #> pctile.pctunemployed                                                 names_d_pctile #> pctile.pctlths                                                       names_d_pctile #> pctile.lowlifex                                                      names_d_pctile #> pctile.pctunder5                                                     names_d_pctile #> pctile.pctover64                                                     names_d_pctile #> pctile.pctmin                                                        names_d_pctile #> state.pctile.Demog.Index                                       names_d_state_pctile #> state.pctile.Demog.Index.Supp                                  names_d_state_pctile #> state.pctile.pctlowinc                                         names_d_state_pctile #> state.pctile.pctlingiso                                        names_d_state_pctile #> state.pctile.pctunemployed                                     names_d_state_pctile #> state.pctile.pctlths                                           names_d_state_pctile #> state.pctile.lowlifex                                          names_d_state_pctile #> state.pctile.pctunder5                                         names_d_state_pctile #> state.pctile.pctover64                                         names_d_state_pctile #> state.pctile.pctmin                                            names_d_state_pctile #> ratio.to.avg.Demog.Index                                       names_d_ratio_to_avg #> ratio.to.avg.Demog.Index.Supp                                  names_d_ratio_to_avg #> ratio.to.avg.pctlowinc                                         names_d_ratio_to_avg #> ratio.to.avg.pctlingiso                                        names_d_ratio_to_avg #> ratio.to.avg.pctunemployed                                     names_d_ratio_to_avg #> ratio.to.avg.pctlths                                           names_d_ratio_to_avg #> ratio.to.avg.lowlifex                                          names_d_ratio_to_avg #> ratio.to.avg.pctunder5                                         names_d_ratio_to_avg #> ratio.to.avg.pctover64                                         names_d_ratio_to_avg #> ratio.to.avg.pctmin                                            names_d_ratio_to_avg #> ratio.to.state.avg.Demog.Index                           names_d_ratio_to_state_avg #> ratio.to.state.avg.Demog.Index.Supp                      names_d_ratio_to_state_avg #> ratio.to.state.avg.pctlowinc                             names_d_ratio_to_state_avg #> ratio.to.state.avg.pctlingiso                            names_d_ratio_to_state_avg #> ratio.to.state.avg.pctunemployed                         names_d_ratio_to_state_avg #> ratio.to.state.avg.pctlths                               names_d_ratio_to_state_avg #> ratio.to.state.avg.lowlifex                              names_d_ratio_to_state_avg #> ratio.to.state.avg.pctunder5                             names_d_ratio_to_state_avg #> ratio.to.state.avg.pctover64                             names_d_ratio_to_state_avg #> ratio.to.state.avg.pctmin                                names_d_ratio_to_state_avg #> pcthisp                                                           names_d_subgroups #> pctnhba                                                           names_d_subgroups #> pctnhaa                                                           names_d_subgroups #> pctnhaiana                                                        names_d_subgroups #> pctnhnhpia                                                        names_d_subgroups #> pctnhotheralone                                                   names_d_subgroups #> pctnhmulti                                                        names_d_subgroups #> pctnhwa                                                           names_d_subgroups #> avg.pcthisp                                                   names_d_subgroups_avg #> avg.pctnhba                                                   names_d_subgroups_avg #> avg.pctnhaa                                                   names_d_subgroups_avg #> avg.pctnhaiana                                                names_d_subgroups_avg #> avg.pctnhnhpia                                                names_d_subgroups_avg #> avg.pctnhotheralone                                           names_d_subgroups_avg #> avg.pctnhmulti                                                names_d_subgroups_avg #> avg.pctnhwa                                                   names_d_subgroups_avg #> state.avg.pcthisp                                       names_d_subgroups_state_avg #> state.avg.pctnhba                                       names_d_subgroups_state_avg #> state.avg.pctnhaa                                       names_d_subgroups_state_avg #> state.avg.pctnhaiana                                    names_d_subgroups_state_avg #> state.avg.pctnhnhpia                                    names_d_subgroups_state_avg #> state.avg.pctnhotheralone                               names_d_subgroups_state_avg #> state.avg.pctnhmulti                                    names_d_subgroups_state_avg #> state.avg.pctnhwa                                       names_d_subgroups_state_avg #> pctile.pcthisp                                             names_d_subgroups_pctile #> pctile.pctnhba                                             names_d_subgroups_pctile #> pctile.pctnhaa                                             names_d_subgroups_pctile #> pctile.pctnhaiana                                          names_d_subgroups_pctile #> pctile.pctnhnhpia                                          names_d_subgroups_pctile #> pctile.pctnhotheralone                                     names_d_subgroups_pctile #> pctile.pctnhmulti                                          names_d_subgroups_pctile #> pctile.pctnhwa                                             names_d_subgroups_pctile #> state.pctile.pcthisp                                 names_d_subgroups_state_pctile #> state.pctile.pctnhba                                 names_d_subgroups_state_pctile #> state.pctile.pctnhaa                                 names_d_subgroups_state_pctile #> state.pctile.pctnhaiana                              names_d_subgroups_state_pctile #> state.pctile.pctnhnhpia                              names_d_subgroups_state_pctile #> state.pctile.pctnhotheralone                         names_d_subgroups_state_pctile #> state.pctile.pctnhmulti                              names_d_subgroups_state_pctile #> state.pctile.pctnhwa                                 names_d_subgroups_state_pctile #> ratio.to.avg.pcthisp                                 names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhba                                 names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhaa                                 names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhaiana                              names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhnhpia                              names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhotheralone                         names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhmulti                              names_d_subgroups_ratio_to_avg #> ratio.to.avg.pctnhwa                                 names_d_subgroups_ratio_to_avg #> ratio.to.state.avg.pcthisp                     names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhba                     names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhaa                     names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhaiana                  names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhnhpia                  names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhotheralone             names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhmulti                  names_d_subgroups_ratio_to_state_avg #> ratio.to.state.avg.pctnhwa                     names_d_subgroups_ratio_to_state_avg #> hisp                                                        names_d_subgroups_count #> nhba                                                        names_d_subgroups_count #> nhaa                                                        names_d_subgroups_count #> nhaiana                                                     names_d_subgroups_count #> nhnhpia                                                     names_d_subgroups_count #> nhotheralone                                                names_d_subgroups_count #> nhmulti                                                     names_d_subgroups_count #> nhwa                                                        names_d_subgroups_count #> pm                                                                          names_e #> o3                                                                          names_e #> cancer                                                                      names_e #> resp                                                                        names_e #> dpm                                                                         names_e #> pctpre1960                                                                  names_e #> traffic.score                                                               names_e #> proximity.npl                                                               names_e #> proximity.rmp                                                               names_e #> proximity.tsdf                                                              names_e #> proximity.npdes                                                             names_e #> ust                                                                         names_e #> rsei                                                                        names_e #> avg.pm                                                                  names_e_avg #> avg.o3                                                                  names_e_avg #> avg.cancer                                                              names_e_avg #> avg.resp                                                                names_e_avg #> avg.dpm                                                                 names_e_avg #> avg.pctpre1960                                                          names_e_avg #> avg.traffic.score                                                       names_e_avg #> avg.proximity.npl                                                       names_e_avg #> avg.proximity.rmp                                                       names_e_avg #> avg.proximity.tsdf                                                      names_e_avg #> avg.proximity.npdes                                                     names_e_avg #> avg.ust                                                                 names_e_avg #> avg.rsei                                                                names_e_avg #> state.avg.pm                                                      names_e_state_avg #> state.avg.o3                                                      names_e_state_avg #> state.avg.cancer                                                  names_e_state_avg #> state.avg.resp                                                    names_e_state_avg #> state.avg.dpm                                                     names_e_state_avg #> state.avg.pctpre1960                                              names_e_state_avg #> state.avg.traffic.score                                           names_e_state_avg #> state.avg.proximity.npl                                           names_e_state_avg #> state.avg.proximity.rmp                                           names_e_state_avg #> state.avg.proximity.tsdf                                          names_e_state_avg #> state.avg.proximity.npdes                                         names_e_state_avg #> state.avg.ust                                                     names_e_state_avg #> state.avg.rsei                                                    names_e_state_avg #> pctile.pm                                                            names_e_pctile #> pctile.o3                                                            names_e_pctile #> pctile.cancer                                                        names_e_pctile #> pctile.resp                                                          names_e_pctile #> pctile.dpm                                                           names_e_pctile #> pctile.pctpre1960                                                    names_e_pctile #> pctile.traffic.score                                                 names_e_pctile #> pctile.proximity.npl                                                 names_e_pctile #> pctile.proximity.rmp                                                 names_e_pctile #> pctile.proximity.tsdf                                                names_e_pctile #> pctile.proximity.npdes                                               names_e_pctile #> pctile.ust                                                           names_e_pctile #> pctile.rsei                                                          names_e_pctile #> state.pctile.pm                                                names_e_state_pctile #> state.pctile.o3                                                names_e_state_pctile #> state.pctile.cancer                                            names_e_state_pctile #> state.pctile.resp                                              names_e_state_pctile #> state.pctile.dpm                                               names_e_state_pctile #> state.pctile.pctpre1960                                        names_e_state_pctile #> state.pctile.traffic.score                                     names_e_state_pctile #> state.pctile.proximity.npl                                     names_e_state_pctile #> state.pctile.proximity.rmp                                     names_e_state_pctile #> state.pctile.proximity.tsdf                                    names_e_state_pctile #> state.pctile.proximity.npdes                                   names_e_state_pctile #> state.pctile.ust                                               names_e_state_pctile #> state.pctile.rsei                                              names_e_state_pctile #> ratio.to.avg.pm                                                names_e_ratio_to_avg #> ratio.to.avg.o3                                                names_e_ratio_to_avg #> ratio.to.avg.cancer                                            names_e_ratio_to_avg #> ratio.to.avg.resp                                              names_e_ratio_to_avg #> ratio.to.avg.dpm                                               names_e_ratio_to_avg #> ratio.to.avg.pctpre1960                                        names_e_ratio_to_avg #> ratio.to.avg.traffic.score                                     names_e_ratio_to_avg #> ratio.to.avg.proximity.npl                                     names_e_ratio_to_avg #> ratio.to.avg.proximity.rmp                                     names_e_ratio_to_avg #> ratio.to.avg.proximity.tsdf                                    names_e_ratio_to_avg #> ratio.to.avg.proximity.npdes                                   names_e_ratio_to_avg #> ratio.to.avg.ust                                               names_e_ratio_to_avg #> ratio.to.avg.rsei                                              names_e_ratio_to_avg #> ratio.to.state.avg.pm                                    names_e_ratio_to_state_avg #> ratio.to.state.avg.o3                                    names_e_ratio_to_state_avg #> ratio.to.state.avg.cancer                                names_e_ratio_to_state_avg #> ratio.to.state.avg.resp                                  names_e_ratio_to_state_avg #> ratio.to.state.avg.dpm                                   names_e_ratio_to_state_avg #> ratio.to.state.avg.pctpre1960                            names_e_ratio_to_state_avg #> ratio.to.state.avg.traffic.score                         names_e_ratio_to_state_avg #> ratio.to.state.avg.proximity.npl                         names_e_ratio_to_state_avg #> ratio.to.state.avg.proximity.rmp                         names_e_ratio_to_state_avg #> ratio.to.state.avg.proximity.tsdf                        names_e_ratio_to_state_avg #> ratio.to.state.avg.proximity.npdes                       names_e_ratio_to_state_avg #> ratio.to.state.avg.ust                                   names_e_ratio_to_state_avg #> ratio.to.state.avg.rsei                                  names_e_ratio_to_state_avg #> EJ.DISPARITY.pm.eo                                                         names_ej #> EJ.DISPARITY.o3.eo                                                         names_ej #> EJ.DISPARITY.cancer.eo                                                     names_ej #> EJ.DISPARITY.resp.eo                                                       names_ej #> EJ.DISPARITY.dpm.eo                                                        names_ej #> EJ.DISPARITY.pctpre1960.eo                                                 names_ej #> EJ.DISPARITY.traffic.score.eo                                              names_ej #> EJ.DISPARITY.proximity.npl.eo                                              names_ej #> EJ.DISPARITY.proximity.rmp.eo                                              names_ej #> EJ.DISPARITY.proximity.tsdf.eo                                             names_ej #> EJ.DISPARITY.proximity.npdes.eo                                            names_ej #> EJ.DISPARITY.ust.eo                                                        names_ej #> EJ.DISPARITY.rsei.eo                                                       names_ej #> state.EJ.DISPARITY.pm.eo                                             names_ej_state #> state.EJ.DISPARITY.o3.eo                                             names_ej_state #> state.EJ.DISPARITY.cancer.eo                                         names_ej_state #> state.EJ.DISPARITY.resp.eo                                           names_ej_state #> state.EJ.DISPARITY.dpm.eo                                            names_ej_state #> state.EJ.DISPARITY.pctpre1960.eo                                     names_ej_state #> state.EJ.DISPARITY.traffic.score.eo                                  names_ej_state #> state.EJ.DISPARITY.proximity.npl.eo                                  names_ej_state #> state.EJ.DISPARITY.proximity.rmp.eo                                  names_ej_state #> state.EJ.DISPARITY.proximity.tsdf.eo                                 names_ej_state #> state.EJ.DISPARITY.proximity.npdes.eo                                names_ej_state #> state.EJ.DISPARITY.ust.eo                                            names_ej_state #> state.EJ.DISPARITY.rsei.eo                                           names_ej_state #> EJ.DISPARITY.pm.supp                                                  names_ej_supp #> EJ.DISPARITY.o3.supp                                                  names_ej_supp #> EJ.DISPARITY.cancer.supp                                              names_ej_supp #> EJ.DISPARITY.resp.supp                                                names_ej_supp #> EJ.DISPARITY.dpm.supp                                                 names_ej_supp #> EJ.DISPARITY.pctpre1960.supp                                          names_ej_supp #> EJ.DISPARITY.traffic.score.supp                                       names_ej_supp #> EJ.DISPARITY.proximity.npl.supp                                       names_ej_supp #> EJ.DISPARITY.proximity.rmp.supp                                       names_ej_supp #> EJ.DISPARITY.proximity.tsdf.supp                                      names_ej_supp #> EJ.DISPARITY.proximity.npdes.supp                                     names_ej_supp #> EJ.DISPARITY.ust.supp                                                 names_ej_supp #> EJ.DISPARITY.rsei.supp                                                names_ej_supp #> state.EJ.DISPARITY.pm.supp                                      names_ej_supp_state #> state.EJ.DISPARITY.o3.supp                                      names_ej_supp_state #> state.EJ.DISPARITY.cancer.supp                                  names_ej_supp_state #> state.EJ.DISPARITY.resp.supp                                    names_ej_supp_state #> state.EJ.DISPARITY.dpm.supp                                     names_ej_supp_state #> state.EJ.DISPARITY.pctpre1960.supp                              names_ej_supp_state #> state.EJ.DISPARITY.traffic.score.supp                           names_ej_supp_state #> state.EJ.DISPARITY.proximity.npl.supp                           names_ej_supp_state #> state.EJ.DISPARITY.proximity.rmp.supp                           names_ej_supp_state #> state.EJ.DISPARITY.proximity.tsdf.supp                          names_ej_supp_state #> state.EJ.DISPARITY.proximity.npdes.supp                         names_ej_supp_state #> state.EJ.DISPARITY.ust.supp                                     names_ej_supp_state #> state.EJ.DISPARITY.rsei.supp                                    names_ej_supp_state #> pctile.EJ.DISPARITY.pm.eo                                           names_ej_pctile #> pctile.EJ.DISPARITY.o3.eo                                           names_ej_pctile #> pctile.EJ.DISPARITY.cancer.eo                                       names_ej_pctile #> pctile.EJ.DISPARITY.resp.eo                                         names_ej_pctile #> pctile.EJ.DISPARITY.dpm.eo                                          names_ej_pctile #> pctile.EJ.DISPARITY.pctpre1960.eo                                   names_ej_pctile #> pctile.EJ.DISPARITY.traffic.score.eo                                names_ej_pctile #> pctile.EJ.DISPARITY.proximity.npl.eo                                names_ej_pctile #> pctile.EJ.DISPARITY.proximity.rmp.eo                                names_ej_pctile #> pctile.EJ.DISPARITY.proximity.tsdf.eo                               names_ej_pctile #> pctile.EJ.DISPARITY.proximity.npdes.eo                              names_ej_pctile #> pctile.EJ.DISPARITY.ust.eo                                          names_ej_pctile #> pctile.EJ.DISPARITY.rsei.eo                                         names_ej_pctile #> state.pctile.EJ.DISPARITY.pm.eo                               names_ej_state_pctile #> state.pctile.EJ.DISPARITY.o3.eo                               names_ej_state_pctile #> state.pctile.EJ.DISPARITY.cancer.eo                           names_ej_state_pctile #> state.pctile.EJ.DISPARITY.resp.eo                             names_ej_state_pctile #> state.pctile.EJ.DISPARITY.dpm.eo                              names_ej_state_pctile #> state.pctile.EJ.DISPARITY.pctpre1960.eo                       names_ej_state_pctile #> state.pctile.EJ.DISPARITY.traffic.score.eo                    names_ej_state_pctile #> state.pctile.EJ.DISPARITY.proximity.npl.eo                    names_ej_state_pctile #> state.pctile.EJ.DISPARITY.proximity.rmp.eo                    names_ej_state_pctile #> state.pctile.EJ.DISPARITY.proximity.tsdf.eo                   names_ej_state_pctile #> state.pctile.EJ.DISPARITY.proximity.npdes.eo                  names_ej_state_pctile #> state.pctile.EJ.DISPARITY.ust.eo                              names_ej_state_pctile #> state.pctile.EJ.DISPARITY.rsei.eo                             names_ej_state_pctile #> pctile.EJ.DISPARITY.pm.supp                                    names_ej_supp_pctile #> pctile.EJ.DISPARITY.o3.supp                                    names_ej_supp_pctile #> pctile.EJ.DISPARITY.cancer.supp                                names_ej_supp_pctile #> pctile.EJ.DISPARITY.resp.supp                                  names_ej_supp_pctile #> pctile.EJ.DISPARITY.dpm.supp                                   names_ej_supp_pctile #> pctile.EJ.DISPARITY.pctpre1960.supp                            names_ej_supp_pctile #> pctile.EJ.DISPARITY.traffic.score.supp                         names_ej_supp_pctile #> pctile.EJ.DISPARITY.proximity.npl.supp                         names_ej_supp_pctile #> pctile.EJ.DISPARITY.proximity.rmp.supp                         names_ej_supp_pctile #> pctile.EJ.DISPARITY.proximity.tsdf.supp                        names_ej_supp_pctile #> pctile.EJ.DISPARITY.proximity.npdes.supp                       names_ej_supp_pctile #> pctile.EJ.DISPARITY.ust.supp                                   names_ej_supp_pctile #> pctile.EJ.DISPARITY.rsei.supp                                  names_ej_supp_pctile #> state.pctile.EJ.DISPARITY.pm.supp                        names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.o3.supp                        names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.cancer.supp                    names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.resp.supp                      names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.dpm.supp                       names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.pctpre1960.supp                names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.traffic.score.supp             names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.proximity.npl.supp             names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.proximity.rmp.supp             names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.proximity.tsdf.supp            names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.proximity.npdes.supp           names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.ust.supp                       names_ej_supp_state_pctile #> state.pctile.EJ.DISPARITY.rsei.supp                      names_ej_supp_state_pctile #>                                                in_api in_bgcsv #> pop                                                 1        1 #> nonmins                                             0          #> povknownratio                                                1 #> age25up                                                      1 #> hhlds                                               1        1 #> unemployedbase                                               1 #> pre1960                                                      1 #> builtunits                                                   1 #> lowinc                                                       1 #> lingiso                                                      1 #> unemployed                                                   1 #> lths                                                         1 #> under5                                                       1 #> over64                                                       1 #> mins                                                         1 #> Demog.Index                                         1        1 #> Demog.Index.Supp                                    1        1 #> pctlowinc                                           1        1 #> pctlingiso                                          1        1 #> pctunemployed                                       1        1 #> pctlths                                             1        1 #> lowlifex                                            1        1 #> pctunder5                                           1        1 #> pctover64                                           1        1 #> pctmin                                              1        1 #> avg.Demog.Index                                     1          #> avg.Demog.Index.Supp                                1          #> avg.pctlowinc                                       1          #> avg.pctlingiso                                      1          #> avg.pctunemployed                                   1          #> avg.pctlths                                         1          #> avg.lowlifex                                        1          #> avg.pctunder5                                       1          #> avg.pctover64                                       1          #> avg.pctmin                                          1          #> state.avg.Demog.Index                               1          #> state.avg.Demog.Index.Supp                          1          #> state.avg.pctlowinc                                 1          #> state.avg.pctlingiso                                1          #> state.avg.pctunemployed                             1          #> state.avg.pctlths                                   1          #> state.avg.lowlifex                                  1          #> state.avg.pctunder5                                 1          #> state.avg.pctover64                                 1          #> state.avg.pctmin                                    1          #> pctile.Demog.Index                                  1        1 #> pctile.Demog.Index.Supp                             1        1 #> pctile.pctlowinc                                    1        1 #> pctile.pctlingiso                                   1        1 #> pctile.pctunemployed                                1        1 #> pctile.pctlths                                      1        1 #> pctile.lowlifex                                     1        1 #> pctile.pctunder5                                    1        1 #> pctile.pctover64                                    1        1 #> pctile.pctmin                                       1        1 #> state.pctile.Demog.Index                            1        1 #> state.pctile.Demog.Index.Supp                       1        1 #> state.pctile.pctlowinc                              1        1 #> state.pctile.pctlingiso                             1        1 #> state.pctile.pctunemployed                          1        1 #> state.pctile.pctlths                                1        1 #> state.pctile.lowlifex                               1        1 #> state.pctile.pctunder5                              1        1 #> state.pctile.pctover64                              1        1 #> state.pctile.pctmin                                 1        1 #> ratio.to.avg.Demog.Index                                       #> ratio.to.avg.Demog.Index.Supp                                  #> ratio.to.avg.pctlowinc                                         #> ratio.to.avg.pctlingiso                                        #> ratio.to.avg.pctunemployed                                     #> ratio.to.avg.pctlths                                           #> ratio.to.avg.lowlifex                                          #> ratio.to.avg.pctunder5                                         #> ratio.to.avg.pctover64                                         #> ratio.to.avg.pctmin                                            #> ratio.to.state.avg.Demog.Index                                 #> ratio.to.state.avg.Demog.Index.Supp                            #> ratio.to.state.avg.pctlowinc                                   #> ratio.to.state.avg.pctlingiso                                  #> ratio.to.state.avg.pctunemployed                               #> ratio.to.state.avg.pctlths                                     #> ratio.to.state.avg.lowlifex                                    #> ratio.to.state.avg.pctunder5                                   #> ratio.to.state.avg.pctover64                                   #> ratio.to.state.avg.pctmin                                      #> pcthisp                                             1          #> pctnhba                                             1          #> pctnhaa                                             1          #> pctnhaiana                                          1          #> pctnhnhpia                                          1          #> pctnhotheralone                                     1          #> pctnhmulti                                          1          #> pctnhwa                                             1          #> avg.pcthisp                                                    #> avg.pctnhba                                                    #> avg.pctnhaa                                                    #> avg.pctnhaiana                                                 #> avg.pctnhnhpia                                                 #> avg.pctnhotheralone                                            #> avg.pctnhmulti                                                 #> avg.pctnhwa                                                    #> state.avg.pcthisp                                              #> state.avg.pctnhba                                              #> state.avg.pctnhaa                                              #> state.avg.pctnhaiana                                           #> state.avg.pctnhnhpia                                           #> state.avg.pctnhotheralone                                      #> state.avg.pctnhmulti                                           #> state.avg.pctnhwa                                              #> pctile.pcthisp                                                 #> pctile.pctnhba                                                 #> pctile.pctnhaa                                                 #> pctile.pctnhaiana                                              #> pctile.pctnhnhpia                                              #> pctile.pctnhotheralone                                         #> pctile.pctnhmulti                                              #> pctile.pctnhwa                                                 #> state.pctile.pcthisp                                           #> state.pctile.pctnhba                                           #> state.pctile.pctnhaa                                           #> state.pctile.pctnhaiana                                        #> state.pctile.pctnhnhpia                                        #> state.pctile.pctnhotheralone                                   #> state.pctile.pctnhmulti                                        #> state.pctile.pctnhwa                                           #> ratio.to.avg.pcthisp                                           #> ratio.to.avg.pctnhba                                           #> ratio.to.avg.pctnhaa                                           #> ratio.to.avg.pctnhaiana                                        #> ratio.to.avg.pctnhnhpia                                        #> ratio.to.avg.pctnhotheralone                                   #> ratio.to.avg.pctnhmulti                                        #> ratio.to.avg.pctnhwa                                           #> ratio.to.state.avg.pcthisp                                     #> ratio.to.state.avg.pctnhba                                     #> ratio.to.state.avg.pctnhaa                                     #> ratio.to.state.avg.pctnhaiana                                  #> ratio.to.state.avg.pctnhnhpia                                  #> ratio.to.state.avg.pctnhotheralone                             #> ratio.to.state.avg.pctnhmulti                                  #> ratio.to.state.avg.pctnhwa                                     #> hisp                                                0          #> nhba                                                0          #> nhaa                                                0          #> nhaiana                                             0          #> nhnhpia                                             0          #> nhotheralone                                        0          #> nhmulti                                             0          #> nhwa                                                0          #> pm                                                  1        1 #> o3                                                  1        1 #> cancer                                              1        1 #> resp                                                1        1 #> dpm                                                 1        1 #> pctpre1960                                          1        1 #> traffic.score                                       1        1 #> proximity.npl                                       1        1 #> proximity.rmp                                       1        1 #> proximity.tsdf                                      1        1 #> proximity.npdes                                     1        1 #> ust                                                 1        1 #> rsei                                                1        1 #> avg.pm                                              1          #> avg.o3                                              1          #> avg.cancer                                          1          #> avg.resp                                            1          #> avg.dpm                                             1          #> avg.pctpre1960                                      1          #> avg.traffic.score                                   1          #> avg.proximity.npl                                   1          #> avg.proximity.rmp                                   1          #> avg.proximity.tsdf                                  1          #> avg.proximity.npdes                                 1          #> avg.ust                                             1          #> avg.rsei                                            1          #> state.avg.pm                                        1          #> state.avg.o3                                        1          #> state.avg.cancer                                    1          #> state.avg.resp                                      1          #> state.avg.dpm                                       1          #> state.avg.pctpre1960                                1          #> state.avg.traffic.score                             1          #> state.avg.proximity.npl                             1          #> state.avg.proximity.rmp                             1          #> state.avg.proximity.tsdf                            1          #> state.avg.proximity.npdes                           1          #> state.avg.ust                                       1          #> state.avg.rsei                                      1          #> pctile.pm                                           1        1 #> pctile.o3                                           1        1 #> pctile.cancer                                       1        1 #> pctile.resp                                         1        1 #> pctile.dpm                                          1        1 #> pctile.pctpre1960                                   1        1 #> pctile.traffic.score                                1        1 #> pctile.proximity.npl                                1        1 #> pctile.proximity.rmp                                1        1 #> pctile.proximity.tsdf                               1        1 #> pctile.proximity.npdes                              1        1 #> pctile.ust                                          1        1 #> pctile.rsei                                         1        1 #> state.pctile.pm                                     1        1 #> state.pctile.o3                                     1        1 #> state.pctile.cancer                                 1        1 #> state.pctile.resp                                   1        1 #> state.pctile.dpm                                    1        1 #> state.pctile.pctpre1960                             1        1 #> state.pctile.traffic.score                          1        1 #> state.pctile.proximity.npl                          1        1 #> state.pctile.proximity.rmp                          1        1 #> state.pctile.proximity.tsdf                         1        1 #> state.pctile.proximity.npdes                        1        1 #> state.pctile.ust                                    1        1 #> state.pctile.rsei                                   1        1 #> ratio.to.avg.pm                                                #> ratio.to.avg.o3                                                #> ratio.to.avg.cancer                                            #> ratio.to.avg.resp                                              #> ratio.to.avg.dpm                                               #> ratio.to.avg.pctpre1960                                        #> ratio.to.avg.traffic.score                                     #> ratio.to.avg.proximity.npl                                     #> ratio.to.avg.proximity.rmp                                     #> ratio.to.avg.proximity.tsdf                                    #> ratio.to.avg.proximity.npdes                                   #> ratio.to.avg.ust                                               #> ratio.to.avg.rsei                                              #> ratio.to.state.avg.pm                                          #> ratio.to.state.avg.o3                                          #> ratio.to.state.avg.cancer                                      #> ratio.to.state.avg.resp                                        #> ratio.to.state.avg.dpm                                         #> ratio.to.state.avg.pctpre1960                                  #> ratio.to.state.avg.traffic.score                               #> ratio.to.state.avg.proximity.npl                               #> ratio.to.state.avg.proximity.rmp                               #> ratio.to.state.avg.proximity.tsdf                              #> ratio.to.state.avg.proximity.npdes                             #> ratio.to.state.avg.ust                                         #> ratio.to.state.avg.rsei                                        #> EJ.DISPARITY.pm.eo                                           1 #> EJ.DISPARITY.o3.eo                                           1 #> EJ.DISPARITY.cancer.eo                                       1 #> EJ.DISPARITY.resp.eo                                         1 #> EJ.DISPARITY.dpm.eo                                          1 #> EJ.DISPARITY.pctpre1960.eo                                   1 #> EJ.DISPARITY.traffic.score.eo                                1 #> EJ.DISPARITY.proximity.npl.eo                                1 #> EJ.DISPARITY.proximity.rmp.eo                                1 #> EJ.DISPARITY.proximity.tsdf.eo                               1 #> EJ.DISPARITY.proximity.npdes.eo                              1 #> EJ.DISPARITY.ust.eo                                          1 #> EJ.DISPARITY.rsei.eo                                         1 #> state.EJ.DISPARITY.pm.eo                                     1 #> state.EJ.DISPARITY.o3.eo                                     1 #> state.EJ.DISPARITY.cancer.eo                                 1 #> state.EJ.DISPARITY.resp.eo                                   1 #> state.EJ.DISPARITY.dpm.eo                                    1 #> state.EJ.DISPARITY.pctpre1960.eo                             1 #> state.EJ.DISPARITY.traffic.score.eo                          1 #> state.EJ.DISPARITY.proximity.npl.eo                          1 #> state.EJ.DISPARITY.proximity.rmp.eo                          1 #> state.EJ.DISPARITY.proximity.tsdf.eo                         1 #> state.EJ.DISPARITY.proximity.npdes.eo                        1 #> state.EJ.DISPARITY.ust.eo                                    1 #> state.EJ.DISPARITY.rsei.eo                                   1 #> EJ.DISPARITY.pm.supp                                         1 #> EJ.DISPARITY.o3.supp                                         1 #> EJ.DISPARITY.cancer.supp                                     1 #> EJ.DISPARITY.resp.supp                                       1 #> EJ.DISPARITY.dpm.supp                                        1 #> EJ.DISPARITY.pctpre1960.supp                                 1 #> EJ.DISPARITY.traffic.score.supp                              1 #> EJ.DISPARITY.proximity.npl.supp                              1 #> EJ.DISPARITY.proximity.rmp.supp                              1 #> EJ.DISPARITY.proximity.tsdf.supp                             1 #> EJ.DISPARITY.proximity.npdes.supp                            1 #> EJ.DISPARITY.ust.supp                                        1 #> EJ.DISPARITY.rsei.supp                                       1 #> state.EJ.DISPARITY.pm.supp                                   1 #> state.EJ.DISPARITY.o3.supp                                   1 #> state.EJ.DISPARITY.cancer.supp                               1 #> state.EJ.DISPARITY.resp.supp                                 1 #> state.EJ.DISPARITY.dpm.supp                                  1 #> state.EJ.DISPARITY.pctpre1960.supp                           1 #> state.EJ.DISPARITY.traffic.score.supp                        1 #> state.EJ.DISPARITY.proximity.npl.supp                        1 #> state.EJ.DISPARITY.proximity.rmp.supp                        1 #> state.EJ.DISPARITY.proximity.tsdf.supp                       1 #> state.EJ.DISPARITY.proximity.npdes.supp                      1 #> state.EJ.DISPARITY.ust.supp                                  1 #> state.EJ.DISPARITY.rsei.supp                                 1 #> pctile.EJ.DISPARITY.pm.eo                           1        1 #> pctile.EJ.DISPARITY.o3.eo                           1        1 #> pctile.EJ.DISPARITY.cancer.eo                       1        1 #> pctile.EJ.DISPARITY.resp.eo                         1        1 #> pctile.EJ.DISPARITY.dpm.eo                          1        1 #> pctile.EJ.DISPARITY.pctpre1960.eo                   1        1 #> pctile.EJ.DISPARITY.traffic.score.eo                1        1 #> pctile.EJ.DISPARITY.proximity.npl.eo                1        1 #> pctile.EJ.DISPARITY.proximity.rmp.eo                1        1 #> pctile.EJ.DISPARITY.proximity.tsdf.eo               1        1 #> pctile.EJ.DISPARITY.proximity.npdes.eo              1        1 #> pctile.EJ.DISPARITY.ust.eo                          1        1 #> pctile.EJ.DISPARITY.rsei.eo                         1        1 #> state.pctile.EJ.DISPARITY.pm.eo                     1        1 #> state.pctile.EJ.DISPARITY.o3.eo                     1        1 #> state.pctile.EJ.DISPARITY.cancer.eo                 1        1 #> state.pctile.EJ.DISPARITY.resp.eo                   1        1 #> state.pctile.EJ.DISPARITY.dpm.eo                    1        1 #> state.pctile.EJ.DISPARITY.pctpre1960.eo             1        1 #> state.pctile.EJ.DISPARITY.traffic.score.eo          1        1 #> state.pctile.EJ.DISPARITY.proximity.npl.eo          1        1 #> state.pctile.EJ.DISPARITY.proximity.rmp.eo          1        1 #> state.pctile.EJ.DISPARITY.proximity.tsdf.eo         1        1 #> state.pctile.EJ.DISPARITY.proximity.npdes.eo        1        1 #> state.pctile.EJ.DISPARITY.ust.eo                    1        1 #> state.pctile.EJ.DISPARITY.rsei.eo                   1        1 #> pctile.EJ.DISPARITY.pm.supp                         1        1 #> pctile.EJ.DISPARITY.o3.supp                         1        1 #> pctile.EJ.DISPARITY.cancer.supp                     1        1 #> pctile.EJ.DISPARITY.resp.supp                       1        1 #> pctile.EJ.DISPARITY.dpm.supp                        1        1 #> pctile.EJ.DISPARITY.pctpre1960.supp                 1        1 #> pctile.EJ.DISPARITY.traffic.score.supp              1        1 #> pctile.EJ.DISPARITY.proximity.npl.supp              1        1 #> pctile.EJ.DISPARITY.proximity.rmp.supp              1        1 #> pctile.EJ.DISPARITY.proximity.tsdf.supp             1        1 #> pctile.EJ.DISPARITY.proximity.npdes.supp            1        1 #> pctile.EJ.DISPARITY.ust.supp                        1        1 #> pctile.EJ.DISPARITY.rsei.supp                       1        1 #> state.pctile.EJ.DISPARITY.pm.supp                   1        1 #> state.pctile.EJ.DISPARITY.o3.supp                   1        1 #> state.pctile.EJ.DISPARITY.cancer.supp               1        1 #> state.pctile.EJ.DISPARITY.resp.supp                 1        1 #> state.pctile.EJ.DISPARITY.dpm.supp                  1        1 #> state.pctile.EJ.DISPARITY.pctpre1960.supp           1        1 #> state.pctile.EJ.DISPARITY.traffic.score.supp        1        1 #> state.pctile.EJ.DISPARITY.proximity.npl.supp        1        1 #> state.pctile.EJ.DISPARITY.proximity.rmp.supp        1        1 #> state.pctile.EJ.DISPARITY.proximity.tsdf.supp       1        1 #> state.pctile.EJ.DISPARITY.proximity.npdes.supp      1        1 #> state.pctile.EJ.DISPARITY.ust.supp                  1        1 #> state.pctile.EJ.DISPARITY.rsei.supp                 1        1"},{"path":"https://usepa.github.io/EJAM/reference/varname2color_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function - for color coding excel sheet columns — varname2color_ejam","title":"helper function - for color coding excel sheet columns — varname2color_ejam","text":"Convert R variable name indicator appropriate color header row Excel","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2color_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function - for color coding excel sheet columns — varname2color_ejam","text":"","code":"varname2color_ejam(varname, varnameinfo)"},{"path":"https://usepa.github.io/EJAM/reference/varname2color_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function - for color coding excel sheet columns — varname2color_ejam","text":"varname things like us.avg.pctlowinc","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2color_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function - for color coding excel sheet columns — varname2color_ejam","text":"vector colors","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/varname2varcategory_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","title":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","text":"helper function - given indicator names, look category ","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2varcategory_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","text":"","code":"varname2varcategory_ejam(varname, varnameinfo)"},{"path":"https://usepa.github.io/EJAM/reference/varname2varcategory_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","text":"varname vector 1 names like \"pctlowinc\" unique(map_headernames$rname) varnameinfo data.frame info type variable","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2varcategory_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","text":"vector size varname","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2varcategory_ejam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"helper function - given indicator names, look up what category each is — varname2varcategory_ejam","text":"tells variable \"Demographic\" \"Environmental\" \"EJ Index\" \"\" dput(unique(map_headernames$varcategory))","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/varname2vartype_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","title":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","text":"helper function - given indicator names, look type ","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2vartype_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","text":"","code":"varname2vartype_ejam(varname, varnameinfo)"},{"path":"https://usepa.github.io/EJAM/reference/varname2vartype_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","text":"varname vector 1 names varnameinfo data.frame info type variable","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2vartype_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","text":"vector size varname","code":""},{"path":"https://usepa.github.io/EJAM/reference/varname2vartype_ejam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"helper function - given indicator names, look up what type each is — varname2vartype_ejam","text":"types things like raw data count indicator, average, percentile, etc.","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/vartype_cat2color_ejam.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function - assign fill color to shade excel cells by indicator type and category — vartype_cat2color_ejam","title":"helper function - assign fill color to shade excel cells by indicator type and category — vartype_cat2color_ejam","text":"Use color shading make spreadsheet easier use, grouping indicators","code":""},{"path":"https://usepa.github.io/EJAM/reference/vartype_cat2color_ejam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function - assign fill color to shade excel cells by indicator type and category — vartype_cat2color_ejam","text":"","code":"vartype_cat2color_ejam(vartype = raw, varcategory = \"other\")"},{"path":"https://usepa.github.io/EJAM/reference/vartype_cat2color_ejam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function - assign fill color to shade excel cells by indicator type and category — vartype_cat2color_ejam","text":"vartype must one found dput(unique(map_headernames$vartype)) like \"usratio\", \"stateratio\", \"usraw\", \"stateraw\", \"uspctile\", \"statepctile\", \"usavg\", \"stateavg\", etc. NA found. varcategory must one \"Demographic\"   \"Environmental\" \"EJ Index\" \"\" dput(unique(map_headernames$varcategory))","code":""},{"path":"https://usepa.github.io/EJAM/reference/vartype_cat2color_ejam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function - assign fill color to shade excel cells by indicator type and category — vartype_cat2color_ejam","text":"vector colors like c('lightblue', 'gray') matching length vartype","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/reference/var_is_numeric_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"see which columns seem numeric and could be rounded, e.g. - DRAFT NOT FULLY TESTED — var_is_numeric_ish","title":"see which columns seem numeric and could be rounded, e.g. - DRAFT NOT FULLY TESTED — var_is_numeric_ish","text":"see columns seem numeric rounded, e.g. - DRAFT FULLY TESTED","code":""},{"path":"https://usepa.github.io/EJAM/reference/var_is_numeric_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"see which columns seem numeric and could be rounded, e.g. - DRAFT NOT FULLY TESTED — var_is_numeric_ish","text":"","code":"var_is_numeric_ish(   x,   only.if.already.numeric = FALSE,   strip.characters.before.coerce = FALSE )"},{"path":"https://usepa.github.io/EJAM/reference/var_is_numeric_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"see which columns seem numeric and could be rounded, e.g. - DRAFT NOT FULLY TESTED — var_is_numeric_ish","text":"x data.table, data.frame, vector ..already.numeric logical, TRUE, reports TRUE column (element)  .numeric() TRUE one strip.characters..coerce logical, TRUE, tries remove spaces percentage signs trying coerce numeric","code":""},{"path":"https://usepa.github.io/EJAM/reference/var_is_numeric_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"see which columns seem numeric and could be rounded, e.g. - DRAFT NOT FULLY TESTED — var_is_numeric_ish","text":"logical vector long NCOL(x) .e., length(x), x table, length(x) vector","code":""},{"path":[]},{"path":"https://usepa.github.io/EJAM/news/index.html","id":"ejam-222-3122024","dir":"Changelog","previous_headings":"","what":"EJAM 2.2.2 (3/12/2024)","title":"EJAM 2.2.2 (3/12/2024)","text":"Documentation updates pkgdown articles/ vignettes test data / examples added Shapefile handling improved Bug fixes updates/changes","code":""},{"path":"https://usepa.github.io/EJAM/news/index.html","id":"ejam-221-1312024","dir":"Changelog","previous_headings":"","what":"EJAM 2.2.1 (1/31/2024)","title":"EJAM 2.2.1 (1/31/2024)","text":"Major changes Deployed Posit Connect staging server web app","code":""},{"path":"https://usepa.github.io/EJAM/news/index.html","id":"ejam-221-10182023","dir":"Changelog","previous_headings":"","what":"EJAM 2.2.1 (10/18/2023)","title":"EJAM 2.2.1 (10/18/2023)","text":"Major changes","code":""},{"path":"https://usepa.github.io/EJAM/news/index.html","id":"ejam-220-8032023","dir":"Changelog","previous_headings":"","what":"EJAM 2.2.0 (8/03/2023)","title":"EJAM 2.2.0 (8/03/2023)","text":"Updated match EJScreen version 2.2","code":""},{"path":"https://usepa.github.io/EJAM/news/index.html","id":"ejam-211-9192022","dir":"Changelog","previous_headings":"","what":"EJAM 2.1.1 (9/19/2022)","title":"EJAM 2.1.1 (9/19/2022)","text":"First version USEPA github","code":""}]
